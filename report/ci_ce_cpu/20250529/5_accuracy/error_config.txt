paddle.Tensor.__mul__(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 1, 128],"bfloat16"), )
paddle.Tensor.__mul__(Tensor([8, 8],"float16"), 1000000.0, )
paddle.Tensor.argsort(Tensor([2097152],"float32"), )
paddle.Tensor.argsort(Tensor([4, 22400],"float32"), axis=1, descending=True, )
paddle.Tensor.argsort(Tensor([4, 22400],"int64"), axis=1, )
paddle.Tensor.argsort(Tensor([4194304],"float32"), )
paddle.Tensor.astype(Tensor([32, 128],"int64"), Dtype(float16), )
paddle.Tensor.astype(Tensor([32, 16, 1024],"int64"), Dtype(float16), )
paddle.Tensor.astype(Tensor([32, 3, 1024],"int64"), Dtype(float16), )
paddle.Tensor.astype(Tensor([8, 16, 32],"int64"), "float16", )
paddle.Tensor.cast(Tensor([2, 3, 32, 128],"int32"), Dtype(float16), )
paddle.Tensor.expand(Tensor([1, 1, 1, 4096],"float16"), list[2,1,4096,4096,], )
paddle.Tensor.expand(Tensor([1, 1, 192],"float16"), tuple(128,-1,-1,), )
paddle.Tensor.expand(Tensor([1, 1, 384],"float16"), tuple(64,-1,-1,), )
paddle.Tensor.expand(Tensor([1, 1, 768],"float16"), tuple(112,-1,-1,), )
paddle.Tensor.expand(Tensor([1, 1, 768],"float16"), tuple(128,-1,-1,), )
paddle.Tensor.expand(Tensor([1, 1, 768],"float16"), tuple(64,-1,-1,), )
paddle.Tensor.expand(Tensor([1, 2048, 1, 1],"float16"), list[1,2048,1,64,], )
paddle.Tensor.expand(Tensor([1, 35, 1, 1],"float16"), list[2,35,1,64,], )
paddle.Tensor.expand(Tensor([1, 37, 1, 1],"float16"), list[2,37,1,64,], )
paddle.Tensor.expand(Tensor([1, 38, 1, 1],"float16"), list[2,38,1,64,], )
paddle.Tensor.expand(Tensor([1, 39, 1, 1],"float16"), list[2,39,1,64,], )
paddle.Tensor.expand(Tensor([1, 45, 1, 1],"float16"), list[2,45,1,64,], )
paddle.Tensor.expand(Tensor([1, 50, 1, 1],"float16"), list[2,50,1,64,], )
paddle.Tensor.expand(Tensor([1, 51, 1, 1],"float16"), list[2,51,1,64,], )
paddle.Tensor.expand(Tensor([1, 52, 1, 1],"float16"), list[2,52,1,64,], )
paddle.Tensor.expand(Tensor([1, 57, 1, 1],"float16"), list[2,57,1,64,], )
paddle.Tensor.put_along_axis(Tensor([10, 60],"float32"), Tensor([10, 4],"int64"), Tensor([10, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([20, 60],"float32"), Tensor([20, 4],"int64"), Tensor([20, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([4, 60],"float32"), Tensor([4, 4],"int64"), Tensor([4, 4],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([100, 1],"float16"), )
paddle.Tensor.sum(Tensor([101, 1],"float16"), )
paddle.Tensor.sum(Tensor([104, 1],"float16"), )
paddle.Tensor.sum(Tensor([106, 1],"float16"), )
paddle.Tensor.sum(Tensor([107, 1],"float16"), )
paddle.Tensor.sum(Tensor([109, 1],"float16"), )
paddle.Tensor.sum(Tensor([110, 1],"float16"), )
paddle.Tensor.sum(Tensor([112, 1],"float16"), )
paddle.Tensor.sum(Tensor([113, 1],"float16"), )
paddle.Tensor.sum(Tensor([114, 1],"float16"), )
paddle.Tensor.sum(Tensor([115, 1],"float16"), )
paddle.Tensor.sum(Tensor([117, 1],"float16"), )
paddle.Tensor.sum(Tensor([118, 1],"float16"), )
paddle.Tensor.sum(Tensor([119, 1],"float16"), )
paddle.Tensor.sum(Tensor([121, 1],"float16"), )
paddle.Tensor.sum(Tensor([122, 1],"float16"), )
paddle.Tensor.sum(Tensor([123, 1],"float16"), )
paddle.Tensor.sum(Tensor([124, 1],"float16"), )
paddle.Tensor.sum(Tensor([126, 1],"float16"), )
paddle.Tensor.sum(Tensor([127, 1],"float16"), )
paddle.Tensor.sum(Tensor([128, 1],"float16"), )
paddle.Tensor.sum(Tensor([129, 1],"float16"), )
paddle.Tensor.sum(Tensor([131, 1],"float16"), )
paddle.Tensor.sum(Tensor([133, 1],"float16"), )
paddle.Tensor.sum(Tensor([135, 1],"float16"), )
paddle.Tensor.sum(Tensor([136, 1],"float16"), )
paddle.Tensor.sum(Tensor([137, 1],"float16"), )
paddle.Tensor.sum(Tensor([138, 1],"float16"), )
paddle.Tensor.sum(Tensor([139, 1],"float16"), )
paddle.Tensor.sum(Tensor([140, 1],"float16"), )
paddle.Tensor.sum(Tensor([141, 1],"float16"), )
paddle.Tensor.sum(Tensor([142, 1],"float16"), )
paddle.Tensor.sum(Tensor([143, 1],"float16"), )
paddle.Tensor.sum(Tensor([144, 1],"float16"), )
paddle.Tensor.sum(Tensor([145, 1],"float16"), )
paddle.Tensor.sum(Tensor([146, 1],"float16"), )
paddle.Tensor.sum(Tensor([147, 1],"float16"), )
paddle.Tensor.sum(Tensor([148, 1],"float16"), )
paddle.Tensor.sum(Tensor([149, 1],"float16"), )
paddle.Tensor.sum(Tensor([150, 1],"float16"), )
paddle.Tensor.sum(Tensor([151, 1],"float16"), )
paddle.Tensor.sum(Tensor([152, 1],"float16"), )
paddle.Tensor.sum(Tensor([153, 1],"float16"), )
paddle.Tensor.sum(Tensor([154, 1],"float16"), )
paddle.Tensor.sum(Tensor([155, 1],"float16"), )
paddle.Tensor.sum(Tensor([156, 1],"float16"), )
paddle.Tensor.sum(Tensor([157, 1],"float16"), )
paddle.Tensor.sum(Tensor([158, 1],"float16"), )
paddle.Tensor.sum(Tensor([159, 1],"float16"), )
paddle.Tensor.sum(Tensor([160, 1],"float16"), )
paddle.Tensor.sum(Tensor([161, 1],"float16"), )
paddle.Tensor.sum(Tensor([162, 1],"float16"), )
paddle.Tensor.sum(Tensor([163, 1],"float16"), )
paddle.Tensor.sum(Tensor([166, 1],"float16"), )
paddle.Tensor.sum(Tensor([167, 1],"float16"), )
paddle.Tensor.sum(Tensor([168, 1],"float16"), )
paddle.Tensor.sum(Tensor([169, 1],"float16"), )
paddle.Tensor.sum(Tensor([171, 1],"float16"), )
paddle.Tensor.sum(Tensor([173, 1],"float16"), )
paddle.Tensor.sum(Tensor([174, 1],"float16"), )
paddle.Tensor.sum(Tensor([175, 1],"float16"), )
paddle.Tensor.sum(Tensor([176, 1],"float16"), )
paddle.Tensor.sum(Tensor([177, 1],"float16"), )
paddle.Tensor.sum(Tensor([178, 1],"float16"), )
paddle.Tensor.sum(Tensor([179, 1],"float16"), )
paddle.Tensor.sum(Tensor([180, 1],"float16"), )
paddle.Tensor.sum(Tensor([181, 1],"float16"), )
paddle.Tensor.sum(Tensor([182, 1],"float16"), )
paddle.Tensor.sum(Tensor([183, 1],"float16"), )
paddle.Tensor.sum(Tensor([184832, 68],"float16"), )
paddle.Tensor.sum(Tensor([185, 1],"float16"), )
paddle.Tensor.sum(Tensor([186, 1],"float16"), )
paddle.Tensor.sum(Tensor([187, 1],"float16"), )
paddle.Tensor.sum(Tensor([189, 1],"float16"), )
paddle.Tensor.sum(Tensor([190, 1],"float16"), )
paddle.Tensor.sum(Tensor([191, 1],"float16"), )
paddle.Tensor.sum(Tensor([192, 1],"float16"), )
paddle.Tensor.sum(Tensor([193, 1],"float16"), )
paddle.Tensor.sum(Tensor([194, 1],"float16"), )
paddle.Tensor.sum(Tensor([195, 1],"float16"), )
paddle.Tensor.sum(Tensor([196, 1],"float16"), )
paddle.Tensor.sum(Tensor([197, 1],"float16"), )
paddle.Tensor.sum(Tensor([199, 1],"float16"), )
paddle.Tensor.sum(Tensor([2, 64, 768],"float16"), )
paddle.Tensor.sum(Tensor([20, 500, 2],"float16"), )
paddle.Tensor.sum(Tensor([20, 500, 4],"float16"), )
paddle.Tensor.sum(Tensor([200, 1],"float16"), )
paddle.Tensor.sum(Tensor([201, 1],"float16"), )
paddle.Tensor.sum(Tensor([202, 1],"float16"), )
paddle.Tensor.sum(Tensor([203, 1],"float16"), )
paddle.Tensor.sum(Tensor([204, 1],"float16"), )
paddle.Tensor.sum(Tensor([205, 1],"float16"), )
paddle.Tensor.sum(Tensor([206, 1],"float16"), )
paddle.Tensor.sum(Tensor([207, 1],"float16"), )
paddle.Tensor.sum(Tensor([208, 1],"float16"), )
paddle.Tensor.sum(Tensor([209, 1],"float16"), )
paddle.Tensor.sum(Tensor([210, 1],"float16"), )
paddle.Tensor.sum(Tensor([211, 1],"float16"), )
paddle.Tensor.sum(Tensor([212, 1],"float16"), )
paddle.Tensor.sum(Tensor([213, 1],"float16"), )
paddle.Tensor.sum(Tensor([214, 1],"float16"), )
paddle.Tensor.sum(Tensor([215, 1],"float16"), )
paddle.Tensor.sum(Tensor([216, 1],"float16"), )
paddle.Tensor.sum(Tensor([217, 1],"float16"), )
paddle.Tensor.sum(Tensor([218, 1],"float16"), )
paddle.Tensor.sum(Tensor([219, 1],"float16"), )
paddle.Tensor.sum(Tensor([220, 1],"float16"), )
paddle.Tensor.sum(Tensor([221, 1],"float16"), )
paddle.Tensor.sum(Tensor([222, 1],"float16"), )
paddle.Tensor.sum(Tensor([223, 1],"float16"), )
paddle.Tensor.sum(Tensor([224, 1],"float16"), )
paddle.Tensor.sum(Tensor([225, 1],"float16"), )
paddle.Tensor.sum(Tensor([227, 1],"float16"), )
paddle.Tensor.sum(Tensor([228, 1],"float16"), )
paddle.Tensor.sum(Tensor([229, 1],"float16"), )
paddle.Tensor.sum(Tensor([230, 1],"float16"), )
paddle.Tensor.sum(Tensor([231, 1],"float16"), )
paddle.Tensor.sum(Tensor([232, 1],"float16"), )
paddle.Tensor.sum(Tensor([233, 1],"float16"), )
paddle.Tensor.sum(Tensor([234, 1],"float16"), )
paddle.Tensor.sum(Tensor([235, 1],"float16"), )
paddle.Tensor.sum(Tensor([236, 1],"float16"), )
paddle.Tensor.sum(Tensor([237, 1],"float16"), )
paddle.Tensor.sum(Tensor([238, 1],"float16"), )
paddle.Tensor.sum(Tensor([239, 1],"float16"), )
paddle.Tensor.sum(Tensor([240, 1],"float16"), )
paddle.Tensor.sum(Tensor([241, 1],"float16"), )
paddle.Tensor.sum(Tensor([242, 1],"float16"), )
paddle.Tensor.sum(Tensor([243, 1],"float16"), )
paddle.Tensor.sum(Tensor([244, 1],"float16"), )
paddle.Tensor.sum(Tensor([245, 1],"float16"), )
paddle.Tensor.sum(Tensor([246, 1],"float16"), )
paddle.Tensor.sum(Tensor([248, 1],"float16"), )
paddle.Tensor.sum(Tensor([249, 1],"float16"), )
paddle.Tensor.sum(Tensor([251, 1],"float16"), )
paddle.Tensor.sum(Tensor([252, 1],"float16"), )
paddle.Tensor.sum(Tensor([253, 1],"float16"), )
paddle.Tensor.sum(Tensor([254, 1],"float16"), )
paddle.Tensor.sum(Tensor([255, 1],"float16"), )
paddle.Tensor.sum(Tensor([256, 1],"float16"), )
paddle.Tensor.sum(Tensor([257, 1],"float16"), )
paddle.Tensor.sum(Tensor([258, 1],"float16"), )
paddle.Tensor.sum(Tensor([259, 1],"float16"), )
paddle.Tensor.sum(Tensor([264, 1],"float16"), )
paddle.Tensor.sum(Tensor([265, 1],"float16"), )
paddle.Tensor.sum(Tensor([266, 1],"float16"), )
paddle.Tensor.sum(Tensor([268, 1],"float16"), )
paddle.Tensor.sum(Tensor([270, 1],"float16"), )
paddle.Tensor.sum(Tensor([271, 1],"float16"), )
paddle.Tensor.sum(Tensor([272, 1],"float16"), )
paddle.Tensor.sum(Tensor([274, 1],"float16"), )
paddle.Tensor.sum(Tensor([275, 1],"float16"), )
paddle.Tensor.sum(Tensor([276, 1],"float16"), )
paddle.Tensor.sum(Tensor([277, 1],"float16"), )
paddle.Tensor.sum(Tensor([279, 1],"float16"), )
paddle.Tensor.sum(Tensor([280, 1],"float16"), )
paddle.Tensor.sum(Tensor([282, 1],"float16"), )
paddle.Tensor.sum(Tensor([283, 1],"float16"), )
paddle.Tensor.sum(Tensor([284, 1],"float16"), )
paddle.Tensor.sum(Tensor([285, 1],"float16"), )
paddle.Tensor.sum(Tensor([286, 1],"float16"), )
paddle.Tensor.sum(Tensor([287, 1],"float16"), )
paddle.Tensor.sum(Tensor([288, 1],"float16"), )
paddle.Tensor.sum(Tensor([289, 1],"float16"), )
paddle.Tensor.sum(Tensor([290, 1],"float16"), )
paddle.Tensor.sum(Tensor([293, 1],"float16"), )
paddle.Tensor.sum(Tensor([294, 1],"float16"), )
paddle.Tensor.sum(Tensor([297, 1],"float16"), )
paddle.Tensor.sum(Tensor([299, 1],"float16"), )
paddle.Tensor.sum(Tensor([300, 1],"float16"), )
paddle.Tensor.sum(Tensor([301, 1],"float16"), )
paddle.Tensor.sum(Tensor([302, 1],"float16"), )
paddle.Tensor.sum(Tensor([304, 1],"float16"), )
paddle.Tensor.sum(Tensor([305, 1],"float16"), )
paddle.Tensor.sum(Tensor([306, 1],"float16"), )
paddle.Tensor.sum(Tensor([307, 1],"float16"), )
paddle.Tensor.sum(Tensor([309, 1],"float16"), )
paddle.Tensor.sum(Tensor([310, 1],"float16"), )
paddle.Tensor.sum(Tensor([313, 1],"float16"), )
paddle.Tensor.sum(Tensor([314, 1],"float16"), )
paddle.Tensor.sum(Tensor([315, 1],"float16"), )
paddle.Tensor.sum(Tensor([316, 1],"float16"), )
paddle.Tensor.sum(Tensor([317, 1],"float16"), )
paddle.Tensor.sum(Tensor([323, 1],"float16"), )
paddle.Tensor.sum(Tensor([324, 1],"float16"), )
paddle.Tensor.sum(Tensor([325, 1],"float16"), )
paddle.Tensor.sum(Tensor([326, 1],"float16"), )
paddle.Tensor.sum(Tensor([328, 1],"float16"), )
paddle.Tensor.sum(Tensor([332, 1],"float16"), )
paddle.Tensor.sum(Tensor([333, 1],"float16"), )
paddle.Tensor.sum(Tensor([337, 1],"float16"), )
paddle.Tensor.sum(Tensor([339, 1],"float16"), )
paddle.Tensor.sum(Tensor([342, 1],"float16"), )
paddle.Tensor.sum(Tensor([343, 1],"float16"), )
paddle.Tensor.sum(Tensor([344, 1],"float16"), )
paddle.Tensor.sum(Tensor([345, 1],"float16"), )
paddle.Tensor.sum(Tensor([346, 1],"float16"), )
paddle.Tensor.sum(Tensor([347, 1],"float16"), )
paddle.Tensor.sum(Tensor([351, 1],"float16"), )
paddle.Tensor.sum(Tensor([355, 1],"float16"), )
paddle.Tensor.sum(Tensor([357, 1],"float16"), )
paddle.Tensor.sum(Tensor([359, 1],"float16"), )
paddle.Tensor.sum(Tensor([362, 1],"float16"), )
paddle.Tensor.sum(Tensor([363, 1],"float16"), )
paddle.Tensor.sum(Tensor([365, 1],"float16"), )
paddle.Tensor.sum(Tensor([368, 1],"float16"), )
paddle.Tensor.sum(Tensor([369, 1],"float16"), )
paddle.Tensor.sum(Tensor([371, 1],"float16"), )
paddle.Tensor.sum(Tensor([372, 1],"float16"), )
paddle.Tensor.sum(Tensor([378, 1],"float16"), )
paddle.Tensor.sum(Tensor([379, 1],"float16"), )
paddle.Tensor.sum(Tensor([382, 1],"float16"), )
paddle.Tensor.sum(Tensor([384, 1],"float16"), )
paddle.Tensor.sum(Tensor([387, 1],"float16"), )
paddle.Tensor.sum(Tensor([391, 1],"float16"), )
paddle.Tensor.sum(Tensor([392, 1],"float16"), )
paddle.Tensor.sum(Tensor([393, 1],"float16"), )
paddle.Tensor.sum(Tensor([394, 1],"float16"), )
paddle.Tensor.sum(Tensor([395, 1],"float16"), )
paddle.Tensor.sum(Tensor([399, 1],"float16"), )
paddle.Tensor.sum(Tensor([404, 1],"float16"), )
paddle.Tensor.sum(Tensor([405, 1],"float16"), )
paddle.Tensor.sum(Tensor([408, 1],"float16"), )
paddle.Tensor.sum(Tensor([425, 1],"float16"), )
paddle.Tensor.sum(Tensor([426, 1],"float16"), )
paddle.Tensor.sum(Tensor([429, 1],"float16"), )
paddle.Tensor.sum(Tensor([432, 1],"float16"), )
paddle.Tensor.sum(Tensor([434, 1],"float16"), )
paddle.Tensor.sum(Tensor([443, 1],"float16"), )
paddle.Tensor.sum(Tensor([462, 1],"float16"), )
paddle.Tensor.sum(Tensor([46208, 68],"float16"), )
paddle.Tensor.sum(Tensor([477, 1],"float16"), )
paddle.Tensor.sum(Tensor([482, 1],"float16"), )
paddle.Tensor.sum(Tensor([493, 1],"float16"), )
paddle.Tensor.sum(Tensor([494, 1],"float16"), )
paddle.Tensor.sum(Tensor([519, 1],"float16"), )
paddle.Tensor.sum(Tensor([521, 1],"float16"), )
paddle.Tensor.sum(Tensor([529, 1],"float16"), )
paddle.Tensor.sum(Tensor([532, 1],"float16"), )
paddle.Tensor.sum(Tensor([547, 1],"float16"), )
paddle.Tensor.sum(Tensor([550, 1],"float16"), )
paddle.Tensor.sum(Tensor([560, 68],"float16"), )
paddle.Tensor.sum(Tensor([561, 1],"float16"), )
paddle.Tensor.sum(Tensor([578, 1],"float16"), )
paddle.Tensor.sum(Tensor([579, 1],"float16"), )
paddle.Tensor.sum(Tensor([58, 1],"float16"), )
paddle.Tensor.sum(Tensor([584, 1],"float16"), )
paddle.Tensor.sum(Tensor([61, 1],"float16"), )
paddle.Tensor.sum(Tensor([610, 1],"float16"), )
paddle.Tensor.sum(Tensor([616, 68],"float16"), )
paddle.Tensor.sum(Tensor([636, 1],"float16"), )
paddle.Tensor.sum(Tensor([640, 68],"float16"), )
paddle.Tensor.sum(Tensor([65, 1],"float16"), )
paddle.Tensor.sum(Tensor([652, 1],"float16"), )
paddle.Tensor.sum(Tensor([704, 68],"float16"), )
paddle.Tensor.sum(Tensor([71, 1],"float16"), )
paddle.Tensor.sum(Tensor([720, 68],"float16"), )
paddle.Tensor.sum(Tensor([78, 1],"float16"), )
paddle.Tensor.sum(Tensor([792, 68],"float16"), )
paddle.Tensor.sum(Tensor([80, 128, 128],"bfloat16"), )
paddle.Tensor.sum(Tensor([80, 128, 128],"float16"), )
paddle.Tensor.sum(Tensor([800, 68],"float16"), )
paddle.Tensor.sum(Tensor([802, 1],"float16"), )
paddle.Tensor.sum(Tensor([81, 1],"float16"), )
paddle.Tensor.sum(Tensor([83, 1],"float16"), )
paddle.Tensor.sum(Tensor([86, 1],"float16"), )
paddle.Tensor.sum(Tensor([88, 1],"float16"), )
paddle.Tensor.sum(Tensor([880, 68],"float16"), )
paddle.Tensor.sum(Tensor([89, 1],"float16"), )
paddle.Tensor.sum(Tensor([90, 1],"float16"), )
paddle.Tensor.sum(Tensor([91, 1],"float16"), )
paddle.Tensor.sum(Tensor([92, 1],"float16"), )
paddle.Tensor.sum(Tensor([95, 1],"float16"), )
paddle.Tensor.sum(Tensor([968, 68],"float16"), )
paddle.Tensor.sum(Tensor([99, 1],"float16"), )
paddle.Tensor.topk(Tensor([3276800],"float32"), 100083, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 10173, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 101931, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 101946, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 102327, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 102396, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 104598, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 104646, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 104883, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 105876, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 107739, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 108291, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 108540, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 110289, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 110832, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 111645, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 112293, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 113463, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 113676, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 113790, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 114213, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 114261, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 114330, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 114561, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 114750, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 115383, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 115494, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 115920, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 116010, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 116085, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 120090, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 120693, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 120765, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 121008, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 121383, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 121500, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 121539, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 121758, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 122073, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 122982, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 123516, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 124155, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 124257, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 129726, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 131643, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 131952, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 131961, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 132105, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 132522, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 134115, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 136164, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 137484, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 138210, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 138852, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 145707, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 146148, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 147111, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 147315, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 150507, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 150945, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 151971, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 158844, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 160434, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 16623, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 16704, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 173505, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 17520, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 17526, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 175965, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 17598, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 17601, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 176061, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 178701, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 17988, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 18054, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 18081, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 182052, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 18795, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 18969, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 192987, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 19461, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 195024, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 206889, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 20913, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 21504, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 21621, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 21639, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 22047, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 222156, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 22458, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 22485, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 22938, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 23199, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 23337, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 234837, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 23964, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 24081, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 24285, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 24426, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 24729, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 24861, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 24891, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 25389, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 25449, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 25653, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 25665, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 25707, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 26028, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 26037, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 26064, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 26340, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 26358, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 26721, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 26763, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 26820, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 27378, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 27540, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 27789, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 28236, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 28269, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 28776, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 28779, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 28836, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 28848, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 29025, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 29103, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 29124, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 29274, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 29724, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 29847, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 29865, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30033, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30063, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30096, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30141, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30144, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30231, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30297, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30339, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30528, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30624, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30690, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30852, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30912, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 30981, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 31110, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 31170, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 31368, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 31698, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 31800, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 32778, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 32892, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 32937, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33039, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33102, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33111, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33132, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33333, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33336, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33636, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33642, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33762, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33873, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33909, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 33984, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 34158, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 34533, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 35178, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 35379, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 35391, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 35412, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 35559, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 35565, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 35616, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 35811, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 36585, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 36780, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 36963, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 37524, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 37749, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 37920, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 37986, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 37998, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 38208, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 38250, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 38253, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 38301, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 38430, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 38682, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 38772, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 38958, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 39411, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 39684, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 39831, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 39897, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 39918, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 39921, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 40053, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 40095, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 40149, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 40275, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 40650, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 40686, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 40767, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 41334, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 41421, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 41532, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 41553, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 42129, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 42345, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 42774, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43290, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43299, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43455, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43542, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43629, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43770, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43803, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43809, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43920, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43950, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 43986, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 44064, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 44106, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 44193, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 44355, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 44373, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 44409, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 44598, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 44754, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 44793, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 45291, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 45354, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 45390, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 45423, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 45564, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 46104, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 46344, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 46404, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 46431, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 46722, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 46812, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 46848, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 46929, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 46959, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 47199, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 47625, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 47640, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 47715, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 47904, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 48150, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 48177, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 48282, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 48336, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 48465, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 48504, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 48636, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 48759, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 48978, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 49089, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 49614, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 49929, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 49986, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 50169, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 50184, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 50247, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 50400, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 50424, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 50604, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 50712, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51051, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51150, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51171, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51213, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51357, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51444, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51459, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51555, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51558, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51633, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51639, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51753, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 51912, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 52089, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 52191, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 52236, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 52518, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 52530, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 52980, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 53001, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 53010, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 53040, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 53190, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 53301, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 53778, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 53829, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 53901, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 54171, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 54249, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 54756, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 54873, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 54954, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 54999, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 55089, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 55194, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 55548, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 55572, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 55722, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 55821, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 55917, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 55974, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 56211, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 56316, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 56376, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 56559, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 56577, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 56886, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 56910, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 56925, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 57108, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 57147, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 57291, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 57471, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 57564, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 57576, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 57648, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 57708, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 58017, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 58056, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 58143, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 58221, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 58260, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 58677, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 59277, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 59442, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 59547, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 59736, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 59802, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 59841, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 59844, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 59994, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60099, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60102, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60261, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60366, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60396, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60483, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60606, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60630, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60681, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60720, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60804, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60849, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 60963, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 61149, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 61197, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 61251, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 61338, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 61608, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 61749, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 61776, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 61998, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62004, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62109, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62199, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62229, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62421, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62445, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62481, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62544, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62910, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 62967, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 63618, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 63759, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 63786, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 63798, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 63855, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 64239, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 64314, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 64389, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 64866, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 65013, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 65382, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 65421, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 65778, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 65871, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 66123, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 66195, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 66234, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 66324, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 66501, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 67125, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 67434, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 67440, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 67491, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 67635, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 67641, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 67680, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 68058, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 68109, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 68373, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 68604, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 68985, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69009, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69075, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69132, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69147, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69168, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69384, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69429, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69450, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69582, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 69993, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 70152, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 70311, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 70338, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 70395, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 70446, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 70503, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 70704, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 70998, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 71139, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 71175, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 71655, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 71886, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 71889, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 71895, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 72033, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 72054, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 73086, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 73167, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 73416, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 73707, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 73848, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 74232, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 74310, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 74502, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 74796, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 75063, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 75546, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 75975, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 75978, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 76713, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 76914, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 77040, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 77478, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 77481, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 77610, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 77745, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 78177, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 78426, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 78570, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 78801, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 78942, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 79038, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 79812, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 80262, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 80370, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 80526, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 80535, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 80781, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 81294, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 81633, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 81687, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 81873, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 82131, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 82152, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 82398, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 82482, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 82647, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 82944, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 83031, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 83259, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 83439, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 83523, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 83919, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 83922, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 84111, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 84552, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 84789, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 85515, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 85977, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 86346, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 86835, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 87768, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 87798, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 88182, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 88404, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 88719, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 88755, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 89019, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 89715, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 90303, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 90414, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 90771, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 90849, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 91281, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 91317, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 91515, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 91554, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 92397, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 92409, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 92916, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 93366, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 93528, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 93792, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 94272, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 94842, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 95037, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 95178, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 95928, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 96321, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 98148, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 98550, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 98760, )
paddle.Tensor.topk(Tensor([3276800],"float32"), 99432, )
paddle.add_n(list[Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),], )
paddle.add_n(list[Tensor([16, 256],"float32"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),Tensor([16, 256],"float16"),], )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 100],"float32"),), tuple(Tensor([2, 20, 100],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 32],"float32"),), tuple(Tensor([2, 20, 32],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 3],"float32"),), tuple(Tensor([2, 20, 3],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 3],"float32"),), tuple(Tensor([2, 3],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.argsort(Tensor([3, 10000],"float32"), descending=True, )
paddle.argsort(Tensor([35968],"float32"), )
paddle.argsort(Tensor([5, 12000],"float32"), descending=True, )
paddle.broadcast_to(Tensor([1],"float16"), list[168,], )
paddle.broadcast_to(Tensor([1],"float16"), list[300,40,], )
paddle.broadcast_to(Tensor([1],"float16"), list[6,8,9,18,], )
paddle.broadcast_to(Tensor([300, 1],"float16"), list[300,40,], )
paddle.broadcast_to(Tensor([],"float16"), list[11008,], )
paddle.broadcast_to(Tensor([],"float16"), list[168,], )
paddle.broadcast_to(Tensor([],"float16"), list[300,40,], )
paddle.cast(Tensor([20, 500, 2],"int32"), dtype=Dtype(float16), )
paddle.cast(Tensor([20, 500, 4],"int32"), dtype=Dtype(float16), )
paddle.cumsum(Tensor([902319],"float32"), axis=0, )
paddle.expand(Tensor([3, 2],"float16"), shape=list[512,3,2,], )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "sum", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([10, 10, 10],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.heaviside(Tensor([1],"float32"), Tensor([300, 2048],"float32"), )
paddle.heaviside(Tensor([2048],"float32"), Tensor([300, 2048],"float32"), )
paddle.heaviside(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float16"), Tensor([3, 16, 64, 1024],"float16"), Tensor([1024, 1024],"float16"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, Tensor([3, 16, 64],"float16"), Tensor([1024],"float16"), None, Tensor([8, 16, 128, 128],"float16"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=False, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([1024, 3072],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, None, None, None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=True, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([1024, 3072],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, Tensor([3072],"float32"), Tensor([1024],"float32"), None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=True, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([3, 16, 64, 1024],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, None, None, None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=False, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([3, 16, 64, 1024],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, Tensor([3, 16, 64],"float32"), Tensor([1024],"float32"), None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, )
paddle.incubate.nn.functional.fused_multi_head_attention(Tensor([8, 128, 1024],"float32"), Tensor([3, 16, 64, 1024],"float32"), Tensor([1024, 1024],"float32"), False, Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), 1e-05, Tensor([3, 16, 64],"float32"), Tensor([1024],"float32"), None, Tensor([8, 16, 128, 128],"float32"), 0.0, 0.0, 1e-05, num_heads=16, transpose_qkv_wb=False, )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 1, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 7, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 11, 32, 32],"float32"), )
paddle.index_put(Tensor([100, 110],"float32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float32"), False, )
paddle.kron(Tensor([12, 8],"float16"), Tensor([16, 8],"float16"), )
paddle.kron(Tensor([16, 16],"float16"), Tensor([32, 20],"float16"), )
paddle.kron(Tensor([16, 16],"float16"), Tensor([32, 32],"float16"), )
paddle.kron(Tensor([16, 8],"float16"), Tensor([16, 8],"float16"), )
paddle.kron(Tensor([20, 16],"float16"), Tensor([32, 32],"float16"), )
paddle.kron(Tensor([24, 24],"float16"), Tensor([32, 32],"float16"), )
paddle.kron(Tensor([24, 86],"float16"), Tensor([32, 128],"float16"), )
paddle.kron(Tensor([32, 16],"float16"), Tensor([32, 32],"float16"), )
paddle.kron(Tensor([4, 8],"float16"), Tensor([8, 8],"float16"), )
paddle.kron(Tensor([8, 16],"float16"), Tensor([8, 16],"float16"), )
paddle.kron(Tensor([8, 8],"float16"), Tensor([8, 8],"float16"), )
paddle.kron(Tensor([86, 24],"float16"), Tensor([128, 32],"float16"), )
paddle.linalg.cond(Tensor([3, 5, 4, 1],"float32"), -2, )
paddle.linalg.cond(Tensor([3, 5, 4, 1],"float32"), 2, )
paddle.linalg.eigh(Tensor([2, 2],"complex128"), "L", )
paddle.linalg.eigh(Tensor([2, 2],"complex128"), "U", )
paddle.linalg.eigh(Tensor([2, 2],"complex64"), "L", )
paddle.linalg.eigh(Tensor([2, 5, 5],"complex64"), )
paddle.linalg.eigh(Tensor([32, 32],"float32"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"complex128"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"complex128"), "U", )
paddle.linalg.eigh(Tensor([4, 4],"complex64"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"complex64"), "U", )
paddle.linalg.eigh(Tensor([4, 4],"float32"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"float32"), "U", )
paddle.linalg.eigh(Tensor([4, 4],"float64"), "L", )
paddle.linalg.eigh(Tensor([4, 4],"float64"), "U", )
paddle.linalg.eigh(Tensor([5, 5],"complex64"), )
paddle.linalg.eigh(Tensor([5, 5],"float32"), )
paddle.linalg.eigvals(Tensor([6, 6],"float64"), name="small_x", )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([3, 3],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 4],"float64"), tol=Tensor([2, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([4, 4],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 5],"float64"), tol=4.4, hermitian=False, )
paddle.max(Tensor([1, 32, 8],"float32"), axis=list[0,], )
paddle.nn.functional.conv1d(Tensor([13, 20, 2048],"float32"), Tensor([256, 20, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 2048],"float32"), Tensor([20, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 2048],"float32"), Tensor([256, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([64, 64, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 25500],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 512, 256, 256],"float32"), Tensor([12, 128, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 512, 256, 256],"float32"), Tensor([512, 128, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([10, 64, 16, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 12, 56],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 153],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 17, 169],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 25, 113],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 68],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 128, 8, 84],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 104],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 112],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 112],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 120],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 120],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 128],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 128],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 136],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 136],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 144],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 144],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 152],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 152],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 160],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 160],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 160],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 168],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 168],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 32],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 56],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 64],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 64],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 72],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 80],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 80],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 88],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 88],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 96],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 16, 96],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 24, 112],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 24, 112],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 120],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 128],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 128],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 136],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 256, 8, 136],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 80],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 84],"float32"), Tensor([128, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 512, 8, 84],"float32"), Tensor([256, 512, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 104],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 104],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 112],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 112],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 120],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 120],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 120],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 128],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 128],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 128],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 136],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 136],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 144],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 144],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 152],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 152],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 152],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 160],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 160],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 160],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 168],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 168],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 64],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 64],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 72],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 80],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 80],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 88],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 88],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 96],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 96],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 16, 96],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 24, 112],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 24, 112],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 24, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 120],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 128],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 136],"float32"), Tensor([256, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 136],"float32"), Tensor([64, 64, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 64, 8, 80],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4096, 1, 36, 36],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 255],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 257, 257],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 256, 127, 127],"float32"), Tensor([512, 256, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 129, 129],"float32"), Tensor([512, 256, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 512, 64, 64],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1000, 128, 8, 8],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1000, 64, 16, 16],"float32"), Tensor([64, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([106, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([110, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([116, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([117, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([119, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([123, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([124, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([125, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([126, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([128, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([130, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([132, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([135, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([136, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([137, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([138, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([139, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([141, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([143, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([144, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([147, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([149, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([152, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([154, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([155, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([158, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([159, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([16, 64, 160, 160],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([160, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([162, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([164, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([167, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([169, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([171, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([172, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([173, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([174, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([175, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([176, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([178, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([179, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([181, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([182, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([183, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([186, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([188, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([190, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([191, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([192, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([193, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([194, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([195, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([196, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([197, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 216],"float32"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([200, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([201, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([202, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([203, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([204, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([205, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([206, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([207, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([208, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([209, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([212, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([213, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([214, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([215, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([216, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([216, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([217, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([219, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([220, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([221, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([222, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([223, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([224, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([225, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([226, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([227, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([228, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([229, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([230, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([231, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([232, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([233, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([234, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([236, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([237, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([238, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([239, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([24, 66, 128, 128],"float32"), Tensor([66, 32, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([240, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([241, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([242, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([243, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([245, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([246, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([247, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([248, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([249, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([250, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([251, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([252, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([253, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([253, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([255, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([256, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([257, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([258, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([259, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([260, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([260, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([261, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([261, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([262, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([263, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([264, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([265, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([265, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([266, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([267, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([268, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([269, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([270, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([271, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([271, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([272, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([273, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([273, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([274, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([274, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([276, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([277, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([278, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([280, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([280, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([281, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([281, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([282, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([283, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([284, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([284, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([285, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([285, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([286, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([288, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([289, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([289, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([290, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([290, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([291, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([291, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([292, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([292, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([293, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([294, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([294, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([295, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([296, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([296, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([297, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([297, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([298, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([298, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([299, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([300, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([300, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([301, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([301, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([302, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([302, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([303, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([304, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([305, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([306, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([307, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([307, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([308, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([309, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([310, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([310, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([311, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([311, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([312, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([312, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([313, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([314, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([315, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([316, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([316, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([317, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([317, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([318, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([318, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([319, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([319, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([320, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([322, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([322, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([324, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([325, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([325, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([326, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([327, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([327, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([328, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([329, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([329, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([330, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([331, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([331, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([332, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([333, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([334, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([336, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([337, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([338, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([338, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([339, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([339, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([340, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([341, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([342, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([342, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([343, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([343, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([344, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([345, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([346, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([347, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([348, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([348, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([349, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([350, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([350, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([351, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([351, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([352, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([353, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([354, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([354, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([356, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([359, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([359, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([360, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([360, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([361, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([364, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([364, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([365, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([366, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([366, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([367, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([367, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([368, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([369, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([371, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([371, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([373, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([375, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([375, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([376, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([376, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([377, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([377, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([378, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([379, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([380, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([381, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([381, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([382, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([383, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([384, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([385, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([385, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([386, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([386, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([387, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([388, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([389, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([389, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([391, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([392, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([393, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([395, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([396, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([399, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 94, 70],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 24, 240, 240],"float32"), Tensor([24, 24, 2, 2],"float32"), bias=Tensor([24],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 124, 108],"float32"), Tensor([256, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 160, 160],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 188, 140],"float32"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 240, 240],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([400, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([400, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([401, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([401, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([402, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([403, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([404, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([405, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([406, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([407, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([408, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([409, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([410, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([411, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([413, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([414, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([415, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([415, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([416, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([417, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([419, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([419, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([420, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([421, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([422, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([423, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([424, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([425, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([426, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([427, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([428, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([428, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([429, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([430, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([431, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([432, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([434, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([434, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([435, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([437, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([439, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([439, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([440, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([441, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([448, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([451, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([454, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([457, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([463, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([469, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([469, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([473, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([474, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([474, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([476, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([482, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([495, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([496, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([502, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([504, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([510, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([511, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([512, 2048, 7, 7],"float32"), Tensor([2048, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([512, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([64, 64, 43, 19],"float32"), Tensor([64, 32, 5, 5],"float32"), bias=Tensor([32],"float32"), padding=2, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 128, 64, 64],"float32"), Tensor([128, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 160, 160],"float32"), Tensor([24, 24, 2, 2],"float32"), bias=Tensor([24],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 24, 240, 240],"float32"), Tensor([24, 24, 2, 2],"float32"), bias=Tensor([24],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 64, 160, 160],"float32"), Tensor([64, 64, 2, 2],"float32"), bias=Tensor([64],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.cross_entropy(Tensor([2, 4],"float64"), Tensor([2],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 512, 1024, 19],"float32"), Tensor([4, 512, 1024],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 298, 364, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 368, 416, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 298, 364],"float32"), Tensor([1, 352, 407, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 368, 416],"float32"), Tensor([1, 391, 436, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 400, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 430, 340, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 434, 346, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 430, 340],"float32"), Tensor([1, 477, 401, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 434, 346],"float32"), Tensor([1, 466, 386, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 128],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 128, 128],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([4, 128, 32, 32],"float16"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 128, 4, 4],"float16"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 19, 128, 256],"float16"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([4, 19, 256, 256],"float16"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 19, 256, 256],"float16"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([4, 2, 128, 128],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([4, 256, 16, 16],"float16"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([4, 256, 64, 64],"float16"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([512, 40, 4, 3],"float16"), size=None, scale_factor=8, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=64.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=0.8, margin2=0.0, margin3=0.15, scale=40.0, group=None, return_softmax=False, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=64.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=32.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float16"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="sum", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.0, margin3=0.35, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.35, margin2=0.0, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.rnnt_loss(Tensor([3, 4, 3, 3],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), blank=0, fastemit_lambda=0.0, reduction="none", name=None, )
paddle.nn.functional.rnnt_loss(Tensor([3, 4, 3, 3],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), blank=0, reduction="mean", fastemit_lambda=0.0, )
paddle.nn.functional.rnnt_loss(Tensor([3, 4, 3, 3],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), blank=0, reduction="sum", fastemit_lambda=0.0, )
paddle.nn.functional.rrelu(Tensor([],"float32"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 96],"bfloat16"), Tensor([1, 1024, 8, 96],"bfloat16"), Tensor([1, 1024, 8, 96],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 102, 8, 96],"float16"), Tensor([2, 102, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 103, 8, 96],"float16"), Tensor([2, 103, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 104, 8, 96],"float16"), Tensor([2, 104, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 105, 8, 96],"float16"), Tensor([2, 105, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 106, 8, 96],"float16"), Tensor([2, 106, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 107, 8, 96],"float16"), Tensor([2, 107, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 108, 8, 96],"float16"), Tensor([2, 108, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 109, 8, 96],"float16"), Tensor([2, 109, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 110, 8, 96],"float16"), Tensor([2, 110, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 111, 8, 96],"float16"), Tensor([2, 111, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 112, 8, 96],"float16"), Tensor([2, 112, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 113, 8, 96],"float16"), Tensor([2, 113, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 114, 8, 96],"float16"), Tensor([2, 114, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 115, 8, 96],"float16"), Tensor([2, 115, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 116, 8, 96],"float16"), Tensor([2, 116, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 117, 8, 96],"float16"), Tensor([2, 117, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 118, 8, 96],"float16"), Tensor([2, 118, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 119, 8, 96],"float16"), Tensor([2, 119, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 120, 8, 96],"float16"), Tensor([2, 120, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 121, 8, 96],"float16"), Tensor([2, 121, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 122, 8, 96],"float16"), Tensor([2, 122, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 123, 8, 96],"float16"), Tensor([2, 123, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 124, 8, 96],"float16"), Tensor([2, 124, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 125, 8, 96],"float16"), Tensor([2, 125, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 126, 8, 96],"float16"), Tensor([2, 126, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 127, 8, 96],"float16"), Tensor([2, 127, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 128, 8, 96],"float16"), Tensor([2, 128, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 129, 8, 96],"float16"), Tensor([2, 129, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 130, 8, 96],"float16"), Tensor([2, 130, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 131, 8, 96],"float16"), Tensor([2, 131, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 132, 8, 96],"float16"), Tensor([2, 132, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 133, 8, 96],"float16"), Tensor([2, 133, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 134, 8, 96],"float16"), Tensor([2, 134, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 135, 8, 96],"float16"), Tensor([2, 135, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 136, 8, 96],"float16"), Tensor([2, 136, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 137, 8, 96],"float16"), Tensor([2, 137, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 138, 8, 96],"float16"), Tensor([2, 138, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 139, 8, 96],"float16"), Tensor([2, 139, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 140, 8, 96],"float16"), Tensor([2, 140, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 141, 8, 96],"float16"), Tensor([2, 141, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 142, 8, 96],"float16"), Tensor([2, 142, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 143, 8, 96],"float16"), Tensor([2, 143, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 144, 8, 96],"float16"), Tensor([2, 144, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 145, 8, 96],"float16"), Tensor([2, 145, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 146, 8, 96],"float16"), Tensor([2, 146, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 147, 8, 96],"float16"), Tensor([2, 147, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 148, 8, 96],"float16"), Tensor([2, 148, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 149, 8, 96],"float16"), Tensor([2, 149, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 150, 8, 96],"float16"), Tensor([2, 150, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 151, 8, 96],"float16"), Tensor([2, 151, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 152, 8, 96],"float16"), Tensor([2, 152, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 153, 8, 96],"float16"), Tensor([2, 153, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 154, 8, 96],"float16"), Tensor([2, 154, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 155, 8, 96],"float16"), Tensor([2, 155, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 156, 8, 96],"float16"), Tensor([2, 156, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 157, 8, 96],"float16"), Tensor([2, 157, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 158, 8, 96],"float16"), Tensor([2, 158, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 159, 8, 96],"float16"), Tensor([2, 159, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 75, 8, 96],"float16"), Tensor([2, 75, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 76, 8, 96],"float16"), Tensor([2, 76, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 77, 8, 96],"float16"), Tensor([2, 77, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 78, 8, 96],"float16"), Tensor([2, 78, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 79, 8, 96],"float16"), Tensor([2, 79, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 80, 8, 96],"float16"), Tensor([2, 80, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 81, 8, 96],"float16"), Tensor([2, 81, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 82, 8, 96],"float16"), Tensor([2, 82, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 83, 8, 96],"float16"), Tensor([2, 83, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 84, 8, 96],"float16"), Tensor([2, 84, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 85, 8, 96],"float16"), Tensor([2, 85, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 86, 8, 96],"float16"), Tensor([2, 86, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 87, 8, 96],"float16"), Tensor([2, 87, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 88, 8, 96],"float16"), Tensor([2, 88, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 89, 8, 96],"float16"), Tensor([2, 89, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 90, 8, 96],"float16"), Tensor([2, 90, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 91, 8, 96],"float16"), Tensor([2, 91, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 92, 8, 96],"float16"), Tensor([2, 92, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 93, 8, 96],"float16"), Tensor([2, 93, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 94, 8, 96],"float16"), Tensor([2, 94, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 95, 8, 96],"float16"), Tensor([2, 95, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 96, 8, 96],"float16"), Tensor([2, 96, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 97, 8, 96],"float16"), Tensor([2, 97, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 98, 8, 96],"float16"), Tensor([2, 98, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 99, 8, 96],"float16"), Tensor([2, 99, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 64],"float16"), key=Tensor([2, 64, 12, 64],"float16"), value=Tensor([2, 64, 12, 64],"float16"), is_causal=True, )
paddle.reshape(Tensor([0, 2],"float32"), list[-1,], )
paddle.reshape(Tensor([1, 1, 1, 0, 4],"float32"), list[-1,4,], )
paddle.reshape(Tensor([2, 1, 3, 0, 4],"complex128"), list[-1,4,], )
paddle.reshape(Tensor([2, 2, 1, 0, 4],"float16"), list[-1,4,], )
paddle.reshape(Tensor([2, 2, 1, 0, 4],"int64"), list[-1,4,], )
paddle.reshape(Tensor([2, 4, 3, 0, 4],"float64"), list[-1,4,], )
paddle.reshape(Tensor([3, 5, 3, 0, 4],"float64"), list[-1,4,], )
paddle.reshape(Tensor([3, 5, 3, 0, 4],"int32"), list[-1,4,], )
paddle.reshape(Tensor([3, 5, 5, 0, 4],"complex128"), list[-1,4,], )
paddle.reshape(Tensor([4, 2, 1, 0, 4],"float32"), list[-1,4,], )
paddle.reshape(Tensor([4, 3, 5, 0, 4],"float16"), list[-1,4,], )
paddle.reshape(Tensor([4, 4, 5, 0, 4],"int32"), list[-1,4,], )
paddle.reshape(Tensor([5, 2, 5, 0, 4],"complex64"), list[-1,4,], )
paddle.reshape(Tensor([5, 4, 3, 0, 4],"complex64"), list[-1,4,], )
paddle.reshape(Tensor([5, 4, 4, 0, 4],"int64"), list[-1,4,], )
paddle.slice(Tensor([13, 8],"int64"), list[0,1,], tuple(0,0,), list[13,8,], )
paddle.slice(Tensor([2, 2],"int64"), list[0,1,], tuple(0,0,), list[2,2,], )
paddle.sort(Tensor([3, 10000],"float32"), descending=True, )
paddle.sort(Tensor([35968],"float32"), 0, )
paddle.sort(Tensor([380086],"float32"), )
paddle.sort(Tensor([401899],"float32"), )
paddle.sort(Tensor([403187],"float32"), )
paddle.sort(Tensor([406580],"float32"), )
paddle.sort(Tensor([5, 12000],"float32"), descending=True, )
paddle.strided_slice(Tensor([6, 6],"int64"), axes=list[0,1,], starts=list[8,-1,], ends=list[1,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([6, 7, 8],"int64"), axes=list[0,2,], starts=list[7,-1,], ends=list[2,-5,], strides=list[-2,-3,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.sum(Tensor([100, 102144],"float16"), axis=1, )
paddle.sum(Tensor([100, 104832],"float16"), axis=1, )
paddle.sum(Tensor([100, 60800],"float16"), axis=1, )
paddle.sum(Tensor([100, 62400],"float16"), axis=1, )
paddle.sum(Tensor([100, 63232],"float16"), axis=1, )
paddle.sum(Tensor([100, 67200],"float16"), axis=1, )
paddle.sum(Tensor([100, 69888],"float16"), axis=1, )
paddle.sum(Tensor([100, 76032],"float16"), axis=1, )
paddle.sum(Tensor([100, 77824],"float16"), axis=1, )
paddle.sum(Tensor([100, 78144],"float16"), axis=1, )
paddle.sum(Tensor([100, 82688],"float16"), axis=1, )
paddle.sum(Tensor([100, 84864],"float16"), axis=1, )
paddle.sum(Tensor([100, 86016],"float16"), axis=1, )
paddle.sum(Tensor([100, 87552],"float16"), axis=1, )
paddle.sum(Tensor([100, 89216],"float16"), axis=1, )
paddle.sum(Tensor([100, 89984],"float16"), axis=1, )
paddle.sum(Tensor([100, 91392],"float16"), axis=1, )
paddle.sum(Tensor([100, 92416],"float16"), axis=1, )
paddle.sum(Tensor([1000, 1000],"float16"), )
paddle.sum(Tensor([1000, 10],"float16"), )
paddle.sum(Tensor([1000],"float16"), )
paddle.sum(Tensor([1024, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([1024, 1024],"float16"), )
paddle.sum(Tensor([1024, 10],"float16"), )
paddle.sum(Tensor([1024, 2],"float16"), )
paddle.sum(Tensor([1024],"float16"), )
paddle.sum(Tensor([104, 102144],"float16"), axis=1, )
paddle.sum(Tensor([104, 54400],"float16"), axis=1, )
paddle.sum(Tensor([104, 60800],"float16"), axis=1, )
paddle.sum(Tensor([104, 65600],"float16"), axis=1, )
paddle.sum(Tensor([104, 67200],"float16"), axis=1, )
paddle.sum(Tensor([104, 73984],"float16"), axis=1, )
paddle.sum(Tensor([104, 76160],"float16"), axis=1, )
paddle.sum(Tensor([104, 78336],"float16"), axis=1, )
paddle.sum(Tensor([104, 82688],"float16"), axis=1, )
paddle.sum(Tensor([104, 84480],"float16"), axis=1, )
paddle.sum(Tensor([104, 84864],"float16"), axis=1, )
paddle.sum(Tensor([104, 86016],"float16"), axis=1, )
paddle.sum(Tensor([104, 87360],"float16"), axis=1, )
paddle.sum(Tensor([104, 87552],"float16"), axis=1, )
paddle.sum(Tensor([104, 89984],"float16"), axis=1, )
paddle.sum(Tensor([104, 91392],"float16"), axis=1, )
paddle.sum(Tensor([104, 92416],"float16"), axis=1, )
paddle.sum(Tensor([104, 97088],"float16"), axis=1, )
paddle.sum(Tensor([1048576],"float16"), )
paddle.sum(Tensor([108, 102144],"float16"), axis=1, )
paddle.sum(Tensor([108, 54400],"float16"), axis=1, )
paddle.sum(Tensor([108, 57600],"float16"), axis=1, )
paddle.sum(Tensor([108, 60800],"float16"), axis=1, )
paddle.sum(Tensor([108, 62400],"float16"), axis=1, )
paddle.sum(Tensor([108, 67200],"float16"), axis=1, )
paddle.sum(Tensor([108, 70528],"float16"), axis=1, )
paddle.sum(Tensor([108, 73984],"float16"), axis=1, )
paddle.sum(Tensor([108, 82688],"float16"), axis=1, )
paddle.sum(Tensor([108, 85120],"float16"), axis=1, )
paddle.sum(Tensor([108, 87040],"float16"), axis=1, )
paddle.sum(Tensor([108, 89984],"float16"), axis=1, )
paddle.sum(Tensor([108, 91392],"float16"), axis=1, )
paddle.sum(Tensor([108, 91840],"float16"), axis=1, )
paddle.sum(Tensor([108, 92416],"float16"), axis=1, )
paddle.sum(Tensor([108, 94848],"float16"), axis=1, )
paddle.sum(Tensor([112, 102144],"float16"), axis=1, )
paddle.sum(Tensor([112, 54400],"float16"), axis=1, )
paddle.sum(Tensor([112, 58752],"float16"), axis=1, )
paddle.sum(Tensor([112, 60800],"float16"), axis=1, )
paddle.sum(Tensor([112, 62400],"float16"), axis=1, )
paddle.sum(Tensor([112, 63232],"float16"), axis=1, )
paddle.sum(Tensor([112, 65664],"float16"), axis=1, )
paddle.sum(Tensor([112, 67200],"float16"), axis=1, )
paddle.sum(Tensor([112, 73984],"float16"), axis=1, )
paddle.sum(Tensor([112, 76160],"float16"), axis=1, )
paddle.sum(Tensor([112, 82688],"float16"), axis=1, )
paddle.sum(Tensor([112, 85120],"float16"), axis=1, )
paddle.sum(Tensor([112, 87040],"float16"), axis=1, )
paddle.sum(Tensor([112, 92416],"float16"), axis=1, )
paddle.sum(Tensor([116, 102144],"float16"), axis=1, )
paddle.sum(Tensor([116, 54400],"float16"), axis=1, )
paddle.sum(Tensor([116, 59200],"float16"), axis=1, )
paddle.sum(Tensor([116, 60800],"float16"), axis=1, )
paddle.sum(Tensor([116, 62400],"float16"), axis=1, )
paddle.sum(Tensor([116, 67200],"float16"), axis=1, )
paddle.sum(Tensor([116, 70528],"float16"), axis=1, )
paddle.sum(Tensor([116, 72960],"float16"), axis=1, )
paddle.sum(Tensor([116, 73984],"float16"), axis=1, )
paddle.sum(Tensor([116, 82688],"float16"), axis=1, )
paddle.sum(Tensor([116, 84864],"float16"), axis=1, )
paddle.sum(Tensor([116, 87552],"float16"), axis=1, )
paddle.sum(Tensor([116, 91392],"float16"), axis=1, )
paddle.sum(Tensor([116, 92416],"float16"), axis=1, )
paddle.sum(Tensor([116, 94848],"float16"), axis=1, )
paddle.sum(Tensor([116, 97280],"float16"), axis=1, )
paddle.sum(Tensor([12, 102144],"float16"), axis=1, )
paddle.sum(Tensor([12, 112896],"float16"), axis=1, )
paddle.sum(Tensor([12, 56576],"float16"), axis=1, )
paddle.sum(Tensor([12, 60800],"float16"), axis=1, )
paddle.sum(Tensor([12, 73984],"float16"), axis=1, )
paddle.sum(Tensor([12, 76160],"float16"), axis=1, )
paddle.sum(Tensor([12, 82688],"float16"), axis=1, )
paddle.sum(Tensor([12, 87040],"float16"), axis=1, )
paddle.sum(Tensor([12, 89984],"float16"), axis=1, )
paddle.sum(Tensor([12, 92416],"float16"), axis=1, )
paddle.sum(Tensor([12, 99712],"float16"), axis=1, )
paddle.sum(Tensor([120, 102144],"float16"), axis=1, )
paddle.sum(Tensor([120, 104832],"float16"), axis=1, )
paddle.sum(Tensor([120, 107520],"float16"), axis=1, )
paddle.sum(Tensor([120, 54400],"float16"), axis=1, )
paddle.sum(Tensor([120, 57600],"float16"), axis=1, )
paddle.sum(Tensor([120, 60800],"float16"), axis=1, )
paddle.sum(Tensor([120, 62400],"float16"), axis=1, )
paddle.sum(Tensor([120, 64000],"float16"), axis=1, )
paddle.sum(Tensor([120, 67200],"float16"), axis=1, )
paddle.sum(Tensor([120, 67392],"float16"), axis=1, )
paddle.sum(Tensor([120, 67456],"float16"), axis=1, )
paddle.sum(Tensor([120, 73984],"float16"), axis=1, )
paddle.sum(Tensor([120, 77824],"float16"), axis=1, )
paddle.sum(Tensor([120, 82688],"float16"), axis=1, )
paddle.sum(Tensor([120, 84864],"float16"), axis=1, )
paddle.sum(Tensor([120, 86016],"float16"), axis=1, )
paddle.sum(Tensor([120, 88704],"float16"), axis=1, )
paddle.sum(Tensor([120, 91392],"float16"), axis=1, )
paddle.sum(Tensor([120, 92416],"float16"), axis=1, )
paddle.sum(Tensor([120, 94848],"float16"), axis=1, )
paddle.sum(Tensor([120, 97280],"float16"), axis=1, )
paddle.sum(Tensor([12288],"float16"), )
paddle.sum(Tensor([124, 102144],"float16"), axis=1, )
paddle.sum(Tensor([124, 54400],"float16"), axis=1, )
paddle.sum(Tensor([124, 60800],"float16"), axis=1, )
paddle.sum(Tensor([124, 62400],"float16"), axis=1, )
paddle.sum(Tensor([124, 64000],"float16"), axis=1, )
paddle.sum(Tensor([124, 67200],"float16"), axis=1, )
paddle.sum(Tensor([124, 73984],"float16"), axis=1, )
paddle.sum(Tensor([124, 77824],"float16"), axis=1, )
paddle.sum(Tensor([124, 82688],"float16"), axis=1, )
paddle.sum(Tensor([124, 84864],"float16"), axis=1, )
paddle.sum(Tensor([124, 86016],"float16"), axis=1, )
paddle.sum(Tensor([124, 89984],"float16"), axis=1, )
paddle.sum(Tensor([124, 91392],"float16"), axis=1, )
paddle.sum(Tensor([124, 92416],"float16"), axis=1, )
paddle.sum(Tensor([12582912],"float16"), )
paddle.sum(Tensor([128, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([128, 102144],"float16"), axis=1, )
paddle.sum(Tensor([128, 104832],"float16"), axis=1, )
paddle.sum(Tensor([128, 192612],"float16"), axis=-1, )
paddle.sum(Tensor([128, 57600],"float16"), axis=1, )
paddle.sum(Tensor([128, 59200],"float16"), axis=1, )
paddle.sum(Tensor([128, 60800],"float16"), axis=1, )
paddle.sum(Tensor([128, 67200],"float16"), axis=1, )
paddle.sum(Tensor([128, 73984],"float16"), axis=1, )
paddle.sum(Tensor([128, 76160],"float16"), axis=1, )
paddle.sum(Tensor([128, 80256],"float16"), axis=1, )
paddle.sum(Tensor([128, 82688],"float16"), axis=1, )
paddle.sum(Tensor([128, 91392],"float16"), axis=1, )
paddle.sum(Tensor([128, 92416],"float16"), axis=1, )
paddle.sum(Tensor([128, 94080],"float16"), axis=1, )
paddle.sum(Tensor([132, 102144],"float16"), axis=1, )
paddle.sum(Tensor([132, 54400],"float16"), axis=1, )
paddle.sum(Tensor([132, 60800],"float16"), axis=1, )
paddle.sum(Tensor([132, 67200],"float16"), axis=1, )
paddle.sum(Tensor([132, 69632],"float16"), axis=1, )
paddle.sum(Tensor([132, 73984],"float16"), axis=1, )
paddle.sum(Tensor([132, 76032],"float16"), axis=1, )
paddle.sum(Tensor([132, 82688],"float16"), axis=1, )
paddle.sum(Tensor([132, 84864],"float16"), axis=1, )
paddle.sum(Tensor([132, 91392],"float16"), axis=1, )
paddle.sum(Tensor([132, 92416],"float16"), axis=1, )
paddle.sum(Tensor([132, 99712],"float16"), axis=1, )
paddle.sum(Tensor([136, 102144],"float16"), axis=1, )
paddle.sum(Tensor([136, 112896],"float16"), axis=1, )
paddle.sum(Tensor([136, 54400],"float16"), axis=1, )
paddle.sum(Tensor([136, 60800],"float16"), axis=1, )
paddle.sum(Tensor([136, 62400],"float16"), axis=1, )
paddle.sum(Tensor([136, 65600],"float16"), axis=1, )
paddle.sum(Tensor([136, 67200],"float16"), axis=1, )
paddle.sum(Tensor([136, 73984],"float16"), axis=1, )
paddle.sum(Tensor([136, 75392],"float16"), axis=1, )
paddle.sum(Tensor([136, 77824],"float16"), axis=1, )
paddle.sum(Tensor([136, 80256],"float16"), axis=1, )
paddle.sum(Tensor([136, 82688],"float16"), axis=1, )
paddle.sum(Tensor([136, 92416],"float16"), axis=1, )
paddle.sum(Tensor([140, 56000],"float16"), axis=1, )
paddle.sum(Tensor([140, 57600],"float16"), axis=1, )
paddle.sum(Tensor([140, 60800],"float16"), axis=1, )
paddle.sum(Tensor([140, 68224],"float16"), axis=1, )
paddle.sum(Tensor([140, 76032],"float16"), axis=1, )
paddle.sum(Tensor([140, 82688],"float16"), axis=1, )
paddle.sum(Tensor([140, 83328],"float16"), axis=1, )
paddle.sum(Tensor([140, 91392],"float16"), axis=1, )
paddle.sum(Tensor([140, 92416],"float16"), axis=1, )
paddle.sum(Tensor([144, 102144],"float16"), axis=1, )
paddle.sum(Tensor([144, 112896],"float16"), axis=1, )
paddle.sum(Tensor([144, 54400],"float16"), axis=1, )
paddle.sum(Tensor([144, 57600],"float16"), axis=1, )
paddle.sum(Tensor([144, 60800],"float16"), axis=1, )
paddle.sum(Tensor([144, 64000],"float16"), axis=1, )
paddle.sum(Tensor([144, 67200],"float16"), axis=1, )
paddle.sum(Tensor([144, 73984],"float16"), axis=1, )
paddle.sum(Tensor([144, 82688],"float16"), axis=1, )
paddle.sum(Tensor([144, 88704],"float16"), axis=1, )
paddle.sum(Tensor([144, 89216],"float16"), axis=1, )
paddle.sum(Tensor([144, 91392],"float16"), axis=1, )
paddle.sum(Tensor([144, 92416],"float16"), axis=1, )
paddle.sum(Tensor([148, 102144],"float16"), axis=1, )
paddle.sum(Tensor([148, 59200],"float16"), axis=1, )
paddle.sum(Tensor([148, 60800],"float16"), axis=1, )
paddle.sum(Tensor([148, 67200],"float16"), axis=1, )
paddle.sum(Tensor([148, 73984],"float16"), axis=1, )
paddle.sum(Tensor([148, 82688],"float16"), axis=1, )
paddle.sum(Tensor([148, 91392],"float16"), axis=1, )
paddle.sum(Tensor([148, 92416],"float16"), axis=1, )
paddle.sum(Tensor([148, 94848],"float16"), axis=1, )
paddle.sum(Tensor([152, 102144],"float16"), axis=1, )
paddle.sum(Tensor([152, 107520],"float16"), axis=1, )
paddle.sum(Tensor([152, 54400],"float16"), axis=1, )
paddle.sum(Tensor([152, 60800],"float16"), axis=1, )
paddle.sum(Tensor([152, 62400],"float16"), axis=1, )
paddle.sum(Tensor([152, 67200],"float16"), axis=1, )
paddle.sum(Tensor([152, 75392],"float16"), axis=1, )
paddle.sum(Tensor([152, 77824],"float16"), axis=1, )
paddle.sum(Tensor([152, 82688],"float16"), axis=1, )
paddle.sum(Tensor([152, 91392],"float16"), axis=1, )
paddle.sum(Tensor([152, 92416],"float16"), axis=1, )
paddle.sum(Tensor([154, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([156, 102144],"float16"), axis=1, )
paddle.sum(Tensor([156, 56000],"float16"), axis=1, )
paddle.sum(Tensor([156, 60800],"float16"), axis=1, )
paddle.sum(Tensor([156, 62400],"float16"), axis=1, )
paddle.sum(Tensor([156, 67200],"float16"), axis=1, )
paddle.sum(Tensor([156, 68224],"float16"), axis=1, )
paddle.sum(Tensor([156, 74240],"float16"), axis=1, )
paddle.sum(Tensor([156, 80256],"float16"), axis=1, )
paddle.sum(Tensor([156, 82688],"float16"), axis=1, )
paddle.sum(Tensor([156, 89216],"float16"), axis=1, )
paddle.sum(Tensor([156, 92416],"float16"), axis=1, )
paddle.sum(Tensor([16, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([16, 102144],"float16"), axis=1, )
paddle.sum(Tensor([16, 102400],"float16"), axis=1, )
paddle.sum(Tensor([16, 112896],"float16"), axis=1, )
paddle.sum(Tensor([16, 54400],"float16"), axis=1, )
paddle.sum(Tensor([16, 60800],"float16"), axis=1, )
paddle.sum(Tensor([16, 62400],"float16"), axis=1, )
paddle.sum(Tensor([16, 64000],"float16"), axis=1, )
paddle.sum(Tensor([16, 65600],"float16"), axis=1, )
paddle.sum(Tensor([16, 67200],"float16"), axis=1, )
paddle.sum(Tensor([16, 69888],"float16"), axis=1, )
paddle.sum(Tensor([16, 70528],"float16"), axis=1, )
paddle.sum(Tensor([16, 73984],"float16"), axis=1, )
paddle.sum(Tensor([16, 76160],"float16"), axis=1, )
paddle.sum(Tensor([16, 77824],"float16"), axis=1, )
paddle.sum(Tensor([16, 80256],"float16"), axis=1, )
paddle.sum(Tensor([16, 80512],"float16"), axis=1, )
paddle.sum(Tensor([16, 82688],"float16"), axis=1, )
paddle.sum(Tensor([16, 84864],"float16"), axis=1, )
paddle.sum(Tensor([16, 85120],"float16"), axis=1, )
paddle.sum(Tensor([16, 87552],"float16"), axis=1, )
paddle.sum(Tensor([16, 89216],"float16"), axis=1, )
paddle.sum(Tensor([16, 89984],"float16"), axis=1, )
paddle.sum(Tensor([16, 91392],"float16"), axis=1, )
paddle.sum(Tensor([16, 92416],"float16"), axis=1, )
paddle.sum(Tensor([16, 94848],"float16"), axis=1, )
paddle.sum(Tensor([16, 96768],"float16"), axis=1, )
paddle.sum(Tensor([16, 99712],"float16"), axis=1, )
paddle.sum(Tensor([160, 102144],"float16"), axis=1, )
paddle.sum(Tensor([160, 54400],"float16"), axis=1, )
paddle.sum(Tensor([160, 56000],"float16"), axis=1, )
paddle.sum(Tensor([160, 60800],"float16"), axis=1, )
paddle.sum(Tensor([160, 67200],"float16"), axis=1, )
paddle.sum(Tensor([160, 72960],"float16"), axis=1, )
paddle.sum(Tensor([160, 82688],"float16"), axis=1, )
paddle.sum(Tensor([160, 84864],"float16"), axis=1, )
paddle.sum(Tensor([160, 89984],"float16"), axis=1, )
paddle.sum(Tensor([160, 91392],"float16"), axis=1, )
paddle.sum(Tensor([160, 92416],"float16"), axis=1, )
paddle.sum(Tensor([16384],"float16"), )
paddle.sum(Tensor([164, 112896],"float16"), axis=1, )
paddle.sum(Tensor([164, 60800],"float16"), axis=1, )
paddle.sum(Tensor([164, 65664],"float16"), axis=1, )
paddle.sum(Tensor([164, 67200],"float16"), axis=1, )
paddle.sum(Tensor([164, 73984],"float16"), axis=1, )
paddle.sum(Tensor([164, 82688],"float16"), axis=1, )
paddle.sum(Tensor([164, 87360],"float16"), axis=1, )
paddle.sum(Tensor([164, 89984],"float16"), axis=1, )
paddle.sum(Tensor([164, 92416],"float16"), axis=1, )
paddle.sum(Tensor([16777216],"float16"), )
paddle.sum(Tensor([168, 102144],"float16"), axis=1, )
paddle.sum(Tensor([168, 57600],"float16"), axis=1, )
paddle.sum(Tensor([168, 60800],"float16"), axis=1, )
paddle.sum(Tensor([168, 73984],"float16"), axis=1, )
paddle.sum(Tensor([168, 82688],"float16"), axis=1, )
paddle.sum(Tensor([168, 92416],"float16"), axis=1, )
paddle.sum(Tensor([168, 97280],"float16"), axis=1, )
paddle.sum(Tensor([172, 102144],"float16"), axis=1, )
paddle.sum(Tensor([172, 54400],"float16"), axis=1, )
paddle.sum(Tensor([172, 60800],"float16"), axis=1, )
paddle.sum(Tensor([172, 67200],"float16"), axis=1, )
paddle.sum(Tensor([172, 77824],"float16"), axis=1, )
paddle.sum(Tensor([172, 80256],"float16"), axis=1, )
paddle.sum(Tensor([172, 80512],"float16"), axis=1, )
paddle.sum(Tensor([172, 82688],"float16"), axis=1, )
paddle.sum(Tensor([172, 92416],"float16"), axis=1, )
paddle.sum(Tensor([176, 60800],"float16"), axis=1, )
paddle.sum(Tensor([176, 62400],"float16"), axis=1, )
paddle.sum(Tensor([176, 69632],"float16"), axis=1, )
paddle.sum(Tensor([176, 74240],"float16"), axis=1, )
paddle.sum(Tensor([176, 82688],"float16"), axis=1, )
paddle.sum(Tensor([176, 83328],"float16"), axis=1, )
paddle.sum(Tensor([176, 92416],"float16"), axis=1, )
paddle.sum(Tensor([176, 94848],"float16"), axis=1, )
paddle.sum(Tensor([176, 99712],"float16"), axis=1, )
paddle.sum(Tensor([180, 102144],"float16"), axis=1, )
paddle.sum(Tensor([180, 54400],"float16"), axis=1, )
paddle.sum(Tensor([180, 60800],"float16"), axis=1, )
paddle.sum(Tensor([180, 64000],"float16"), axis=1, )
paddle.sum(Tensor([180, 80256],"float16"), axis=1, )
paddle.sum(Tensor([180, 82688],"float16"), axis=1, )
paddle.sum(Tensor([180, 83328],"float16"), axis=1, )
paddle.sum(Tensor([180, 91392],"float16"), axis=1, )
paddle.sum(Tensor([180, 92416],"float16"), axis=1, )
paddle.sum(Tensor([184, 54400],"float16"), axis=1, )
paddle.sum(Tensor([184, 60800],"float16"), axis=1, )
paddle.sum(Tensor([184, 65600],"float16"), axis=1, )
paddle.sum(Tensor([184, 67200],"float16"), axis=1, )
paddle.sum(Tensor([184, 82688],"float16"), axis=1, )
paddle.sum(Tensor([184, 92416],"float16"), axis=1, )
paddle.sum(Tensor([184, 99456],"float16"), axis=1, )
paddle.sum(Tensor([188, 102144],"float16"), axis=1, )
paddle.sum(Tensor([188, 60800],"float16"), axis=1, )
paddle.sum(Tensor([188, 67200],"float16"), axis=1, )
paddle.sum(Tensor([188, 73984],"float16"), axis=1, )
paddle.sum(Tensor([188, 78336],"float16"), axis=1, )
paddle.sum(Tensor([188, 82688],"float16"), axis=1, )
paddle.sum(Tensor([188, 91392],"float16"), axis=1, )
paddle.sum(Tensor([188, 92416],"float16"), axis=1, )
paddle.sum(Tensor([192, 60800],"float16"), axis=1, )
paddle.sum(Tensor([192, 67200],"float16"), axis=1, )
paddle.sum(Tensor([192, 82688],"float16"), axis=1, )
paddle.sum(Tensor([192, 92416],"float16"), axis=1, )
paddle.sum(Tensor([196, 102144],"float16"), axis=1, )
paddle.sum(Tensor([196, 60800],"float16"), axis=1, )
paddle.sum(Tensor([196, 67200],"float16"), axis=1, )
paddle.sum(Tensor([196, 91392],"float16"), axis=1, )
paddle.sum(Tensor([196, 92416],"float16"), axis=1, )
paddle.sum(Tensor([20, 102144],"float16"), axis=1, )
paddle.sum(Tensor([20, 102400],"float16"), axis=1, )
paddle.sum(Tensor([20, 60800],"float16"), axis=1, )
paddle.sum(Tensor([20, 64000],"float16"), axis=1, )
paddle.sum(Tensor([20, 67200],"float16"), axis=1, )
paddle.sum(Tensor([20, 70528],"float16"), axis=1, )
paddle.sum(Tensor([20, 73984],"float16"), axis=1, )
paddle.sum(Tensor([20, 82688],"float16"), axis=1, )
paddle.sum(Tensor([20, 85120],"float16"), axis=1, )
paddle.sum(Tensor([20, 87040],"float16"), axis=1, )
paddle.sum(Tensor([20, 89984],"float16"), axis=1, )
paddle.sum(Tensor([20, 91392],"float16"), axis=1, )
paddle.sum(Tensor([20, 92352],"float16"), axis=1, )
paddle.sum(Tensor([20, 92416],"float16"), axis=1, )
paddle.sum(Tensor([20, 97280],"float16"), axis=1, )
paddle.sum(Tensor([20, 99712],"float16"), axis=1, )
paddle.sum(Tensor([200, 102144],"float16"), axis=1, )
paddle.sum(Tensor([200, 104832],"float16"), axis=1, )
paddle.sum(Tensor([200, 60800],"float16"), axis=1, )
paddle.sum(Tensor([200, 82688],"float16"), axis=1, )
paddle.sum(Tensor([200, 92416],"float16"), axis=1, )
paddle.sum(Tensor([204, 54400],"float16"), axis=1, )
paddle.sum(Tensor([204, 62400],"float16"), axis=1, )
paddle.sum(Tensor([204, 67200],"float16"), axis=1, )
paddle.sum(Tensor([204, 82688],"float16"), axis=1, )
paddle.sum(Tensor([204, 92416],"float16"), axis=1, )
paddle.sum(Tensor([208, 54400],"float16"), axis=1, )
paddle.sum(Tensor([208, 60800],"float16"), axis=1, )
paddle.sum(Tensor([208, 67200],"float16"), axis=1, )
paddle.sum(Tensor([208, 82688],"float16"), axis=1, )
paddle.sum(Tensor([208, 87552],"float16"), axis=1, )
paddle.sum(Tensor([208, 92416],"float16"), axis=1, )
paddle.sum(Tensor([212, 102144],"float16"), axis=1, )
paddle.sum(Tensor([212, 54400],"float16"), axis=1, )
paddle.sum(Tensor([212, 57600],"float16"), axis=1, )
paddle.sum(Tensor([212, 60800],"float16"), axis=1, )
paddle.sum(Tensor([212, 65600],"float16"), axis=1, )
paddle.sum(Tensor([212, 73984],"float16"), axis=1, )
paddle.sum(Tensor([212, 80256],"float16"), axis=1, )
paddle.sum(Tensor([212, 82688],"float16"), axis=1, )
paddle.sum(Tensor([212, 92416],"float16"), axis=1, )
paddle.sum(Tensor([216, 60800],"float16"), axis=1, )
paddle.sum(Tensor([216, 92416],"float16"), axis=1, )
paddle.sum(Tensor([220, 60800],"float16"), axis=1, )
paddle.sum(Tensor([220, 63232],"float16"), axis=1, )
paddle.sum(Tensor([220, 67200],"float16"), axis=1, )
paddle.sum(Tensor([220, 92416],"float16"), axis=1, )
paddle.sum(Tensor([224, 102144],"float16"), axis=1, )
paddle.sum(Tensor([224, 54400],"float16"), axis=1, )
paddle.sum(Tensor([224, 59200],"float16"), axis=1, )
paddle.sum(Tensor([224, 60800],"float16"), axis=1, )
paddle.sum(Tensor([224, 63232],"float16"), axis=1, )
paddle.sum(Tensor([224, 65600],"float16"), axis=1, )
paddle.sum(Tensor([224, 67200],"float16"), axis=1, )
paddle.sum(Tensor([224, 76160],"float16"), axis=1, )
paddle.sum(Tensor([224, 78336],"float16"), axis=1, )
paddle.sum(Tensor([224, 82688],"float16"), axis=1, )
paddle.sum(Tensor([224, 92416],"float16"), axis=1, )
paddle.sum(Tensor([228, 102144],"float16"), axis=1, )
paddle.sum(Tensor([228, 67200],"float16"), axis=1, )
paddle.sum(Tensor([228, 82688],"float16"), axis=1, )
paddle.sum(Tensor([232, 54400],"float16"), axis=1, )
paddle.sum(Tensor([232, 67200],"float16"), axis=1, )
paddle.sum(Tensor([232, 92416],"float16"), axis=1, )
paddle.sum(Tensor([232, 99456],"float16"), axis=1, )
paddle.sum(Tensor([236, 54400],"float16"), axis=1, )
paddle.sum(Tensor([236, 60800],"float16"), axis=1, )
paddle.sum(Tensor([24, 102144],"float16"), axis=1, )
paddle.sum(Tensor([24, 104832],"float16"), axis=1, )
paddle.sum(Tensor([24, 112896],"float16"), axis=1, )
paddle.sum(Tensor([24, 54400],"float16"), axis=1, )
paddle.sum(Tensor([24, 56576],"float16"), axis=1, )
paddle.sum(Tensor([24, 57600],"float16"), axis=1, )
paddle.sum(Tensor([24, 60800],"float16"), axis=1, )
paddle.sum(Tensor([24, 62400],"float16"), axis=1, )
paddle.sum(Tensor([24, 63232],"float16"), axis=1, )
paddle.sum(Tensor([24, 64000],"float16"), axis=1, )
paddle.sum(Tensor([24, 67200],"float16"), axis=1, )
paddle.sum(Tensor([24, 68096],"float16"), axis=1, )
paddle.sum(Tensor([24, 70528],"float16"), axis=1, )
paddle.sum(Tensor([24, 73984],"float16"), axis=1, )
paddle.sum(Tensor([24, 74240],"float16"), axis=1, )
paddle.sum(Tensor([24, 76032],"float16"), axis=1, )
paddle.sum(Tensor([24, 76160],"float16"), axis=1, )
paddle.sum(Tensor([24, 78144],"float16"), axis=1, )
paddle.sum(Tensor([24, 78336],"float16"), axis=1, )
paddle.sum(Tensor([24, 80256],"float16"), axis=1, )
paddle.sum(Tensor([24, 80512],"float16"), axis=1, )
paddle.sum(Tensor([24, 82688],"float16"), axis=1, )
paddle.sum(Tensor([24, 84864],"float16"), axis=1, )
paddle.sum(Tensor([24, 85120],"float16"), axis=1, )
paddle.sum(Tensor([24, 86016],"float16"), axis=1, )
paddle.sum(Tensor([24, 87040],"float16"), axis=1, )
paddle.sum(Tensor([24, 87552],"float16"), axis=1, )
paddle.sum(Tensor([24, 89216],"float16"), axis=1, )
paddle.sum(Tensor([24, 89984],"float16"), axis=1, )
paddle.sum(Tensor([24, 91392],"float16"), axis=1, )
paddle.sum(Tensor([24, 91840],"float16"), axis=1, )
paddle.sum(Tensor([24, 92416],"float16"), axis=1, )
paddle.sum(Tensor([24, 94848],"float16"), axis=1, )
paddle.sum(Tensor([24, 96768],"float16"), axis=1, )
paddle.sum(Tensor([24, 97088],"float16"), axis=1, )
paddle.sum(Tensor([24, 97280],"float16"), axis=1, )
paddle.sum(Tensor([24, 99456],"float16"), axis=1, )
paddle.sum(Tensor([24, 99712],"float16"), axis=1, )
paddle.sum(Tensor([240, 102144],"float16"), axis=1, )
paddle.sum(Tensor([240, 82688],"float16"), axis=1, )
paddle.sum(Tensor([240, 92416],"float16"), axis=1, )
paddle.sum(Tensor([244, 54400],"float16"), axis=1, )
paddle.sum(Tensor([244, 60800],"float16"), axis=1, )
paddle.sum(Tensor([244, 82688],"float16"), axis=1, )
paddle.sum(Tensor([248, 102144],"float16"), axis=1, )
paddle.sum(Tensor([248, 54400],"float16"), axis=1, )
paddle.sum(Tensor([248, 76160],"float16"), axis=1, )
paddle.sum(Tensor([252, 60800],"float16"), axis=1, )
paddle.sum(Tensor([252, 72960],"float16"), axis=1, )
paddle.sum(Tensor([252, 82688],"float16"), axis=1, )
paddle.sum(Tensor([256, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([256, 54400],"float16"), axis=1, )
paddle.sum(Tensor([256, 60800],"float16"), axis=1, )
paddle.sum(Tensor([260, 102144],"float16"), axis=1, )
paddle.sum(Tensor([260, 60800],"float16"), axis=1, )
paddle.sum(Tensor([260, 82688],"float16"), axis=1, )
paddle.sum(Tensor([264, 82688],"float16"), axis=1, )
paddle.sum(Tensor([264, 92416],"float16"), axis=1, )
paddle.sum(Tensor([264, 94080],"float16"), axis=1, )
paddle.sum(Tensor([264, 94848],"float16"), axis=1, )
paddle.sum(Tensor([268, 54400],"float16"), axis=1, )
paddle.sum(Tensor([268, 82688],"float16"), axis=1, )
paddle.sum(Tensor([268, 92416],"float16"), axis=1, )
paddle.sum(Tensor([272, 60800],"float16"), axis=1, )
paddle.sum(Tensor([272, 74240],"float16"), axis=1, )
paddle.sum(Tensor([28, 102144],"float16"), axis=1, )
paddle.sum(Tensor([28, 60800],"float16"), axis=1, )
paddle.sum(Tensor([28, 63232],"float16"), axis=1, )
paddle.sum(Tensor([28, 64000],"float16"), axis=1, )
paddle.sum(Tensor([28, 67456],"float16"), axis=1, )
paddle.sum(Tensor([28, 73984],"float16"), axis=1, )
paddle.sum(Tensor([28, 78336],"float16"), axis=1, )
paddle.sum(Tensor([28, 82688],"float16"), axis=1, )
paddle.sum(Tensor([28, 84864],"float16"), axis=1, )
paddle.sum(Tensor([28, 86016],"float16"), axis=1, )
paddle.sum(Tensor([28, 89984],"float16"), axis=1, )
paddle.sum(Tensor([28, 91392],"float16"), axis=1, )
paddle.sum(Tensor([28, 92416],"float16"), axis=1, )
paddle.sum(Tensor([28, 94080],"float16"), axis=1, )
paddle.sum(Tensor([28, 96768],"float16"), axis=1, )
paddle.sum(Tensor([28, 97088],"float16"), axis=1, )
paddle.sum(Tensor([28, 97280],"float16"), axis=1, )
paddle.sum(Tensor([28, 99712],"float16"), axis=1, )
paddle.sum(Tensor([280, 60800],"float16"), axis=1, )
paddle.sum(Tensor([280, 82688],"float16"), axis=1, )
paddle.sum(Tensor([288, 73984],"float16"), axis=1, )
paddle.sum(Tensor([292, 60800],"float16"), axis=1, )
paddle.sum(Tensor([292, 91392],"float16"), axis=1, )
paddle.sum(Tensor([296, 60800],"float16"), axis=1, )
paddle.sum(Tensor([304, 67200],"float16"), axis=1, )
paddle.sum(Tensor([308, 92416],"float16"), axis=1, )
paddle.sum(Tensor([32, 102144],"float16"), axis=1, )
paddle.sum(Tensor([32, 102400],"float16"), axis=1, )
paddle.sum(Tensor([32, 104832],"float16"), axis=1, )
paddle.sum(Tensor([32, 107520],"float16"), axis=1, )
paddle.sum(Tensor([32, 112896],"float16"), axis=1, )
paddle.sum(Tensor([32, 54400],"float16"), axis=1, )
paddle.sum(Tensor([32, 60800],"float16"), axis=1, )
paddle.sum(Tensor([32, 62400],"float16"), axis=1, )
paddle.sum(Tensor([32, 63232],"float16"), axis=1, )
paddle.sum(Tensor([32, 67200],"float16"), axis=1, )
paddle.sum(Tensor([32, 68096],"float16"), axis=1, )
paddle.sum(Tensor([32, 73984],"float16"), axis=1, )
paddle.sum(Tensor([32, 76160],"float16"), axis=1, )
paddle.sum(Tensor([32, 77824],"float16"), axis=1, )
paddle.sum(Tensor([32, 78336],"float16"), axis=1, )
paddle.sum(Tensor([32, 82688],"float16"), axis=1, )
paddle.sum(Tensor([32, 84864],"float16"), axis=1, )
paddle.sum(Tensor([32, 85120],"float16"), axis=1, )
paddle.sum(Tensor([32, 87040],"float16"), axis=1, )
paddle.sum(Tensor([32, 89984],"float16"), axis=1, )
paddle.sum(Tensor([32, 91392],"float16"), axis=1, )
paddle.sum(Tensor([32, 92416],"float16"), axis=1, )
paddle.sum(Tensor([32, 94080],"float16"), axis=1, )
paddle.sum(Tensor([32, 94848],"float16"), axis=1, )
paddle.sum(Tensor([32, 97088],"float16"), axis=1, )
paddle.sum(Tensor([32, 97280],"float16"), axis=1, )
paddle.sum(Tensor([32, 99712],"float16"), axis=1, )
paddle.sum(Tensor([320, 91392],"float16"), axis=1, )
paddle.sum(Tensor([332, 102144],"float16"), axis=1, )
paddle.sum(Tensor([332, 60800],"float16"), axis=1, )
paddle.sum(Tensor([36, 102144],"float16"), axis=1, )
paddle.sum(Tensor([36, 54400],"float16"), axis=1, )
paddle.sum(Tensor([36, 56000],"float16"), axis=1, )
paddle.sum(Tensor([36, 58752],"float16"), axis=1, )
paddle.sum(Tensor([36, 59200],"float16"), axis=1, )
paddle.sum(Tensor([36, 60800],"float16"), axis=1, )
paddle.sum(Tensor([36, 62400],"float16"), axis=1, )
paddle.sum(Tensor([36, 63232],"float16"), axis=1, )
paddle.sum(Tensor([36, 64000],"float16"), axis=1, )
paddle.sum(Tensor([36, 67200],"float16"), axis=1, )
paddle.sum(Tensor([36, 70528],"float16"), axis=1, )
paddle.sum(Tensor([36, 72960],"float16"), axis=1, )
paddle.sum(Tensor([36, 73984],"float16"), axis=1, )
paddle.sum(Tensor([36, 77824],"float16"), axis=1, )
paddle.sum(Tensor([36, 78336],"float16"), axis=1, )
paddle.sum(Tensor([36, 80256],"float16"), axis=1, )
paddle.sum(Tensor([36, 80512],"float16"), axis=1, )
paddle.sum(Tensor([36, 82688],"float16"), axis=1, )
paddle.sum(Tensor([36, 84480],"float16"), axis=1, )
paddle.sum(Tensor([36, 84864],"float16"), axis=1, )
paddle.sum(Tensor([36, 85120],"float16"), axis=1, )
paddle.sum(Tensor([36, 86016],"float16"), axis=1, )
paddle.sum(Tensor([36, 87040],"float16"), axis=1, )
paddle.sum(Tensor([36, 87360],"float16"), axis=1, )
paddle.sum(Tensor([36, 87552],"float16"), axis=1, )
paddle.sum(Tensor([36, 89216],"float16"), axis=1, )
paddle.sum(Tensor([36, 89984],"float16"), axis=1, )
paddle.sum(Tensor([36, 91392],"float16"), axis=1, )
paddle.sum(Tensor([36, 92416],"float16"), axis=1, )
paddle.sum(Tensor([36, 94848],"float16"), axis=1, )
paddle.sum(Tensor([36, 97280],"float16"), axis=1, )
paddle.sum(Tensor([36, 99456],"float16"), axis=1, )
paddle.sum(Tensor([360, 67200],"float16"), axis=1, )
paddle.sum(Tensor([364, 102144],"float16"), axis=1, )
paddle.sum(Tensor([372, 102144],"float16"), axis=1, )
paddle.sum(Tensor([4, 102144],"float16"), axis=1, )
paddle.sum(Tensor([4, 112896],"float16"), axis=1, )
paddle.sum(Tensor([4, 67200],"float16"), axis=1, )
paddle.sum(Tensor([4, 73984],"float16"), axis=1, )
paddle.sum(Tensor([4, 80512],"float16"), axis=1, )
paddle.sum(Tensor([4, 82688],"float16"), axis=1, )
paddle.sum(Tensor([4, 84864],"float16"), axis=1, )
paddle.sum(Tensor([4, 87360],"float16"), axis=1, )
paddle.sum(Tensor([4, 92416],"float16"), axis=1, )
paddle.sum(Tensor([4, 97280],"float16"), axis=1, )
paddle.sum(Tensor([40, 102144],"float16"), axis=1, )
paddle.sum(Tensor([40, 104832],"float16"), axis=1, )
paddle.sum(Tensor([40, 112896],"float16"), axis=1, )
paddle.sum(Tensor([40, 54400],"float16"), axis=1, )
paddle.sum(Tensor([40, 56576],"float16"), axis=1, )
paddle.sum(Tensor([40, 59200],"float16"), axis=1, )
paddle.sum(Tensor([40, 60800],"float16"), axis=1, )
paddle.sum(Tensor([40, 63232],"float16"), axis=1, )
paddle.sum(Tensor([40, 63936],"float16"), axis=1, )
paddle.sum(Tensor([40, 64000],"float16"), axis=1, )
paddle.sum(Tensor([40, 67200],"float16"), axis=1, )
paddle.sum(Tensor([40, 67392],"float16"), axis=1, )
paddle.sum(Tensor([40, 69632],"float16"), axis=1, )
paddle.sum(Tensor([40, 70528],"float16"), axis=1, )
paddle.sum(Tensor([40, 73984],"float16"), axis=1, )
paddle.sum(Tensor([40, 76160],"float16"), axis=1, )
paddle.sum(Tensor([40, 78144],"float16"), axis=1, )
paddle.sum(Tensor([40, 78336],"float16"), axis=1, )
paddle.sum(Tensor([40, 78400],"float16"), axis=1, )
paddle.sum(Tensor([40, 80512],"float16"), axis=1, )
paddle.sum(Tensor([40, 82688],"float16"), axis=1, )
paddle.sum(Tensor([40, 84864],"float16"), axis=1, )
paddle.sum(Tensor([40, 85120],"float16"), axis=1, )
paddle.sum(Tensor([40, 86016],"float16"), axis=1, )
paddle.sum(Tensor([40, 87040],"float16"), axis=1, )
paddle.sum(Tensor([40, 89216],"float16"), axis=1, )
paddle.sum(Tensor([40, 89984],"float16"), axis=1, )
paddle.sum(Tensor([40, 91392],"float16"), axis=1, )
paddle.sum(Tensor([40, 92416],"float16"), axis=1, )
paddle.sum(Tensor([40, 94080],"float16"), axis=1, )
paddle.sum(Tensor([40, 94848],"float16"), axis=1, )
paddle.sum(Tensor([40, 97280],"float16"), axis=1, )
paddle.sum(Tensor([40, 99456],"float16"), axis=1, )
paddle.sum(Tensor([40, 99712],"float16"), axis=1, )
paddle.sum(Tensor([4096],"float16"), )
paddle.sum(Tensor([4194304],"float16"), )
paddle.sum(Tensor([44, 102144],"float16"), axis=1, )
paddle.sum(Tensor([44, 54400],"float16"), axis=1, )
paddle.sum(Tensor([44, 60800],"float16"), axis=1, )
paddle.sum(Tensor([44, 63232],"float16"), axis=1, )
paddle.sum(Tensor([44, 64000],"float16"), axis=1, )
paddle.sum(Tensor([44, 67200],"float16"), axis=1, )
paddle.sum(Tensor([44, 73984],"float16"), axis=1, )
paddle.sum(Tensor([44, 75392],"float16"), axis=1, )
paddle.sum(Tensor([44, 78144],"float16"), axis=1, )
paddle.sum(Tensor([44, 80512],"float16"), axis=1, )
paddle.sum(Tensor([44, 82688],"float16"), axis=1, )
paddle.sum(Tensor([44, 84864],"float16"), axis=1, )
paddle.sum(Tensor([44, 91392],"float16"), axis=1, )
paddle.sum(Tensor([44, 92416],"float16"), axis=1, )
paddle.sum(Tensor([44, 94848],"float16"), axis=1, )
paddle.sum(Tensor([44, 97088],"float16"), axis=1, )
paddle.sum(Tensor([44, 99712],"float16"), axis=1, )
paddle.sum(Tensor([48, 102144],"float16"), axis=1, )
paddle.sum(Tensor([48, 104832],"float16"), axis=1, )
paddle.sum(Tensor([48, 112896],"float16"), axis=1, )
paddle.sum(Tensor([48, 54400],"float16"), axis=1, )
paddle.sum(Tensor([48, 57600],"float16"), axis=1, )
paddle.sum(Tensor([48, 60800],"float16"), axis=1, )
paddle.sum(Tensor([48, 62400],"float16"), axis=1, )
paddle.sum(Tensor([48, 63936],"float16"), axis=1, )
paddle.sum(Tensor([48, 64000],"float16"), axis=1, )
paddle.sum(Tensor([48, 65664],"float16"), axis=1, )
paddle.sum(Tensor([48, 67200],"float16"), axis=1, )
paddle.sum(Tensor([48, 68096],"float16"), axis=1, )
paddle.sum(Tensor([48, 69888],"float16"), axis=1, )
paddle.sum(Tensor([48, 70528],"float16"), axis=1, )
paddle.sum(Tensor([48, 73984],"float16"), axis=1, )
paddle.sum(Tensor([48, 75392],"float16"), axis=1, )
paddle.sum(Tensor([48, 76160],"float16"), axis=1, )
paddle.sum(Tensor([48, 80256],"float16"), axis=1, )
paddle.sum(Tensor([48, 80512],"float16"), axis=1, )
paddle.sum(Tensor([48, 82688],"float16"), axis=1, )
paddle.sum(Tensor([48, 83328],"float16"), axis=1, )
paddle.sum(Tensor([48, 84864],"float16"), axis=1, )
paddle.sum(Tensor([48, 85120],"float16"), axis=1, )
paddle.sum(Tensor([48, 86016],"float16"), axis=1, )
paddle.sum(Tensor([48, 87040],"float16"), axis=1, )
paddle.sum(Tensor([48, 87552],"float16"), axis=1, )
paddle.sum(Tensor([48, 88704],"float16"), axis=1, )
paddle.sum(Tensor([48, 89216],"float16"), axis=1, )
paddle.sum(Tensor([48, 89984],"float16"), axis=1, )
paddle.sum(Tensor([48, 91392],"float16"), axis=1, )
paddle.sum(Tensor([48, 91840],"float16"), axis=1, )
paddle.sum(Tensor([48, 92416],"float16"), axis=1, )
paddle.sum(Tensor([48, 94080],"float16"), axis=1, )
paddle.sum(Tensor([48, 97088],"float16"), axis=1, )
paddle.sum(Tensor([48, 97280],"float16"), axis=1, )
paddle.sum(Tensor([48, 99456],"float16"), axis=1, )
paddle.sum(Tensor([48, 99712],"float16"), axis=1, )
paddle.sum(Tensor([500032],"float16"), )
paddle.sum(Tensor([512, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([51511296],"float16"), )
paddle.sum(Tensor([52, 102144],"float16"), axis=1, )
paddle.sum(Tensor([52, 102400],"float16"), axis=1, )
paddle.sum(Tensor([52, 104832],"float16"), axis=1, )
paddle.sum(Tensor([52, 54400],"float16"), axis=1, )
paddle.sum(Tensor([52, 60800],"float16"), axis=1, )
paddle.sum(Tensor([52, 62400],"float16"), axis=1, )
paddle.sum(Tensor([52, 64000],"float16"), axis=1, )
paddle.sum(Tensor([52, 65664],"float16"), axis=1, )
paddle.sum(Tensor([52, 67200],"float16"), axis=1, )
paddle.sum(Tensor([52, 70528],"float16"), axis=1, )
paddle.sum(Tensor([52, 76160],"float16"), axis=1, )
paddle.sum(Tensor([52, 78336],"float16"), axis=1, )
paddle.sum(Tensor([52, 82688],"float16"), axis=1, )
paddle.sum(Tensor([52, 84864],"float16"), axis=1, )
paddle.sum(Tensor([52, 85120],"float16"), axis=1, )
paddle.sum(Tensor([52, 86016],"float16"), axis=1, )
paddle.sum(Tensor([52, 89216],"float16"), axis=1, )
paddle.sum(Tensor([52, 89984],"float16"), axis=1, )
paddle.sum(Tensor([52, 91392],"float16"), axis=1, )
paddle.sum(Tensor([52, 92352],"float16"), axis=1, )
paddle.sum(Tensor([52, 92416],"float16"), axis=1, )
paddle.sum(Tensor([52, 94080],"float16"), axis=1, )
paddle.sum(Tensor([52, 94848],"float16"), axis=1, )
paddle.sum(Tensor([52, 97280],"float16"), axis=1, )
paddle.sum(Tensor([52, 99456],"float16"), axis=1, )
paddle.sum(Tensor([524288],"float16"), )
paddle.sum(Tensor([56, 102144],"float16"), axis=1, )
paddle.sum(Tensor([56, 54400],"float16"), axis=1, )
paddle.sum(Tensor([56, 60800],"float16"), axis=1, )
paddle.sum(Tensor([56, 62400],"float16"), axis=1, )
paddle.sum(Tensor([56, 63936],"float16"), axis=1, )
paddle.sum(Tensor([56, 64000],"float16"), axis=1, )
paddle.sum(Tensor([56, 65664],"float16"), axis=1, )
paddle.sum(Tensor([56, 67200],"float16"), axis=1, )
paddle.sum(Tensor([56, 73984],"float16"), axis=1, )
paddle.sum(Tensor([56, 76032],"float16"), axis=1, )
paddle.sum(Tensor([56, 77824],"float16"), axis=1, )
paddle.sum(Tensor([56, 80256],"float16"), axis=1, )
paddle.sum(Tensor([56, 80512],"float16"), axis=1, )
paddle.sum(Tensor([56, 82688],"float16"), axis=1, )
paddle.sum(Tensor([56, 84480],"float16"), axis=1, )
paddle.sum(Tensor([56, 87360],"float16"), axis=1, )
paddle.sum(Tensor([56, 89984],"float16"), axis=1, )
paddle.sum(Tensor([56, 91392],"float16"), axis=1, )
paddle.sum(Tensor([56, 92416],"float16"), axis=1, )
paddle.sum(Tensor([56, 94080],"float16"), axis=1, )
paddle.sum(Tensor([56, 94848],"float16"), axis=1, )
paddle.sum(Tensor([56, 97088],"float16"), axis=1, )
paddle.sum(Tensor([56, 97280],"float16"), axis=1, )
paddle.sum(Tensor([60, 102144],"float16"), axis=1, )
paddle.sum(Tensor([60, 54400],"float16"), axis=1, )
paddle.sum(Tensor([60, 56576],"float16"), axis=1, )
paddle.sum(Tensor([60, 58752],"float16"), axis=1, )
paddle.sum(Tensor([60, 60800],"float16"), axis=1, )
paddle.sum(Tensor([60, 62400],"float16"), axis=1, )
paddle.sum(Tensor([60, 63232],"float16"), axis=1, )
paddle.sum(Tensor([60, 63936],"float16"), axis=1, )
paddle.sum(Tensor([60, 64000],"float16"), axis=1, )
paddle.sum(Tensor([60, 65600],"float16"), axis=1, )
paddle.sum(Tensor([60, 65664],"float16"), axis=1, )
paddle.sum(Tensor([60, 67200],"float16"), axis=1, )
paddle.sum(Tensor([60, 67456],"float16"), axis=1, )
paddle.sum(Tensor([60, 68224],"float16"), axis=1, )
paddle.sum(Tensor([60, 73984],"float16"), axis=1, )
paddle.sum(Tensor([60, 77824],"float16"), axis=1, )
paddle.sum(Tensor([60, 80512],"float16"), axis=1, )
paddle.sum(Tensor([60, 82688],"float16"), axis=1, )
paddle.sum(Tensor([60, 84864],"float16"), axis=1, )
paddle.sum(Tensor([60, 89984],"float16"), axis=1, )
paddle.sum(Tensor([60, 91392],"float16"), axis=1, )
paddle.sum(Tensor([60, 91840],"float16"), axis=1, )
paddle.sum(Tensor([60, 92416],"float16"), axis=1, )
paddle.sum(Tensor([60, 94080],"float16"), axis=1, )
paddle.sum(Tensor([60, 94848],"float16"), axis=1, )
paddle.sum(Tensor([60, 96768],"float16"), axis=1, )
paddle.sum(Tensor([60, 99712],"float16"), axis=1, )
paddle.sum(Tensor([64, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([64, 102144],"float16"), axis=1, )
paddle.sum(Tensor([64, 26, 512, 1, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 54400],"float16"), axis=1, )
paddle.sum(Tensor([64, 57600],"float16"), axis=1, )
paddle.sum(Tensor([64, 60800],"float16"), axis=1, )
paddle.sum(Tensor([64, 62400],"float16"), axis=1, )
paddle.sum(Tensor([64, 64000],"float16"), axis=1, )
paddle.sum(Tensor([64, 65664],"float16"), axis=1, )
paddle.sum(Tensor([64, 67200],"float16"), axis=1, )
paddle.sum(Tensor([64, 68224],"float16"), axis=1, )
paddle.sum(Tensor([64, 70528],"float16"), axis=1, )
paddle.sum(Tensor([64, 72960],"float16"), axis=1, )
paddle.sum(Tensor([64, 73984],"float16"), axis=1, )
paddle.sum(Tensor([64, 78336],"float16"), axis=1, )
paddle.sum(Tensor([64, 78400],"float16"), axis=1, )
paddle.sum(Tensor([64, 82688],"float16"), axis=1, )
paddle.sum(Tensor([64, 84864],"float16"), axis=1, )
paddle.sum(Tensor([64, 86016],"float16"), axis=1, )
paddle.sum(Tensor([64, 87552],"float16"), axis=1, )
paddle.sum(Tensor([64, 89216],"float16"), axis=1, )
paddle.sum(Tensor([64, 89984],"float16"), axis=1, )
paddle.sum(Tensor([64, 91392],"float16"), axis=1, )
paddle.sum(Tensor([64, 92352],"float16"), axis=1, )
paddle.sum(Tensor([64, 92416],"float16"), axis=1, )
paddle.sum(Tensor([64, 94080],"float16"), axis=1, )
paddle.sum(Tensor([64, 97280],"float16"), axis=1, )
paddle.sum(Tensor([64, 99712],"float16"), axis=1, )
paddle.sum(Tensor([640, 1000],"float16"), axis=-1, )
paddle.sum(Tensor([68, 102144],"float16"), axis=1, )
paddle.sum(Tensor([68, 112896],"float16"), axis=1, )
paddle.sum(Tensor([68, 54400],"float16"), axis=1, )
paddle.sum(Tensor([68, 60800],"float16"), axis=1, )
paddle.sum(Tensor([68, 63232],"float16"), axis=1, )
paddle.sum(Tensor([68, 64000],"float16"), axis=1, )
paddle.sum(Tensor([68, 65600],"float16"), axis=1, )
paddle.sum(Tensor([68, 67200],"float16"), axis=1, )
paddle.sum(Tensor([68, 72960],"float16"), axis=1, )
paddle.sum(Tensor([68, 73984],"float16"), axis=1, )
paddle.sum(Tensor([68, 76160],"float16"), axis=1, )
paddle.sum(Tensor([68, 77824],"float16"), axis=1, )
paddle.sum(Tensor([68, 78336],"float16"), axis=1, )
paddle.sum(Tensor([68, 80256],"float16"), axis=1, )
paddle.sum(Tensor([68, 82688],"float16"), axis=1, )
paddle.sum(Tensor([68, 89216],"float16"), axis=1, )
paddle.sum(Tensor([68, 89984],"float16"), axis=1, )
paddle.sum(Tensor([68, 91392],"float16"), axis=1, )
paddle.sum(Tensor([68, 92352],"float16"), axis=1, )
paddle.sum(Tensor([68, 92416],"float16"), axis=1, )
paddle.sum(Tensor([68, 94080],"float16"), axis=1, )
paddle.sum(Tensor([68, 94848],"float16"), axis=1, )
paddle.sum(Tensor([68, 97280],"float16"), axis=1, )
paddle.sum(Tensor([68, 99712],"float16"), axis=1, )
paddle.sum(Tensor([72, 102144],"float16"), axis=1, )
paddle.sum(Tensor([72, 112896],"float16"), axis=1, )
paddle.sum(Tensor([72, 54400],"float16"), axis=1, )
paddle.sum(Tensor([72, 57600],"float16"), axis=1, )
paddle.sum(Tensor([72, 58752],"float16"), axis=1, )
paddle.sum(Tensor([72, 60800],"float16"), axis=1, )
paddle.sum(Tensor([72, 62400],"float16"), axis=1, )
paddle.sum(Tensor([72, 63936],"float16"), axis=1, )
paddle.sum(Tensor([72, 64000],"float16"), axis=1, )
paddle.sum(Tensor([72, 65600],"float16"), axis=1, )
paddle.sum(Tensor([72, 65664],"float16"), axis=1, )
paddle.sum(Tensor([72, 67200],"float16"), axis=1, )
paddle.sum(Tensor([72, 70528],"float16"), axis=1, )
paddle.sum(Tensor([72, 73984],"float16"), axis=1, )
paddle.sum(Tensor([72, 74240],"float16"), axis=1, )
paddle.sum(Tensor([72, 76160],"float16"), axis=1, )
paddle.sum(Tensor([72, 78400],"float16"), axis=1, )
paddle.sum(Tensor([72, 82688],"float16"), axis=1, )
paddle.sum(Tensor([72, 84864],"float16"), axis=1, )
paddle.sum(Tensor([72, 89984],"float16"), axis=1, )
paddle.sum(Tensor([72, 91392],"float16"), axis=1, )
paddle.sum(Tensor([72, 92416],"float16"), axis=1, )
paddle.sum(Tensor([72, 94080],"float16"), axis=1, )
paddle.sum(Tensor([72, 94848],"float16"), axis=1, )
paddle.sum(Tensor([72, 97280],"float16"), axis=1, )
paddle.sum(Tensor([72, 99712],"float16"), axis=1, )
paddle.sum(Tensor([76, 102144],"float16"), axis=1, )
paddle.sum(Tensor([76, 54400],"float16"), axis=1, )
paddle.sum(Tensor([76, 60800],"float16"), axis=1, )
paddle.sum(Tensor([76, 62400],"float16"), axis=1, )
paddle.sum(Tensor([76, 65664],"float16"), axis=1, )
paddle.sum(Tensor([76, 67200],"float16"), axis=1, )
paddle.sum(Tensor([76, 67392],"float16"), axis=1, )
paddle.sum(Tensor([76, 73984],"float16"), axis=1, )
paddle.sum(Tensor([76, 78336],"float16"), axis=1, )
paddle.sum(Tensor([76, 82688],"float16"), axis=1, )
paddle.sum(Tensor([76, 85120],"float16"), axis=1, )
paddle.sum(Tensor([76, 87552],"float16"), axis=1, )
paddle.sum(Tensor([76, 89216],"float16"), axis=1, )
paddle.sum(Tensor([76, 89984],"float16"), axis=1, )
paddle.sum(Tensor([76, 92416],"float16"), axis=1, )
paddle.sum(Tensor([76, 94080],"float16"), axis=1, )
paddle.sum(Tensor([76, 94848],"float16"), axis=1, )
paddle.sum(Tensor([76, 97280],"float16"), axis=1, )
paddle.sum(Tensor([76, 99712],"float16"), axis=1, )
paddle.sum(Tensor([8, 100, 100],"float16"), )
paddle.sum(Tensor([8, 102144],"float16"), axis=1, )
paddle.sum(Tensor([8, 102400],"float16"), axis=1, )
paddle.sum(Tensor([8, 107520],"float16"), axis=1, )
paddle.sum(Tensor([8, 128, 64, 64],"float16"), name=None, )
paddle.sum(Tensor([8, 16, 32],"float16"), )
paddle.sum(Tensor([8, 256, 64, 64],"float16"), name=None, )
paddle.sum(Tensor([8, 32, 256, 256],"float16"), name=None, )
paddle.sum(Tensor([8, 60800],"float16"), axis=1, )
paddle.sum(Tensor([8, 67200],"float16"), axis=1, )
paddle.sum(Tensor([8, 73984],"float16"), axis=1, )
paddle.sum(Tensor([8, 76160],"float16"), axis=1, )
paddle.sum(Tensor([8, 82688],"float16"), axis=1, )
paddle.sum(Tensor([8, 84864],"float16"), axis=1, )
paddle.sum(Tensor([8, 85120],"float16"), axis=1, )
paddle.sum(Tensor([8, 87040],"float16"), axis=1, )
paddle.sum(Tensor([8, 89216],"float16"), axis=1, )
paddle.sum(Tensor([8, 92416],"float16"), axis=1, )
paddle.sum(Tensor([8, 94080],"float16"), axis=1, )
paddle.sum(Tensor([8, 94848],"float16"), axis=1, )
paddle.sum(Tensor([8, 97088],"float16"), axis=1, )
paddle.sum(Tensor([8, 99712],"float16"), axis=1, )
paddle.sum(Tensor([80, 102144],"float16"), axis=1, )
paddle.sum(Tensor([80, 54400],"float16"), axis=1, )
paddle.sum(Tensor([80, 60800],"float16"), axis=1, )
paddle.sum(Tensor([80, 62400],"float16"), axis=1, )
paddle.sum(Tensor([80, 63232],"float16"), axis=1, )
paddle.sum(Tensor([80, 64000],"float16"), axis=1, )
paddle.sum(Tensor([80, 65664],"float16"), axis=1, )
paddle.sum(Tensor([80, 67200],"float16"), axis=1, )
paddle.sum(Tensor([80, 69888],"float16"), axis=1, )
paddle.sum(Tensor([80, 73984],"float16"), axis=1, )
paddle.sum(Tensor([80, 76160],"float16"), axis=1, )
paddle.sum(Tensor([80, 82688],"float16"), axis=1, )
paddle.sum(Tensor([80, 84864],"float16"), axis=1, )
paddle.sum(Tensor([80, 85120],"float16"), axis=1, )
paddle.sum(Tensor([80, 86016],"float16"), axis=1, )
paddle.sum(Tensor([80, 89984],"float16"), axis=1, )
paddle.sum(Tensor([80, 91392],"float16"), axis=1, )
paddle.sum(Tensor([80, 92352],"float16"), axis=1, )
paddle.sum(Tensor([80, 92416],"float16"), axis=1, )
paddle.sum(Tensor([80, 94080],"float16"), axis=1, )
paddle.sum(Tensor([80, 97088],"float16"), axis=1, )
paddle.sum(Tensor([80, 97280],"float16"), axis=1, )
paddle.sum(Tensor([800],"float16"), )
paddle.sum(Tensor([84, 102144],"float16"), axis=1, )
paddle.sum(Tensor([84, 104832],"float16"), axis=1, )
paddle.sum(Tensor([84, 54400],"float16"), axis=1, )
paddle.sum(Tensor([84, 57600],"float16"), axis=1, )
paddle.sum(Tensor([84, 60800],"float16"), axis=1, )
paddle.sum(Tensor([84, 62400],"float16"), axis=1, )
paddle.sum(Tensor([84, 67200],"float16"), axis=1, )
paddle.sum(Tensor([84, 69888],"float16"), axis=1, )
paddle.sum(Tensor([84, 72960],"float16"), axis=1, )
paddle.sum(Tensor([84, 73984],"float16"), axis=1, )
paddle.sum(Tensor([84, 75392],"float16"), axis=1, )
paddle.sum(Tensor([84, 78336],"float16"), axis=1, )
paddle.sum(Tensor([84, 78400],"float16"), axis=1, )
paddle.sum(Tensor([84, 82688],"float16"), axis=1, )
paddle.sum(Tensor([84, 84480],"float16"), axis=1, )
paddle.sum(Tensor([84, 84864],"float16"), axis=1, )
paddle.sum(Tensor([84, 91392],"float16"), axis=1, )
paddle.sum(Tensor([84, 92416],"float16"), axis=1, )
paddle.sum(Tensor([84, 97280],"float16"), axis=1, )
paddle.sum(Tensor([88, 102144],"float16"), axis=1, )
paddle.sum(Tensor([88, 54400],"float16"), axis=1, )
paddle.sum(Tensor([88, 56000],"float16"), axis=1, )
paddle.sum(Tensor([88, 57600],"float16"), axis=1, )
paddle.sum(Tensor([88, 59200],"float16"), axis=1, )
paddle.sum(Tensor([88, 60800],"float16"), axis=1, )
paddle.sum(Tensor([88, 62400],"float16"), axis=1, )
paddle.sum(Tensor([88, 63232],"float16"), axis=1, )
paddle.sum(Tensor([88, 65664],"float16"), axis=1, )
paddle.sum(Tensor([88, 67200],"float16"), axis=1, )
paddle.sum(Tensor([88, 69632],"float16"), axis=1, )
paddle.sum(Tensor([88, 73984],"float16"), axis=1, )
paddle.sum(Tensor([88, 77824],"float16"), axis=1, )
paddle.sum(Tensor([88, 78400],"float16"), axis=1, )
paddle.sum(Tensor([88, 80512],"float16"), axis=1, )
paddle.sum(Tensor([88, 82688],"float16"), axis=1, )
paddle.sum(Tensor([88, 83328],"float16"), axis=1, )
paddle.sum(Tensor([88, 84480],"float16"), axis=1, )
paddle.sum(Tensor([88, 86016],"float16"), axis=1, )
paddle.sum(Tensor([88, 87040],"float16"), axis=1, )
paddle.sum(Tensor([88, 87552],"float16"), axis=1, )
paddle.sum(Tensor([88, 88704],"float16"), axis=1, )
paddle.sum(Tensor([88, 89216],"float16"), axis=1, )
paddle.sum(Tensor([88, 91392],"float16"), axis=1, )
paddle.sum(Tensor([88, 92416],"float16"), axis=1, )
paddle.sum(Tensor([88, 94080],"float16"), axis=1, )
paddle.sum(Tensor([88, 94848],"float16"), axis=1, )
paddle.sum(Tensor([88, 97280],"float16"), axis=1, )
paddle.sum(Tensor([92, 102144],"float16"), axis=1, )
paddle.sum(Tensor([92, 104832],"float16"), axis=1, )
paddle.sum(Tensor([92, 54400],"float16"), axis=1, )
paddle.sum(Tensor([92, 57600],"float16"), axis=1, )
paddle.sum(Tensor([92, 59200],"float16"), axis=1, )
paddle.sum(Tensor([92, 60800],"float16"), axis=1, )
paddle.sum(Tensor([92, 67200],"float16"), axis=1, )
paddle.sum(Tensor([92, 76160],"float16"), axis=1, )
paddle.sum(Tensor([92, 82688],"float16"), axis=1, )
paddle.sum(Tensor([92, 84864],"float16"), axis=1, )
paddle.sum(Tensor([92, 89216],"float16"), axis=1, )
paddle.sum(Tensor([92, 91392],"float16"), axis=1, )
paddle.sum(Tensor([92, 91840],"float16"), axis=1, )
paddle.sum(Tensor([92, 92416],"float16"), axis=1, )
paddle.sum(Tensor([92, 94848],"float16"), axis=1, )
paddle.sum(Tensor([92, 99712],"float16"), axis=1, )
paddle.sum(Tensor([96, 102144],"float16"), axis=1, )
paddle.sum(Tensor([96, 112896],"float16"), axis=1, )
paddle.sum(Tensor([96, 54400],"float16"), axis=1, )
paddle.sum(Tensor([96, 58752],"float16"), axis=1, )
paddle.sum(Tensor([96, 59200],"float16"), axis=1, )
paddle.sum(Tensor([96, 60800],"float16"), axis=1, )
paddle.sum(Tensor([96, 62400],"float16"), axis=1, )
paddle.sum(Tensor([96, 63232],"float16"), axis=1, )
paddle.sum(Tensor([96, 65664],"float16"), axis=1, )
paddle.sum(Tensor([96, 67200],"float16"), axis=1, )
paddle.sum(Tensor([96, 67456],"float16"), axis=1, )
paddle.sum(Tensor([96, 72960],"float16"), axis=1, )
paddle.sum(Tensor([96, 76160],"float16"), axis=1, )
paddle.sum(Tensor([96, 77824],"float16"), axis=1, )
paddle.sum(Tensor([96, 78336],"float16"), axis=1, )
paddle.sum(Tensor([96, 80256],"float16"), axis=1, )
paddle.sum(Tensor([96, 82688],"float16"), axis=1, )
paddle.sum(Tensor([96, 85120],"float16"), axis=1, )
paddle.sum(Tensor([96, 89984],"float16"), axis=1, )
paddle.sum(Tensor([96, 91392],"float16"), axis=1, )
paddle.sum(Tensor([96, 92416],"float16"), axis=1, )
paddle.sum(Tensor([96, 97280],"float16"), axis=1, )
paddle.take(Tensor([4, 5],"float32"), Tensor([],"int64"), )
paddle.topk(Tensor([1, 1000216],"float32"), 8, axis=1, )
paddle.topk(Tensor([1, 103, 70644],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 108, 21504],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 11, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 113, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 116, 40656],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 119, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 139, 61236],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 14, 44436],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 149, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 15, 75600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 150, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 16, 61236],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 16, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 19, 48384],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 19, 56784],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 215, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 218, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 22, 56784],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 22, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 227, 52500],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 23, 48384],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 24, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 24, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 24, 52500],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 24, 75600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 25, 21504],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 25, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 252, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 255, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 29, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 30, 56784],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 30000],"float32"), k=Tensor([],"int64"), )
paddle.topk(Tensor([1, 303, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 32, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 32000],"float16"), k=Tensor([],"int64"), )
paddle.topk(Tensor([1, 33, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 34, 48384],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 36, 75600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 36828],"float32"), 900, axis=1, )
paddle.topk(Tensor([1, 37, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 40, 70644],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 41, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 43, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 44, 52500],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 45, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 46, 48384],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 47, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 49, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 53, 48384],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 54, 27216],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 54, 75600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 55, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 57, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 57, 40656],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 57, 56784],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 62, 70644],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 63, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 64, 52500],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 65, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 65, 70644],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 67, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 69, 70644],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 7, 56784],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 71, 56784],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 72, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 72, 48384],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 72, 52500],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 75, 48384],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 78, 56784],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 79, 75600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 87, 44436],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 9, 61236],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 93, 61236],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([100, 37632],"float32"), 9408, axis=1, )
paddle.topk(Tensor([10121],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([10709, 405],"float32"), 10, axis=0, )
paddle.topk(Tensor([12, 202572],"float32"), k=1, axis=0, )
paddle.topk(Tensor([12, 294624],"float32"), k=1, axis=0, )
paddle.topk(Tensor([12, 333018],"float32"), k=1, axis=0, )
paddle.topk(Tensor([1269, 15],"float32"), 10, axis=0, )
paddle.topk(Tensor([13, 270096],"float32"), k=1, axis=0, )
paddle.topk(Tensor([13, 333018],"float32"), k=1, axis=0, )
paddle.topk(Tensor([1337, 14],"float32"), 10, axis=0, )
paddle.topk(Tensor([1435],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([1482, 37],"float32"), 10, axis=0, )
paddle.topk(Tensor([14877],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([1488, 13],"float32"), 10, axis=0, )
paddle.topk(Tensor([15, 279279],"float32"), k=1, axis=0, )
paddle.topk(Tensor([15, 295647],"float32"), k=1, axis=0, )
paddle.topk(Tensor([15, 386694],"float32"), k=1, axis=0, )
paddle.topk(Tensor([15050],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([1555],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([16, 12, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 13, 3136],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 13, 7744],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 15, 3600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 15, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 16, 1296],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 16, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 17, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 17, 676],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 18, 4096],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 18, 5776],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 18, 7056],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 19, 5184],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 20, 225],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 21, 784],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 22, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 23, 5184],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 25, 900],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 252195],"float32"), k=1, axis=0, )
paddle.topk(Tensor([16, 26, 576],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 26, 7056],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 26, 7744],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 264978],"float32"), k=1, axis=0, )
paddle.topk(Tensor([16, 272649],"float32"), k=1, axis=0, )
paddle.topk(Tensor([16, 28, 1296],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 28, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 30, 9216],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 31, 5184],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 31, 900],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 317160],"float32"), k=1, axis=0, )
paddle.topk(Tensor([16, 32, 5776],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 32, 9216],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 34, 2304],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 35, 1600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 35, 2116],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 36, 4096],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 37, 1600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 38, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 43, 7056],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 50, 5776],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 52, 2704],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 54, 4624],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 54750],"float32"), k=1, axis=0, )
paddle.topk(Tensor([16, 77, 1936],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 8400],"float32"), 300, axis=1, )
paddle.topk(Tensor([16, 9, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1619, 17],"float32"), 10, axis=0, )
paddle.topk(Tensor([16333],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([1636],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([17, 191835],"float32"), k=1, axis=0, )
paddle.topk(Tensor([17, 269586],"float32"), k=1, axis=0, )
paddle.topk(Tensor([17, 377514],"float32"), k=1, axis=0, )
paddle.topk(Tensor([1755, 9],"float32"), 10, axis=0, )
paddle.topk(Tensor([17630],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([1765],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([1770, 17],"float32"), 10, axis=0, )
paddle.topk(Tensor([18, 294624],"float32"), k=1, axis=0, )
paddle.topk(Tensor([18, 408177],"float32"), k=1, axis=0, )
paddle.topk(Tensor([1851],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([1889, 9],"float32"), 10, axis=0, )
paddle.topk(Tensor([19, 279279],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2, 103, 2541],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 108, 9261],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 112, 11109],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 112, 6804],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 113, 11109],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 114, 6069],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 115, 3024],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 117, 4116],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 13, 2541],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 138, 3024],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 14, 6804],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 168, 9261],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 169, 3024],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 177, 3024],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 179, 6069],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 19, 5376],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 194, 7581],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 201, 12096],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 207, 4725],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 207, 7581],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 24, 9261],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 25, 6804],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 256000],"float32"), k=Tensor([],"int64"), )
paddle.topk(Tensor([2, 26, 10164],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 26, 11109],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 27, 4116],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 275, 6069],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 286, 8400],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 30, 11109],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 31, 3549],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 32, 11109],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 32000],"float32"), k=Tensor([],"int64"), )
paddle.topk(Tensor([2, 33, 12096],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 33, 8400],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 369, 6069],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 37, 9261],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 37632],"float32"), 9408, axis=1, )
paddle.topk(Tensor([2, 38, 4725],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 400, 11109],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 41, 6069],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 43, 11109],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 44, 12096],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 44, 3024],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 45, 12096],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 45, 5376],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 46, 10164],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 46, 5376],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 46, 8400],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 47, 8400],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 50, 11109],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 50, 12096],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 512000],"float32"), 4, axis=1, )
paddle.topk(Tensor([2, 52, 8400],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 53, 6069],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 55, 7581],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 58, 8400],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 65, 10164],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 66, 6804],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 69, 8400],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 71, 3549],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 72, 7581],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 77, 12096],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 90, 6804],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 92, 8400],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 96, 3024],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 97, 10164],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 98, 9261],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([2, 99],"float16"), k=Tensor([],"int64"), )
paddle.topk(Tensor([20, 257796],"float32"), k=1, axis=0, )
paddle.topk(Tensor([20, 340176],"float32"), k=1, axis=0, )
paddle.topk(Tensor([200, 37632],"float32"), 9408, axis=1, )
paddle.topk(Tensor([2040],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2081],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2084],"float32"), 1000, )
paddle.topk(Tensor([2093, 14],"float32"), 10, axis=0, )
paddle.topk(Tensor([21, 78120],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2182],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([22, 260865],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2212],"float32"), 1000, )
paddle.topk(Tensor([2222],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2224],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2249],"float32"), 1000, )
paddle.topk(Tensor([2254],"float32"), 1000, )
paddle.topk(Tensor([2296],"float32"), 1000, )
paddle.topk(Tensor([2298],"float32"), 1000, )
paddle.topk(Tensor([23, 249405],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2320],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([24, 320739],"float32"), k=1, axis=0, )
paddle.topk(Tensor([24, 321759],"float32"), k=1, axis=0, )
paddle.topk(Tensor([24, 340176],"float32"), k=1, axis=0, )
paddle.topk(Tensor([24, 349866],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2413],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2442],"float32"), 1000, )
paddle.topk(Tensor([2451],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2459, 64],"float32"), 10, axis=0, )
paddle.topk(Tensor([2467, 12],"float32"), 10, axis=0, )
paddle.topk(Tensor([2471],"float32"), 1000, )
paddle.topk(Tensor([2499, 6],"float32"), 10, axis=0, )
paddle.topk(Tensor([25, 408177],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2509],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2556],"float32"), 1000, )
paddle.topk(Tensor([2576],"float32"), 1000, )
paddle.topk(Tensor([2577, 17],"float32"), 10, axis=0, )
paddle.topk(Tensor([26, 312324],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2608],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2616, 6],"float32"), 10, axis=0, )
paddle.topk(Tensor([2641],"float32"), 1000, )
paddle.topk(Tensor([2650, 8],"float32"), 10, axis=0, )
paddle.topk(Tensor([2650],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2675],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2677],"float32"), 1000, )
paddle.topk(Tensor([27, 386694],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2701],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2727],"float32"), 1000, )
paddle.topk(Tensor([2781],"float32"), 1000, )
paddle.topk(Tensor([2782],"float32"), 1000, )
paddle.topk(Tensor([28, 330429],"float32"), k=1, axis=0, )
paddle.topk(Tensor([28, 359613],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2845, 11],"float32"), 10, axis=0, )
paddle.topk(Tensor([2884],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2887],"float32"), 1000, )
paddle.topk(Tensor([29, 242991],"float32"), k=1, axis=0, )
paddle.topk(Tensor([29, 286464],"float32"), k=1, axis=0, )
paddle.topk(Tensor([29, 331452],"float32"), k=1, axis=0, )
paddle.topk(Tensor([2956],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([2964],"float32"), 1000, )
paddle.topk(Tensor([3000],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3015],"float32"), 1000, )
paddle.topk(Tensor([3046],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3087],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3089],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3098],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([31, 408177],"float32"), k=1, axis=0, )
paddle.topk(Tensor([31, 56730],"float32"), k=1, axis=0, )
paddle.topk(Tensor([3107],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3111],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3129],"float32"), 1000, )
paddle.topk(Tensor([3135],"float32"), 1000, )
paddle.topk(Tensor([3136],"float32"), 1000, )
paddle.topk(Tensor([3157],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3170],"float32"), 1000, )
paddle.topk(Tensor([32, 310992],"float32"), k=1, axis=0, )
paddle.topk(Tensor([3205, 26],"float32"), 10, axis=0, )
paddle.topk(Tensor([3207],"float32"), 1000, )
paddle.topk(Tensor([3223],"float32"), 1000, )
paddle.topk(Tensor([3225],"float32"), 1000, )
paddle.topk(Tensor([3226],"float32"), 1000, )
paddle.topk(Tensor([3289],"float32"), 1000, )
paddle.topk(Tensor([3296],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3326],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3374],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3391],"float32"), 1000, )
paddle.topk(Tensor([34, 255780],"float32"), k=1, axis=0, )
paddle.topk(Tensor([3437],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3477],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3490],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3513],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3549],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3561],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3733],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3787],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([38, 268560],"float32"), k=1, axis=0, )
paddle.topk(Tensor([3845],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3858],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3882, 22],"float32"), 10, axis=0, )
paddle.topk(Tensor([3891, 2],"float32"), 10, axis=0, )
paddle.topk(Tensor([39, 322272],"float32"), k=1, axis=0, )
paddle.topk(Tensor([3903],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3920],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([3955],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4, 167, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 174, 7744],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 28, 5184],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 30, 289],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 333, 4096],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 39, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 418, 225],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 418, 3600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 465, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 465, 4624],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 78, 7056],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 80, 576],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([4, 8400],"float32"), 300, axis=1, )
paddle.topk(Tensor([4007],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4010],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4040],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4047],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4120],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4151],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4154],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4167],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4204],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4249],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4266],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4446],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4450],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4524],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4532],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4549],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4569],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4625],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4629],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4689],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4738],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4774],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([4780, 11],"float32"), 10, axis=0, )
paddle.topk(Tensor([48, 365211],"float32"), k=1, axis=0, )
paddle.topk(Tensor([49, 369303],"float32"), k=1, axis=0, )
paddle.topk(Tensor([4959],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([5, 12000],"float32"), k=Tensor([],"int64"), )
paddle.topk(Tensor([5, 257796],"float32"), k=1, axis=0, )
paddle.topk(Tensor([5112],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([5685, 14],"float32"), 10, axis=0, )
paddle.topk(Tensor([5736],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([58086],"float32"), 5742, )
paddle.topk(Tensor([6, 256000],"float32"), k=Tensor([],"int64"), )
paddle.topk(Tensor([6, 32000],"float32"), k=Tensor([],"int64"), )
paddle.topk(Tensor([6, 343728],"float32"), k=1, axis=0, )
paddle.topk(Tensor([6, 99],"float16"), k=Tensor([],"int64"), )
paddle.topk(Tensor([6002],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([64, 15, 1296],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 17, 1936],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 18, 1936],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 20, 1296],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 20, 2304],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 23, 2304],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 24, 1936],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 26, 1296],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 29, 2304],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 30, 1024],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 30, 1296],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 33, 1024],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 34, 1600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 34, 576],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 35, 1024],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 35, 256],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 36, 1024],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 37, 1600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 39, 121],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 41, 1936],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 42, 256],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 42, 64],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 46, 576],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 48, 324],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 48, 81],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([64, 52, 484],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([692, 8],"float32"), 10, axis=0, )
paddle.topk(Tensor([6936],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([7, 241221],"float32"), k=1, axis=0, )
paddle.topk(Tensor([7, 8000],"float32"), 799, )
paddle.topk(Tensor([7046],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([7094],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([7441],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([7449],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([7695],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([784000],"float32"), 392001, axis=0, largest=False, )
paddle.topk(Tensor([7993],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([8, 11, 1444],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 11, 1764],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 12, 4096],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 14, 2304],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 14, 7056],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 15, 7744],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 16, 5776],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 16, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 16, 9216],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 18, 2304],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 18, 5776],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 18, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 22, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 22, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 22, 9216],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 234804],"float32"), k=1, axis=0, )
paddle.topk(Tensor([8, 25, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 26, 1936],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 26, 5184],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 26, 9216],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 28, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 30, 3600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 31, 169],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 31, 2704],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 31, 784],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 32, 900],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 33, 1024],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 33, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 35, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 36, 9216],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 43, 3136],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 44, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 46, 361],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 53, 5776],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8, 9, 7744],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([8122],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([8160],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([834, 22],"float32"), 10, axis=0, )
paddle.topk(Tensor([8589],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([8679],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([8717],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([8846],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([8910],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([9451],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.topk(Tensor([969, 12],"float32"), 10, axis=0, )
paddle.topk(Tensor([9969],"float32"), k=Tensor([],"int64"), largest=False, )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.vander(Tensor([5],"complex128"), 2, False, )
paddle.vander(Tensor([5],"complex128"), 3, False, )
paddle.vander(Tensor([5],"complex128"), 4, False, )
paddle.vander(Tensor([5],"float32"), 2, False, )
paddle.vander(Tensor([5],"float32"), 3, False, )
paddle.vander(Tensor([5],"float32"), 4, False, )
paddle.vander(Tensor([5],"float32"), 5, False, )
paddle.vander(Tensor([5],"float32"), 6, False, )
paddle.vander(Tensor([5],"float32"), 7, False, )
paddle.vander(Tensor([5],"float32"), 8, False, )
paddle.vander(Tensor([5],"float32"), None, False, )
paddle.vision.ops.deform_conv2d(x=Tensor([64, 64, 64, 64],"float32"), offset=Tensor([64, 144, 64, 64],"float32"), weight=Tensor([64, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([64, 72, 64, 64],"float32"), )
