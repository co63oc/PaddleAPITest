paddle.Tensor.__getitem__(Tensor([6, 5, 4],"int64"), list[list[0,2,0,1,3,],list[0,0,1,2,0,],], )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 3],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2, 5],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([4],"float32"), )
paddle.Tensor.logit(x=Tensor([4],"float64"), )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=tuple(), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=True, )
paddle.argsort(Tensor([1, 30000],"float32"), descending=True, )
paddle.argsort(Tensor([1, 32000],"float16"), descending=True, )
paddle.argsort(Tensor([1, 50304],"float32"), descending=True, )
paddle.copysign(Tensor([12, 20, 2],"int8"), Tensor([12, 20, 2],"int8"), )
paddle.cumsum(Tensor([1, 32000],"float16"), axis=-1, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([20, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([4, 4],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 3],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.linalg.norm(Tensor([16, 16],"float32"), 2.0, )
paddle.linalg.norm(x=Tensor([3, 4],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 4],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.pinv(Tensor([3, 5, 5],"complex128"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 5],"complex64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 5],"float32"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 5],"float64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([5, 5],"complex128"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([5, 5],"float64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(x=Tensor([2, 2],"complex128"), hermitian=True, )
paddle.linalg.pinv(x=Tensor([2, 2],"complex64"), hermitian=True, )
paddle.linalg.pinv(x=Tensor([2, 2],"float32"), hermitian=True, )
paddle.linalg.pinv(x=Tensor([2, 2],"float64"), hermitian=True, )
paddle.linalg.pinv(x=Tensor([4, 2, 2],"float64"), hermitian=True, )
paddle.linalg.svd_lowrank(Tensor([1, 100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([1, 100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([1, 100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([1, 17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([1, 17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([1, 40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([1, 40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([3, 100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([3, 100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([3, 100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([3, 17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([3, 17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([3, 4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([3, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([3, 40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([3, 40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([3, 40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([5, 5],"float64"), None, )
paddle.logit(x=Tensor([4, 2],"float64"), )
paddle.logit(x=Tensor([4, 3, 2, 5],"float64"), )
paddle.logit(x=Tensor([4, 3, 2],"float64"), )
paddle.logit(x=Tensor([4],"float32"), )
paddle.logit(x=Tensor([4],"float64"), )
paddle.nextafter(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([23, 12, 1],"float32"), Tensor([23, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([5, 1, 3],"float64"), Tensor([1, 3],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.gumbel_softmax(Tensor([2, 3, 4, 5],"float32"), hard=True, )
paddle.nn.functional.gumbel_softmax(Tensor([20, 10],"float64"), hard=False, )
paddle.nn.functional.gumbel_softmax(Tensor([20, 10],"float64"), hard=True, )
paddle.nn.functional.gumbel_softmax(x=Tensor([2, 3, 4],"float64"), )
paddle.nn.functional.gumbel_softmax(x=Tensor([2, 3, 4],"float64"), temperature=4.0, )
paddle.nn.functional.gumbel_softmax(x=Tensor([2, 3, 4],"float64"), temperature=4.0, hard=True, )
paddle.nn.functional.gumbel_softmax(x=Tensor([3, 4, 5],"float64"), temperature=4.0, hard=True, axis=0, )
paddle.nn.functional.gumbel_softmax(x=Tensor([3, 4],"float64"), )
paddle.nn.functional.gumbel_softmax(x=Tensor([4],"float32"), )
paddle.nn.functional.gumbel_softmax(x=Tensor([4],"float64"), )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4],"float64"), lower=0.05, upper=0.25, training=True, )
paddle.reciprocal(Tensor([16, 1, 640, 640],"float16"), )
paddle.reciprocal(Tensor([4, 1, 640, 640],"float16"), )
paddle.reciprocal(Tensor([8, 1, 640, 640],"float16"), )
paddle.reciprocal(Tensor([8, 1, 960, 960],"float16"), )
paddle.std(Tensor([],"float32"), )
paddle.std(Tensor([],"float32"), list[], )
paddle.unique_consecutive(x=Tensor([4, 1],"float32"), return_inverse=True, )
paddle.unique_consecutive(x=Tensor([6, 1],"float32"), return_inverse=True, return_counts=True, )
paddle.var(Tensor([],"float32"), )
paddle.var(Tensor([],"float32"), list[], )
