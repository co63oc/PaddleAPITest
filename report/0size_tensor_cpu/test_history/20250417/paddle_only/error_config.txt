paddle.Tensor.__matmul__(Tensor([1, 1, 1024],"float32"), Tensor([0, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 1280],"float32"), Tensor([0, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 20, 2, 16],"float32"), Tensor([0, 16],"float16"), )
paddle.Tensor.__matmul__(Tensor([1, 20, 2, 16],"float32"), Tensor([0, 16],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 768],"float32"), Tensor([0, 1000],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 768],"float32"), Tensor([0, 768],"float32"), )
paddle.Tensor.__rmatmul__(Tensor([0, 5],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__setitem__(Tensor([0, 5, 4, 3],"bool"), list[list[2,3,4,],list[1,2,5,],], 100, )
paddle.Tensor.__setitem__(Tensor([0, 5, 4, 3],"complex128"), list[list[2,3,4,],list[1,2,5,],], 100, )
paddle.Tensor.split(Tensor([0, 1, 64],"float32"), list[32,16,16,], axis=-1, )
paddle.Tensor.split(Tensor([0, 1, 96],"float32"), list[64,16,16,], axis=-1, )
paddle.Tensor.split(Tensor([0, 10164, 8, 32],"float32"), list[7744,1936,484,], axis=1, )
paddle.Tensor.split(Tensor([0, 101],"float32"), list[1,2,2,5,8,22,5,5,18,3,9,4,1,2,11,3,], -1, )
paddle.Tensor.split(Tensor([0, 1100, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([0, 11109, 8, 32],"float32"), list[8464,2116,529,], axis=1, )
paddle.Tensor.split(Tensor([0, 11645, 8, 32],"float16"), list[8740,2204,551,150,], axis=1, )
paddle.Tensor.split(Tensor([0, 11645, 8, 32],"float32"), list[8740,2204,551,150,], axis=1, )
paddle.Tensor.split(Tensor([0, 12096, 8, 32],"float32"), list[9216,2304,576,], axis=1, )
paddle.Tensor.split(Tensor([0, 13, 2],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([0, 16],"float32"), list[12,4,], -1, )
paddle.Tensor.split(Tensor([0, 17, 3072],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([0, 17, 768],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([0, 18, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([0, 192, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([0, 196, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([0, 1],"float32"), list[1,], -1, )
paddle.Tensor.split(Tensor([0, 2, 1024],"float16"), list[512,256,256,], axis=-1, )
paddle.Tensor.split(Tensor([0, 2, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([0, 25, 4, 2],"float32"), 4, axis=2, )
paddle.Tensor.split(Tensor([0, 2],"float32"), list[1,1,], -1, )
paddle.Tensor.split(Tensor([0, 32, 2],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([0, 36828, 8, 32],"float32"), list[27648,6912,1728,432,108,], axis=1, )
paddle.Tensor.split(Tensor([0, 38367, 8, 32],"float32"), list[28800,7200,1800,450,117,], axis=1, )
paddle.Tensor.split(Tensor([0, 4, 1024],"float16"), list[512,256,256,], axis=-1, )
paddle.Tensor.split(Tensor([0, 4, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([0, 4725, 8, 32],"float32"), list[3600,900,225,], axis=1, )
paddle.Tensor.split(Tensor([0, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([0, 4],"float32"), list[1,1,1,1,], -1, )
paddle.Tensor.split(Tensor([0, 4],"float32"), list[1,3,], -1, )
paddle.Tensor.split(Tensor([0, 4],"float32"), list[2,2,], -1, )
paddle.Tensor.split(Tensor([0, 5376, 8, 32],"float32"), list[4096,1024,256,], axis=1, )
paddle.Tensor.split(Tensor([0, 5],"float32"), list[5,], -1, )
paddle.Tensor.split(Tensor([0, 6069, 8, 32],"float32"), list[4624,1156,289,], axis=1, )
paddle.Tensor.split(Tensor([0, 6380, 8, 32],"float32"), list[4800,1200,300,80,], axis=1, )
paddle.Tensor.split(Tensor([0, 6804, 8, 32],"float32"), list[5184,1296,324,], axis=1, )
paddle.Tensor.split(Tensor([0, 7],"float32"), list[7,], -1, )
paddle.Tensor.split(Tensor([0, 8400, 8, 32],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([0, 8550, 8, 32],"float32"), list[6408,1620,414,108,], axis=1, )
paddle.Tensor.split(Tensor([0, 8],"float32"), list[1,1,1,1,1,1,1,1,], -1, )
paddle.Tensor.split(Tensor([0, 8],"float32"), list[8,], -1, )
paddle.Tensor.split(Tensor([1, 0, 1024],"float16"), list[512,256,256,], axis=-1, )
paddle.Tensor.split(Tensor([1, 0, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([1, 0, 4, 2],"float32"), 4, axis=2, )
paddle.Tensor.split(Tensor([1, 0, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 0, 64],"float32"), list[32,16,16,], axis=-1, )
paddle.Tensor.split(Tensor([1, 0, 8, 32],"float32"), list[27648,6912,1728,432,108,], axis=1, )
paddle.Tensor.split(Tensor([1, 0, 8, 32],"float32"), list[28800,7200,1800,450,117,], axis=1, )
paddle.Tensor.split(Tensor([1, 0, 8, 32],"float32"), list[4800,1200,300,80,], axis=1, )
paddle.Tensor.split(Tensor([1, 0, 8, 32],"float32"), list[5184,1296,324,], axis=1, )
paddle.Tensor.split(Tensor([1, 0, 8, 32],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([1, 0, 8, 32],"float32"), list[6408,1620,414,108,], axis=1, )
paddle.Tensor.split(Tensor([1, 0, 8, 32],"float32"), list[7744,1936,484,], axis=1, )
paddle.Tensor.split(Tensor([1, 0, 8, 32],"float32"), list[8464,2116,529,], axis=1, )
paddle.Tensor.split(Tensor([1, 0, 8, 32],"float32"), list[9216,2304,576,], axis=1, )
paddle.Tensor.split(Tensor([1, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 1, 0],"float32"), list[32,16,16,], axis=-1, )
paddle.Tensor.split(Tensor([1, 10164, 0, 32],"float32"), list[7744,1936,484,], axis=1, )
paddle.Tensor.split(Tensor([1, 10164, 8, 0],"float32"), list[7744,1936,484,], axis=1, )
paddle.Tensor.split(Tensor([1, 1100, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 11109, 0, 32],"float32"), list[8464,2116,529,], axis=1, )
paddle.Tensor.split(Tensor([1, 11109, 8, 0],"float32"), list[8464,2116,529,], axis=1, )
paddle.Tensor.split(Tensor([1, 12096, 0, 32],"float32"), list[9216,2304,576,], axis=1, )
paddle.Tensor.split(Tensor([1, 12096, 8, 0],"float32"), list[9216,2304,576,], axis=1, )
paddle.Tensor.split(Tensor([1, 18, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 192, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 196, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 2, 0],"float16"), list[512,256,256,], axis=-1, )
paddle.Tensor.split(Tensor([1, 2, 0],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([1, 25, 0, 2],"float32"), 4, axis=2, )
paddle.Tensor.split(Tensor([1, 25, 4, 0],"float32"), 4, axis=2, )
paddle.Tensor.split(Tensor([1, 36828, 0, 32],"float32"), list[27648,6912,1728,432,108,], axis=1, )
paddle.Tensor.split(Tensor([1, 36828, 8, 0],"float32"), list[27648,6912,1728,432,108,], axis=1, )
paddle.Tensor.split(Tensor([1, 38367, 0, 32],"float32"), list[28800,7200,1800,450,117,], axis=1, )
paddle.Tensor.split(Tensor([1, 38367, 8, 0],"float32"), list[28800,7200,1800,450,117,], axis=1, )
paddle.Tensor.split(Tensor([1, 4, 0],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([1, 6380, 0, 32],"float32"), list[4800,1200,300,80,], axis=1, )
paddle.Tensor.split(Tensor([1, 6380, 8, 0],"float32"), list[4800,1200,300,80,], axis=1, )
paddle.Tensor.split(Tensor([1, 6804, 0, 32],"float32"), list[5184,1296,324,], axis=1, )
paddle.Tensor.split(Tensor([1, 6804, 8, 0],"float32"), list[5184,1296,324,], axis=1, )
paddle.Tensor.split(Tensor([1, 8400, 0, 32],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([1, 8400, 8, 0],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([1, 8550, 0, 32],"float32"), list[6408,1620,414,108,], axis=1, )
paddle.Tensor.split(Tensor([1, 8550, 8, 0],"float32"), list[6408,1620,414,108,], axis=1, )
paddle.Tensor.split(Tensor([100, 0],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([100, 0],"float32"), list[1,1,1,1,], -1, )
paddle.Tensor.split(Tensor([101, 0],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([13, 0, 2],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([13, 13, 0],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([13, 32, 0],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([134, 0, 1024],"float16"), list[512,256,256,], axis=-1, )
paddle.Tensor.split(Tensor([134, 4, 0],"float16"), list[512,256,256,], axis=-1, )
paddle.Tensor.split(Tensor([16, 0, 3072],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([16, 0, 768],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([16, 0, 8, 32],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([16, 17, 0],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([16, 8400, 0, 32],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([16, 8400, 8, 0],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([2, 0, 8, 32],"float16"), list[8740,2204,551,150,], axis=1, )
paddle.Tensor.split(Tensor([2, 0, 8, 32],"float32"), list[3600,900,225,], axis=1, )
paddle.Tensor.split(Tensor([2, 0, 8, 32],"float32"), list[4624,1156,289,], axis=1, )
paddle.Tensor.split(Tensor([2, 0, 8, 32],"float32"), list[8740,2204,551,150,], axis=1, )
paddle.Tensor.split(Tensor([2, 11645, 0, 32],"float16"), list[8740,2204,551,150,], axis=1, )
paddle.Tensor.split(Tensor([2, 11645, 0, 32],"float32"), list[8740,2204,551,150,], axis=1, )
paddle.Tensor.split(Tensor([2, 11645, 8, 0],"float16"), list[8740,2204,551,150,], axis=1, )
paddle.Tensor.split(Tensor([2, 11645, 8, 0],"float32"), list[8740,2204,551,150,], axis=1, )
paddle.Tensor.split(Tensor([2, 4725, 0, 32],"float32"), list[3600,900,225,], axis=1, )
paddle.Tensor.split(Tensor([2, 4725, 8, 0],"float32"), list[3600,900,225,], axis=1, )
paddle.Tensor.split(Tensor([2, 6069, 0, 32],"float32"), list[4624,1156,289,], axis=1, )
paddle.Tensor.split(Tensor([2, 6069, 8, 0],"float32"), list[4624,1156,289,], axis=1, )
paddle.Tensor.split(Tensor([20, 0, 64],"float32"), list[32,16,16,], axis=-1, )
paddle.Tensor.split(Tensor([20, 1, 0],"float32"), list[32,16,16,], axis=-1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[1,1,1,1,1,1,1,1,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[1,1,1,1,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[1,1,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[1,2,2,5,8,22,5,5,18,3,9,4,1,2,11,3,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[1,3,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[1,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[12,4,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[2,2,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[5,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[7,], -1, )
paddle.Tensor.split(Tensor([300, 0],"float32"), list[8,], -1, )
paddle.Tensor.split(Tensor([4, 0, 8, 32],"float32"), list[4096,1024,256,], axis=1, )
paddle.Tensor.split(Tensor([4, 5376, 0, 32],"float32"), list[4096,1024,256,], axis=1, )
paddle.Tensor.split(Tensor([4, 5376, 8, 0],"float32"), list[4096,1024,256,], axis=1, )
paddle.Tensor.split(Tensor([58, 0, 96],"float32"), list[64,16,16,], axis=-1, )
paddle.Tensor.split(Tensor([58, 1, 0],"float32"), list[64,16,16,], axis=-1, )
paddle.Tensor.split(Tensor([8, 0, 8, 32],"float32"), list[4624,1156,289,], axis=1, )
paddle.Tensor.split(Tensor([8, 6069, 0, 32],"float32"), list[4624,1156,289,], axis=1, )
paddle.Tensor.split(Tensor([8, 6069, 8, 0],"float32"), list[4624,1156,289,], axis=1, )
paddle.Tensor.split(Tensor([900, 0],"float32"), list[2,2,], -1, )
paddle.autograd.hessian(Tensor([5, 1],"float32"), Tensor([5, 0],"float32"), batch_axis=0, )
paddle.cummax(Tensor([0, 100],"float32"), )
paddle.cummax(Tensor([0, 100],"float32"), axis=-1, )
paddle.cummax(Tensor([0, 100],"float32"), axis=-2, )
paddle.cummax(Tensor([0, 100],"float32"), axis=-2, dtype="int32", )
paddle.cummax(Tensor([0, 100],"float32"), axis=0, )
paddle.cummax(Tensor([100, 0],"float32"), )
paddle.cummax(Tensor([100, 0],"float32"), axis=-1, )
paddle.cummax(Tensor([100, 0],"float32"), axis=-2, )
paddle.cummax(Tensor([100, 0],"float32"), axis=-2, dtype="int32", )
paddle.cummax(Tensor([100, 0],"float32"), axis=0, )
paddle.cummax(Tensor([100, 0],"int32"), axis=0, )
paddle.cummin(Tensor([0, 100],"float32"), )
paddle.cummin(Tensor([0, 100],"float32"), axis=-1, )
paddle.cummin(Tensor([0, 100],"float32"), axis=-2, )
paddle.cummin(Tensor([0, 100],"float32"), axis=-2, dtype="int32", )
paddle.cummin(Tensor([0, 100],"float32"), axis=0, )
paddle.cummin(Tensor([100, 0],"float32"), )
paddle.cummin(Tensor([100, 0],"float32"), axis=-1, )
paddle.cummin(Tensor([100, 0],"float32"), axis=-2, )
paddle.cummin(Tensor([100, 0],"float32"), axis=-2, dtype="int32", )
paddle.cummin(Tensor([100, 0],"float32"), axis=0, )
paddle.cummin(Tensor([100, 0],"int32"), axis=0, )
paddle.dsplit(Tensor([0, 2, 6],"float16"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"float16"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"float16"), 3, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([0, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([40, 0],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([0, 40],"float32"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([40, 0],"float32"), None, True, True, )
paddle.index_fill(Tensor([0],"int64"), Tensor([28],"int64"), 0, 5, )
paddle.index_fill(Tensor([0],"int64"), Tensor([30],"int64"), 0, 7, )
paddle.index_fill(Tensor([0],"int64"), Tensor([38],"int64"), 0, 6, )
paddle.index_fill(Tensor([0],"int64"), Tensor([4],"int64"), 0, 2, )
paddle.index_fill(Tensor([0],"int64"), Tensor([5],"int64"), 0, 2, )
paddle.index_fill(Tensor([20, 0],"float32"), Tensor([2],"int64"), 1, -1, )
paddle.linalg.triangular_solve(Tensor([0, 2, 2],"float32"), Tensor([0, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1, 2, 2],"float32"), Tensor([0, 2, 1],"float32"), upper=False, )
paddle.matmul(Tensor([1, 1, 1024],"float32"), Tensor([50304, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 32],"float32"), Tensor([0, 200],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 32],"float32"), Tensor([0, 99],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 32],"float32"), Tensor([100, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 100, 32],"float32"), Tensor([0, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([1, 10],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([0],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([1, 18],"float64"), Tensor([0, 18],"float64"), )
paddle.matmul(Tensor([1, 1],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([12, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([16, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 3, 5, 6],"float32"), Tensor([0, 8],"float32"), )
paddle.matmul(Tensor([10],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([10],"float32"), Tensor([0],"float32"), True, True, )
paddle.matmul(Tensor([12, 32],"float32"), Tensor([0, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([18, 6],"float32"), Tensor([18, 0],"float32"), transpose_x=False, transpose_y=True, )
paddle.matmul(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([2, 1, 100],"complex128"), Tensor([0],"complex128"), )
paddle.matmul(Tensor([2, 1, 100],"complex64"), Tensor([0],"complex64"), )
paddle.matmul(Tensor([2, 1],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([3, 0],"float32"), False, True, )
paddle.matmul(Tensor([3, 12],"float32"), Tensor([0],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.matmul(x=Tensor([10, 16],"float32"), y=Tensor([10, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 5, 2],"float64"), y=Tensor([0],"float64"), )
paddle.matmul(x=Tensor([10, 5],"float64"), y=Tensor([0],"float64"), )
paddle.matmul(x=Tensor([104, 28, 512],"float32"), y=Tensor([33712, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 29, 512],"float32"), y=Tensor([33712, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10],"float32"), y=Tensor([0],"float32"), )
paddle.matmul(x=Tensor([10],"float64"), y=Tensor([0],"float64"), )
paddle.matmul(x=Tensor([128, 512],"float32"), y=Tensor([10000, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([4, 20],"float32"), y=Tensor([0, 40],"float32"), )
paddle.matmul(x=Tensor([8, 16],"float32"), y=Tensor([0, 32],"float32"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([0, 5],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([0],"float64"), )
paddle.mm(input=Tensor([7],"float64"), mat2=Tensor([0],"float64"), )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float32"), running_mean=Tensor([0],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([0],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.conv2d(Tensor([1, 1, 0, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 128],"float32"), Tensor([1024, 256, 0, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 256],"float32"), Tensor([1024, 128, 0, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 256],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 0],"float32"), Tensor([1024, 256, 3, 0],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 0],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 256, 0, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 256, 3, 0],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 0],"float32"), Tensor([1024, 128, 3, 0],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 0],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([1024, 128, 0, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([1024, 128, 3, 0],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 20],"float32"), Tensor([128, 128, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 256],"float32"), Tensor([128, 128, 0, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 32],"float32"), Tensor([128, 128, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 0],"float32"), Tensor([128, 128, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 0],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([128, 128, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([128, 128, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([128, 128, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([128, 128, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 0],"float32"), Tensor([128, 128, 3, 0],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 0],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([128, 128, 0, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([128, 128, 3, 0],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 128],"float32"), Tensor([2048, 256, 0, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 16],"float32"), Tensor([2048, 512, 0, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 0],"float32"), Tensor([2048, 256, 3, 0],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 0],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 256, 0, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 0],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 0],"float32"), Tensor([2048, 512, 3, 0],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 0],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 512, 0, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 512, 3, 0],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 256, 0, 128],"float32"), Tensor([256, 256, 0, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 0, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 0],"float32"), Tensor([256, 256, 3, 0],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 0],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 256, 0, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 256, 3, 0],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([2, 24, 0, 8],"float32"), Tensor([24, 24, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 0, 8],"float32"), Tensor([24, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 0],"float32"), Tensor([24, 24, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 0],"float32"), Tensor([24, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 8],"float32"), Tensor([24, 24, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 8],"float32"), Tensor([24, 24, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 0, 4],"float32"), Tensor([48, 48, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 0, 4],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 0],"float32"), Tensor([48, 48, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 0],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 4],"float32"), Tensor([48, 48, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 4],"float32"), Tensor([48, 48, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 0, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 0],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 0, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 0, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 0],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([8, 128, 0, 256],"float32"), Tensor([128, 128, 0, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 0, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 0],"float32"), Tensor([128, 128, 3, 0],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 0],"float32"), Tensor([128, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 256],"float32"), Tensor([128, 128, 0, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 256],"float32"), Tensor([128, 128, 3, 0],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 0, 128],"float32"), Tensor([256, 256, 0, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 0, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 0],"float32"), Tensor([256, 256, 3, 0],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 0],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 128],"float32"), Tensor([256, 256, 0, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 128],"float32"), Tensor([256, 256, 3, 0],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.ctc_loss(Tensor([40, 128, 6625],"float32"), Tensor([128, 25],"int32"), Tensor([0],"int64"), Tensor([128],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([40, 128, 6625],"float32"), Tensor([128, 25],"int32"), Tensor([128],"int64"), Tensor([0],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.linear(Tensor([1, 2, 2],"float32"), Tensor([0, 2],"float32"), bias=None, )
paddle.nn.functional.linear(Tensor([1, 2, 2],"float32"), Tensor([0, 4],"float32"), bias=Tensor([4],"float32"), )
paddle.nn.functional.linear(Tensor([1, 2, 4],"float32"), Tensor([0, 2],"float32"), bias=Tensor([2],"float32"), )
paddle.nn.functional.linear(Tensor([1, 512],"float32"), Tensor([0, 128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.linear(Tensor([1, 512],"float32"), Tensor([0, 256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.linear(Tensor([1, 512],"float32"), Tensor([0, 512],"float32"), )
paddle.nn.functional.linear(Tensor([10, 64],"float32"), Tensor([0, 60],"float32"), None, )
paddle.nn.functional.linear(Tensor([100, 17],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.linear(Tensor([2, 64],"float32"), Tensor([0, 60],"float32"), None, )
paddle.nn.functional.linear(Tensor([3, 1, 2],"float32"), Tensor([0, 2],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.linear(Tensor([3, 2],"float32"), Tensor([0, 4],"float32"), )
paddle.nn.functional.linear(Tensor([3, 2],"float32"), Tensor([0, 4],"float32"), Tensor([4],"float32"), )
paddle.nn.functional.linear(Tensor([3, 2],"float64"), Tensor([0, 4],"float64"), Tensor([4],"float64"), )
paddle.nn.functional.linear(Tensor([8, 128, 256],"float32"), weight=Tensor([0, 256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.linear(x=Tensor([1, 1, 1000],"float32"), weight=Tensor([0, 64],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 1024],"float32"), weight=Tensor([0, 1024],"float32"), bias=Tensor([1024],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 1024],"float32"), weight=Tensor([0, 256],"float32"), bias=Tensor([256],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024, 1024],"float32"), weight=Tensor([0, 1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.linear(x=Tensor([1, 1024],"float32"), weight=Tensor([0, 1000],"float32"), bias=Tensor([1000],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024],"float32"), weight=Tensor([0, 50],"float32"), bias=Tensor([50],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 10],"float32"), weight=Tensor([0, 10],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 11, 256],"float32"), weight=Tensor([0, 256],"float32"), bias=Tensor([256],"float32"), )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 14, 1536],"float32"), weight=Tensor([0, 384],"float32"), bias=Tensor([384],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 14, 768],"float32"), weight=Tensor([0, 384],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 3, 3, 5],"float32"), weight=Tensor([0, 1],"float32"), bias=Tensor([1],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 6, 4, 4],"float32"), weight=Tensor([0, 4],"float32"), bias=Tensor([4],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([10],"float32"), weight=Tensor([0, 10],"float32"), bias=Tensor([10],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([10],"float32"), weight=Tensor([0, 1],"float32"), bias=Tensor([1],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 1, 1, 7, 7, 512],"float32"), weight=Tensor([0, 1536],"float32"), bias=Tensor([1536],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 16],"float32"), weight=Tensor([0, 8],"float32"), bias=None, )
paddle.nn.functional.linear(x=Tensor([13, 2, 7, 32],"float32"), weight=Tensor([0, 99],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([13, 56, 56, 32],"float32"), weight=Tensor([0, 4],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([13, 56, 56, 64],"float32"), weight=Tensor([0, 4],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([14336],"float32"), weight=Tensor([0, 64],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([28, 16],"float32"), weight=Tensor([0, 8],"float32"), )
paddle.nn.functional.linear(x=Tensor([28, 8],"float32"), weight=Tensor([0, 5],"float32"), )
paddle.nn.functional.linear(x=Tensor([4, 8],"float32"), weight=Tensor([0, 3],"float32"), bias=None, )
paddle.nn.functional.linear(x=Tensor([4, 8],"float32"), weight=Tensor([0, 6],"float32"), bias=Tensor([6],"float32"), )
paddle.nn.functional.linear(x=Tensor([64],"float32"), weight=Tensor([0, 14336],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=tuple(Tensor([1, 10],"float32"),), weight=Tensor([0, 10],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=tuple(Tensor([13, 7, 32],"float32"),Tensor([13, 32],"float32"),), weight=Tensor([0, 32],"float32"), bias=Tensor([32],"float32"), name=None, )
paddle.nn.functional.linear(x=tuple(Tensor([13, 7, 32],"float32"),Tensor([13, 4, 7, 7],"float32"),), weight=Tensor([0, 32],"float32"), bias=Tensor([32],"float32"), name=None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 0],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 33, 0],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 0, 40],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 0, 40],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 0],"float64"), kernel_size=4, stride=2, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 4, 40, 0],"float64"), kernel_size=4, stride=None, padding=2, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 0, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 0, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 33, 0],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int4", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int4", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int4", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int4", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 288],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 288],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 288],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 288],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.split(Tensor([0, 1, 10285],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([0, 1, 16, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 1, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([0, 1, 3598],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([0, 1, 36858],"float32"), list[27648,6912,1728,432,108,30,], axis=-1, )
paddle.split(Tensor([0, 1, 38402],"float32"), list[28800,7200,1800,450,117,35,], axis=-1, )
paddle.split(Tensor([0, 1, 4, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 1, 400, 176, 176],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 1, 400, 184, 184],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 1, 400, 2],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 1, 400, 4],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 1, 4165],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([0, 1, 492, 11],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([0, 1, 492, 4],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([0, 1, 496, 11],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([0, 1, 496, 4],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([0, 1, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([0, 1, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 1, 500, 11],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([0, 1, 5440],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([0, 1, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([0, 1, 6400],"float32"), list[4800,1200,300,80,20,], axis=-1, )
paddle.split(Tensor([0, 1, 6885],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([0, 1, 8500],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([0, 1, 8580],"float32"), list[6408,1620,414,108,30,], axis=-1, )
paddle.split(Tensor([0, 1, 96],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 10, 11109],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([0, 10, 12096],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([0, 10, 20],"float32"), 2, axis=1, )
paddle.split(Tensor([0, 10, 2541],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([0, 10, 34],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([0, 10, 4725],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([0, 10, 5376],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([0, 10, 6069],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([0, 10, 6804],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([0, 10, 6885],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([0, 10, 7581],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([0, 10, 8400],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([0, 10, 9261],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([0, 100, 4],"float32"), 2, -1, )
paddle.split(Tensor([0, 1007, 34],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([0, 101, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([0, 101, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 1024, 1, 1],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([0, 1024, 1, 1],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([0, 1024, 12288],"bfloat16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 1024, 16, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 1024, 4],"float32"), 2, -1, )
paddle.split(Tensor([0, 104, 14, 14],"float16"), list[52,52,], axis=1, )
paddle.split(Tensor([0, 104, 14, 14],"float32"), list[52,52,], axis=1, )
paddle.split(Tensor([0, 104, 56, 56],"float16"), 4, 1, )
paddle.split(Tensor([0, 104, 56, 56],"float32"), 4, 1, )
paddle.split(Tensor([0, 11, 10164],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([0, 11, 12096],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([0, 11, 16, 96],"float32"), num_or_sections=list[32,32,32,], axis=-1, )
paddle.split(Tensor([0, 11, 2100],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([0, 11, 3549],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([0, 11, 4116],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([0, 11, 4725],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([0, 11, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([0, 11, 512],"float32"), 2, axis=2, )
paddle.split(Tensor([0, 11, 5376],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([0, 11, 8400],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([0, 112, 11, 11],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([0, 112, 12, 12],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([0, 116, 28, 28],"float16"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([0, 116, 28, 28],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([0, 12, 10164],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([0, 12, 10285],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([0, 12, 11109],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([0, 12, 2100],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([0, 12, 3549],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([0, 12, 3598],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([0, 12, 4165],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([0, 12, 6804],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([0, 12, 7581],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([0, 12, 9261],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([0, 12, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([0, 120, 28, 28],"float16"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([0, 120, 28, 28],"float32"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([0, 120, 56, 56],"float16"), list[60,60,], axis=1, )
paddle.split(Tensor([0, 120, 56, 56],"float32"), list[60,60,], axis=1, )
paddle.split(Tensor([0, 128, 7, 7],"float32"), num_or_sections=list[64,64,], axis=1, )
paddle.split(Tensor([0, 128, 768],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 128],"float64"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 12],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([0, 12],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 13, 2541],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([0, 13, 4116],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([0, 13, 6069],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([0, 14, 3024],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([0, 14, 5440],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([0, 14, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([0, 14, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([0, 15, 1360],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([0, 15, 1726],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([0, 15, 3024],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([0, 1536],"float32"), 48, axis=-1, )
paddle.split(Tensor([0, 1584, 7, 7],"float16"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([0, 1584, 7, 7],"float16"), list[792,792,], axis=1, )
paddle.split(Tensor([0, 1584, 7, 7],"float32"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([0, 1584, 7, 7],"float32"), list[792,792,], axis=1, )
paddle.split(Tensor([0, 16, 257, 64],"float32"), list[1,256,], axis=2, )
paddle.split(Tensor([0, 16, 476, 4],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([0, 16, 476, 80],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([0, 160, 14, 14],"float16"), list[80,80,], axis=1, )
paddle.split(Tensor([0, 160, 14, 14],"float32"), list[80,80,], axis=1, )
paddle.split(Tensor([0, 160, 28, 28],"float16"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([0, 160, 28, 28],"float32"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([0, 17, 1360],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([0, 17, 1726],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([0, 176, 28, 28],"float32"), num_or_sections=list[88,88,], axis=1, )
paddle.split(Tensor([0, 192, 112, 112],"float16"), list[64,64,64,], axis=1, )
paddle.split(Tensor([0, 192, 112, 112],"float32"), list[64,64,64,], axis=1, )
paddle.split(Tensor([0, 192, 16, 16],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([0, 192, 28, 28],"float16"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([0, 192, 28, 28],"float32"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([0, 192, 56, 56],"float16"), list[96,96,], axis=1, )
paddle.split(Tensor([0, 192, 56, 56],"float32"), list[96,96,], axis=1, )
paddle.split(Tensor([0, 192, 7, 7],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([0, 2, 1100, 4],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([0, 2, 1100, 80],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([0, 2, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([0, 2, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([0, 2, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([0, 2, 498, 1],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([0, 2, 498, 4],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([0, 2, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([0, 2, 8, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 20, 2],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([0, 20],"float32"), num_or_sections=list[10,10,], axis=1, )
paddle.split(Tensor([0, 224, 28, 28],"float32"), num_or_sections=list[112,112,], axis=1, )
paddle.split(Tensor([0, 232, 14, 14],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([0, 232, 14, 14],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([0, 24, 10, 10],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([0, 24, 28, 28],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([0, 240, 56, 56],"float16"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([0, 240, 56, 56],"float32"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([0, 25, 5],"float32"), 5, axis=-1, )
paddle.split(Tensor([0, 27, 10, 10],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([0, 27, 10, 10],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([0, 288, 14, 14],"float16"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([0, 288, 14, 14],"float32"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([0, 3, 192, 288],"float32"), num_or_sections=list[2,1,], axis=1, )
paddle.split(Tensor([0, 3, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([0, 3, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([0, 300, 512],"float32"), 2, axis=2, )
paddle.split(Tensor([0, 32, 112, 112],"float16"), list[16,16,], axis=1, )
paddle.split(Tensor([0, 32, 112, 112],"float32"), list[16,16,], axis=1, )
paddle.split(Tensor([0, 32, 28, 28],"float32"), num_or_sections=list[16,16,], axis=1, )
paddle.split(Tensor([0, 32, 3, 128],"float16"), 3, axis=2, )
paddle.split(Tensor([0, 320, 14, 14],"float16"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([0, 320, 14, 14],"float32"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([0, 33, 10, 10],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([0, 33, 11, 11],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([0, 336, 28, 28],"float16"), list[112,112,112,], axis=1, )
paddle.split(Tensor([0, 336, 28, 28],"float16"), list[168,168,], axis=1, )
paddle.split(Tensor([0, 336, 28, 28],"float32"), list[112,112,112,], axis=1, )
paddle.split(Tensor([0, 336, 28, 28],"float32"), list[168,168,], axis=1, )
paddle.split(Tensor([0, 34, 128, 128],"float16"), 2, axis=1, )
paddle.split(Tensor([0, 34, 128, 128],"float32"), 2, axis=1, )
paddle.split(Tensor([0, 352, 14, 14],"float32"), num_or_sections=list[176,176,], axis=1, )
paddle.split(Tensor([0, 384, 10, 10],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([0, 384, 10, 10],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([0, 3],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 4, 2, 2],"float32"), 2, -1, )
paddle.split(Tensor([0, 4, 4, 2],"float32"), 2, -1, )
paddle.split(Tensor([0, 4, 500, 4],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([0, 4, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([0, 4, 8500],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([0, 40, 56, 56],"float16"), list[20,20,], axis=1, )
paddle.split(Tensor([0, 40, 56, 56],"float32"), list[20,20,], axis=1, )
paddle.split(Tensor([0, 400, 176, 176],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 400, 184, 184],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 400, 2],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 400, 4],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 43, 100, 76],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([0, 43, 104, 80],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([0, 464, 7, 7],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([0, 464, 7, 7],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([0, 48, 14, 14],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([0, 48, 5, 5],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([0, 480, 14, 14],"float16"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([0, 480, 14, 14],"float16"), list[240,240,], axis=1, )
paddle.split(Tensor([0, 480, 14, 14],"float32"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([0, 480, 14, 14],"float32"), list[240,240,], axis=1, )
paddle.split(Tensor([0, 488, 14, 14],"float32"), num_or_sections=list[244,244,], axis=1, )
paddle.split(Tensor([0, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([0, 4],"float32"), tuple(1,1,1,1,), axis=-1, )
paddle.split(Tensor([0, 5, 15, 15],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([0, 5, 21, 21],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([0, 5, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([0, 512],"float32"), 16, axis=-1, )
paddle.split(Tensor([0, 54, 100, 100],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([0, 54, 100, 100],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([0, 56, 28, 28],"float16"), list[28,28,], axis=1, )
paddle.split(Tensor([0, 56, 28, 28],"float32"), list[28,28,], axis=1, )
paddle.split(Tensor([0, 576, 7, 7],"float16"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([0, 576, 7, 7],"float32"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([0, 5],"float32"), list[2,2,1,], axis=-1, )
paddle.split(Tensor([0, 624, 14, 14],"float16"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([0, 624, 14, 14],"float16"), list[312,312,], axis=1, )
paddle.split(Tensor([0, 624, 14, 14],"float32"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([0, 624, 14, 14],"float32"), list[312,312,], axis=1, )
paddle.split(Tensor([0, 64, 14, 14],"float32"), num_or_sections=list[32,32,], axis=1, )
paddle.split(Tensor([0, 640, 7, 7],"float16"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([0, 640, 7, 7],"float32"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([0, 7, 202],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([0, 7, 2],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([0, 7, 96],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 704, 7, 7],"float32"), num_or_sections=list[352,352,], axis=1, )
paddle.split(Tensor([0, 7],"float32"), 7, axis=-1, )
paddle.split(Tensor([0, 8, 128, 128],"float32"), num_or_sections=8, axis=1, )
paddle.split(Tensor([0, 8, 5],"float64"), num_or_sections=2, axis=1, )
paddle.split(Tensor([0, 80, 56, 56],"float16"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([0, 80, 56, 56],"float32"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([0, 9, 128, 128],"float32"), num_or_sections=9, axis=1, )
paddle.split(Tensor([0, 96, 14, 14],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([0, 96, 3, 3],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([0, 96, 56, 56],"float16"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([0, 96, 56, 56],"float32"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([0, 960, 14, 14],"float16"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([0, 960, 14, 14],"float32"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([0, 976, 7, 7],"float32"), num_or_sections=list[488,488,], axis=1, )
paddle.split(Tensor([0, 9],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([0],"float32"), 100, )
paddle.split(Tensor([0],"float32"), 16, axis=-1, )
paddle.split(Tensor([0],"float32"), 48, axis=-1, )
paddle.split(Tensor([1, 0, 10, 10],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([1, 0, 10285],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([1, 0, 12288],"bfloat16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0, 16, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0, 16, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0, 16, 96],"float32"), num_or_sections=list[32,32,32,], axis=-1, )
paddle.split(Tensor([1, 0, 176, 176],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 0, 184, 184],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 0, 192, 288],"float32"), num_or_sections=list[2,1,], axis=1, )
paddle.split(Tensor([1, 0, 257, 64],"float32"), list[1,256,], axis=2, )
paddle.split(Tensor([1, 0, 2],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 0, 2],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([1, 0, 3, 3],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([1, 0, 3598],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([1, 0, 36858],"float32"), list[27648,6912,1728,432,108,30,], axis=-1, )
paddle.split(Tensor([1, 0, 38402],"float32"), list[28800,7200,1800,450,117,35,], axis=-1, )
paddle.split(Tensor([1, 0, 4, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([1, 0, 4165],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([1, 0, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([1, 0, 4],"float32"), 2, -1, )
paddle.split(Tensor([1, 0, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 0, 4],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 0, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 0, 5, 5],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([1, 0, 512],"float32"), 2, axis=2, )
paddle.split(Tensor([1, 0, 5440],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([1, 0, 5],"float32"), 5, axis=-1, )
paddle.split(Tensor([1, 0, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([1, 0, 6400],"float32"), list[4800,1200,300,80,20,], axis=-1, )
paddle.split(Tensor([1, 0, 6885],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([1, 0, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([1, 0, 8500],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([1, 0, 8580],"float32"), list[6408,1620,414,108,30,], axis=-1, )
paddle.split(Tensor([1, 0, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([1, 0, 96],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 0],"float32"), 7, axis=-1, )
paddle.split(Tensor([1, 0],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([1, 0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 0],"float32"), num_or_sections=list[10,10,], axis=1, )
paddle.split(Tensor([1, 0],"float64"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 1, 0, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1, 0, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[27648,6912,1728,432,108,30,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[28800,7200,1800,450,117,35,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[4800,1200,300,80,20,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[6408,1620,414,108,30,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 1, 16, 0],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1, 4, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([1, 10, 0],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([1, 100, 0],"float32"), 2, -1, )
paddle.split(Tensor([1, 101, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 101, 0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 1024, 0, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1024, 0],"bfloat16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1024, 0],"float32"), 2, -1, )
paddle.split(Tensor([1, 1024, 16, 0],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 11, 0, 96],"float32"), num_or_sections=list[32,32,32,], axis=-1, )
paddle.split(Tensor([1, 11, 0],"float32"), 2, axis=2, )
paddle.split(Tensor([1, 11, 0],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([1, 11, 16, 0],"float32"), num_or_sections=list[32,32,32,], axis=-1, )
paddle.split(Tensor([1, 12, 0],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([1, 12, 0],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([1, 12, 0],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([1, 12, 0],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([1, 14, 0],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([1, 14, 0],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([1, 14, 0],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([1, 16, 0, 64],"float32"), list[1,256,], axis=2, )
paddle.split(Tensor([1, 16, 257, 0],"float32"), list[1,256,], axis=2, )
paddle.split(Tensor([1, 2, 0],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([1, 20, 0],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([1, 24, 0, 10],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([1, 24, 10, 0],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([1, 25, 0],"float32"), 5, axis=-1, )
paddle.split(Tensor([1, 3, 0, 288],"float32"), num_or_sections=list[2,1,], axis=1, )
paddle.split(Tensor([1, 3, 0],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([1, 3, 192, 0],"float32"), num_or_sections=list[2,1,], axis=1, )
paddle.split(Tensor([1, 300, 0],"float32"), 2, axis=2, )
paddle.split(Tensor([1, 4, 0],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([1, 4, 0],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([1, 400, 0, 176],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 400, 0, 184],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 400, 0],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 400, 176, 0],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 400, 184, 0],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 48, 0, 5],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([1, 48, 5, 0],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([1, 96, 0, 3],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([1, 96, 3, 0],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([10, 0, 8, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([10, 0],"float32"), 7, axis=-1, )
paddle.split(Tensor([10, 2, 0, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([10, 2, 8, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([100, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([10240, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([12, 0, 10, 10],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 0, 10, 10],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 27, 0, 10],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 27, 0, 10],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 27, 10, 0],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 27, 10, 0],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([13, 0, 2, 2],"float32"), 2, -1, )
paddle.split(Tensor([13, 0, 202],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([13, 0, 2],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([13, 0, 34],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([13, 0, 4, 2],"float32"), 2, -1, )
paddle.split(Tensor([13, 10, 0],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([13, 1007, 0],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([13, 4, 0, 2],"float32"), 2, -1, )
paddle.split(Tensor([13, 4, 2, 0],"float32"), 2, -1, )
paddle.split(Tensor([13, 4, 4, 0],"float32"), 2, -1, )
paddle.split(Tensor([13, 7, 0],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([13, 7, 0],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([14, 0, 96],"float32"), 3, axis=-1, )
paddle.split(Tensor([14, 7, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([1536, 0, 14, 14],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 0, 14, 14],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 0, 28, 28],"float16"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 0, 28, 28],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 0, 7, 7],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 0, 7, 7],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 116, 0, 28],"float16"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 116, 0, 28],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 116, 28, 0],"float16"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 116, 28, 0],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 232, 0, 14],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 232, 0, 14],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 232, 14, 0],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 232, 14, 0],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 464, 0, 7],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 464, 0, 7],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 464, 7, 0],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 464, 7, 0],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([16, 0, 10164],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([16, 0, 11109],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([16, 0, 12096],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([16, 0, 2100],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([16, 0, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([16, 0, 2541],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([16, 0, 3024],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([16, 0, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([16, 0, 3549],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([16, 0, 4116],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([16, 0, 4725],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([16, 0, 5376],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([16, 0, 6069],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([16, 0, 6804],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([16, 0, 7581],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([16, 0, 8400],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([16, 0, 9261],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([16, 13, 0],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([16, 13, 0],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([16, 13, 0],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([16, 14, 0],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([16, 15, 0],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([16, 2, 0],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([16, 2, 0],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([16, 3, 0],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([16, 5, 0],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([1820, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([2, 0, 10, 10],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 0, 11, 11],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[176,176,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[244,244,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[32,32,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([2, 0, 15, 15],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 0, 21, 21],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 0, 28, 28],"float32"), num_or_sections=list[112,112,], axis=1, )
paddle.split(Tensor([2, 0, 28, 28],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([2, 0, 28, 28],"float32"), num_or_sections=list[16,16,], axis=1, )
paddle.split(Tensor([2, 0, 28, 28],"float32"), num_or_sections=list[88,88,], axis=1, )
paddle.split(Tensor([2, 0, 3, 128],"float16"), 3, axis=2, )
paddle.split(Tensor([2, 0, 7, 7],"float32"), num_or_sections=list[352,352,], axis=1, )
paddle.split(Tensor([2, 0, 7, 7],"float32"), num_or_sections=list[488,488,], axis=1, )
paddle.split(Tensor([2, 0, 7, 7],"float32"), num_or_sections=list[64,64,], axis=1, )
paddle.split(Tensor([2, 0, 7, 7],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([2, 128, 0, 7],"float32"), num_or_sections=list[64,64,], axis=1, )
paddle.split(Tensor([2, 128, 7, 0],"float32"), num_or_sections=list[64,64,], axis=1, )
paddle.split(Tensor([2, 176, 0, 28],"float32"), num_or_sections=list[88,88,], axis=1, )
paddle.split(Tensor([2, 176, 28, 0],"float32"), num_or_sections=list[88,88,], axis=1, )
paddle.split(Tensor([2, 192, 0, 7],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([2, 192, 7, 0],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([2, 224, 0, 28],"float32"), num_or_sections=list[112,112,], axis=1, )
paddle.split(Tensor([2, 224, 28, 0],"float32"), num_or_sections=list[112,112,], axis=1, )
paddle.split(Tensor([2, 24, 0, 28],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([2, 24, 28, 0],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([2, 32, 0, 128],"float16"), 3, axis=2, )
paddle.split(Tensor([2, 32, 0, 28],"float32"), num_or_sections=list[16,16,], axis=1, )
paddle.split(Tensor([2, 32, 28, 0],"float32"), num_or_sections=list[16,16,], axis=1, )
paddle.split(Tensor([2, 32, 3, 0],"float16"), 3, axis=2, )
paddle.split(Tensor([2, 33, 0, 10],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 0, 11],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 10, 0],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 11, 0],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 352, 0, 14],"float32"), num_or_sections=list[176,176,], axis=1, )
paddle.split(Tensor([2, 352, 14, 0],"float32"), num_or_sections=list[176,176,], axis=1, )
paddle.split(Tensor([2, 48, 0, 14],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([2, 48, 14, 0],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([2, 488, 0, 14],"float32"), num_or_sections=list[244,244,], axis=1, )
paddle.split(Tensor([2, 488, 14, 0],"float32"), num_or_sections=list[244,244,], axis=1, )
paddle.split(Tensor([2, 5, 0, 15],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 0, 21],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 15, 0],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 21, 0],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 64, 0, 14],"float32"), num_or_sections=list[32,32,], axis=1, )
paddle.split(Tensor([2, 64, 14, 0],"float32"), num_or_sections=list[32,32,], axis=1, )
paddle.split(Tensor([2, 704, 0, 7],"float32"), num_or_sections=list[352,352,], axis=1, )
paddle.split(Tensor([2, 704, 7, 0],"float32"), num_or_sections=list[352,352,], axis=1, )
paddle.split(Tensor([2, 96, 0, 14],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([2, 96, 14, 0],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([2, 976, 0, 7],"float32"), num_or_sections=list[488,488,], axis=1, )
paddle.split(Tensor([2, 976, 7, 0],"float32"), num_or_sections=list[488,488,], axis=1, )
paddle.split(Tensor([24, 0, 100, 76],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 0, 104, 80],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 0, 128, 128],"float16"), 2, axis=1, )
paddle.split(Tensor([24, 0, 128, 128],"float32"), 2, axis=1, )
paddle.split(Tensor([24, 34, 0, 128],"float16"), 2, axis=1, )
paddle.split(Tensor([24, 34, 0, 128],"float32"), 2, axis=1, )
paddle.split(Tensor([24, 34, 128, 0],"float16"), 2, axis=1, )
paddle.split(Tensor([24, 34, 128, 0],"float32"), 2, axis=1, )
paddle.split(Tensor([24, 43, 0, 76],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 0, 80],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 100, 0],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 104, 0],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([3, 0, 500, 4],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([3, 0, 5],"float64"), num_or_sections=2, axis=1, )
paddle.split(Tensor([3, 4, 0, 4],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([3, 4, 500, 0],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([3, 8, 0],"float64"), num_or_sections=2, axis=1, )
paddle.split(Tensor([300, 0],"float32"), tuple(1,1,1,1,), axis=-1, )
paddle.split(Tensor([304, 0],"float32"), list[2,2,1,], axis=-1, )
paddle.split(Tensor([32, 0, 11, 11],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 0, 12, 12],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 0, 11],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 0, 12],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 11, 0],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 12, 0],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([4, 0, 20],"float32"), 2, axis=1, )
paddle.split(Tensor([4, 0, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([4, 1, 0],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([4, 10, 0],"float32"), 2, axis=1, )
paddle.split(Tensor([4, 2, 0],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([512, 0, 28, 28],"float16"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 0, 28, 28],"float32"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 0],"float32"), 16, axis=-1, )
paddle.split(Tensor([512, 0],"float32"), 48, axis=-1, )
paddle.split(Tensor([512, 120, 0, 28],"float16"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 120, 0, 28],"float32"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 120, 28, 0],"float16"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 120, 28, 0],"float32"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([52, 0, 202],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([52, 7, 0],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([6, 0, 100, 100],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 0, 100, 100],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 0, 1100, 4],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 0, 1100, 80],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 0, 400, 176, 176],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 400, 184, 184],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 400, 2],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 400, 4],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 476, 4],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 0, 476, 80],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 0, 492, 11],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 0, 492, 4],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 0, 496, 11],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 0, 496, 4],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 0, 498, 1],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 0, 498, 4],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 0, 500, 11],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 11],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 11],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 11],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 176, 176],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 184, 184],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 2],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 4],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 4],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 4],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 0, 176],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 0, 184],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 0],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 176, 0],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 184, 0],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 492, 0],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 1, 496, 0],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 1, 500, 0],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([6, 16, 0, 4],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 16, 0, 80],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 16, 476, 0],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 2, 0, 1],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 2, 0, 4],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 2, 0, 4],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 2, 0, 80],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 2, 1100, 0],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 2, 498, 0],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 54, 0, 100],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 0, 100],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 100, 0],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 100, 0],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6380, 0],"float32"), tuple(1,1,1,1,), axis=-1, )
paddle.split(Tensor([64, 0, 1, 1],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 0, 1, 1],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 0, 10, 10],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 0, 10, 10],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 0, 112, 112],"float16"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 0, 112, 112],"float16"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 0, 112, 112],"float32"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 0, 112, 112],"float32"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 0, 1360],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 0, 16, 16],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 0, 1726],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), 4, 1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), 4, 1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float16"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float16"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float16"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float16"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float32"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float32"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float32"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float32"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 1024, 0, 1],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 0, 1],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 1, 0],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 1, 0],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 104, 0, 14],"float16"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 104, 0, 14],"float32"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 104, 0, 56],"float16"), 4, 1, )
paddle.split(Tensor([64, 104, 0, 56],"float32"), 4, 1, )
paddle.split(Tensor([64, 104, 14, 0],"float16"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 104, 14, 0],"float32"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 104, 56, 0],"float16"), 4, 1, )
paddle.split(Tensor([64, 104, 56, 0],"float32"), 4, 1, )
paddle.split(Tensor([64, 120, 0, 56],"float16"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 120, 0, 56],"float32"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 120, 56, 0],"float16"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 120, 56, 0],"float32"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 15, 0],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([64, 15, 0],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([64, 1584, 0, 7],"float16"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 1584, 0, 7],"float16"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 1584, 0, 7],"float32"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 1584, 0, 7],"float32"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 1584, 7, 0],"float16"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 1584, 7, 0],"float16"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 1584, 7, 0],"float32"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 1584, 7, 0],"float32"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 160, 0, 14],"float16"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 160, 0, 14],"float32"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 160, 0, 28],"float16"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 160, 0, 28],"float32"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 160, 14, 0],"float16"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 160, 14, 0],"float32"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 160, 28, 0],"float16"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 160, 28, 0],"float32"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 17, 0],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([64, 17, 0],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([64, 192, 0, 112],"float16"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 192, 0, 112],"float32"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 192, 0, 16],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 0, 28],"float16"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 192, 0, 28],"float32"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 192, 0, 56],"float16"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 0, 56],"float32"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 112, 0],"float16"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 192, 112, 0],"float32"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 192, 16, 0],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 28, 0],"float16"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 192, 28, 0],"float32"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 192, 56, 0],"float16"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 56, 0],"float32"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 240, 0, 56],"float16"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 240, 0, 56],"float32"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 240, 56, 0],"float16"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 240, 56, 0],"float32"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 288, 0, 14],"float16"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 288, 0, 14],"float32"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 288, 14, 0],"float16"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 288, 14, 0],"float32"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 32, 0, 112],"float16"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 32, 0, 112],"float32"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 32, 112, 0],"float16"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 32, 112, 0],"float32"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 320, 0, 14],"float16"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 320, 0, 14],"float32"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 320, 14, 0],"float16"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 320, 14, 0],"float32"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 336, 0, 28],"float16"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 336, 0, 28],"float16"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 336, 0, 28],"float32"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 336, 0, 28],"float32"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 336, 28, 0],"float16"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 336, 28, 0],"float16"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 336, 28, 0],"float32"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 336, 28, 0],"float32"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 384, 0, 10],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 0, 10],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 10, 0],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 10, 0],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 40, 0, 56],"float16"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 40, 0, 56],"float32"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 40, 56, 0],"float16"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 40, 56, 0],"float32"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 480, 0, 14],"float16"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 480, 0, 14],"float16"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 480, 0, 14],"float32"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 480, 0, 14],"float32"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 480, 14, 0],"float16"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 480, 14, 0],"float16"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 480, 14, 0],"float32"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 480, 14, 0],"float32"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 56, 0, 28],"float16"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 56, 0, 28],"float32"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 56, 28, 0],"float16"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 56, 28, 0],"float32"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 576, 0, 7],"float16"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 576, 0, 7],"float32"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 576, 7, 0],"float16"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 576, 7, 0],"float32"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 624, 0, 14],"float16"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 624, 0, 14],"float16"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 624, 0, 14],"float32"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 624, 0, 14],"float32"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 624, 14, 0],"float16"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 624, 14, 0],"float16"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 624, 14, 0],"float32"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 624, 14, 0],"float32"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 640, 0, 7],"float16"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 640, 0, 7],"float32"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 640, 7, 0],"float16"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 640, 7, 0],"float32"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 80, 0, 56],"float16"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 80, 0, 56],"float32"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 80, 56, 0],"float16"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 80, 56, 0],"float32"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 96, 0, 56],"float16"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 96, 0, 56],"float32"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 96, 56, 0],"float16"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 96, 56, 0],"float32"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 960, 0, 14],"float16"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 960, 0, 14],"float32"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 960, 14, 0],"float16"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 960, 14, 0],"float32"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([8, 0, 128, 128],"float32"), num_or_sections=8, axis=1, )
paddle.split(Tensor([8, 0, 128, 128],"float32"), num_or_sections=9, axis=1, )
paddle.split(Tensor([8, 0, 768],"float32"), 3, axis=-1, )
paddle.split(Tensor([8, 128, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([8, 8, 0, 128],"float32"), num_or_sections=8, axis=1, )
paddle.split(Tensor([8, 8, 128, 0],"float32"), num_or_sections=8, axis=1, )
paddle.split(Tensor([8, 9, 0, 128],"float32"), num_or_sections=9, axis=1, )
paddle.split(Tensor([8, 9, 128, 0],"float32"), num_or_sections=9, axis=1, )
paddle.split(x=Tensor([0, 1024, 7, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([0, 1152, 7, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([0, 128, 28, 28],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([0, 128, 56, 56],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([0, 144, 56, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([0, 1536, 7, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([0, 160, 14, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([0, 192, 28, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([0, 256, 14, 14],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([0, 256, 28, 28],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([0, 288, 28, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([0, 320, 7, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([0, 384, 14, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([0, 3],"float64"), num_or_sections=list[2,-1,], axis=-1, )
paddle.split(x=Tensor([0, 3],"float64"), num_or_sections=tuple(2,1,), axis=1, )
paddle.split(x=Tensor([0, 40, 56, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([0, 512, 14, 14],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([0, 512, 7, 7],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([0, 576, 14, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([0, 64, 56, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([0, 6],"float32"), axis=1, num_or_sections=3, )
paddle.split(x=Tensor([0, 768, 7, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([0, 80, 28, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([0, 96, 56, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([1, 0],"float32"), axis=1, num_or_sections=3, )
paddle.split(x=Tensor([124, 0, 14, 14],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 0, 14, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([124, 0, 14, 14],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 0, 14, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([124, 0, 28, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([124, 0, 28, 28],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 0, 28, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([124, 0, 28, 28],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 0, 56, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([124, 0, 56, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([124, 0, 56, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([124, 0, 56, 56],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 0, 7, 7],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 0, 7, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([124, 0, 7, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([124, 0, 7, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([124, 1024, 0, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([124, 1024, 7, 0],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([124, 128, 0, 28],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 128, 0, 56],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 128, 28, 0],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 128, 56, 0],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 160, 0, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([124, 160, 14, 0],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([124, 192, 0, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([124, 192, 28, 0],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([124, 256, 0, 14],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 256, 0, 28],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 256, 14, 0],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 256, 28, 0],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 320, 0, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([124, 320, 7, 0],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([124, 384, 0, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([124, 384, 14, 0],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([124, 40, 0, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([124, 40, 56, 0],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([124, 512, 0, 14],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 512, 0, 7],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 512, 14, 0],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 512, 7, 0],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 64, 0, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([124, 64, 56, 0],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([124, 768, 0, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([124, 768, 7, 0],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([124, 80, 0, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([124, 80, 28, 0],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([124, 96, 0, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([124, 96, 56, 0],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([128, 0, 14, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([128, 0, 14, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([128, 0, 28, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([128, 0, 28, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([128, 0, 56, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([128, 0, 56, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([128, 0, 56, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([128, 0, 7, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([128, 0, 7, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([128, 0, 7, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([128, 1024, 0, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([128, 1024, 7, 0],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([128, 160, 0, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([128, 160, 14, 0],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([128, 192, 0, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([128, 192, 28, 0],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([128, 320, 0, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([128, 320, 7, 0],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([128, 384, 0, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([128, 384, 14, 0],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([128, 40, 0, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([128, 40, 56, 0],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([128, 64, 0, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([128, 64, 56, 0],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([128, 768, 0, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([128, 768, 7, 0],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([128, 80, 0, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([128, 80, 28, 0],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([128, 96, 0, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([128, 96, 56, 0],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([2, 0],"float64"), num_or_sections=list[2,-1,], axis=-1, )
paddle.split(x=Tensor([2, 0],"float64"), num_or_sections=tuple(2,1,), axis=1, )
paddle.split(x=Tensor([4, 0, 14, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([4, 0, 28, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([4, 0, 56, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([4, 0, 7, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([4, 0, 7, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([4, 1152, 0, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([4, 1152, 7, 0],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([4, 144, 0, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([4, 144, 56, 0],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([4, 1536, 0, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([4, 1536, 7, 0],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([4, 288, 0, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([4, 288, 28, 0],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([4, 576, 0, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([4, 576, 14, 0],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([60, 0, 14, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([60, 0, 28, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([60, 0, 56, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([60, 0, 7, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([60, 0, 7, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([60, 1152, 0, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([60, 1152, 7, 0],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([60, 144, 0, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([60, 144, 56, 0],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([60, 1536, 0, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([60, 1536, 7, 0],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([60, 288, 0, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([60, 288, 28, 0],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([60, 576, 0, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([60, 576, 14, 0],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.tensor_split(Tensor([0, 4, 6],"float16"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 6],"float16"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0, 6],"float16"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0],"float16"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 4, 0],"float16"), 3, axis=2, )
paddle.unique(Tensor([0, 5, 5],"float32"), return_index=True, return_inverse=True, return_counts=True, axis=0, )
paddle.vision.ops.generate_proposals(Tensor([0, 15, 40, 60],"float32"), Tensor([1, 60, 40, 60],"float32"), Tensor([1, 2],"float32"), Tensor([36000, 4],"float32"), Tensor([36000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([0, 15, 42, 63],"float32"), Tensor([1, 60, 42, 63],"float32"), Tensor([1, 2],"float32"), Tensor([39690, 4],"float32"), Tensor([39690, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([0, 3, 10, 14],"float32"), Tensor([1, 12, 10, 14],"float32"), Tensor([1, 2],"float32"), Tensor([420, 4],"float32"), Tensor([420, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([0, 3, 10, 15],"float32"), Tensor([1, 12, 10, 15],"float32"), Tensor([1, 2],"float32"), Tensor([450, 4],"float32"), Tensor([450, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([0, 3, 4, 4],"float32"), Tensor([2, 12, 4, 4],"float32"), Tensor([2, 3],"float32"), Tensor([4, 4, 3, 4],"float32"), Tensor([4, 4, 3, 4],"float32"), pre_nms_top_n=10, post_nms_top_n=5, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([0, 4, 16, 16],"float32"), Tensor([1, 16, 16, 16],"float32"), Tensor([1, 2],"float32"), Tensor([16, 16, 4, 4],"float32"), Tensor([16, 16, 4, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=5000, nms_thresh=0.7, min_size=3.0, eta=1.0, pixel_offset=True, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([0, 9, 10, 8],"float32"), Tensor([1, 36, 10, 8],"float32"), Tensor([1, 2],"float32"), Tensor([720, 4],"float32"), Tensor([720, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([0, 9, 12, 9],"float32"), Tensor([1, 36, 12, 9],"float32"), Tensor([1, 2],"float32"), Tensor([972, 4],"float32"), Tensor([972, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 40, 60],"float32"), Tensor([0, 60, 40, 60],"float32"), Tensor([1, 2],"float32"), Tensor([36000, 4],"float32"), Tensor([36000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 40, 60],"float32"), Tensor([1, 60, 40, 60],"float32"), Tensor([1, 0],"float32"), Tensor([36000, 4],"float32"), Tensor([36000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 42, 63],"float32"), Tensor([0, 60, 42, 63],"float32"), Tensor([1, 2],"float32"), Tensor([39690, 4],"float32"), Tensor([39690, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 42, 63],"float32"), Tensor([1, 60, 42, 63],"float32"), Tensor([1, 0],"float32"), Tensor([39690, 4],"float32"), Tensor([39690, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 10, 14],"float32"), Tensor([0, 12, 10, 14],"float32"), Tensor([1, 2],"float32"), Tensor([420, 4],"float32"), Tensor([420, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 10, 14],"float32"), Tensor([1, 12, 10, 14],"float32"), Tensor([1, 0],"float32"), Tensor([420, 4],"float32"), Tensor([420, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 10, 15],"float32"), Tensor([0, 12, 10, 15],"float32"), Tensor([1, 2],"float32"), Tensor([450, 4],"float32"), Tensor([450, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 10, 15],"float32"), Tensor([1, 12, 10, 15],"float32"), Tensor([1, 0],"float32"), Tensor([450, 4],"float32"), Tensor([450, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 4, 16, 16],"float32"), Tensor([0, 16, 16, 16],"float32"), Tensor([1, 2],"float32"), Tensor([16, 16, 4, 4],"float32"), Tensor([16, 16, 4, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=5000, nms_thresh=0.7, min_size=3.0, eta=1.0, pixel_offset=True, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 4, 16, 16],"float32"), Tensor([1, 16, 16, 16],"float32"), Tensor([1, 0],"float32"), Tensor([16, 16, 4, 4],"float32"), Tensor([16, 16, 4, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=5000, nms_thresh=0.7, min_size=3.0, eta=1.0, pixel_offset=True, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 10, 8],"float32"), Tensor([0, 36, 10, 8],"float32"), Tensor([1, 2],"float32"), Tensor([720, 4],"float32"), Tensor([720, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 10, 8],"float32"), Tensor([1, 36, 10, 8],"float32"), Tensor([1, 0],"float32"), Tensor([720, 4],"float32"), Tensor([720, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 12, 9],"float32"), Tensor([0, 36, 12, 9],"float32"), Tensor([1, 2],"float32"), Tensor([972, 4],"float32"), Tensor([972, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 12, 9],"float32"), Tensor([1, 36, 12, 9],"float32"), Tensor([1, 0],"float32"), Tensor([972, 4],"float32"), Tensor([972, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([2, 3, 4, 4],"float32"), Tensor([0, 12, 4, 4],"float32"), Tensor([2, 3],"float32"), Tensor([4, 4, 3, 4],"float32"), Tensor([4, 4, 3, 4],"float32"), pre_nms_top_n=10, post_nms_top_n=5, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([2, 3, 4, 4],"float32"), Tensor([2, 12, 4, 4],"float32"), Tensor([2, 0],"float32"), Tensor([4, 4, 3, 4],"float32"), Tensor([4, 4, 3, 4],"float32"), pre_nms_top_n=10, post_nms_top_n=5, return_rois_num=True, )
