paddle.Tensor.__matmul__(Tensor([0, 1, 15872, 32],"float32"), Tensor([0, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 15872, 32],"float32"), Tensor([1, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 15872, 64],"float32"), Tensor([0, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 15872, 64],"float32"), Tensor([1, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 16384, 256],"float32"), Tensor([0, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 16384, 256],"float32"), Tensor([1, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 65536, 1024],"float32"), Tensor([0, 1, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 65536, 1024],"float32"), Tensor([0, 1, 1024, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 65536, 1024],"float32"), Tensor([1, 1, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 65536, 32],"float32"), Tensor([0, 1, 32, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 65536, 32],"float32"), Tensor([1, 1, 32, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 1, 65536, 64],"float32"), Tensor([0, 1, 64, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([0, 17, 2],"float64"), Tensor([0, 2, 2],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 17, 2],"float64"), Tensor([1, 2, 2],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 2, 2],"float64"), Tensor([0, 2, 100],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 2, 2],"float64"), Tensor([0, 2, 17],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 2, 2],"float64"), Tensor([1, 2, 100],"float64"), )
paddle.Tensor.__matmul__(Tensor([0, 2, 2],"float64"), Tensor([1, 2, 17],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 15872, 32],"float32"), Tensor([1, 0, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 15872, 32],"float32"), Tensor([1, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 15872, 64],"float32"), Tensor([1, 0, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 15872, 64],"float32"), Tensor([1, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 16384, 256],"float32"), Tensor([1, 0, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 16384, 256],"float32"), Tensor([1, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 2],"float64"), Tensor([1, 2, 100],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 2],"float64"), Tensor([1, 2, 17],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 65536, 1024],"float32"), Tensor([1, 0, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 65536, 1024],"float32"), Tensor([1, 1, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 65536, 32],"float32"), Tensor([1, 0, 32, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 0, 65536, 32],"float32"), Tensor([1, 1, 32, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 0, 1024],"float32"), Tensor([1, 1, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 0, 256],"float32"), Tensor([1, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 0, 32],"float32"), Tensor([1, 1, 32, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 0, 32],"float32"), Tensor([1, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 0, 64],"float32"), Tensor([1, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 32],"float32"), Tensor([0, 1, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 32],"float32"), Tensor([1, 0, 32, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 32],"float32"), Tensor([1, 1, 32, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 64],"float32"), Tensor([0, 1, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 64],"float32"), Tensor([1, 0, 64, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 64],"float32"), Tensor([1, 1, 64, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 256],"float32"), Tensor([0, 1, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 256],"float32"), Tensor([1, 0, 256, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 256],"float32"), Tensor([1, 1, 256, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 512],"float32"), Tensor([512, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 65536, 1024],"float32"), Tensor([0, 1, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 65536, 1024],"float32"), Tensor([1, 0, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 65536, 1024],"float32"), Tensor([1, 1, 1024, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 65536, 32],"float32"), Tensor([0, 1, 32, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 65536, 32],"float32"), Tensor([1, 0, 32, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 65536, 32],"float32"), Tensor([1, 1, 32, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 768],"float32"), Tensor([768, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 17, 2],"float64"), Tensor([0, 2, 2],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 17, 2],"float64"), Tensor([1, 2, 0],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 2, 2],"float64"), Tensor([0, 2, 100],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 2, 2],"float64"), Tensor([0, 2, 17],"float64"), )
paddle.Tensor.__matmul__(Tensor([1, 2, 2],"float64"), Tensor([1, 2, 0],"float64"), )
paddle.Tensor.__matmul__(Tensor([10, 768],"float32"), Tensor([768, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 0, 65536, 1024],"float32"), Tensor([2, 0, 1024, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 0, 65536, 1024],"float32"), Tensor([2, 1, 1024, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 0, 65536, 64],"float32"), Tensor([2, 0, 64, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 0, 65536, 64],"float32"), Tensor([2, 1, 64, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 1, 0, 1024],"float32"), Tensor([2, 1, 1024, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 1, 0, 64],"float32"), Tensor([2, 1, 64, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 1, 65536, 1024],"float32"), Tensor([2, 0, 1024, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 1, 65536, 1024],"float32"), Tensor([2, 1, 1024, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 1, 65536, 64],"float32"), Tensor([2, 0, 64, 1024],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 1, 65536, 64],"float32"), Tensor([2, 1, 64, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([2, 4, 2, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([4, 0, 65536, 1024],"float32"), Tensor([4, 0, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([4, 0, 65536, 1024],"float32"), Tensor([4, 1, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([4, 1, 0, 1024],"float32"), Tensor([4, 1, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([4, 1, 65536, 1024],"float32"), Tensor([4, 0, 1024, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([4, 1, 65536, 1024],"float32"), Tensor([4, 1, 1024, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 1, 1024],"float32"), Tensor([1024, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 1, 768],"float32"), Tensor([768, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 3, 1024],"float32"), Tensor([1024, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 3, 1280],"float32"), Tensor([1280, 0],"float32"), )
paddle.Tensor.__matmul__(Tensor([5, 3, 768],"float32"), Tensor([768, 0],"float32"), )
paddle.Tensor.amax(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amax(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.argmax(Tensor([0, 1, 10285],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 24276],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 27216],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 30324],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 33600],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 100, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 101, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 102, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 103, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 104, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 10],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([0, 10],"int64"), -1, dtype="int32", )
paddle.Tensor.argmax(Tensor([0, 157920, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 3, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([0, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([0, 4],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 50],"float32"), axis=1, dtype="int32", )
paddle.Tensor.argmax(Tensor([0, 77],"int64"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 7],"int32"), -1, )
paddle.Tensor.argmax(Tensor([0, 7],"int32"), axis=-1, dtype="int32", )
paddle.Tensor.argmax(Tensor([0, 90, 22400],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([1, 1, 0],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([13, 3, 0],"float32"), 1, )
paddle.Tensor.argmax(Tensor([30, 0, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([4, 0, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([4, 90, 0],"float32"), axis=1, )
paddle.Tensor.bmm(Tensor([0, 108472, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 1156, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 120000, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 143264, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 146200, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 0, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 120000, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 143264, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 146200, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.chunk(Tensor([0, 1, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 10164, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 10285, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 11109, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 12096, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 1360, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 10, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 10, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 100, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 101, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 101, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 102, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 102, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 103, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 128, 1007],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 128, 10],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 128, 3],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 128, 7],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 1444, 2, 2],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 160, 16, 12],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 160, 8, 6],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 196, 768],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 300, 101],"float32"), 16, )
paddle.Tensor.chunk(Tensor([0, 3136, 192],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 32, 128, 96],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 32, 64, 48],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 320, 4, 3],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 36, 3, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 38, 20],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 49, 1536],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 4],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 784, 384],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 8, 32],"float32"), 8, axis=1, )
paddle.Tensor.chunk(Tensor([0, 9, 10],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 10164, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 10285, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 11109, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 12096, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 1360, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([1, 1, 0, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 10164, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 10285, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 11109, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 12096, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 1360, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 10, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 10, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 10, 1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 100, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 101, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 101, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 101, 1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 102, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 102, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 102, 1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 103, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 103, 1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([100, 0, 10],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([100, 0, 2, 2],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([100, 0, 20],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([100, 0, 3, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([100, 1444, 0, 2],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([100, 1444, 2, 0],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([100, 36, 0, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([100, 36, 3, 0],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([100, 38, 0],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([100, 9, 0],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 0, 1536],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 0, 384],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 0, 768],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 196, 0],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 3136, 0],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 49, 0],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 784, 0],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([13, 0, 1007],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 0, 10],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 0, 32],"float32"), 8, axis=1, )
paddle.Tensor.chunk(Tensor([13, 0, 3],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 0, 7],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 128, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 8, 0],"float32"), 8, axis=1, )
paddle.Tensor.chunk(Tensor([14, 0, 7],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([14, 128, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 0, 101],"float32"), 16, )
paddle.Tensor.chunk(Tensor([16, 0, 128, 96],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 0, 16, 12],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 0, 4, 3],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 0, 64, 48],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 0, 8, 6],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 0, 12],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 0, 6],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 16, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 8, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 300, 0],"float32"), 16, )
paddle.Tensor.chunk(Tensor([16, 32, 0, 48],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 32, 0, 96],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 32, 128, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 32, 64, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 320, 0, 3],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 320, 4, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([227, 0, 10],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([227, 0, 3, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([227, 36, 0, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([227, 36, 3, 0],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([227, 9, 0],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([256, 0, 10],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([256, 0, 2, 2],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([256, 0, 20],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([256, 0, 3, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([256, 1444, 0, 2],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([256, 1444, 2, 0],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([256, 36, 0, 3],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([256, 36, 3, 0],"float32"), chunks=2, axis=1, )
paddle.Tensor.chunk(Tensor([256, 38, 0],"float32"), chunks=2, axis=-1, )
paddle.Tensor.chunk(Tensor([256, 9, 0],"float32"), chunks=2, axis=-1, )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 298, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 32, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 34, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 32],"float32"), Tensor([0, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 128],"int32"), Tensor([0, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 16],"float32"), Tensor([0, 16],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1],"float32"), Tensor([0, 22400],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 1],"int32"), Tensor([0, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 64],"int64"), Tensor([0, 64],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 298, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 32, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 34, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0],"float32"), Tensor([64, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int64"), Tensor([26, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 28, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 280, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 298, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 32, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 34, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 298, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 32, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 34, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 298, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 32, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 34, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 26],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 34],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 364],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 28, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 280, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 298, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 32, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 34, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 128],"int32"), Tensor([0, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 16],"float32"), Tensor([0, 16],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([0, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 64],"int64"), Tensor([0, 64],"int64"), )
paddle.Tensor.expand_as(Tensor([2, 0, 32],"float32"), Tensor([2, 0, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 0],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 32],"float32"), Tensor([2, 0, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([4, 0],"float32"), Tensor([4, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([4, 1],"float32"), Tensor([4, 0],"int64"), )
paddle.Tensor.gather(Tensor([0, 4],"float32"), Tensor([0, 1],"int64"), 1, )
paddle.Tensor.gather(Tensor([0, 4],"float32"), Tensor([4, 1],"int64"), 1, )
paddle.Tensor.gather(Tensor([4, 0],"float32"), Tensor([4, 0],"int64"), 1, )
paddle.Tensor.gather(Tensor([4, 4],"float32"), Tensor([4, 0],"int64"), 1, )
paddle.Tensor.gather_nd(Tensor([0, 128, 2],"float16"), Tensor([32, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 128, 2],"float16"), Tensor([7, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 16384, 10],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 16384, 1],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 16384, 2],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 20, 2],"float32"), Tensor([1, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 2048, 768],"float16"), Tensor([2, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 3, 80, 80, 85],"float16"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 3, 80, 80, 85],"float16"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 3, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 3, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 500, 1],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 500, 2],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 7, 2],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 7, 32],"float32"), Tensor([12, 2],"int32"), )
paddle.Tensor.gather_nd(Tensor([0, 7, 3],"float32"), Tensor([13, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([0, 7, 3],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([1, 0, 2],"float32"), Tensor([1, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([1, 0, 768],"float16"), Tensor([2, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([12, 0, 32],"float32"), Tensor([12, 2],"int32"), )
paddle.Tensor.gather_nd(Tensor([13, 0, 3],"float32"), Tensor([13, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([14, 0, 2],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([14, 0, 3],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 0, 80, 80, 85],"float16"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 0, 80, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 0, 80, 85],"float16"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 0, 80, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 0, 85],"float16"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([16, 3, 80, 0, 85],"float32"), Tensor([516, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([32, 0, 2],"float16"), Tensor([32, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 10],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 1],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 1],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 2],"float32"), Tensor([4, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 0, 2],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 500, 0],"float32"), Tensor([4, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([7, 0, 2],"float16"), Tensor([7, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 0, 80, 80, 85],"float16"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 0, 80, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 0, 80, 85],"float16"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 0, 80, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 0, 85],"float16"), Tensor([385, 4],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 3, 80, 0, 85],"float32"), Tensor([385, 4],"int64"), )
paddle.Tensor.imag(Tensor([0, 128, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([0, 15, 8, 8, 32],"complex64"), )
paddle.Tensor.imag(Tensor([0, 32, 16, 9],"complex64"), )
paddle.Tensor.imag(Tensor([0, 32, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([0, 513, 213],"complex64"), )
paddle.Tensor.imag(Tensor([0, 64, 16, 9],"complex64"), )
paddle.Tensor.imag(Tensor([0, 64, 64],"complex64"), )
paddle.Tensor.imag(Tensor([0, 64, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 0, 16, 9],"complex64"), )
paddle.Tensor.imag(Tensor([16, 0, 213],"complex64"), )
paddle.Tensor.imag(Tensor([16, 0, 8, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 128, 0, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 128, 8, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 0, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 0, 9],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 16, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 32, 8, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 513, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 0, 5],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 0, 9],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 16, 0],"complex64"), )
paddle.Tensor.imag(Tensor([16, 64, 8, 0],"complex64"), )
paddle.Tensor.imag(Tensor([20, 0, 64],"complex64"), )
paddle.Tensor.imag(Tensor([20, 64, 0],"complex64"), )
paddle.Tensor.imag(Tensor([32, 0, 8, 8, 32],"complex64"), )
paddle.Tensor.imag(Tensor([32, 15, 0, 8, 32],"complex64"), )
paddle.Tensor.imag(Tensor([32, 15, 8, 0, 32],"complex64"), )
paddle.Tensor.imag(Tensor([32, 15, 8, 8, 0],"complex64"), )
paddle.Tensor.index_select(Tensor([0, 16],"float32"), Tensor([28],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0, 16],"float32"), Tensor([30],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0, 16],"float32"), Tensor([38],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0, 24],"float32"), axis=0, index=Tensor([130],"int64"), )
paddle.Tensor.index_select(Tensor([0, 24],"float32"), axis=0, index=Tensor([182],"int64"), )
paddle.Tensor.index_select(Tensor([0, 24],"float32"), axis=0, index=Tensor([39],"int64"), )
paddle.Tensor.index_select(Tensor([0, 24],"float32"), axis=0, index=Tensor([91],"int64"), )
paddle.Tensor.index_select(Tensor([0, 8],"float32"), Tensor([4],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0, 8],"float32"), Tensor([5],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([0],"float32"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([0],"float64"), Tensor([40],"int64"), )
paddle.Tensor.index_select(Tensor([0],"float64"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([0],"int32"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([0],"int64"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([128, 16],"float32"), Tensor([0],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([12],"float32"), Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([12],"float64"), Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([12],"int32"), Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([12],"int64"), Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([2, 1, 0],"float32"), index=Tensor([2],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([2, 1, 400],"float32"), index=Tensor([0],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([3, 1, 0],"float32"), index=Tensor([2],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([3, 1, 500],"float32"), index=Tensor([0],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([4, 8],"float32"), Tensor([0],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([4004, 24],"float32"), axis=0, index=Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([454, 24],"float32"), axis=0, index=Tensor([0],"int64"), )
paddle.Tensor.index_select(Tensor([8, 8],"float32"), Tensor([0],"int64"), axis=0, )
paddle.Tensor.inner(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.Tensor.kthvalue(Tensor([2, 200, 0],"float32"), k=200, axis=1, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([0],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.Tensor.lu(Tensor([0, 3, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([0, 3, 3],"float64"), )
paddle.Tensor.lu(Tensor([0, 3],"float32"), )
paddle.Tensor.lu(Tensor([0, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 0],"float32"), )
paddle.Tensor.lu(Tensor([3, 0],"float64"), )
paddle.Tensor.lu(Tensor([3, 3, 0],"float64"), )
paddle.Tensor.lu(Tensor([4, 0, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 0, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 2, 0],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 12],"float64"), Tensor([0, 12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 12],"float64"), Tensor([0, 12, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 12],"float64"), Tensor([1, 12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 12],"float64"), Tensor([1, 12, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([0, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 2],"float64"), Tensor([0, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 2],"float64"), Tensor([1, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float32"), Tensor([0, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 64],"float32"), Tensor([0, 12, 64, 197],"float32"), )
paddle.Tensor.matmul(Tensor([0, 16, 257, 257],"float32"), Tensor([0, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([0, 16, 257, 64],"float32"), Tensor([0, 16, 64, 257],"float32"), )
paddle.Tensor.matmul(Tensor([1, 0, 12],"float64"), Tensor([1, 12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 12],"float64"), Tensor([1, 12, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 2],"float64"), Tensor([1, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 12],"float64"), Tensor([0, 12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 12],"float64"), Tensor([0, 12, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 12],"float64"), Tensor([1, 12, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([0, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 2],"float64"), Tensor([0, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 2],"float64"), Tensor([1, 2, 0],"float64"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float32"), Tensor([112, 0, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 64],"float32"), Tensor([112, 0, 64, 197],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 64],"float32"), Tensor([112, 12, 64, 197],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([112, 12, 197, 0],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 64],"float32"), Tensor([112, 12, 64, 0],"float32"), )
paddle.Tensor.matmul(Tensor([124, 0, 257, 257],"float32"), Tensor([124, 0, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 0, 257, 64],"float32"), Tensor([124, 0, 64, 257],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 0, 257],"float32"), Tensor([124, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 0, 64],"float32"), Tensor([124, 16, 64, 257],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 257, 257],"float32"), Tensor([124, 16, 257, 0],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 257, 64],"float32"), Tensor([124, 16, 64, 0],"float32"), )
paddle.Tensor.matmul(Tensor([128, 0, 197, 197],"float32"), Tensor([128, 0, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 0, 197],"float32"), Tensor([128, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 197, 197],"float32"), Tensor([128, 12, 197, 0],"float32"), )
paddle.Tensor.max(Tensor([0, 1, 30324],"float32"), -2, )
paddle.Tensor.max(Tensor([0, 1, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 1, 33600],"float32"), -2, )
paddle.Tensor.max(Tensor([0, 1, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 1, 37044],"float32"), -2, )
paddle.Tensor.max(Tensor([0, 1, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 1, 4165],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([0, 1, 5440],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([0, 1, 6150],"float32"), axis=-2, )
paddle.Tensor.max(Tensor([0, 10800, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([0, 1083, 50],"float32"), 2, )
paddle.Tensor.max(Tensor([0, 10],"float64"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 11109, 11],"float32"), -1, )
paddle.Tensor.max(Tensor([0, 11109, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([0, 12096, 2],"float32"), -1, )
paddle.Tensor.max(Tensor([0, 150402],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 153450],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 158580],"float32"), axis=1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 2],"float32"), -1, keepdim=True, )
paddle.Tensor.max(Tensor([0, 4, 38, 38],"float32"), axis=1, )
paddle.Tensor.max(Tensor([0, 4, 76, 136, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([0, 4, 76, 136],"int64"), 1, )
paddle.Tensor.max(Tensor([0, 4, 9, 9],"float32"), axis=1, )
paddle.Tensor.max(Tensor([0, 4800, 100],"float32"), 2, )
paddle.Tensor.max(Tensor([1, 0, 11],"float32"), -1, )
paddle.Tensor.max(Tensor([1, 0, 30324],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 0, 33600],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([1, 0, 37044],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.max(Tensor([100, 4, 0, 38],"float32"), axis=1, )
paddle.Tensor.max(Tensor([100, 4, 0, 9],"float32"), axis=1, )
paddle.Tensor.max(Tensor([100, 4, 38, 0],"float32"), axis=1, )
paddle.Tensor.max(Tensor([100, 4, 9, 0],"float32"), axis=1, )
paddle.Tensor.max(Tensor([12, 4, 0, 136, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 0, 136],"int64"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 0, 1],"float32"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 0],"int64"), 1, )
paddle.Tensor.max(Tensor([12, 4, 76, 136, 0],"float32"), 1, )
paddle.Tensor.max(Tensor([2, 0, 50],"float32"), 2, )
paddle.Tensor.mean(Tensor([0, 28, 28],"int32"), )
paddle.Tensor.mean(Tensor([0],"int32"), )
paddle.Tensor.mean(Tensor([2, 0, 28],"int32"), )
paddle.Tensor.mean(Tensor([2, 28, 0],"int32"), )
paddle.Tensor.median(Tensor([0, 784],"float32"), )
paddle.Tensor.median(Tensor([1000, 0],"float32"), )
paddle.Tensor.min(Tensor([0, 1, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([0, 1, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([0, 1, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([0, 300, 18496],"float32"), -1, )
paddle.Tensor.min(Tensor([0, 300, 36864],"float32"), -1, )
paddle.Tensor.min(Tensor([0, 4, 12],"float32"), axis=1, )
paddle.Tensor.min(Tensor([0, 4, 13],"float32"), axis=1, )
paddle.Tensor.min(Tensor([0, 4, 14],"float32"), axis=1, )
paddle.Tensor.min(Tensor([1, 0, 27216, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 0, 30324, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 0, 33600, 4],"float32"), axis=-1, )
paddle.Tensor.min(Tensor([1, 0, 36864],"float32"), -1, )
paddle.Tensor.min(Tensor([2, 0, 18496],"float32"), -1, )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 2, 0],"float64"), axis=1, keepdim=False, )
paddle.Tensor.nonzero(Tensor([0, 12],"bool"), )
paddle.Tensor.nonzero(Tensor([0, 13],"bool"), )
paddle.Tensor.nonzero(Tensor([0, 14],"bool"), )
paddle.Tensor.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([2, 0, 4, 4],"float64"), )
paddle.Tensor.prod(Tensor([0, 1, 1, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 10285, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 21504, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 24276, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 27216, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1001, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 1002, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 1004, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 10164, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 10285, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1031, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 1034, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([0, 11109, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 12096, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([0, 1],"int64"), axis=1, )
paddle.Tensor.prod(Tensor([0, 2],"int64"), 1, )
paddle.Tensor.prod(Tensor([0, 2],"int64"), axis=1, )
paddle.Tensor.prod(Tensor([0, 3],"int64"), axis=1, )
paddle.Tensor.prod(Tensor([0, 8400, 2],"float32"), 2, )
paddle.Tensor.prod(Tensor([0],"int64"), )
paddle.Tensor.prod(Tensor([1, 0, 1, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 10285, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 21504, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 24276, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 27216, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 0, 2],"float32"), 2, )
paddle.Tensor.prod(Tensor([1, 0, 2],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 1, 0, 2],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 1, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 10285, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 21504, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 24276, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1, 27216, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1001, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 1002, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 1004, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 10164, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 10285, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 1031, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 1034, 0],"float32"), axis=2, )
paddle.Tensor.prod(Tensor([1, 11109, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 12096, 0],"float32"), -1, )
paddle.Tensor.prod(Tensor([1, 8400, 0],"float32"), 2, )
paddle.Tensor.prod(Tensor([2, 0],"int64"), axis=1, )
paddle.Tensor.prod(Tensor([4, 0],"int64"), 1, )
paddle.Tensor.prod(Tensor([5, 0],"int64"), 1, )
paddle.Tensor.put_along_axis(Tensor([2, 0],"float32"), Tensor([2, 4],"int64"), Tensor([2, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([2, 60],"float32"), Tensor([2, 4],"int64"), Tensor([0, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 0],"float32"), Tensor([6, 4],"int64"), Tensor([6, 4],"float32"), axis=1, )
paddle.Tensor.put_along_axis(Tensor([6, 60],"float32"), Tensor([6, 4],"int64"), Tensor([0, 4],"float32"), axis=1, )
paddle.Tensor.real(Tensor([0, 128, 8, 5],"complex64"), )
paddle.Tensor.real(Tensor([0, 15, 8, 8, 32],"complex64"), )
paddle.Tensor.real(Tensor([0, 257, 511],"complex64"), )
paddle.Tensor.real(Tensor([0, 32, 16, 9],"complex64"), )
paddle.Tensor.real(Tensor([0, 32, 8, 5],"complex64"), )
paddle.Tensor.real(Tensor([0, 4],"complex128"), )
paddle.Tensor.real(Tensor([0, 513, 213],"complex64"), )
paddle.Tensor.real(Tensor([0, 64, 16, 9],"complex64"), )
paddle.Tensor.real(Tensor([0, 64, 64],"complex64"), )
paddle.Tensor.real(Tensor([0, 64, 8, 5],"complex64"), )
paddle.Tensor.real(Tensor([0, 784],"complex64"), )
paddle.Tensor.real(Tensor([1000, 0],"complex64"), )
paddle.Tensor.real(Tensor([100000, 0],"complex128"), )
paddle.Tensor.real(Tensor([16, 0, 16, 9],"complex64"), )
paddle.Tensor.real(Tensor([16, 0, 213],"complex64"), )
paddle.Tensor.real(Tensor([16, 0, 511],"complex64"), )
paddle.Tensor.real(Tensor([16, 0, 8, 5],"complex64"), )
paddle.Tensor.real(Tensor([16, 128, 0, 5],"complex64"), )
paddle.Tensor.real(Tensor([16, 128, 8, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 257, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 32, 0, 5],"complex64"), )
paddle.Tensor.real(Tensor([16, 32, 0, 9],"complex64"), )
paddle.Tensor.real(Tensor([16, 32, 16, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 32, 8, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 513, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 64, 0, 5],"complex64"), )
paddle.Tensor.real(Tensor([16, 64, 0, 9],"complex64"), )
paddle.Tensor.real(Tensor([16, 64, 16, 0],"complex64"), )
paddle.Tensor.real(Tensor([16, 64, 8, 0],"complex64"), )
paddle.Tensor.real(Tensor([20, 0, 64],"complex64"), )
paddle.Tensor.real(Tensor([20, 64, 0],"complex64"), )
paddle.Tensor.real(Tensor([32, 0, 8, 8, 32],"complex64"), )
paddle.Tensor.real(Tensor([32, 15, 0, 8, 32],"complex64"), )
paddle.Tensor.real(Tensor([32, 15, 8, 0, 32],"complex64"), )
paddle.Tensor.real(Tensor([32, 15, 8, 8, 0],"complex64"), )
paddle.Tensor.real(Tensor([4, 0],"complex128"), )
paddle.Tensor.reshape(Tensor([0, 1, 1, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([0, 1, 1, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([0, 1, 1, 5],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([0, 1, 1, 5],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([0, 1, 1, 5],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([0, 1, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([0, 1, 5, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([0, 1, 5, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([0, 1, 5, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([0, 1, 5, 5],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([0, 1, 8, 4],"float32"), list[1,1,32,], )
paddle.Tensor.reshape(Tensor([0, 1, 8, 8],"float32"), list[2,1,64,], )
paddle.Tensor.reshape(Tensor([0, 1024],"float32"), tuple(100,38,1024,), )
paddle.Tensor.reshape(Tensor([0, 1024],"float32"), tuple(256,38,1024,), )
paddle.Tensor.reshape(Tensor([0, 1024],"float32"), tuple(56,38,1024,), )
paddle.Tensor.reshape(Tensor([0, 1024],"float32"), tuple(87,38,1024,), )
paddle.Tensor.reshape(Tensor([0, 10],"float32"), tuple(100,9,10,), )
paddle.Tensor.reshape(Tensor([0, 10],"float32"), tuple(227,9,10,), )
paddle.Tensor.reshape(Tensor([0, 10],"float32"), tuple(256,9,10,), )
paddle.Tensor.reshape(Tensor([0, 10],"float32"), tuple(82,9,10,), )
paddle.Tensor.reshape(Tensor([0, 128, 16, 16],"float32"), list[256,128,256,], )
paddle.Tensor.reshape(Tensor([0, 128, 256],"float32"), list[256,128,16,16,], )
paddle.Tensor.reshape(Tensor([0, 128],"float32"), tuple(100,9,128,), )
paddle.Tensor.reshape(Tensor([0, 128],"float32"), tuple(227,9,128,), )
paddle.Tensor.reshape(Tensor([0, 128],"float32"), tuple(256,9,128,), )
paddle.Tensor.reshape(Tensor([0, 128],"float32"), tuple(82,9,128,), )
paddle.Tensor.reshape(Tensor([0, 1444, 2, 2],"float32"), list[100,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([0, 1444, 2, 2],"float32"), list[256,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([0, 1444, 2, 2],"float32"), list[56,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([0, 1444, 2, 2],"float32"), list[87,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([0, 19, 84],"float32"), list[1,1,19,84,], )
paddle.Tensor.reshape(Tensor([0, 1],"float64"), list[1,1,1,1,], )
paddle.Tensor.reshape(Tensor([0, 2001, 2],"float32"), list[100,2001,2,], )
paddle.Tensor.reshape(Tensor([0, 2001, 2],"float32"), list[1000,2001,2,], )
paddle.Tensor.reshape(Tensor([0, 20],"float32"), tuple(100,38,20,), )
paddle.Tensor.reshape(Tensor([0, 20],"float32"), tuple(256,38,20,), )
paddle.Tensor.reshape(Tensor([0, 20],"float32"), tuple(56,38,20,), )
paddle.Tensor.reshape(Tensor([0, 20],"float32"), tuple(87,38,20,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(100,38,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(100,9,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(227,9,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(256,38,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(256,9,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(56,38,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(82,9,256,), )
paddle.Tensor.reshape(Tensor([0, 256],"float32"), tuple(87,38,256,), )
paddle.Tensor.reshape(Tensor([0, 276, 49],"float32"), list[1,1,276,49,], )
paddle.Tensor.reshape(Tensor([0, 3, 2],"float32"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([0, 3, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([0, 3, 465750],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([0, 3, 64, 128],"float32"), list[64,4,3,64,128,], )
paddle.Tensor.reshape(Tensor([0, 3136, 2, 32],"float16"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([0, 3136, 2, 32],"float32"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([0, 324],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 36, 3, 3],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 36, 3, 3],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 36, 3, 3],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 36, 3, 3],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 38, 1024],"float32"), list[100,38,256,4,], )
paddle.Tensor.reshape(Tensor([0, 38, 1024],"float32"), list[256,38,256,4,], )
paddle.Tensor.reshape(Tensor([0, 38, 1024],"float32"), list[56,38,256,4,], )
paddle.Tensor.reshape(Tensor([0, 38, 1024],"float32"), list[87,38,256,4,], )
paddle.Tensor.reshape(Tensor([0, 380],"float32"), list[100,38,10,], )
paddle.Tensor.reshape(Tensor([0, 3],"float32"), list[1,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 1, 1],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([0, 4, 19, 19, 2, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([0, 4, 19, 19, 2, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([0, 4, 19, 19, 2, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([0, 4, 19, 19, 2, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([0, 4, 2, 19, 2, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 4, 2, 19, 2, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 4, 2, 19, 2, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 4, 2, 19, 2, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 3, 3, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([0, 4, 3, 64, 128],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([0, 4, 38, 38],"float32"), list[100,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([0, 4, 38, 38],"float32"), list[256,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([0, 4, 38, 38],"float32"), list[56,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([0, 4, 38, 38],"float32"), list[87,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([0, 4, 9, 9],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 9, 9],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 9, 9],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 4, 9, 9],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([0, 45],"float32"), list[100,9,5,], )
paddle.Tensor.reshape(Tensor([0, 49, 8, 64],"float16"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([0, 49, 8, 64],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([0, 499, 512],"float16"), list[10,0,8,64,], )
paddle.Tensor.reshape(Tensor([0, 499, 512],"float32"), list[10,0,8,64,], )
paddle.Tensor.reshape(Tensor([0, 4],"float32"), tuple(256,1,), )
paddle.Tensor.reshape(Tensor([0, 5, 1, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([0, 5, 1, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([0, 5, 1, 5],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([0, 5, 1, 5],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[1,125,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([0, 5, 5, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([0, 50, 16, 16],"float32"), list[256,50,256,], )
paddle.Tensor.reshape(Tensor([0, 50, 256],"float32"), list[256,50,16,16,], )
paddle.Tensor.reshape(Tensor([0, 512],"float32"), tuple(100,38,512,), )
paddle.Tensor.reshape(Tensor([0, 512],"float32"), tuple(256,38,512,), )
paddle.Tensor.reshape(Tensor([0, 512],"float32"), tuple(56,38,512,), )
paddle.Tensor.reshape(Tensor([0, 512],"float32"), tuple(87,38,512,), )
paddle.Tensor.reshape(Tensor([0, 5776],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([0, 6, 16],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([0, 6, 16],"float32"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([0, 6, 16],"float64"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([0, 6, 16],"int16"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([0, 64, 2, 64],"int32"), list[128,128,], )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(100,38,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(100,9,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(227,9,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(256,38,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(256,9,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(56,38,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(82,9,64,), )
paddle.Tensor.reshape(Tensor([0, 64],"float32"), tuple(87,38,64,), )
paddle.Tensor.reshape(Tensor([0, 7, 7, 512],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([0, 7, 7, 768],"float16"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([0, 7, 7, 768],"float32"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([0, 784, 4, 32],"float16"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([0, 784, 4, 32],"float32"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([0, 8],"float32"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([0, 8],"float64"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([0, 8],"int32"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([0, 9, 256],"float32"), list[100,9,64,4,], )
paddle.Tensor.reshape(Tensor([0, 9, 256],"float32"), list[227,9,64,4,], )
paddle.Tensor.reshape(Tensor([0, 9, 256],"float32"), list[256,9,64,4,], )
paddle.Tensor.reshape(Tensor([0, 9, 256],"float32"), list[82,9,64,4,], )
paddle.Tensor.reshape(Tensor([0],"complex64"), list[14,1,1,1,], )
paddle.Tensor.reshape(Tensor([0],"complex64"), list[39,1,1,1,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[15,48,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[2,20,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[2,50,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[2,64,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[20,1,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[20,20,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[20,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[3,90,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[3,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[48,48,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[48,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[5,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[50,50,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[50,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[64,5,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[64,64,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[64,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[90,4,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[90,90,], )
paddle.Tensor.reshape(Tensor([0],"float32"), list[90,], )
paddle.Tensor.reshape(Tensor([0],"float32"), tuple(1,), )
paddle.Tensor.reshape(Tensor([0],"float64"), list[1,1,], )
paddle.Tensor.reshape(Tensor([0],"float64"), list[], )
paddle.Tensor.reshape(Tensor([0],"float64"), tuple(1,), )
paddle.Tensor.reshape(Tensor([0],"int16"), list[12,20,2,], )
paddle.Tensor.reshape(Tensor([0],"int32"), list[12,20,2,], )
paddle.Tensor.reshape(Tensor([0],"int32"), list[2,3,], )
paddle.Tensor.reshape(Tensor([0],"int32"), list[], )
paddle.Tensor.reshape(Tensor([0],"int32"), tuple(1,), )
paddle.Tensor.reshape(Tensor([0],"int64"), list[12,20,2,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[2,2,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[2,3,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[3,1,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[3,3,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[4,4,], )
paddle.Tensor.reshape(Tensor([0],"int64"), list[], )
paddle.Tensor.reshape(Tensor([1, 0, 1, 1],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([1, 0, 1, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([1, 0, 1, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([1, 0, 2],"float32"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 0, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 0, 49],"float32"), list[1,1,276,49,], )
paddle.Tensor.reshape(Tensor([1, 0, 5, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([1, 0, 5, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([1, 0, 5, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([1, 0, 8, 4],"float32"), list[1,1,32,], )
paddle.Tensor.reshape(Tensor([1, 0, 84],"float32"), list[1,1,19,84,], )
paddle.Tensor.reshape(Tensor([1, 0],"float32"), list[1,3,], )
paddle.Tensor.reshape(Tensor([1, 0],"float64"), list[1,1,1,1,], )
paddle.Tensor.reshape(Tensor([1, 1, 0, 4],"float32"), list[1,1,32,], )
paddle.Tensor.reshape(Tensor([1, 1, 8, 0],"float32"), list[1,1,32,], )
paddle.Tensor.reshape(Tensor([1, 1024, 0],"bfloat16"), shape=list[0,0,8,96,], )
paddle.Tensor.reshape(Tensor([1, 1296, 0],"float32"), list[0,0,4,256,], )
paddle.Tensor.reshape(Tensor([1, 1444, 0],"float32"), list[0,0,4,256,], )
paddle.Tensor.reshape(Tensor([1, 1600, 0],"float32"), list[0,0,4,256,], )
paddle.Tensor.reshape(Tensor([1, 17, 0],"float32"), shape=list[0,0,8,8,], )
paddle.Tensor.reshape(Tensor([1, 18, 0],"float32"), list[0,0,8,32,], )
paddle.Tensor.reshape(Tensor([1, 19, 0],"float32"), list[1,1,19,84,], )
paddle.Tensor.reshape(Tensor([1, 2048, 0],"float16"), shape=list[0,0,2,16,], )
paddle.Tensor.reshape(Tensor([1, 2048, 0],"float16"), shape=list[0,0,8,16,], )
paddle.Tensor.reshape(Tensor([1, 2048, 0],"float16"), shape=list[0,0,8,96,], )
paddle.Tensor.reshape(Tensor([1, 21, 0],"float32"), list[0,0,8,32,], )
paddle.Tensor.reshape(Tensor([1, 2116, 0],"float32"), list[0,0,8,32,], )
paddle.Tensor.reshape(Tensor([1, 276, 0],"float32"), list[1,1,276,49,], )
paddle.Tensor.reshape(Tensor([1, 3, 0],"float32"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 3, 0],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([1, 4, 0, 1],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([1, 4, 0],"float16"), shape=list[0,0,8,8,], )
paddle.Tensor.reshape(Tensor([1, 4, 1, 0],"float32"), list[1,4,1,1,], )
paddle.Tensor.reshape(Tensor([1, 484, 0],"float32"), list[0,0,8,64,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([1, 5, 0, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([1, 5, 0],"float16"), shape=list[0,0,8,96,], )
paddle.Tensor.reshape(Tensor([1, 5, 1, 0],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([1, 5, 1, 0],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([1, 5, 5, 0],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([1, 5, 5, 0],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([1, 5, 5, 0],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([1, 58, 0],"float32"), shape=list[0,0,8,8,], )
paddle.Tensor.reshape(Tensor([1, 6, 0],"float32"), list[0,0,1,4,], )
paddle.Tensor.reshape(Tensor([1, 6, 0],"float32"), list[0,0,2,4,], )
paddle.Tensor.reshape(Tensor([1, 8, 0],"float32"), shape=list[0,0,2,16,], )
paddle.Tensor.reshape(Tensor([1, 8, 0],"float32"), shape=list[0,0,8,16,], )
paddle.Tensor.reshape(Tensor([10, 2, 0],"float32"), list[0,0,1,4,], )
paddle.Tensor.reshape(Tensor([10, 2, 0],"float32"), list[0,0,2,4,], )
paddle.Tensor.reshape(Tensor([10, 499, 0],"float16"), list[10,0,8,64,], )
paddle.Tensor.reshape(Tensor([10, 499, 0],"float32"), list[10,0,8,64,], )
paddle.Tensor.reshape(Tensor([100, 0, 1024],"float32"), list[100,38,256,4,], )
paddle.Tensor.reshape(Tensor([100, 0, 19, 19, 2, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 0, 2, 19, 2, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 0, 2, 2],"float32"), list[100,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([100, 0, 256],"float32"), list[100,9,64,4,], )
paddle.Tensor.reshape(Tensor([100, 0, 2],"float32"), list[100,2001,2,], )
paddle.Tensor.reshape(Tensor([100, 0, 3, 3, 3, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 0, 3, 3, 3, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 0, 3, 3],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 0, 38, 38],"float32"), list[100,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([100, 0, 9, 9],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 0],"float32"), list[100,38,10,], )
paddle.Tensor.reshape(Tensor([100, 0],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 0],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 0],"float32"), list[100,9,5,], )
paddle.Tensor.reshape(Tensor([100, 1444, 0, 2],"float32"), list[100,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([100, 1444, 2, 0],"float32"), list[100,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([100, 2001, 0],"float32"), list[100,2001,2,], )
paddle.Tensor.reshape(Tensor([100, 36, 0, 3],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 36, 3, 0],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 38, 0],"float32"), list[100,38,256,4,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 19, 2, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 19, 2, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 3, 3, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 3, 3, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 38],"float32"), list[100,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([100, 4, 0, 9],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 19, 0, 2, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 4, 19, 19, 0, 2],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 4, 19, 19, 2, 0],"float32"), list[100,1444,2,2,], )
paddle.Tensor.reshape(Tensor([100, 4, 2, 0, 2, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 4, 2, 19, 0, 19],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 4, 2, 19, 2, 0],"float32"), list[100,4,38,38,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 0, 3, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 0, 3, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 3, 0, 3],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 3, 0, 3],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 3, 3, 0],"float32"), list[100,36,3,3,], )
paddle.Tensor.reshape(Tensor([100, 4, 3, 3, 3, 0],"float32"), list[100,4,9,9,], )
paddle.Tensor.reshape(Tensor([100, 4, 38, 0],"float32"), list[100,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([100, 4, 9, 0],"float32"), list[100,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([100, 9, 0],"float32"), list[100,9,64,4,], )
paddle.Tensor.reshape(Tensor([1000, 0, 2],"float32"), list[1000,2001,2,], )
paddle.Tensor.reshape(Tensor([1000, 2001, 0],"float32"), list[1000,2001,2,], )
paddle.Tensor.reshape(Tensor([128, 0, 2, 32],"float16"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 0, 2, 32],"float32"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 0, 4, 32],"float16"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 0, 4, 32],"float32"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 0, 7, 512],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 0, 7, 768],"float16"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 0, 7, 768],"float32"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 0, 8, 64],"float16"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 0, 8, 64],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 3136, 0, 32],"float16"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 3136, 0, 32],"float32"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 3136, 2, 0],"float16"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 3136, 2, 0],"float32"), list[128,3136,64,], )
paddle.Tensor.reshape(Tensor([128, 49, 0, 64],"float16"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 49, 0, 64],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 49, 8, 0],"float16"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 49, 8, 0],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 7, 0, 512],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 7, 0, 768],"float16"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 7, 0, 768],"float32"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 7, 7, 0],"float16"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 7, 7, 0],"float32"), list[128,49,512,], )
paddle.Tensor.reshape(Tensor([128, 7, 7, 0],"float32"), list[128,49,768,], )
paddle.Tensor.reshape(Tensor([128, 784, 0, 32],"float16"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 784, 0, 32],"float32"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 784, 4, 0],"float16"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([128, 784, 4, 0],"float32"), list[128,784,128,], )
paddle.Tensor.reshape(Tensor([13, 21, 0],"float32"), shape=list[0,0,4,8,], )
paddle.Tensor.reshape(Tensor([13, 7, 0, 8],"float32"), list[0,0,32,], )
paddle.Tensor.reshape(Tensor([13, 7, 0],"float32"), shape=list[0,0,2,8,], )
paddle.Tensor.reshape(Tensor([13, 7, 0],"float32"), shape=list[0,0,4,8,], )
paddle.Tensor.reshape(Tensor([13, 7, 4, 0],"float32"), list[0,0,32,], )
paddle.Tensor.reshape(Tensor([145, 4, 0],"float16"), list[0,0,2,128,], )
paddle.Tensor.reshape(Tensor([145, 4, 0],"float16"), list[0,0,4,128,], )
paddle.Tensor.reshape(Tensor([158, 4, 0],"float16"), list[0,0,2,128,], )
paddle.Tensor.reshape(Tensor([158, 4, 0],"float16"), list[0,0,4,128,], )
paddle.Tensor.reshape(Tensor([168, 4, 0],"float16"), list[0,0,2,128,], )
paddle.Tensor.reshape(Tensor([168, 4, 0],"float16"), list[0,0,4,128,], )
paddle.Tensor.reshape(Tensor([192, 0, 120],"float16"), list[0,1,40,120,], )
paddle.Tensor.reshape(Tensor([192, 0, 360],"float16"), tuple(0,-1,3,8,15,), )
paddle.Tensor.reshape(Tensor([192, 0, 768],"float16"), tuple(0,40,2,12,32,), )
paddle.Tensor.reshape(Tensor([192, 0, 8, 15],"float16"), tuple(0,-1,120,), )
paddle.Tensor.reshape(Tensor([192, 40, 0, 15],"float16"), tuple(0,-1,120,), )
paddle.Tensor.reshape(Tensor([192, 40, 0],"float16"), list[0,1,40,120,], )
paddle.Tensor.reshape(Tensor([192, 40, 0],"float16"), tuple(0,-1,3,8,15,), )
paddle.Tensor.reshape(Tensor([192, 40, 0],"float16"), tuple(0,40,2,12,32,), )
paddle.Tensor.reshape(Tensor([192, 40, 8, 0],"float16"), tuple(0,-1,120,), )
paddle.Tensor.reshape(Tensor([2, 0, 2, 64],"int32"), list[128,128,], )
paddle.Tensor.reshape(Tensor([2, 0, 8, 8],"float32"), list[2,1,64,], )
paddle.Tensor.reshape(Tensor([2, 1, 0, 8],"float32"), list[2,1,64,], )
paddle.Tensor.reshape(Tensor([2, 1, 0],"float32"), shape=list[0,0,2,8,], )
paddle.Tensor.reshape(Tensor([2, 1, 0],"float32"), shape=list[0,0,4,8,], )
paddle.Tensor.reshape(Tensor([2, 1, 8, 0],"float32"), list[2,1,64,], )
paddle.Tensor.reshape(Tensor([2, 256, 0],"float32"), list[0,0,128,128,], )
paddle.Tensor.reshape(Tensor([2, 256, 0],"float32"), list[0,0,16,16,], )
paddle.Tensor.reshape(Tensor([2, 256, 0],"float32"), list[0,0,32,32,], )
paddle.Tensor.reshape(Tensor([2, 256, 0],"float32"), list[0,0,64,64,], )
paddle.Tensor.reshape(Tensor([2, 288, 0],"float16"), shape=list[0,0,1,64,], )
paddle.Tensor.reshape(Tensor([2, 3, 0],"float32"), shape=list[0,0,2,8,], )
paddle.Tensor.reshape(Tensor([2, 302, 0],"float16"), shape=list[0,0,1,64,], )
paddle.Tensor.reshape(Tensor([2, 304, 0],"float16"), shape=list[0,0,1,64,], )
paddle.Tensor.reshape(Tensor([2, 400, 0],"float32"), list[0,0,8,64,], )
paddle.Tensor.reshape(Tensor([2, 5, 0],"float32"), shape=list[0,0,16,256,], )
paddle.Tensor.reshape(Tensor([2, 64, 0, 64],"int32"), list[128,128,], )
paddle.Tensor.reshape(Tensor([2, 64, 2, 0],"int32"), list[128,128,], )
paddle.Tensor.reshape(Tensor([2, 768, 0],"float32"), list[0,0,128,128,], )
paddle.Tensor.reshape(Tensor([2, 768, 0],"float32"), list[0,0,16,16,], )
paddle.Tensor.reshape(Tensor([2, 768, 0],"float32"), list[0,0,32,32,], )
paddle.Tensor.reshape(Tensor([2, 768, 0],"float32"), list[0,0,64,64,], )
paddle.Tensor.reshape(Tensor([2043, 0],"float32"), tuple(227,9,10,), )
paddle.Tensor.reshape(Tensor([2043, 0],"float32"), tuple(227,9,128,), )
paddle.Tensor.reshape(Tensor([2043, 0],"float32"), tuple(227,9,256,), )
paddle.Tensor.reshape(Tensor([2043, 0],"float32"), tuple(227,9,64,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,1024,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,20,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,256,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,512,), )
paddle.Tensor.reshape(Tensor([2128, 0],"float32"), tuple(56,38,64,), )
paddle.Tensor.reshape(Tensor([227, 0, 256],"float32"), list[227,9,64,4,], )
paddle.Tensor.reshape(Tensor([227, 0, 3, 3, 3, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 0, 3, 3, 3, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 0, 3, 3],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 0, 9, 9],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 36, 0, 3],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 36, 3, 0],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 0, 3, 3, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 0, 3, 3, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 4, 0, 9],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 0, 3, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 0, 3, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 3, 0, 3],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 3, 0, 3],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 3, 3, 0],"float32"), list[227,36,3,3,], )
paddle.Tensor.reshape(Tensor([227, 4, 3, 3, 3, 0],"float32"), list[227,4,9,9,], )
paddle.Tensor.reshape(Tensor([227, 4, 9, 0],"float32"), list[227,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([227, 9, 0],"float32"), list[227,9,64,4,], )
paddle.Tensor.reshape(Tensor([2304, 0],"float32"), tuple(256,9,10,), )
paddle.Tensor.reshape(Tensor([2304, 0],"float32"), tuple(256,9,128,), )
paddle.Tensor.reshape(Tensor([2304, 0],"float32"), tuple(256,9,256,), )
paddle.Tensor.reshape(Tensor([2304, 0],"float32"), tuple(256,9,64,), )
paddle.Tensor.reshape(Tensor([256, 0, 1024],"float32"), list[256,38,256,4,], )
paddle.Tensor.reshape(Tensor([256, 0, 16, 16],"float32"), list[256,128,256,], )
paddle.Tensor.reshape(Tensor([256, 0, 16, 16],"float32"), list[256,50,256,], )
paddle.Tensor.reshape(Tensor([256, 0, 19, 19, 2, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 0, 2, 19, 2, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 0, 2, 2],"float32"), list[256,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([256, 0, 256],"float32"), list[256,128,16,16,], )
paddle.Tensor.reshape(Tensor([256, 0, 256],"float32"), list[256,50,16,16,], )
paddle.Tensor.reshape(Tensor([256, 0, 256],"float32"), list[256,9,64,4,], )
paddle.Tensor.reshape(Tensor([256, 0, 3, 3, 3, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 0, 3, 3, 3, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 0, 3, 3],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 0, 38, 38],"float32"), list[256,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([256, 0, 64, 128],"float32"), list[64,4,3,64,128,], )
paddle.Tensor.reshape(Tensor([256, 0, 9, 9],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 128, 0, 16],"float32"), list[256,128,256,], )
paddle.Tensor.reshape(Tensor([256, 128, 0],"float32"), list[256,128,16,16,], )
paddle.Tensor.reshape(Tensor([256, 128, 16, 0],"float32"), list[256,128,256,], )
paddle.Tensor.reshape(Tensor([256, 1444, 0, 2],"float32"), list[256,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([256, 1444, 2, 0],"float32"), list[256,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([256, 3, 0, 128],"float32"), list[64,4,3,64,128,], )
paddle.Tensor.reshape(Tensor([256, 3, 64, 0],"float32"), list[64,4,3,64,128,], )
paddle.Tensor.reshape(Tensor([256, 36, 0, 3],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 36, 3, 0],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 38, 0],"float32"), list[256,38,256,4,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 19, 2, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 19, 2, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 3, 3, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 3, 3, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 38],"float32"), list[256,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([256, 4, 0, 9],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 19, 0, 2, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 4, 19, 19, 0, 2],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 4, 19, 19, 2, 0],"float32"), list[256,1444,2,2,], )
paddle.Tensor.reshape(Tensor([256, 4, 2, 0, 2, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 4, 2, 19, 0, 19],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 4, 2, 19, 2, 0],"float32"), list[256,4,38,38,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 0, 3, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 0, 3, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 3, 0, 3],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 3, 0, 3],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 3, 3, 0],"float32"), list[256,36,3,3,], )
paddle.Tensor.reshape(Tensor([256, 4, 3, 3, 3, 0],"float32"), list[256,4,9,9,], )
paddle.Tensor.reshape(Tensor([256, 4, 38, 0],"float32"), list[256,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([256, 4, 9, 0],"float32"), list[256,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([256, 50, 0, 16],"float32"), list[256,50,256,], )
paddle.Tensor.reshape(Tensor([256, 50, 0],"float32"), list[256,50,16,16,], )
paddle.Tensor.reshape(Tensor([256, 50, 16, 0],"float32"), list[256,50,256,], )
paddle.Tensor.reshape(Tensor([256, 9, 0],"float32"), list[256,9,64,4,], )
paddle.Tensor.reshape(Tensor([3, 0, 2],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([3, 1, 0],"float64"), tuple(1,2,3,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,1024,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,20,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,256,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,512,), )
paddle.Tensor.reshape(Tensor([3306, 0],"float32"), tuple(87,38,64,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,1024,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,20,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,256,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,512,), )
paddle.Tensor.reshape(Tensor([3800, 0],"float32"), tuple(100,38,64,), )
paddle.Tensor.reshape(Tensor([4, 0, 120],"float32"), list[0,1,40,120,], )
paddle.Tensor.reshape(Tensor([4, 0, 16],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([4, 0, 16],"float32"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 0, 16],"float64"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 0, 16],"int16"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 0, 360],"float32"), tuple(0,-1,3,8,15,), )
paddle.Tensor.reshape(Tensor([4, 0, 465750],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([4, 0, 768],"float32"), tuple(0,40,2,12,32,), )
paddle.Tensor.reshape(Tensor([4, 0, 8, 15],"float32"), tuple(0,-1,120,), )
paddle.Tensor.reshape(Tensor([4, 0],"float32"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([4, 0],"float64"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([4, 0],"int32"), tuple(4,8,1,1,), )
paddle.Tensor.reshape(Tensor([4, 1, 0],"float32"), shape=list[0,0,16,256,], )
paddle.Tensor.reshape(Tensor([4, 148, 0],"float16"), shape=list[0,0,2,16,], )
paddle.Tensor.reshape(Tensor([4, 148, 0],"float16"), shape=list[0,0,8,16,], )
paddle.Tensor.reshape(Tensor([4, 20, 0, 6],"float32"), list[0,0,-1,], )
paddle.Tensor.reshape(Tensor([4, 20, 6, 0],"float32"), list[0,0,-1,], )
paddle.Tensor.reshape(Tensor([4, 256, 0],"float16"), list[0,0,128,128,], )
paddle.Tensor.reshape(Tensor([4, 256, 0],"float16"), list[0,0,256,256,], )
paddle.Tensor.reshape(Tensor([4, 256, 0],"float16"), list[0,0,32,32,], )
paddle.Tensor.reshape(Tensor([4, 256, 0],"float16"), list[0,0,64,64,], )
paddle.Tensor.reshape(Tensor([4, 256, 0],"float32"), list[0,0,256,256,], )
paddle.Tensor.reshape(Tensor([4, 3, 0],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([4, 40, 0, 15],"float32"), tuple(0,-1,120,), )
paddle.Tensor.reshape(Tensor([4, 40, 0],"float32"), list[0,1,40,120,], )
paddle.Tensor.reshape(Tensor([4, 40, 0],"float32"), tuple(0,-1,3,8,15,), )
paddle.Tensor.reshape(Tensor([4, 40, 0],"float32"), tuple(0,40,2,12,32,), )
paddle.Tensor.reshape(Tensor([4, 40, 8, 0],"float32"), tuple(0,-1,120,), )
paddle.Tensor.reshape(Tensor([4, 400, 0],"float32"), list[0,0,8,64,], )
paddle.Tensor.reshape(Tensor([4, 5, 0],"float32"), shape=list[0,0,16,256,], )
paddle.Tensor.reshape(Tensor([4, 6, 0],"float32"), Tensor([4],"int64"), )
paddle.Tensor.reshape(Tensor([4, 6, 0],"float32"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 6, 0],"float64"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([4, 6, 0],"int16"), list[2,2,6,16,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 0, 1, 5],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[1,125,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 0, 5, 5],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 1],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 5],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 5],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 5],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 0, 5],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[1,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[5,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 1, 0],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 1, 5, 0],"float64"), list[1,25,], )
paddle.Tensor.reshape(Tensor([5, 1, 5, 0],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 5, 0],"float64"), list[25,1,], )
paddle.Tensor.reshape(Tensor([5, 1, 5, 0],"float64"), list[5,5,], )
paddle.Tensor.reshape(Tensor([5, 2, 0],"float32"), list[0,0,1,4,], )
paddle.Tensor.reshape(Tensor([5, 2, 0],"float32"), list[0,0,2,4,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 1],"float64"), list[1,125,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 1],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 1],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 1],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 5],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 5, 0, 5],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 5, 1, 0],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 5, 1, 0],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([5, 5, 5, 0],"float64"), list[1,125,], )
paddle.Tensor.reshape(Tensor([5, 5, 5, 0],"float64"), list[125,1,], )
paddle.Tensor.reshape(Tensor([5, 5, 5, 0],"float64"), list[25,5,], )
paddle.Tensor.reshape(Tensor([5, 5, 5, 0],"float64"), list[5,25,], )
paddle.Tensor.reshape(Tensor([512, 0, 768],"float16"), tuple(0,-1,3,8,32,), )
paddle.Tensor.reshape(Tensor([512, 0, 768],"float32"), tuple(0,-1,3,8,32,), )
paddle.Tensor.reshape(Tensor([512, 0, 8, 32],"float16"), tuple(0,-1,256,), )
paddle.Tensor.reshape(Tensor([512, 0, 8, 32],"float32"), tuple(0,-1,256,), )
paddle.Tensor.reshape(Tensor([512, 50, 0, 32],"float16"), tuple(0,-1,256,), )
paddle.Tensor.reshape(Tensor([512, 50, 0, 32],"float32"), tuple(0,-1,256,), )
paddle.Tensor.reshape(Tensor([512, 50, 0],"float16"), tuple(0,-1,3,8,32,), )
paddle.Tensor.reshape(Tensor([512, 50, 0],"float32"), tuple(0,-1,3,8,32,), )
paddle.Tensor.reshape(Tensor([512, 50, 8, 0],"float16"), tuple(0,-1,256,), )
paddle.Tensor.reshape(Tensor([512, 50, 8, 0],"float32"), tuple(0,-1,256,), )
paddle.Tensor.reshape(Tensor([52, 7, 0, 2],"float16"), list[0,0,32,], )
paddle.Tensor.reshape(Tensor([52, 7, 0, 2],"float32"), list[0,0,32,], )
paddle.Tensor.reshape(Tensor([52, 7, 0, 6],"float32"), list[0,0,-1,], )
paddle.Tensor.reshape(Tensor([52, 7, 0],"float16"), list[0,0,16,2,], )
paddle.Tensor.reshape(Tensor([52, 7, 0],"float32"), list[0,0,16,2,], )
paddle.Tensor.reshape(Tensor([52, 7, 16, 0],"float16"), list[0,0,32,], )
paddle.Tensor.reshape(Tensor([52, 7, 16, 0],"float32"), list[0,0,32,], )
paddle.Tensor.reshape(Tensor([52, 7, 6, 0],"float32"), list[0,0,-1,], )
paddle.Tensor.reshape(Tensor([56, 0, 1024],"float32"), list[56,38,256,4,], )
paddle.Tensor.reshape(Tensor([56, 0, 19, 19, 2, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 0, 2, 19, 2, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 0, 2, 2],"float32"), list[56,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([56, 0, 38, 38],"float32"), list[56,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([56, 1444, 0, 2],"float32"), list[56,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([56, 1444, 2, 0],"float32"), list[56,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([56, 38, 0],"float32"), list[56,38,256,4,], )
paddle.Tensor.reshape(Tensor([56, 4, 0, 19, 2, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 4, 0, 19, 2, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 4, 0, 38],"float32"), list[56,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([56, 4, 19, 0, 2, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 4, 19, 19, 0, 2],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 4, 19, 19, 2, 0],"float32"), list[56,1444,2,2,], )
paddle.Tensor.reshape(Tensor([56, 4, 2, 0, 2, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 4, 2, 19, 0, 19],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 4, 2, 19, 2, 0],"float32"), list[56,4,38,38,], )
paddle.Tensor.reshape(Tensor([56, 4, 38, 0],"float32"), list[56,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([58, 1, 0],"float32"), list[0,0,2,8,], )
paddle.Tensor.reshape(Tensor([64, 0, 120],"float16"), list[0,1,40,120,], )
paddle.Tensor.reshape(Tensor([64, 0, 3, 64, 128],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([64, 0, 360],"float16"), tuple(0,-1,3,8,15,), )
paddle.Tensor.reshape(Tensor([64, 0, 8, 15],"float16"), tuple(0,-1,120,), )
paddle.Tensor.reshape(Tensor([64, 0],"float32"), tuple(256,1,), )
paddle.Tensor.reshape(Tensor([64, 4, 0, 64, 128],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([64, 4, 3, 0, 128],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([64, 4, 3, 64, 0],"float32"), tuple(256,3,64,128,), )
paddle.Tensor.reshape(Tensor([64, 40, 0, 15],"float16"), tuple(0,-1,120,), )
paddle.Tensor.reshape(Tensor([64, 40, 0],"float16"), list[0,1,40,120,], )
paddle.Tensor.reshape(Tensor([64, 40, 0],"float16"), tuple(0,-1,3,8,15,), )
paddle.Tensor.reshape(Tensor([64, 40, 8, 0],"float16"), tuple(0,-1,120,), )
paddle.Tensor.reshape(Tensor([738, 0],"float32"), tuple(82,9,10,), )
paddle.Tensor.reshape(Tensor([738, 0],"float32"), tuple(82,9,128,), )
paddle.Tensor.reshape(Tensor([738, 0],"float32"), tuple(82,9,256,), )
paddle.Tensor.reshape(Tensor([738, 0],"float32"), tuple(82,9,64,), )
paddle.Tensor.reshape(Tensor([8, 512, 0],"float32"), shape=list[0,0,32,128,], )
paddle.Tensor.reshape(Tensor([82, 0, 256],"float32"), list[82,9,64,4,], )
paddle.Tensor.reshape(Tensor([82, 0, 3, 3, 3, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 0, 3, 3, 3, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 0, 3, 3],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 0, 9, 9],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 36, 0, 3],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 36, 3, 0],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 0, 3, 3, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 0, 3, 3, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 4, 0, 9],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 0, 3, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 0, 3, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 3, 0, 3],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 3, 0, 3],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 3, 3, 0],"float32"), list[82,36,3,3,], )
paddle.Tensor.reshape(Tensor([82, 4, 3, 3, 3, 0],"float32"), list[82,4,9,9,], )
paddle.Tensor.reshape(Tensor([82, 4, 9, 0],"float32"), list[82,4,3,3,3,3,], )
paddle.Tensor.reshape(Tensor([82, 9, 0],"float32"), list[82,9,64,4,], )
paddle.Tensor.reshape(Tensor([87, 0, 1024],"float32"), list[87,38,256,4,], )
paddle.Tensor.reshape(Tensor([87, 0, 19, 19, 2, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 0, 2, 19, 2, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 0, 2, 2],"float32"), list[87,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([87, 0, 38, 38],"float32"), list[87,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([87, 1444, 0, 2],"float32"), list[87,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([87, 1444, 2, 0],"float32"), list[87,4,19,19,2,2,], )
paddle.Tensor.reshape(Tensor([87, 38, 0],"float32"), list[87,38,256,4,], )
paddle.Tensor.reshape(Tensor([87, 4, 0, 19, 2, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 4, 0, 19, 2, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 4, 0, 38],"float32"), list[87,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([87, 4, 19, 0, 2, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 4, 19, 19, 0, 2],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 4, 19, 19, 2, 0],"float32"), list[87,1444,2,2,], )
paddle.Tensor.reshape(Tensor([87, 4, 2, 0, 2, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 4, 2, 19, 0, 19],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 4, 2, 19, 2, 0],"float32"), list[87,4,38,38,], )
paddle.Tensor.reshape(Tensor([87, 4, 38, 0],"float32"), list[87,4,2,19,2,19,], )
paddle.Tensor.reshape(Tensor([900, 0],"float32"), tuple(100,9,10,), )
paddle.Tensor.reshape(Tensor([900, 0],"float32"), tuple(100,9,128,), )
paddle.Tensor.reshape(Tensor([900, 0],"float32"), tuple(100,9,256,), )
paddle.Tensor.reshape(Tensor([900, 0],"float32"), tuple(100,9,64,), )
paddle.Tensor.reshape(Tensor([96, 0, 768],"float32"), tuple(0,40,2,12,32,), )
paddle.Tensor.reshape(Tensor([96, 40, 0],"float32"), tuple(0,40,2,12,32,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,1024,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,20,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,256,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,512,), )
paddle.Tensor.reshape(Tensor([9728, 0],"float32"), tuple(256,38,64,), )
paddle.Tensor.set_(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), list[3,8,], list[2,2,], 0, )
paddle.Tensor.set_(Tensor([0, 8],"float16"), Tensor([6, 3],"float16"), list[3,8,], list[2,2,], 0, )
paddle.Tensor.set_(Tensor([20],"complex64"), Tensor([0, 3],"complex64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"complex64"), Tensor([15, 0],"complex64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float32"), Tensor([0, 3],"float32"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float32"), Tensor([15, 0],"float32"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float64"), Tensor([0, 3],"float64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float64"), Tensor([15, 0],"float64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([3, 0],"float16"), Tensor([6, 0],"float16"), list[3,8,], list[2,2,], 0, )
paddle.Tensor.set_(Tensor([3, 8],"float16"), Tensor([0, 3],"float16"), list[3,8,], list[2,2,], 0, )
paddle.Tensor.set_(Tensor([3, 8],"float16"), Tensor([6, 0],"float16"), list[3,8,], list[2,2,], 0, )
paddle.Tensor.split(Tensor([0, 17, 3072],"float16"), 17, 1, )
paddle.Tensor.split(Tensor([0, 17, 768],"float16"), 17, 1, )
paddle.Tensor.split(Tensor([0, 176, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([0, 200, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([0, 21, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([0, 22, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([0, 300, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([0, 6, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([0, 7, 2],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([0, 9, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([10, 0, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([145, 0, 1024],"float16"), list[512,256,256,], axis=-1, )
paddle.Tensor.split(Tensor([158, 0, 1024],"float16"), list[512,256,256,], axis=-1, )
paddle.Tensor.split(Tensor([16, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([160, 17, 0],"float16"), 17, 1, )
paddle.Tensor.split(Tensor([160, 17, 0],"float32"), 17, 1, )
paddle.Tensor.split(Tensor([168, 0, 1024],"float16"), list[512,256,256,], axis=-1, )
paddle.Tensor.split(Tensor([2, 8400, 0, 32],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([2, 8400, 8, 0],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([4, 8400, 0, 32],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([4, 8400, 8, 0],"float32"), list[6400,1600,400,], axis=1, )
paddle.Tensor.split(Tensor([5, 0, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([512, 17, 0],"float16"), 17, 1, )
paddle.Tensor.std(Tensor([0, 1024, 8],"float32"), )
paddle.Tensor.std(Tensor([0, 1024, 8],"float64"), )
paddle.Tensor.std(Tensor([1, 1, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 10, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 11, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1024, 0, 8],"float32"), )
paddle.Tensor.std(Tensor([1024, 0, 8],"float64"), )
paddle.Tensor.std(Tensor([1024, 1024, 0],"float32"), )
paddle.Tensor.std(Tensor([1024, 1024, 0],"float64"), )
paddle.Tensor.std(Tensor([1444, 0],"float32"), axis=1, )
paddle.Tensor.std(Tensor([36, 0],"float32"), axis=1, )
paddle.Tensor.std(Tensor([38, 0],"float32"), axis=1, )
paddle.Tensor.std(Tensor([9, 0],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([0, 150402],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 153450],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 158580],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 19528],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([0, 2],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 42],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 4],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 58584],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([0, 78112],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([0, 7],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([1358, 0],"bool"), axis=0, )
paddle.Tensor.sum(Tensor([4, 0],"bool"), axis=1, keepdim=True, )
paddle.Tensor.take_along_axis(Tensor([128, 0],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 0],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, )
paddle.Tensor.tile(Tensor([1, 0, 241, 241],"float32"), list[32,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 241, 241],"float32"), list[8,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 298, 364],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 32, 26],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 0, 34, 34],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 241],"float32"), list[32,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 241],"float32"), list[8,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 26],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 34],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 0, 364],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 241, 0],"float32"), list[32,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 241, 0],"float32"), list[8,1,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 298, 0],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 32, 0],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 1, 34, 0],"float32"), list[1,3,1,1,], )
paddle.Tensor.tile(Tensor([1, 3, 0, 1, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([1, 3, 2, 0, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([1, 3, 2, 1, 0],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([10, 0, 1, 1, 4],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([10, 2, 0, 1, 4],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([10, 2, 1, 0, 4],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([10, 2, 1, 1, 0],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([13, 0, 2, 1, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([13, 7, 0, 1, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([13, 7, 2, 0, 8],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([13, 7, 2, 1, 0],"float32"), list[1,1,1,2,1,], )
paddle.Tensor.tile(Tensor([58, 0, 2, 1, 8],"float32"), list[1,1,1,4,1,], )
paddle.Tensor.tile(Tensor([58, 1, 0, 1, 8],"float32"), list[1,1,1,4,1,], )
paddle.Tensor.tile(Tensor([58, 1, 2, 0, 8],"float32"), list[1,1,1,4,1,], )
paddle.Tensor.tile(Tensor([58, 1, 2, 1, 0],"float32"), list[1,1,1,4,1,], )
paddle.Tensor.topk(Tensor([0, 1000],"float32"), 5, 1, True, True, )
paddle.Tensor.var(Tensor([0, 1],"float64"), axis=0, )
paddle.Tensor.var(Tensor([0, 2, 3],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0, 2, 3],"float64"), axis=0, )
paddle.Tensor.var(Tensor([0, 2],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0, 4],"float64"), axis=0, )
paddle.Tensor.var(Tensor([0, 784],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0],"float32"), axis=0, )
paddle.Tensor.var(Tensor([0],"float64"), axis=0, )
paddle.add_n(list[Tensor([100, 0],"float32"),Tensor([100, 1],"float32"),], )
paddle.add_n(list[Tensor([100, 1],"float32"),Tensor([100, 0],"float32"),], )
paddle.add_n(list[Tensor([1200, 0],"float32"),Tensor([1200, 1],"float32"),], )
paddle.add_n(list[Tensor([1200, 1],"float32"),Tensor([1200, 0],"float32"),], )
paddle.add_n(list[Tensor([1291, 0],"float32"),Tensor([1291, 1],"float32"),], )
paddle.add_n(list[Tensor([1291, 1],"float32"),Tensor([1291, 0],"float32"),], )
paddle.add_n(list[Tensor([1800, 0],"float32"),Tensor([1800, 1],"float32"),], )
paddle.add_n(list[Tensor([1800, 1],"float32"),Tensor([1800, 0],"float32"),], )
paddle.add_n(list[Tensor([18211, 0],"float32"),Tensor([18211, 1],"float32"),], )
paddle.add_n(list[Tensor([18211, 1],"float32"),Tensor([18211, 0],"float32"),], )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([0, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 0],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 0],"float64"), beta=-3.3, alpha=3.3, )
paddle.amax(Tensor([0, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amax(Tensor([0, 4],"float64"), 1, True, )
paddle.amax(Tensor([10, 0, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([2, 0],"float64"), 0, False, )
paddle.amax(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.amax(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([0, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([0, 4],"float64"), 1, True, )
paddle.amin(Tensor([10, 0, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([2, 0],"float64"), 0, False, )
paddle.amin(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.amin(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.argmax(Tensor([0, 100, 32],"float32"), axis=1, )
paddle.argmax(Tensor([0, 100, 64],"float32"), axis=1, )
paddle.argmax(Tensor([0, 1000],"float32"), axis=1, )
paddle.argmax(Tensor([0, 100],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([0, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([0, 10],"float32"), axis=1, )
paddle.argmax(Tensor([0, 2, 1024, 1024],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([0, 2, 4, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 2, 496, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([0, 2, 512, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([0, 2, 800, 1037],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([0, 2, 800, 1067],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([0, 20, 32],"float32"), axis=1, )
paddle.argmax(Tensor([0, 20, 64],"float32"), axis=1, )
paddle.argmax(Tensor([0, 256],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 3, 4],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([0, 30, 20],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 32, 64],"float32"), axis=1, )
paddle.argmax(Tensor([0, 32000],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 32],"float64"), axis=-1, )
paddle.argmax(Tensor([0, 51865],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 6],"float32"), axis=1, )
paddle.argmax(Tensor([0, 7, 99],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 8, 14, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([1, 2, 0, 1024],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 0, 1037],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 0, 1067],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 0, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1024, 0],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 496, 0],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 512, 0],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 800, 0],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 8, 0, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([1, 8, 14, 0],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([12988, 32, 0],"float32"), axis=1, )
paddle.argmax(Tensor([13, 0, 4, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 0, 99],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 2, 0, 16, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([13, 2, 4, 0, 2],"float32"), axis=-1, )
paddle.argmax(Tensor([2, 0, 4],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([29151, 100, 0],"float32"), axis=1, )
paddle.argmax(Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=0, )
paddle.argmax(Tensor([4, 0, 4, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 0, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 0, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 4, 0],"float64"), axis=0, )
paddle.argmax(Tensor([4148, 0, 20],"float32"), axis=-1, )
paddle.argmax(Tensor([5, 0, 5, 5],"float64"), axis=0, )
paddle.argmax(Tensor([5, 5, 0, 5],"float64"), axis=0, )
paddle.argmax(Tensor([5, 5, 5, 0],"float64"), axis=0, )
paddle.argmax(Tensor([80239, 20, 0],"float32"), axis=1, )
paddle.argmax(x=Tensor([0, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmax(x=Tensor([0, 3],"int64"), axis=-1, )
paddle.argmax(x=Tensor([0, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.argmax(x=Tensor([3, 0],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmax(x=Tensor([3, 0],"int64"), axis=-2, )
paddle.argmax(x=Tensor([3, 3, 0],"float64"), axis=1, keepdim=False, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmin(Tensor([0, 10],"float32"), axis=1, )
paddle.argmin(Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=0, )
paddle.argmin(Tensor([4, 0, 4, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 0, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 0, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 4, 0],"float64"), axis=0, )
paddle.argmin(Tensor([5, 0, 5, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 0, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 5, 0],"float64"), axis=0, )
paddle.argmin(x=Tensor([0, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmin(x=Tensor([0, 3],"int64"), axis=-1, )
paddle.argmin(x=Tensor([0, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.argmin(x=Tensor([3, 0],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmin(x=Tensor([3, 0],"int64"), axis=-2, )
paddle.argmin(x=Tensor([3, 3, 0],"float64"), axis=1, keepdim=False, )
paddle.bincount(Tensor([0],"int32"), weights=Tensor([0],"float32"), )
paddle.bincount(Tensor([0],"int32"), weights=Tensor([16],"float32"), )
paddle.bincount(Tensor([0],"int64"), minlength=100, )
paddle.bincount(Tensor([0],"int64"), minlength=123, )
paddle.bincount(Tensor([0],"int64"), minlength=256, )
paddle.bincount(Tensor([0],"int64"), minlength=256000, )
paddle.bincount(Tensor([0],"int64"), minlength=32000, )
paddle.bincount(Tensor([0],"int64"), minlength=4, )
paddle.bincount(Tensor([0],"int64"), minlength=99, )
paddle.bincount(Tensor([0],"int64"), minlength=Tensor([1],"int32"), )
paddle.bincount(Tensor([0],"int64"), weights=Tensor([4],"float64"), )
paddle.bincount(x=Tensor([0],"int32"), minlength=4, )
paddle.bincount(x=Tensor([0],"int32"), minlength=Tensor([1],"int64"), )
paddle.bincount(x=Tensor([0],"int32"), weights=Tensor([0],"int32"), )
paddle.bincount(x=Tensor([0],"int32"), weights=Tensor([10],"int32"), )
paddle.bmm(Tensor([0, 165, 126],"float32"), Tensor([0, 126, 64],"float32"), )
paddle.bmm(Tensor([0, 165, 165],"float32"), Tensor([0, 165, 64],"float32"), )
paddle.bmm(Tensor([0, 165, 64],"float32"), Tensor([0, 64, 126],"float32"), )
paddle.bmm(Tensor([0, 300, 128],"float32"), Tensor([0, 128, 30976],"float32"), )
paddle.bmm(Tensor([0, 300, 128],"float32"), Tensor([0, 128, 33856],"float32"), )
paddle.bmm(Tensor([0, 300, 128],"float32"), Tensor([0, 128, 36864],"float32"), )
paddle.bmm(Tensor([0, 400, 128],"float32"), Tensor([0, 128, 30976],"float32"), )
paddle.bmm(Tensor([0, 400, 128],"float32"), Tensor([0, 128, 33856],"float32"), )
paddle.bmm(Tensor([0, 7, 128],"float32"), Tensor([0, 128, 7],"float32"), )
paddle.bmm(Tensor([0, 7, 7],"float32"), Tensor([0, 7, 128],"float32"), )
paddle.bmm(Tensor([1, 0, 128],"float32"), Tensor([1, 128, 30976],"float32"), )
paddle.bmm(Tensor([1, 0, 128],"float32"), Tensor([1, 128, 33856],"float32"), )
paddle.bmm(Tensor([1, 0, 128],"float32"), Tensor([1, 128, 36864],"float32"), )
paddle.bmm(Tensor([1, 300, 128],"float32"), Tensor([1, 128, 0],"float32"), )
paddle.bmm(Tensor([1, 400, 128],"float32"), Tensor([1, 128, 0],"float32"), )
paddle.bmm(Tensor([1008, 0, 128],"float32"), Tensor([1008, 128, 7],"float32"), )
paddle.bmm(Tensor([1008, 0, 7],"float32"), Tensor([1008, 7, 128],"float32"), )
paddle.bmm(Tensor([1008, 7, 128],"float32"), Tensor([1008, 128, 0],"float32"), )
paddle.bmm(Tensor([1008, 7, 7],"float32"), Tensor([1008, 7, 0],"float32"), )
paddle.bmm(Tensor([112, 0, 126],"float32"), Tensor([112, 126, 64],"float32"), )
paddle.bmm(Tensor([112, 0, 165],"float32"), Tensor([112, 165, 64],"float32"), )
paddle.bmm(Tensor([112, 0, 64],"float32"), Tensor([112, 64, 126],"float32"), )
paddle.bmm(Tensor([112, 165, 126],"float32"), Tensor([112, 126, 0],"float32"), )
paddle.bmm(Tensor([112, 165, 165],"float32"), Tensor([112, 165, 0],"float32"), )
paddle.bmm(Tensor([112, 165, 64],"float32"), Tensor([112, 64, 0],"float32"), )
paddle.bmm(x=Tensor([0, 2, 3],"float32"), y=Tensor([0, 3, 2],"float32"), )
paddle.bmm(x=Tensor([0, 2, 3],"float64"), y=Tensor([0, 3, 2],"float64"), )
paddle.bmm(x=Tensor([2, 0, 3],"float32"), y=Tensor([2, 3, 2],"float32"), )
paddle.bmm(x=Tensor([2, 0, 3],"float64"), y=Tensor([2, 3, 2],"float64"), )
paddle.bmm(x=Tensor([2, 2, 3],"float32"), y=Tensor([2, 3, 0],"float32"), )
paddle.bmm(x=Tensor([2, 2, 3],"float64"), y=Tensor([2, 3, 0],"float64"), )
paddle.cdist(Tensor([8550, 0],"float32"), Tensor([1, 0],"float32"), p=1, )
paddle.cdist(Tensor([8550, 4],"float32"), Tensor([0, 4],"float32"), p=1, )
paddle.cdist(Tensor([900, 0],"float32"), Tensor([1, 0],"float32"), p=1, )
paddle.cdist(Tensor([900, 4],"float32"), Tensor([0, 4],"float32"), p=1, )
paddle.chunk(Tensor([0, 1, 1, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([0, 1, 64, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([0, 108, 64, 64],"float16"), 3, axis=1, )
paddle.chunk(Tensor([0, 108, 64, 64],"float32"), 3, axis=1, )
paddle.chunk(Tensor([0, 11, 1024],"float32"), chunks=2, axis=-1, )
paddle.chunk(Tensor([0, 128, 25500],"float32"), 2, axis=1, )
paddle.chunk(Tensor([0, 16, 128],"float32"), chunks=2, axis=-1, )
paddle.chunk(Tensor([0, 2, 8, 4],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([0, 2, 8, 8],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([0, 21, 32],"float32"), 3, axis=1, )
paddle.chunk(Tensor([0, 21, 8],"float32"), 3, axis=1, )
paddle.chunk(Tensor([0, 216, 64, 64],"float16"), 3, axis=1, )
paddle.chunk(Tensor([0, 216, 64, 64],"float32"), 3, axis=1, )
paddle.chunk(Tensor([0, 32, 64],"float32"), chunks=2, axis=-1, )
paddle.chunk(Tensor([0, 4, 1, 32],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([0, 4, 1],"float32"), 4, axis=1, )
paddle.chunk(Tensor([0, 4, 20, 24],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([0, 4, 7, 24],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([0, 4],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([0, 56, 72],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([1, 0, 1, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 0, 1024],"float32"), chunks=2, axis=-1, )
paddle.chunk(Tensor([1, 0, 20, 24],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([1, 0, 64, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 1, 0, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 1, 1, 0],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 1, 64, 0],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 11, 0],"float32"), chunks=2, axis=-1, )
paddle.chunk(Tensor([1, 4, 0, 24],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([1, 4, 20, 0],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([10, 0, 8, 4],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([10, 0, 8, 8],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([10, 2, 0, 4],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([10, 2, 0, 8],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([10, 2, 8, 0],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([114, 0, 1, 32],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([114, 4, 0, 32],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([114, 4, 1, 0],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([13, 0, 128],"float32"), chunks=2, axis=-1, )
paddle.chunk(Tensor([13, 0, 1],"float32"), 4, axis=1, )
paddle.chunk(Tensor([13, 0, 32],"float32"), 3, axis=1, )
paddle.chunk(Tensor([13, 0, 64],"float32"), chunks=2, axis=-1, )
paddle.chunk(Tensor([13, 0, 7, 24],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([13, 0, 72],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([13, 16, 0],"float32"), chunks=2, axis=-1, )
paddle.chunk(Tensor([13, 21, 0],"float32"), 3, axis=1, )
paddle.chunk(Tensor([13, 32, 0],"float32"), chunks=2, axis=-1, )
paddle.chunk(Tensor([13, 4, 0, 24],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([13, 4, 0],"float32"), 4, axis=1, )
paddle.chunk(Tensor([13, 4, 7, 0],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([13, 56, 0],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([16, 0, 25500],"float32"), 2, axis=1, )
paddle.chunk(Tensor([16, 128, 0],"float32"), 2, axis=1, )
paddle.chunk(Tensor([2048, 0],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([4, 0, 64, 64],"float16"), 3, axis=1, )
paddle.chunk(Tensor([4, 0, 64, 64],"float32"), 3, axis=1, )
paddle.chunk(Tensor([4, 108, 0, 64],"float32"), 3, axis=1, )
paddle.chunk(Tensor([4, 108, 64, 0],"float16"), 3, axis=1, )
paddle.chunk(Tensor([4, 108, 64, 0],"float32"), 3, axis=1, )
paddle.chunk(Tensor([4, 216, 0, 64],"float16"), 3, axis=1, )
paddle.chunk(Tensor([4, 216, 0, 64],"float32"), 3, axis=1, )
paddle.chunk(Tensor([4, 216, 64, 0],"float16"), 3, axis=1, )
paddle.chunk(Tensor([4, 216, 64, 0],"float32"), 3, axis=1, )
paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=3, axis=Tensor([0],"int32"), )
paddle.chunk(Tensor([52, 0, 7, 24],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([52, 21, 0],"float32"), 3, axis=1, )
paddle.chunk(Tensor([52, 4, 0, 24],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([52, 4, 7, 0],"float32"), 3, axis=-1, )
paddle.chunk(Tensor([8192, 0],"float32"), 2, axis=-1, )
paddle.chunk(x=Tensor([0, 3],"float16"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([0, 3],"float32"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([0, 3],"float64"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 0],"float32"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 0],"float64"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"float16"), chunks=3, axis=Tensor([0],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float32"), chunks=3, axis=Tensor([0],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float64"), chunks=3, axis=Tensor([0],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int32"), chunks=3, axis=Tensor([0],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int64"), chunks=3, axis=Tensor([0],"int64"), )
paddle.clip(x=Tensor([1, 2],"float64"), min=Tensor([0],"float64"), max=Tensor([1],"float64"), )
paddle.clip(x=Tensor([2, 2],"float64"), min=Tensor([0],"float64"), max=Tensor([1],"float64"), )
paddle.clip(x=Tensor([2],"float64"), min=Tensor([0],"float64"), max=Tensor([1],"float64"), name="test name", )
paddle.clip(x=Tensor([3, 3],"float64"), min=Tensor([0],"float64"), max=Tensor([1],"float64"), )
paddle.clip(x=Tensor([3],"float64"), min=Tensor([0],"float64"), max=Tensor([1],"float64"), )
paddle.column_stack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([0, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([0, 1],"float64"),], )
paddle.column_stack(list[Tensor([0, 2],"float64"),], )
paddle.column_stack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([0, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([0],"float64"),], )
paddle.column_stack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 0],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.column_stack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 0, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 0],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 0],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.concat(list[Tensor([0, 1, 1, 16],"float32"),Tensor([0, 1, 1, 16],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 22],"bool"),Tensor([0, 1, 1, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 1, 23],"bool"),Tensor([0, 1, 1, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 1, 24],"bool"),Tensor([0, 1, 1, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 100, 156],"float32"),Tensor([0, 1, 100, 156],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 10285, 1],"float32"),Tensor([0, 1, 10285, 1],"float32"),Tensor([0, 1, 10285, 1],"float32"),Tensor([0, 1, 10285, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 152, 100],"float32"),Tensor([0, 1, 152, 100],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 1],"float16"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float32"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"int32"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"int64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 2, 8],"float32"),Tensor([0, 1, 2, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 240, 240],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 241, 241],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 24276, 1],"float32"),Tensor([0, 1, 24276, 1],"float32"),Tensor([0, 1, 24276, 1],"float32"),Tensor([0, 1, 24276, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 2704],"float32"),Tensor([0, 1, 676],"float32"),Tensor([0, 1, 169],"float32"),Tensor([0, 1, 49],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 27216, 1],"float32"),Tensor([0, 1, 27216, 1],"float32"),Tensor([0, 1, 27216, 1],"float32"),Tensor([0, 1, 27216, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 27648],"float32"),Tensor([0, 1, 6912],"float32"),Tensor([0, 1, 1728],"float32"),Tensor([0, 1, 432],"float32"),Tensor([0, 1, 108],"float32"),Tensor([0, 1, 30],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 28800],"float32"),Tensor([0, 1, 7200],"float32"),Tensor([0, 1, 1800],"float32"),Tensor([0, 1, 450],"float32"),Tensor([0, 1, 117],"float32"),Tensor([0, 1, 35],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 2],"float32"),Tensor([0, 1, 2],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 3, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 30324, 1],"float32"),Tensor([0, 1, 30324, 1],"float32"),Tensor([0, 1, 30324, 1],"float32"),Tensor([0, 1, 30324, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 31, 31],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 3136],"float32"),Tensor([0, 1, 784],"float32"),Tensor([0, 1, 196],"float32"),Tensor([0, 1, 49],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 33600, 1],"float32"),Tensor([0, 1, 33600, 1],"float32"),Tensor([0, 1, 33600, 1],"float32"),Tensor([0, 1, 33600, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 3],"float32"),Tensor([0, 1, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 4096],"float32"),Tensor([0, 1, 1024],"float32"),Tensor([0, 1, 256],"float32"),Tensor([0, 1, 64],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 4624],"float32"),Tensor([0, 1, 1156],"float32"),Tensor([0, 1, 289],"float32"),Tensor([0, 1, 81],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 4800],"float32"),Tensor([0, 1, 1200],"float32"),Tensor([0, 1, 300],"float32"),Tensor([0, 1, 80],"float32"),Tensor([0, 1, 20],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 4],"float32"),Tensor([0, 1, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 512, 512],"float16"),Tensor([0, 1, 512, 512],"float16"),Tensor([0, 1, 512, 512],"float16"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 512, 512],"float32"),Tensor([0, 1, 512, 512],"float32"),Tensor([0, 1, 512, 512],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 5184],"float32"),Tensor([0, 1, 1296],"float32"),Tensor([0, 1, 324],"float32"),Tensor([0, 1, 81],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 6408],"float32"),Tensor([0, 1, 1620],"float32"),Tensor([0, 1, 414],"float32"),Tensor([0, 1, 108],"float32"),Tensor([0, 1, 30],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 768],"float32"),Tensor([0, 196, 768],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 8, 4],"int64"),Tensor([0, 1, 8, 4],"int64"),], axis=3, )
paddle.concat(list[Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 9],"int64"),Tensor([0, 1, 9],"int64"),Tensor([0, 1, 9],"int64"),Tensor([0, 1, 9],"int64"),Tensor([0, 1, 9],"int64"),Tensor([0, 1, 9],"int64"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 9],"int64"),Tensor([0, 1, 9],"int64"),Tensor([0, 1, 9],"int64"),Tensor([0, 1, 9],"int64"),Tensor([0, 1, 9],"int64"),], axis=-1, )
paddle.concat(list[Tensor([0, 10, 1, 2],"float32"),Tensor([0, 10, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([0, 10, 121],"float32"),Tensor([0, 10, 484],"float32"),Tensor([0, 10, 1936],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 10, 225],"float32"),Tensor([0, 10, 900],"float32"),Tensor([0, 10, 3600],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 10, 256],"float32"),Tensor([0, 10, 1024],"float32"),Tensor([0, 10, 4096],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 100, 256],"float32"),Tensor([0, 300, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 100, 2],"float32"),Tensor([0, 100, 2],"float32"),], -1, )
paddle.concat(list[Tensor([0, 100],"int64"),Tensor([0, 1],"int64"),], axis=-1, )
paddle.concat(list[Tensor([0, 100],"int64"),Tensor([0, 1],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 101],"int64"),Tensor([0, 1],"int64"),], axis=-1, )
paddle.concat(list[Tensor([0, 101],"int64"),Tensor([0, 1],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 15],"float32"),Tensor([0, 4096, 15],"float32"),Tensor([0, 16384, 15],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 18, 18],"float32"),Tensor([0, 768, 18, 18],"float32"),Tensor([0, 768, 18, 18],"float32"),Tensor([0, 768, 18, 18],"float32"),Tensor([0, 768, 18, 18],"float32"),Tensor([0, 768, 18, 18],"float32"),Tensor([0, 768, 18, 18],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 20, 20],"float32"),Tensor([0, 768, 20, 20],"float32"),Tensor([0, 768, 20, 20],"float32"),Tensor([0, 768, 20, 20],"float32"),Tensor([0, 768, 20, 20],"float32"),Tensor([0, 768, 20, 20],"float32"),Tensor([0, 768, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 22, 22],"float32"),Tensor([0, 768, 22, 22],"float32"),Tensor([0, 768, 22, 22],"float32"),Tensor([0, 768, 22, 22],"float32"),Tensor([0, 768, 22, 22],"float32"),Tensor([0, 768, 22, 22],"float32"),Tensor([0, 768, 22, 22],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 23, 23],"float32"),Tensor([0, 384, 23, 23],"float32"),Tensor([0, 384, 23, 23],"float32"),Tensor([0, 384, 23, 23],"float32"),Tensor([0, 384, 23, 23],"float32"),Tensor([0, 384, 23, 23],"float32"),Tensor([0, 384, 23, 23],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 23, 23],"float32"),Tensor([0, 512, 23, 23],"float32"),Tensor([0, 512, 23, 23],"float32"),Tensor([0, 512, 23, 23],"float32"),Tensor([0, 512, 23, 23],"float32"),Tensor([0, 512, 23, 23],"float32"),Tensor([0, 512, 23, 23],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 2],"float32"),Tensor([0, 1024, 2],"float32"),], -1, )
paddle.concat(list[Tensor([0, 1024, 2],"float32"),Tensor([0, 4096, 2],"float32"),Tensor([0, 16384, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 4],"float32"),Tensor([0, 4096, 4],"float32"),Tensor([0, 16384, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 102],"int64"),Tensor([0, 1],"int64"),], axis=-1, )
paddle.concat(list[Tensor([0, 102],"int64"),Tensor([0, 1],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 103680, 1],"float32"),Tensor([0, 25920, 1],"float32"),Tensor([0, 6480, 1],"float32"),Tensor([0, 1620, 1],"float32"),Tensor([0, 420, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 103680, 4],"float32"),Tensor([0, 25920, 4],"float32"),Tensor([0, 6480, 4],"float32"),Tensor([0, 1620, 4],"float32"),Tensor([0, 420, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 103],"int64"),Tensor([0, 1],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 104],"int64"),Tensor([0, 1],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 10],"bool"),Tensor([0, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([0, 10],"float32"),], 1, )
paddle.concat(list[Tensor([0, 10],"int64"),Tensor([0, 1],"int64"),], axis=-1, )
paddle.concat(list[Tensor([0, 11, 1, 64, 64],"float32"),Tensor([0, 11, 3, 64, 64],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 110, 128],"float16"),Tensor([0, 110, 110],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 1100, 128],"float32"),Tensor([0, 1100, 128],"float32"),Tensor([0, 1100, 128],"float32"),Tensor([0, 1100, 128],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 111, 128],"float16"),Tensor([0, 111, 111],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 112, 128],"float16"),Tensor([0, 112, 112],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 115200, 1],"float32"),Tensor([0, 28800, 1],"float32"),Tensor([0, 7200, 1],"float32"),Tensor([0, 1800, 1],"float32"),Tensor([0, 450, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 115200, 4],"float32"),Tensor([0, 28800, 4],"float32"),Tensor([0, 7200, 4],"float32"),Tensor([0, 1800, 4],"float32"),Tensor([0, 450, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1156, 2],"float32"),Tensor([0, 1156, 2],"float32"),], -1, )
paddle.concat(list[Tensor([0, 119040, 1],"float32"),Tensor([0, 29760, 1],"float32"),Tensor([0, 7440, 1],"float32"),Tensor([0, 1860, 1],"float32"),Tensor([0, 480, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 248, 216],"float32"),Tensor([0, 128, 248, 216],"float32"),Tensor([0, 128, 248, 216],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 256, 256],"float32"),Tensor([0, 128, 256, 256],"float32"),Tensor([0, 128, 256, 256],"float32"),Tensor([0, 128, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 128, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1280, 7, 7],"float32"),Tensor([0, 288, 7, 7],"float32"),Tensor([0, 288, 7, 7],"float32"),Tensor([0, 288, 7, 7],"float32"),Tensor([0, 288, 7, 7],"float32"),Tensor([0, 288, 7, 7],"float32"),Tensor([0, 288, 7, 7],"float32"),Tensor([0, 288, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128],"float32"),Tensor([0, 128],"float32"),Tensor([0, 128],"float32"),Tensor([0, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128],"float32"),Tensor([0, 128],"float32"),Tensor([0, 128],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 15, 15, 2],"float32"),Tensor([0, 15, 15, 2],"float32"),], -1, )
paddle.concat(list[Tensor([0, 1501, 1],"float32"),Tensor([0, 1501, 1],"float32"),Tensor([0, 1501, 1],"float32"),], 2, )
paddle.concat(list[Tensor([0, 16, 14, 14, 192],"float16"),Tensor([0, 16, 14, 14, 192],"float16"),Tensor([0, 16, 14, 14, 192],"float16"),Tensor([0, 16, 14, 14, 192],"float16"),], -1, )
paddle.concat(list[Tensor([0, 16, 14, 14, 192],"float32"),Tensor([0, 16, 14, 14, 192],"float32"),Tensor([0, 16, 14, 14, 192],"float32"),Tensor([0, 16, 14, 14, 192],"float32"),], -1, )
paddle.concat(list[Tensor([0, 16, 14, 15, 192],"float16"),Tensor([0, 16, 14, 15, 192],"float16"),Tensor([0, 16, 14, 15, 192],"float16"),Tensor([0, 16, 14, 15, 192],"float16"),], -1, )
paddle.concat(list[Tensor([0, 16, 14, 15, 192],"float32"),Tensor([0, 16, 14, 15, 192],"float32"),Tensor([0, 16, 14, 15, 192],"float32"),Tensor([0, 16, 14, 15, 192],"float32"),], -1, )
paddle.concat(list[Tensor([0, 16, 14, 16, 192],"float16"),Tensor([0, 16, 14, 16, 192],"float16"),Tensor([0, 16, 14, 16, 192],"float16"),Tensor([0, 16, 14, 16, 192],"float16"),], -1, )
paddle.concat(list[Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),Tensor([0, 16, 64],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 160, 18, 18],"float32"),Tensor([0, 160, 18, 18],"float32"),], 1, )
paddle.concat(list[Tensor([0, 160, 19, 19],"float32"),Tensor([0, 160, 19, 19],"float32"),], 1, )
paddle.concat(list[Tensor([0, 160, 20, 20],"float32"),Tensor([0, 160, 20, 20],"float32"),], 1, )
paddle.concat(list[Tensor([0, 160, 21, 21],"float32"),Tensor([0, 160, 21, 21],"float32"),], 1, )
paddle.concat(list[Tensor([0, 160, 56, 56],"float32"),Tensor([0, 192, 56, 56],"float32"),Tensor([0, 192, 56, 56],"float32"),Tensor([0, 192, 56, 56],"float32"),Tensor([0, 192, 56, 56],"float32"),Tensor([0, 192, 56, 56],"float32"),Tensor([0, 192, 56, 56],"float32"),Tensor([0, 192, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 17, 17, 2],"float32"),Tensor([0, 17, 17, 2],"float32"),], -1, )
paddle.concat(list[Tensor([0, 18, 128],"float32"),Tensor([0, 18, 128],"float32"),Tensor([0, 18, 128],"float32"),Tensor([0, 18, 128],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 18, 18, 2],"float32"),Tensor([0, 18, 18, 2],"float32"),], -1, )
paddle.concat(list[Tensor([0, 188, 140, 1, 2, 7],"float32"),Tensor([0, 188, 140, 1, 2, 7],"float32"),Tensor([0, 188, 140, 1, 2, 7],"float32"),], axis=-3, )
paddle.concat(list[Tensor([0, 192, 20, 20],"float32"),Tensor([0, 192, 20, 20],"float32"),Tensor([0, 192, 20, 20],"float32"),Tensor([0, 192, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 256],"float32"),Tensor([0, 300, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 192, 4],"float32"),Tensor([0, 300, 4],"float32"),], 1, )
paddle.concat(list[Tensor([0, 196, 256],"float32"),Tensor([0, 300, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),], axis=1, )
paddle.concat(list[Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([0, 1],"float16"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], 0, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], 0, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.concat(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], 1, )
paddle.concat(list[Tensor([0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),Tensor([0, 1],"int32"),], )
paddle.concat(list[Tensor([0, 1],"int32"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),], axis=0, )
paddle.concat(list[Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 1],"int64"),Tensor([0, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 1],"int64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 2, 1, 4, 16],"float32"),Tensor([0, 2, 15, 4, 16],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 2, 16, 4],"int64"),Tensor([0, 2, 16, 4],"int64"),], axis=3, )
paddle.concat(list[Tensor([0, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 2, 8, 4],"int64"),Tensor([0, 2, 8, 4],"int64"),], axis=3, )
paddle.concat(list[Tensor([0, 20, 15, 384],"float32"),Tensor([0, 20, 15, 384],"float32"),Tensor([0, 20, 15, 384],"float32"),Tensor([0, 20, 15, 384],"float32"),], -1, )
paddle.concat(list[Tensor([0, 20, 20, 2],"float32"),Tensor([0, 20, 20, 2],"float32"),], -1, )
paddle.concat(list[Tensor([0, 200, 256],"float32"),Tensor([0, 900, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 200, 4],"float32"),Tensor([0, 900, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 21, 128],"float32"),Tensor([0, 21, 128],"float32"),Tensor([0, 21, 128],"float32"),Tensor([0, 21, 128],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 21504, 2],"float32"),Tensor([0, 21504, 2],"float32"),Tensor([0, 21504, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 22, 128],"float32"),Tensor([0, 22, 128],"float32"),Tensor([0, 22, 128],"float32"),Tensor([0, 22, 128],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 224, 28, 28],"float16"),Tensor([0, 128, 28, 28],"float16"),Tensor([0, 128, 28, 28],"float16"),Tensor([0, 128, 28, 28],"float16"),Tensor([0, 128, 28, 28],"float16"),Tensor([0, 128, 28, 28],"float16"),], axis=1, )
paddle.concat(list[Tensor([0, 224, 28, 28],"float32"),Tensor([0, 128, 28, 28],"float32"),Tensor([0, 128, 28, 28],"float32"),Tensor([0, 128, 28, 28],"float32"),Tensor([0, 128, 28, 28],"float32"),Tensor([0, 128, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 24, 18, 768],"float32"),Tensor([0, 24, 18, 768],"float32"),Tensor([0, 24, 18, 768],"float32"),Tensor([0, 24, 18, 768],"float32"),], -1, )
paddle.concat(list[Tensor([0, 248, 1, 1, 2, 1],"float32"),Tensor([0, 248, 1, 1, 2, 1],"float32"),Tensor([0, 248, 1, 1, 2, 1],"float32"),Tensor([0, 248, 1, 1, 2, 3],"float32"),Tensor([0, 248, 1, 1, 2, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 248, 216, 2, 7],"float32"),], axis=-2, )
paddle.concat(list[Tensor([0, 248832, 1],"float32"),Tensor([0, 62208, 1],"float32"),Tensor([0, 15552, 1],"float32"),Tensor([0, 3888, 1],"float32"),Tensor([0, 972, 1],"float32"),Tensor([0, 270, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 248832, 4],"float32"),Tensor([0, 62208, 4],"float32"),Tensor([0, 15552, 4],"float32"),Tensor([0, 3888, 4],"float32"),Tensor([0, 972, 4],"float32"),Tensor([0, 270, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 24],"float32"),Tensor([0, 24],"float32"),Tensor([0, 24],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 124, 128],"float32"),Tensor([0, 256, 124, 128],"float32"),Tensor([0, 256, 124, 128],"float32"),Tensor([0, 256, 124, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 128, 128],"float32"),Tensor([0, 256, 128, 128],"float32"),Tensor([0, 256, 128, 128],"float32"),Tensor([0, 256, 128, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 256, 256],"float32"),Tensor([0, 256, 256, 256],"float32"),Tensor([0, 256, 256, 256],"float32"),Tensor([0, 256, 256, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 48, 48],"float32"),Tensor([0, 96, 48, 48],"float32"),Tensor([0, 96, 48, 48],"float32"),Tensor([0, 96, 48, 48],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 62, 64],"float32"),Tensor([0, 256, 62, 64],"float32"),Tensor([0, 256, 62, 64],"float32"),Tensor([0, 256, 62, 64],"float32"),Tensor([0, 256, 62, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 64, 128],"float32"),Tensor([0, 256, 64, 128],"float32"),Tensor([0, 256, 64, 128],"float32"),Tensor([0, 256, 64, 128],"float32"),Tensor([0, 256, 64, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 64, 64],"float32"),Tensor([0, 256, 64, 64],"float32"),Tensor([0, 256, 64, 64],"float32"),Tensor([0, 256, 64, 64],"float32"),Tensor([0, 256, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256],"float32"),Tensor([0, 256],"float32"),Tensor([0, 256],"float32"),Tensor([0, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 259200, 1],"float32"),Tensor([0, 64800, 1],"float32"),Tensor([0, 16200, 1],"float32"),Tensor([0, 4050, 1],"float32"),Tensor([0, 1053, 1],"float32"),Tensor([0, 315, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 259200, 4],"float32"),Tensor([0, 64800, 4],"float32"),Tensor([0, 16200, 4],"float32"),Tensor([0, 4050, 4],"float32"),Tensor([0, 1053, 4],"float32"),Tensor([0, 315, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2704, 11],"float32"),Tensor([0, 676, 11],"float32"),Tensor([0, 169, 11],"float32"),Tensor([0, 49, 11],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2704, 32],"float32"),Tensor([0, 676, 32],"float32"),Tensor([0, 169, 32],"float32"),Tensor([0, 49, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2704, 4],"float32"),Tensor([0, 676, 4],"float32"),Tensor([0, 169, 4],"float32"),Tensor([0, 49, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 27648, 256],"float32"),Tensor([0, 6912, 256],"float32"),Tensor([0, 1728, 256],"float32"),Tensor([0, 432, 256],"float32"),Tensor([0, 108, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 27648, 2],"float32"),Tensor([0, 6912, 2],"float32"),Tensor([0, 1728, 2],"float32"),Tensor([0, 432, 2],"float32"),Tensor([0, 108, 2],"float32"),], 1, )
paddle.concat(list[Tensor([0, 27648, 4],"float32"),Tensor([0, 6912, 4],"float32"),Tensor([0, 1728, 4],"float32"),Tensor([0, 432, 4],"float32"),Tensor([0, 108, 4],"float32"),], 1, )
paddle.concat(list[Tensor([0, 27648],"float32"),Tensor([0, 6912],"float32"),Tensor([0, 1728],"float32"),Tensor([0, 432],"float32"),Tensor([0, 108],"float32"),], 1, )
paddle.concat(list[Tensor([0, 28800, 256],"float32"),Tensor([0, 7200, 256],"float32"),Tensor([0, 1800, 256],"float32"),Tensor([0, 450, 256],"float32"),Tensor([0, 117, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 28800, 2],"float32"),Tensor([0, 7200, 2],"float32"),Tensor([0, 1800, 2],"float32"),Tensor([0, 450, 2],"float32"),Tensor([0, 117, 2],"float32"),], 1, )
paddle.concat(list[Tensor([0, 28800],"float32"),Tensor([0, 7200],"float32"),Tensor([0, 1800],"float32"),Tensor([0, 450],"float32"),Tensor([0, 117],"float32"),], 1, )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], -1, )
paddle.concat(list[Tensor([0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 3, 10, 10, 1],"float32"),Tensor([0, 3, 10, 10, 1],"float32"),Tensor([0, 3, 10, 10, 1],"float32"),Tensor([0, 3, 10, 10, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 3, 11, 11, 1],"float32"),Tensor([0, 3, 11, 11, 1],"float32"),Tensor([0, 3, 11, 11, 1],"float32"),Tensor([0, 3, 11, 11, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 3, 16, 16],"float32"),Tensor([0, 3, 16, 16],"float32"),Tensor([0, 2, 16, 16],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 20, 20, 1],"float32"),Tensor([0, 3, 20, 20, 1],"float32"),Tensor([0, 3, 20, 20, 1],"float32"),Tensor([0, 3, 20, 20, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 3, 240, 240],"float32"),Tensor([0, 3, 240, 240],"float32"),Tensor([0, 3, 240, 240],"float32"),Tensor([0, 3, 240, 240],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 256, 256],"float32"),Tensor([0, 3, 256, 256],"float32"),Tensor([0, 3, 256, 256],"float32"),Tensor([0, 3, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 32, 32],"float32"),Tensor([0, 3, 32, 32],"float32"),Tensor([0, 2, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),], 0, )
paddle.concat(list[Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),], 0, )
paddle.concat(list[Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),Tensor([0, 3, 336, 336],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 4, 4],"float32"),Tensor([0, 3, 4, 4],"float32"),Tensor([0, 2, 4, 4],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 40, 40, 1],"float32"),Tensor([0, 3, 40, 40, 1],"float32"),Tensor([0, 3, 40, 40, 1],"float32"),Tensor([0, 3, 40, 40, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 3, 64, 64],"float32"),Tensor([0, 3, 64, 64],"float32"),Tensor([0, 2, 64, 64],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),Tensor([0, 3, 64],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),Tensor([0, 304, 918],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 310, 1],"float32"),Tensor([0, 310, 1],"float32"),Tensor([0, 310, 1],"float32"),], -1, )
paddle.concat(list[Tensor([0, 3136, 11],"float32"),Tensor([0, 784, 11],"float32"),Tensor([0, 196, 11],"float32"),Tensor([0, 49, 11],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 3136, 32],"float32"),Tensor([0, 784, 32],"float32"),Tensor([0, 196, 32],"float32"),Tensor([0, 49, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 32, 184, 184],"float32"),Tensor([0, 32, 184, 184],"float32"),Tensor([0, 32, 184, 184],"float32"),Tensor([0, 32, 184, 184],"float32"),Tensor([0, 32, 184, 184],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 32, 241, 241],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),Tensor([0, 32, 32],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 320, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),Tensor([0, 346, 918],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 36000, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 36000, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 376, 1],"float32"),Tensor([0, 376, 1],"float32"),Tensor([0, 376, 1],"float32"),], 2, )
paddle.concat(list[Tensor([0, 376, 1],"float32"),Tensor([0, 376, 1],"float32"),], 2, )
paddle.concat(list[Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),Tensor([0, 377, 918],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 38940, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 38940, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),Tensor([0, 396, 918],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 39690, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 4, 2, 1, 8],"float32"),Tensor([0, 4, 3, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 7],"float32"),Tensor([0, 4, 2, 2],"float32"),], axis=3, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 3, 1, 8],"float32"),Tensor([0, 4, 2, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 4, 3, 8],"float32"),Tensor([0, 4, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 4, 4, 8],"float32"),Tensor([0, 4, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 4, 5, 5, 8],"float32"),Tensor([0, 4, 5, 2, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([0, 4, 7, 7],"float32"),Tensor([0, 4, 7, 2],"float32"),], axis=3, )
paddle.concat(list[Tensor([0, 40, 30, 192],"float32"),Tensor([0, 40, 30, 192],"float32"),Tensor([0, 40, 30, 192],"float32"),Tensor([0, 40, 30, 192],"float32"),], -1, )
paddle.concat(list[Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),Tensor([0, 400],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 4096, 4],"float32"),Tensor([0, 1024, 4],"float32"),Tensor([0, 256, 4],"float32"),], 1, )
paddle.concat(list[Tensor([0, 448, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),], axis=1, )
paddle.concat(list[Tensor([0, 448, 14, 14],"float32"),Tensor([0, 160, 14, 14],"float32"),Tensor([0, 160, 14, 14],"float32"),Tensor([0, 160, 14, 14],"float32"),Tensor([0, 160, 14, 14],"float32"),Tensor([0, 160, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 4624, 4],"float32"),Tensor([0, 1156, 4],"float32"),Tensor([0, 289, 4],"float32"),], 1, )
paddle.concat(list[Tensor([0, 48, 36, 384],"float32"),Tensor([0, 48, 36, 384],"float32"),Tensor([0, 48, 36, 384],"float32"),Tensor([0, 48, 36, 384],"float32"),], -1, )
paddle.concat(list[Tensor([0, 4800, 256],"float32"),Tensor([0, 1200, 256],"float32"),Tensor([0, 300, 256],"float32"),Tensor([0, 80, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 4800, 2],"float32"),Tensor([0, 1200, 2],"float32"),Tensor([0, 300, 2],"float32"),Tensor([0, 80, 2],"float32"),], 1, )
paddle.concat(list[Tensor([0, 4800, 4],"float32"),Tensor([0, 1200, 4],"float32"),Tensor([0, 300, 4],"float32"),Tensor([0, 80, 4],"float32"),], 1, )
paddle.concat(list[Tensor([0, 4800],"float32"),Tensor([0, 1200],"float32"),Tensor([0, 300],"float32"),Tensor([0, 80],"float32"),], 1, )
paddle.concat(list[Tensor([0, 49, 4],"float32"),Tensor([0, 49, 4],"float32"),Tensor([0, 49, 4],"float32"),Tensor([0, 49, 4],"float32"),Tensor([0, 49, 4],"float32"),Tensor([0, 49, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),], )
paddle.concat(list[Tensor([0, 5, 1, 1],"float32"),Tensor([0, 5, 1, 3],"float32"),Tensor([0, 5, 1, 1],"float32"),], axis=3, )
paddle.concat(list[Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),], axis=0, )
paddle.concat(list[Tensor([0, 512, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),Tensor([0, 160, 14, 14],"float16"),], axis=1, )
paddle.concat(list[Tensor([0, 512],"float16"),Tensor([0, 128],"float16"),Tensor([0, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([0, 512],"int32"),Tensor([0, 128],"int32"),Tensor([0, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([0, 5184, 256],"float32"),Tensor([0, 1296, 256],"float32"),Tensor([0, 324, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 5184, 4],"float32"),Tensor([0, 1296, 4],"float32"),Tensor([0, 324, 4],"float32"),], 1, )
paddle.concat(list[Tensor([0, 58, 1],"float32"),Tensor([0, 58, 1],"float32"),], 2, )
paddle.concat(list[Tensor([0, 64, 1],"float32"),Tensor([0, 64, 1],"float32"),], 2, )
paddle.concat(list[Tensor([0, 640, 14, 14],"float32"),Tensor([0, 256, 14, 14],"float32"),Tensor([0, 256, 14, 14],"float32"),Tensor([0, 256, 14, 14],"float32"),Tensor([0, 256, 14, 14],"float32"),Tensor([0, 256, 14, 14],"float32"),Tensor([0, 256, 14, 14],"float32"),Tensor([0, 256, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 640, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),Tensor([0, 224, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 6408, 256],"float32"),Tensor([0, 1620, 256],"float32"),Tensor([0, 414, 256],"float32"),Tensor([0, 108, 256],"float32"),], 1, )
paddle.concat(list[Tensor([0, 6408, 2],"float32"),Tensor([0, 1620, 2],"float32"),Tensor([0, 414, 2],"float32"),Tensor([0, 108, 2],"float32"),], 1, )
paddle.concat(list[Tensor([0, 6408],"float32"),Tensor([0, 1620],"float32"),Tensor([0, 414],"float32"),Tensor([0, 108],"float32"),], 1, )
paddle.concat(list[Tensor([0, 6],"float64"),Tensor([0, 6],"float64"),Tensor([0, 6],"float64"),Tensor([0, 6],"float64"),Tensor([0, 6],"float64"),Tensor([0, 6],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 7, 32],"float32"),Tensor([0, 7, 32],"float32"),Tensor([0, 7, 32],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 7, 4],"float32"),Tensor([0, 7, 4],"float32"),Tensor([0, 7, 4],"float32"),Tensor([0, 7, 4],"float32"),Tensor([0, 7, 4],"float32"),Tensor([0, 7, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 7],"int64"),Tensor([0, 10],"int64"),Tensor([0, 7],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 8, 1, 8],"float32"),Tensor([0, 8, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 8, 4, 4, 4, 1],"float32"),Tensor([0, 8, 4, 4, 4, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 80, 60, 96],"float32"),Tensor([0, 80, 60, 96],"float32"),Tensor([0, 80, 60, 96],"float32"),Tensor([0, 80, 60, 96],"float32"),], -1, )
paddle.concat(list[Tensor([0, 8740],"float32"),Tensor([0, 2204],"float32"),Tensor([0, 551],"float32"),Tensor([0, 150],"float32"),], 1, )
paddle.concat(list[Tensor([0, 9, 128],"float32"),Tensor([0, 9, 128],"float32"),Tensor([0, 9, 128],"float32"),Tensor([0, 9, 128],"float32"),], axis=2, )
paddle.concat(list[Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),], )
paddle.concat(list[Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),], )
paddle.concat(list[Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),], )
paddle.concat(list[Tensor([1, 0, 1, 16],"float32"),Tensor([1, 0, 1, 16],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 22],"bool"),Tensor([1, 0, 1, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 1, 23],"bool"),Tensor([1, 0, 1, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 1, 24],"bool"),Tensor([1, 0, 1, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 100, 152],"float32"),Tensor([1, 0, 100, 152],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 100, 156],"float32"),Tensor([1, 0, 100, 156],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 10285, 1],"float32"),Tensor([1, 0, 10285, 1],"float32"),Tensor([1, 0, 10285, 1],"float32"),Tensor([1, 0, 10285, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 10],"float32"),Tensor([1, 0, 10],"float32"),Tensor([1, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 11],"float32"),Tensor([1, 0, 11],"float32"),Tensor([1, 0, 11],"float32"),Tensor([1, 0, 11],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 124, 128],"float32"),Tensor([1, 0, 124, 128],"float32"),Tensor([1, 0, 124, 128],"float32"),Tensor([1, 0, 124, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 128, 128],"float32"),Tensor([1, 0, 128, 128],"float32"),Tensor([1, 0, 128, 128],"float32"),Tensor([1, 0, 128, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 128],"float16"),Tensor([1, 0, 107],"float16"),], axis=2, )
paddle.concat(list[Tensor([1, 0, 128],"float16"),Tensor([1, 0, 110],"float16"),], axis=2, )
paddle.concat(list[Tensor([1, 0, 128],"float16"),Tensor([1, 0, 111],"float16"),], axis=2, )
paddle.concat(list[Tensor([1, 0, 128],"float16"),Tensor([1, 0, 112],"float16"),], axis=2, )
paddle.concat(list[Tensor([1, 0, 128],"float32"),Tensor([1, 0, 128],"float32"),Tensor([1, 0, 128],"float32"),Tensor([1, 0, 128],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 0, 14, 14, 192],"float16"),Tensor([1, 0, 14, 14, 192],"float16"),Tensor([1, 0, 14, 14, 192],"float16"),Tensor([1, 0, 14, 14, 192],"float16"),], -1, )
paddle.concat(list[Tensor([1, 0, 14, 14, 192],"float32"),Tensor([1, 0, 14, 14, 192],"float32"),Tensor([1, 0, 14, 14, 192],"float32"),Tensor([1, 0, 14, 14, 192],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 14, 15, 192],"float16"),Tensor([1, 0, 14, 15, 192],"float16"),Tensor([1, 0, 14, 15, 192],"float16"),Tensor([1, 0, 14, 15, 192],"float16"),], -1, )
paddle.concat(list[Tensor([1, 0, 14, 15, 192],"float32"),Tensor([1, 0, 14, 15, 192],"float32"),Tensor([1, 0, 14, 15, 192],"float32"),Tensor([1, 0, 14, 15, 192],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 14, 16, 192],"float16"),Tensor([1, 0, 14, 16, 192],"float16"),Tensor([1, 0, 14, 16, 192],"float16"),Tensor([1, 0, 14, 16, 192],"float16"),], -1, )
paddle.concat(list[Tensor([1, 0, 140, 1, 2, 7],"float32"),Tensor([1, 0, 140, 1, 2, 7],"float32"),Tensor([1, 0, 140, 1, 2, 7],"float32"),], axis=-3, )
paddle.concat(list[Tensor([1, 0, 15, 384],"float32"),Tensor([1, 0, 15, 384],"float32"),Tensor([1, 0, 15, 384],"float32"),Tensor([1, 0, 15, 384],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 152, 100],"float32"),Tensor([1, 0, 152, 100],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 15],"float32"),Tensor([1, 0, 15],"float32"),Tensor([1, 0, 15],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 17, 2],"float32"),Tensor([1, 0, 17, 2],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 18, 18],"float32"),Tensor([1, 0, 18, 18],"float32"),Tensor([1, 0, 18, 18],"float32"),Tensor([1, 0, 18, 18],"float32"),Tensor([1, 0, 18, 18],"float32"),Tensor([1, 0, 18, 18],"float32"),Tensor([1, 0, 18, 18],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 18, 2],"float32"),Tensor([1, 0, 18, 2],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 18, 768],"float32"),Tensor([1, 0, 18, 768],"float32"),Tensor([1, 0, 18, 768],"float32"),Tensor([1, 0, 18, 768],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),Tensor([1, 0, 184, 184],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 19, 19],"float32"),Tensor([1, 0, 19, 19],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 1],"float16"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),Tensor([1, 0, 1],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 1],"float32"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"int32"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),Tensor([1, 0, 1],"int64"),], axis=0, )
paddle.concat(list[Tensor([1, 0, 1],"int64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 2, 8],"float32"),Tensor([1, 0, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 0, 2, 8],"float32"),Tensor([1, 0, 2, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 20, 2],"float32"),Tensor([1, 0, 20, 2],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 21, 21],"float32"),Tensor([1, 0, 21, 21],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 216, 2, 7],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 0, 22, 22],"float32"),Tensor([1, 0, 22, 22],"float32"),Tensor([1, 0, 22, 22],"float32"),Tensor([1, 0, 22, 22],"float32"),Tensor([1, 0, 22, 22],"float32"),Tensor([1, 0, 22, 22],"float32"),Tensor([1, 0, 22, 22],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 23, 23],"float32"),Tensor([1, 0, 23, 23],"float32"),Tensor([1, 0, 23, 23],"float32"),Tensor([1, 0, 23, 23],"float32"),Tensor([1, 0, 23, 23],"float32"),Tensor([1, 0, 23, 23],"float32"),Tensor([1, 0, 23, 23],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 24276, 1],"float32"),Tensor([1, 0, 24276, 1],"float32"),Tensor([1, 0, 24276, 1],"float32"),Tensor([1, 0, 24276, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 256, 256],"float32"),Tensor([1, 0, 256, 256],"float32"),Tensor([1, 0, 256, 256],"float32"),Tensor([1, 0, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 256, 256],"float32"),Tensor([1, 0, 256, 256],"float32"),Tensor([1, 0, 256, 256],"float32"),Tensor([1, 0, 256, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 2704],"float32"),Tensor([1, 0, 676],"float32"),Tensor([1, 0, 169],"float32"),Tensor([1, 0, 49],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 27216, 1],"float32"),Tensor([1, 0, 27216, 1],"float32"),Tensor([1, 0, 27216, 1],"float32"),Tensor([1, 0, 27216, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 27648],"float32"),Tensor([1, 0, 6912],"float32"),Tensor([1, 0, 1728],"float32"),Tensor([1, 0, 432],"float32"),Tensor([1, 0, 108],"float32"),Tensor([1, 0, 30],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 28800],"float32"),Tensor([1, 0, 7200],"float32"),Tensor([1, 0, 1800],"float32"),Tensor([1, 0, 450],"float32"),Tensor([1, 0, 117],"float32"),Tensor([1, 0, 35],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 3, 8],"float32"),Tensor([1, 0, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 0, 30, 192],"float32"),Tensor([1, 0, 30, 192],"float32"),Tensor([1, 0, 30, 192],"float32"),Tensor([1, 0, 30, 192],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 30324, 1],"float32"),Tensor([1, 0, 30324, 1],"float32"),Tensor([1, 0, 30324, 1],"float32"),Tensor([1, 0, 30324, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 3136],"float32"),Tensor([1, 0, 784],"float32"),Tensor([1, 0, 196],"float32"),Tensor([1, 0, 49],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 32, 32],"float32"),Tensor([1, 0, 32, 32],"float32"),Tensor([1, 0, 32, 32],"float32"),Tensor([1, 0, 32, 32],"float32"),Tensor([1, 0, 32, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),], axis=0, )
paddle.concat(list[Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),Tensor([1, 0, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),], 0, )
paddle.concat(list[Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),Tensor([1, 0, 336, 336],"float32"),], 0, )
paddle.concat(list[Tensor([1, 0, 33600, 1],"float32"),Tensor([1, 0, 33600, 1],"float32"),Tensor([1, 0, 33600, 1],"float32"),Tensor([1, 0, 33600, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 36, 384],"float32"),Tensor([1, 0, 36, 384],"float32"),Tensor([1, 0, 36, 384],"float32"),Tensor([1, 0, 36, 384],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 3],"float32"),Tensor([1, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 4, 8],"float32"),Tensor([1, 0, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 0, 4096],"float32"),Tensor([1, 0, 1024],"float32"),Tensor([1, 0, 256],"float32"),Tensor([1, 0, 64],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 4624],"float32"),Tensor([1, 0, 1156],"float32"),Tensor([1, 0, 289],"float32"),Tensor([1, 0, 81],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 48, 48],"float32"),Tensor([1, 0, 48, 48],"float32"),Tensor([1, 0, 48, 48],"float32"),Tensor([1, 0, 48, 48],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 4800],"float32"),Tensor([1, 0, 1200],"float32"),Tensor([1, 0, 300],"float32"),Tensor([1, 0, 80],"float32"),Tensor([1, 0, 20],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 4],"float32"),Tensor([1, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 512, 512],"float16"),Tensor([1, 0, 512, 512],"float16"),Tensor([1, 0, 512, 512],"float16"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 512, 512],"float32"),Tensor([1, 0, 512, 512],"float32"),Tensor([1, 0, 512, 512],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 5184],"float32"),Tensor([1, 0, 1296],"float32"),Tensor([1, 0, 324],"float32"),Tensor([1, 0, 81],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 60, 96],"float32"),Tensor([1, 0, 60, 96],"float32"),Tensor([1, 0, 60, 96],"float32"),Tensor([1, 0, 60, 96],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0, 62, 64],"float32"),Tensor([1, 0, 62, 64],"float32"),Tensor([1, 0, 62, 64],"float32"),Tensor([1, 0, 62, 64],"float32"),Tensor([1, 0, 62, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 64, 128],"float32"),Tensor([1, 0, 64, 128],"float32"),Tensor([1, 0, 64, 128],"float32"),Tensor([1, 0, 64, 128],"float32"),Tensor([1, 0, 64, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 64, 64],"float32"),Tensor([1, 0, 64, 64],"float32"),Tensor([1, 0, 64, 64],"float32"),Tensor([1, 0, 64, 64],"float32"),Tensor([1, 0, 64, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 64, 64],"float32"),Tensor([1, 0, 64, 64],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 6408],"float32"),Tensor([1, 0, 1620],"float32"),Tensor([1, 0, 414],"float32"),Tensor([1, 0, 108],"float32"),Tensor([1, 0, 30],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),Tensor([1, 0, 64],"float32"),], axis=0, )
paddle.concat(list[Tensor([1, 0, 768],"float32"),Tensor([1, 0, 768],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 9],"int64"),Tensor([1, 0, 9],"int64"),Tensor([1, 0, 9],"int64"),Tensor([1, 0, 9],"int64"),Tensor([1, 0, 9],"int64"),Tensor([1, 0, 9],"int64"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 9],"int64"),Tensor([1, 0, 9],"int64"),Tensor([1, 0, 9],"int64"),Tensor([1, 0, 9],"int64"),Tensor([1, 0, 9],"int64"),], axis=-1, )
paddle.concat(list[Tensor([1, 0],"bool"),Tensor([1, 0],"bool"),], axis=-1, )
paddle.concat(list[Tensor([1, 0],"float16"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([5, 0],"float32"),Tensor([8, 0],"float32"),Tensor([22, 0],"float32"),Tensor([5, 0],"float32"),Tensor([5, 0],"float32"),Tensor([18, 0],"float32"),Tensor([3, 0],"float32"),Tensor([9, 0],"float32"),Tensor([4, 0],"float32"),Tensor([1, 0],"float32"),Tensor([2, 0],"float32"),Tensor([11, 0],"float32"),Tensor([3, 0],"float32"),], )
paddle.concat(list[Tensor([1, 0],"float32"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"int32"),Tensor([2, 0],"int32"),Tensor([2, 0],"int32"),Tensor([5, 0],"int32"),Tensor([8, 0],"int32"),Tensor([22, 0],"int32"),Tensor([5, 0],"int32"),Tensor([5, 0],"int32"),Tensor([18, 0],"int32"),Tensor([3, 0],"int32"),Tensor([9, 0],"int32"),Tensor([4, 0],"int32"),Tensor([1, 0],"int32"),Tensor([2, 0],"int32"),Tensor([11, 0],"int32"),Tensor([3, 0],"int32"),], )
paddle.concat(list[Tensor([1, 0],"int32"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"int64"),Tensor([1, 0],"int64"),], axis=-1, )
paddle.concat(list[Tensor([1, 0],"int64"),Tensor([1, 0],"int64"),], axis=1, )
paddle.concat(list[Tensor([1, 0],"int64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 100],"float32"),Tensor([1, 1, 0, 100],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 0, 136],"float32"),Tensor([1, 1, 0, 136],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 0, 156],"float32"),Tensor([1, 1, 0, 156],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float32"),Tensor([1, 1, 0, 1],"float32"),Tensor([1, 1, 0, 1],"float32"),Tensor([1, 1, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 22],"bool"),Tensor([1, 1, 0, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 0, 23],"bool"),Tensor([1, 1, 0, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 0, 24],"bool"),Tensor([1, 1, 0, 1],"bool"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 0, 512],"float16"),Tensor([1, 1, 0, 512],"float16"),Tensor([1, 1, 0, 512],"float16"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 0, 512],"float32"),Tensor([1, 1, 0, 512],"float32"),Tensor([1, 1, 0, 512],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 0, 8],"float32"),Tensor([1, 1, 0, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 0],"float16"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 0],"float32"),Tensor([1, 196, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 0],"float32"),Tensor([1, 225, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 0],"float32"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"int32"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"int64"),Tensor([1, 1, 0],"int64"),Tensor([1, 1, 0],"int64"),Tensor([1, 1, 0],"int64"),Tensor([1, 1, 0],"int64"),Tensor([1, 1, 0],"int64"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 0],"int64"),Tensor([1, 1, 0],"int64"),Tensor([1, 1, 0],"int64"),Tensor([1, 1, 0],"int64"),Tensor([1, 1, 0],"int64"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 0],"int64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"bool"),Tensor([1, 1, 1, 0],"bool"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 100, 0],"float32"),Tensor([1, 1, 100, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 10285, 0],"float32"),Tensor([1, 1, 10285, 0],"float32"),Tensor([1, 1, 10285, 0],"float32"),Tensor([1, 1, 10285, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 152, 0],"float32"),Tensor([1, 1, 152, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 2, 0],"float32"),Tensor([1, 1, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 24276, 0],"float32"),Tensor([1, 1, 24276, 0],"float32"),Tensor([1, 1, 24276, 0],"float32"),Tensor([1, 1, 24276, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 27216, 0],"float32"),Tensor([1, 1, 27216, 0],"float32"),Tensor([1, 1, 27216, 0],"float32"),Tensor([1, 1, 27216, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 30324, 0],"float32"),Tensor([1, 1, 30324, 0],"float32"),Tensor([1, 1, 30324, 0],"float32"),Tensor([1, 1, 30324, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 33600, 0],"float32"),Tensor([1, 1, 33600, 0],"float32"),Tensor([1, 1, 33600, 0],"float32"),Tensor([1, 1, 33600, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 1, 512, 0],"float16"),Tensor([1, 1, 512, 0],"float16"),Tensor([1, 1, 512, 0],"float16"),], axis=1, )
paddle.concat(list[Tensor([1, 1, 512, 0],"float32"),Tensor([1, 1, 512, 0],"float32"),Tensor([1, 1, 512, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 100, 0],"float32"),Tensor([1, 100, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 100, 0],"float32"),Tensor([1, 300, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 1024, 0, 18],"float32"),Tensor([1, 768, 0, 18],"float32"),Tensor([1, 768, 0, 18],"float32"),Tensor([1, 768, 0, 18],"float32"),Tensor([1, 768, 0, 18],"float32"),Tensor([1, 768, 0, 18],"float32"),Tensor([1, 768, 0, 18],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 0, 20],"float32"),Tensor([1, 768, 0, 20],"float32"),Tensor([1, 768, 0, 20],"float32"),Tensor([1, 768, 0, 20],"float32"),Tensor([1, 768, 0, 20],"float32"),Tensor([1, 768, 0, 20],"float32"),Tensor([1, 768, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 0, 22],"float32"),Tensor([1, 768, 0, 22],"float32"),Tensor([1, 768, 0, 22],"float32"),Tensor([1, 768, 0, 22],"float32"),Tensor([1, 768, 0, 22],"float32"),Tensor([1, 768, 0, 22],"float32"),Tensor([1, 768, 0, 22],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 0, 23],"float32"),Tensor([1, 384, 0, 23],"float32"),Tensor([1, 384, 0, 23],"float32"),Tensor([1, 384, 0, 23],"float32"),Tensor([1, 384, 0, 23],"float32"),Tensor([1, 384, 0, 23],"float32"),Tensor([1, 384, 0, 23],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 0, 23],"float32"),Tensor([1, 512, 0, 23],"float32"),Tensor([1, 512, 0, 23],"float32"),Tensor([1, 512, 0, 23],"float32"),Tensor([1, 512, 0, 23],"float32"),Tensor([1, 512, 0, 23],"float32"),Tensor([1, 512, 0, 23],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 0],"float32"),Tensor([1, 1024, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 1024, 18, 0],"float32"),Tensor([1, 768, 18, 0],"float32"),Tensor([1, 768, 18, 0],"float32"),Tensor([1, 768, 18, 0],"float32"),Tensor([1, 768, 18, 0],"float32"),Tensor([1, 768, 18, 0],"float32"),Tensor([1, 768, 18, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 20, 0],"float32"),Tensor([1, 768, 20, 0],"float32"),Tensor([1, 768, 20, 0],"float32"),Tensor([1, 768, 20, 0],"float32"),Tensor([1, 768, 20, 0],"float32"),Tensor([1, 768, 20, 0],"float32"),Tensor([1, 768, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 22, 0],"float32"),Tensor([1, 768, 22, 0],"float32"),Tensor([1, 768, 22, 0],"float32"),Tensor([1, 768, 22, 0],"float32"),Tensor([1, 768, 22, 0],"float32"),Tensor([1, 768, 22, 0],"float32"),Tensor([1, 768, 22, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 23, 0],"float32"),Tensor([1, 384, 23, 0],"float32"),Tensor([1, 384, 23, 0],"float32"),Tensor([1, 384, 23, 0],"float32"),Tensor([1, 384, 23, 0],"float32"),Tensor([1, 384, 23, 0],"float32"),Tensor([1, 384, 23, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1024, 23, 0],"float32"),Tensor([1, 512, 23, 0],"float32"),Tensor([1, 512, 23, 0],"float32"),Tensor([1, 512, 23, 0],"float32"),Tensor([1, 512, 23, 0],"float32"),Tensor([1, 512, 23, 0],"float32"),Tensor([1, 512, 23, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 103680, 0],"float32"),Tensor([1, 25920, 0],"float32"),Tensor([1, 6480, 0],"float32"),Tensor([1, 1620, 0],"float32"),Tensor([1, 420, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 109, 0],"float16"),Tensor([1, 109, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([1, 110, 0],"float16"),Tensor([1, 110, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([1, 1100, 0],"float32"),Tensor([1, 1100, 0],"float32"),Tensor([1, 1100, 0],"float32"),Tensor([1, 1100, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 111, 0],"float16"),Tensor([1, 111, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([1, 112, 0],"float16"),Tensor([1, 112, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([1, 115200, 0],"float32"),Tensor([1, 28800, 0],"float32"),Tensor([1, 7200, 0],"float32"),Tensor([1, 1800, 0],"float32"),Tensor([1, 450, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 1156, 0],"float32"),Tensor([1, 1156, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 119040, 0],"float32"),Tensor([1, 29760, 0],"float32"),Tensor([1, 7440, 0],"float32"),Tensor([1, 1860, 0],"float32"),Tensor([1, 480, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 0, 256],"float32"),Tensor([1, 128, 0, 256],"float32"),Tensor([1, 128, 0, 256],"float32"),Tensor([1, 128, 0, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 128, 0, 32],"float32"),Tensor([1, 32, 0, 32],"float32"),Tensor([1, 32, 0, 32],"float32"),Tensor([1, 32, 0, 32],"float32"),Tensor([1, 32, 0, 32],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 256, 0],"float32"),Tensor([1, 128, 256, 0],"float32"),Tensor([1, 128, 256, 0],"float32"),Tensor([1, 128, 256, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 128, 32, 0],"float32"),Tensor([1, 32, 32, 0],"float32"),Tensor([1, 32, 32, 0],"float32"),Tensor([1, 32, 32, 0],"float32"),Tensor([1, 32, 32, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 64, 0],"float32"),Tensor([1, 128, 64, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 15, 0, 2],"float32"),Tensor([1, 15, 0, 2],"float32"),], -1, )
paddle.concat(list[Tensor([1, 16, 0, 14, 192],"float16"),Tensor([1, 16, 0, 14, 192],"float16"),Tensor([1, 16, 0, 14, 192],"float16"),Tensor([1, 16, 0, 14, 192],"float16"),], -1, )
paddle.concat(list[Tensor([1, 16, 0, 14, 192],"float32"),Tensor([1, 16, 0, 14, 192],"float32"),Tensor([1, 16, 0, 14, 192],"float32"),Tensor([1, 16, 0, 14, 192],"float32"),], -1, )
paddle.concat(list[Tensor([1, 16, 0, 15, 192],"float16"),Tensor([1, 16, 0, 15, 192],"float16"),Tensor([1, 16, 0, 15, 192],"float16"),Tensor([1, 16, 0, 15, 192],"float16"),], -1, )
paddle.concat(list[Tensor([1, 16, 0, 15, 192],"float32"),Tensor([1, 16, 0, 15, 192],"float32"),Tensor([1, 16, 0, 15, 192],"float32"),Tensor([1, 16, 0, 15, 192],"float32"),], -1, )
paddle.concat(list[Tensor([1, 16, 0, 16, 192],"float16"),Tensor([1, 16, 0, 16, 192],"float16"),Tensor([1, 16, 0, 16, 192],"float16"),Tensor([1, 16, 0, 16, 192],"float16"),], -1, )
paddle.concat(list[Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),Tensor([1, 16, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([1, 16, 14, 0, 192],"float16"),Tensor([1, 16, 14, 0, 192],"float16"),Tensor([1, 16, 14, 0, 192],"float16"),Tensor([1, 16, 14, 0, 192],"float16"),], -1, )
paddle.concat(list[Tensor([1, 16, 14, 0, 192],"float32"),Tensor([1, 16, 14, 0, 192],"float32"),Tensor([1, 16, 14, 0, 192],"float32"),Tensor([1, 16, 14, 0, 192],"float32"),], -1, )
paddle.concat(list[Tensor([1, 16, 14, 14, 0],"float16"),Tensor([1, 16, 14, 14, 0],"float16"),Tensor([1, 16, 14, 14, 0],"float16"),Tensor([1, 16, 14, 14, 0],"float16"),], -1, )
paddle.concat(list[Tensor([1, 16, 14, 14, 0],"float32"),Tensor([1, 16, 14, 14, 0],"float32"),Tensor([1, 16, 14, 14, 0],"float32"),Tensor([1, 16, 14, 14, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 16, 14, 15, 0],"float16"),Tensor([1, 16, 14, 15, 0],"float16"),Tensor([1, 16, 14, 15, 0],"float16"),Tensor([1, 16, 14, 15, 0],"float16"),], -1, )
paddle.concat(list[Tensor([1, 16, 14, 15, 0],"float32"),Tensor([1, 16, 14, 15, 0],"float32"),Tensor([1, 16, 14, 15, 0],"float32"),Tensor([1, 16, 14, 15, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 16, 14, 16, 0],"float16"),Tensor([1, 16, 14, 16, 0],"float16"),Tensor([1, 16, 14, 16, 0],"float16"),Tensor([1, 16, 14, 16, 0],"float16"),], -1, )
paddle.concat(list[Tensor([1, 16, 16, 0],"float32"),Tensor([1, 16, 16, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 160, 0, 18],"float32"),Tensor([1, 160, 0, 18],"float32"),], 1, )
paddle.concat(list[Tensor([1, 160, 0, 19],"float32"),Tensor([1, 160, 0, 19],"float32"),], 1, )
paddle.concat(list[Tensor([1, 160, 0, 20],"float32"),Tensor([1, 160, 0, 20],"float32"),], 1, )
paddle.concat(list[Tensor([1, 160, 0, 21],"float32"),Tensor([1, 160, 0, 21],"float32"),], 1, )
paddle.concat(list[Tensor([1, 160, 19, 0],"float32"),Tensor([1, 160, 19, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 160, 20, 0],"float32"),Tensor([1, 160, 20, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 160, 21, 0],"float32"),Tensor([1, 160, 21, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 17, 0, 2],"float32"),Tensor([1, 17, 0, 2],"float32"),], -1, )
paddle.concat(list[Tensor([1, 17, 17, 0],"float32"),Tensor([1, 17, 17, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 18, 0, 2],"float32"),Tensor([1, 18, 0, 2],"float32"),], -1, )
paddle.concat(list[Tensor([1, 18, 0],"float32"),Tensor([1, 18, 0],"float32"),Tensor([1, 18, 0],"float32"),Tensor([1, 18, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 18, 18, 0],"float32"),Tensor([1, 18, 18, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 188, 140, 0, 7],"float32"),Tensor([1, 188, 140, 0, 7],"float32"),Tensor([1, 188, 140, 0, 7],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 188, 140, 0],"float32"),Tensor([1, 188, 140, 0],"float32"),Tensor([1, 188, 140, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 188, 140, 1, 0, 7],"float32"),Tensor([1, 188, 140, 1, 0, 7],"float32"),Tensor([1, 188, 140, 1, 0, 7],"float32"),], axis=-3, )
paddle.concat(list[Tensor([1, 188, 140, 2, 0],"float32"),Tensor([1, 188, 140, 2, 0],"float32"),Tensor([1, 188, 140, 2, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 192, 0, 20],"float32"),Tensor([1, 192, 0, 20],"float32"),Tensor([1, 192, 0, 20],"float32"),Tensor([1, 192, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 0],"float32"),Tensor([1, 300, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 192, 20, 0],"float32"),Tensor([1, 192, 20, 0],"float32"),Tensor([1, 192, 20, 0],"float32"),Tensor([1, 192, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 196, 0],"float32"),Tensor([1, 300, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 2, 0],"float64"),Tensor([1, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 20, 0, 2],"float32"),Tensor([1, 20, 0, 2],"float32"),], -1, )
paddle.concat(list[Tensor([1, 20, 0, 384],"float32"),Tensor([1, 20, 0, 384],"float32"),Tensor([1, 20, 0, 384],"float32"),Tensor([1, 20, 0, 384],"float32"),], -1, )
paddle.concat(list[Tensor([1, 20, 15, 0],"float32"),Tensor([1, 20, 15, 0],"float32"),Tensor([1, 20, 15, 0],"float32"),Tensor([1, 20, 15, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 20, 20, 0],"float32"),Tensor([1, 20, 20, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 200, 0],"float32"),Tensor([1, 900, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 21, 0],"float32"),Tensor([1, 21, 0],"float32"),Tensor([1, 21, 0],"float32"),Tensor([1, 21, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 22, 0],"float32"),Tensor([1, 22, 0],"float32"),Tensor([1, 22, 0],"float32"),Tensor([1, 22, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 24, 0, 768],"float32"),Tensor([1, 24, 0, 768],"float32"),Tensor([1, 24, 0, 768],"float32"),Tensor([1, 24, 0, 768],"float32"),], -1, )
paddle.concat(list[Tensor([1, 24, 18, 0],"float32"),Tensor([1, 24, 18, 0],"float32"),Tensor([1, 24, 18, 0],"float32"),Tensor([1, 24, 18, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 248, 0, 2, 7],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 248, 216, 0, 7],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 248, 216, 2, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 248832, 0],"float32"),Tensor([1, 62208, 0],"float32"),Tensor([1, 15552, 0],"float32"),Tensor([1, 3888, 0],"float32"),Tensor([1, 972, 0],"float32"),Tensor([1, 270, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 0, 128],"float32"),Tensor([1, 256, 0, 128],"float32"),Tensor([1, 256, 0, 128],"float32"),Tensor([1, 256, 0, 128],"float32"),Tensor([1, 256, 0, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 0, 128],"float32"),Tensor([1, 256, 0, 128],"float32"),Tensor([1, 256, 0, 128],"float32"),Tensor([1, 256, 0, 128],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 0, 256],"float32"),Tensor([1, 256, 0, 256],"float32"),Tensor([1, 256, 0, 256],"float32"),Tensor([1, 256, 0, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 0, 48],"float32"),Tensor([1, 96, 0, 48],"float32"),Tensor([1, 96, 0, 48],"float32"),Tensor([1, 96, 0, 48],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 0, 64],"float32"),Tensor([1, 256, 0, 64],"float32"),Tensor([1, 256, 0, 64],"float32"),Tensor([1, 256, 0, 64],"float32"),Tensor([1, 256, 0, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 124, 0],"float32"),Tensor([1, 256, 124, 0],"float32"),Tensor([1, 256, 124, 0],"float32"),Tensor([1, 256, 124, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 128, 0],"float32"),Tensor([1, 256, 128, 0],"float32"),Tensor([1, 256, 128, 0],"float32"),Tensor([1, 256, 128, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 256, 0],"float32"),Tensor([1, 256, 256, 0],"float32"),Tensor([1, 256, 256, 0],"float32"),Tensor([1, 256, 256, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 48, 0],"float32"),Tensor([1, 96, 48, 0],"float32"),Tensor([1, 96, 48, 0],"float32"),Tensor([1, 96, 48, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 62, 0],"float32"),Tensor([1, 256, 62, 0],"float32"),Tensor([1, 256, 62, 0],"float32"),Tensor([1, 256, 62, 0],"float32"),Tensor([1, 256, 62, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 64, 0],"float32"),Tensor([1, 256, 64, 0],"float32"),Tensor([1, 256, 64, 0],"float32"),Tensor([1, 256, 64, 0],"float32"),Tensor([1, 256, 64, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 259200, 0],"float32"),Tensor([1, 64800, 0],"float32"),Tensor([1, 16200, 0],"float32"),Tensor([1, 4050, 0],"float32"),Tensor([1, 1053, 0],"float32"),Tensor([1, 315, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 2704, 0],"float32"),Tensor([1, 676, 0],"float32"),Tensor([1, 169, 0],"float32"),Tensor([1, 49, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 27648, 0],"float32"),Tensor([1, 6912, 0],"float32"),Tensor([1, 1728, 0],"float32"),Tensor([1, 432, 0],"float32"),Tensor([1, 108, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 28800, 0],"float32"),Tensor([1, 7200, 0],"float32"),Tensor([1, 1800, 0],"float32"),Tensor([1, 450, 0],"float32"),Tensor([1, 117, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),], 0, )
paddle.concat(list[Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),Tensor([1, 3, 0, 336],"float32"),], 0, )
paddle.concat(list[Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),Tensor([1, 3, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),], 0, )
paddle.concat(list[Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),Tensor([1, 3, 336, 0],"float32"),], 0, )
paddle.concat(list[Tensor([1, 310, 0],"float32"),Tensor([1, 310, 0],"float32"),Tensor([1, 310, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 3136, 0],"float32"),Tensor([1, 784, 0],"float32"),Tensor([1, 196, 0],"float32"),Tensor([1, 49, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 32, 0, 184],"float32"),Tensor([1, 32, 0, 184],"float32"),Tensor([1, 32, 0, 184],"float32"),Tensor([1, 32, 0, 184],"float32"),Tensor([1, 32, 0, 184],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),Tensor([1, 32, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([1, 32, 184, 0],"float32"),Tensor([1, 32, 184, 0],"float32"),Tensor([1, 32, 184, 0],"float32"),Tensor([1, 32, 184, 0],"float32"),Tensor([1, 32, 184, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 3600, 0],"float32"),Tensor([1, 900, 0],"float32"),Tensor([1, 225, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 36000, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 38940, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 39690, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 4, 1, 0],"float32"),Tensor([1, 4, 1, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 4, 2, 0],"float32"),Tensor([1, 4, 1, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 4, 3, 0],"float32"),Tensor([1, 4, 1, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 4, 4, 0],"float32"),Tensor([1, 4, 1, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 40, 0, 192],"float32"),Tensor([1, 40, 0, 192],"float32"),Tensor([1, 40, 0, 192],"float32"),Tensor([1, 40, 0, 192],"float32"),], -1, )
paddle.concat(list[Tensor([1, 40, 30, 0],"float32"),Tensor([1, 40, 30, 0],"float32"),Tensor([1, 40, 30, 0],"float32"),Tensor([1, 40, 30, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 4096, 0],"float32"),Tensor([1, 1024, 0],"float32"),Tensor([1, 256, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 4624, 0],"float32"),Tensor([1, 1156, 0],"float32"),Tensor([1, 289, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 48, 0, 384],"float32"),Tensor([1, 48, 0, 384],"float32"),Tensor([1, 48, 0, 384],"float32"),Tensor([1, 48, 0, 384],"float32"),], -1, )
paddle.concat(list[Tensor([1, 48, 36, 0],"float32"),Tensor([1, 48, 36, 0],"float32"),Tensor([1, 48, 36, 0],"float32"),Tensor([1, 48, 36, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 4800, 0],"float32"),Tensor([1, 1200, 0],"float32"),Tensor([1, 300, 0],"float32"),Tensor([1, 80, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 5, 0],"float64"),Tensor([1, 5, 0],"float64"),Tensor([1, 5, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),Tensor([1, 500, 0],"int64"),], axis=0, )
paddle.concat(list[Tensor([1, 5184, 0],"float32"),Tensor([1, 1296, 0],"float32"),Tensor([1, 324, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 6408, 0],"float32"),Tensor([1, 1620, 0],"float32"),Tensor([1, 414, 0],"float32"),Tensor([1, 108, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1, 8, 0, 8],"float32"),Tensor([1, 8, 0, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 8, 1, 0],"float32"),Tensor([1, 8, 1, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([1, 80, 0, 96],"float32"),Tensor([1, 80, 0, 96],"float32"),Tensor([1, 80, 0, 96],"float32"),Tensor([1, 80, 0, 96],"float32"),], -1, )
paddle.concat(list[Tensor([1, 80, 60, 0],"float32"),Tensor([1, 80, 60, 0],"float32"),Tensor([1, 80, 60, 0],"float32"),Tensor([1, 80, 60, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1, 9, 0],"float32"),Tensor([1, 9, 0],"float32"),Tensor([1, 9, 0],"float32"),Tensor([1, 9, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([10, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([100, 0, 1],"float32"),Tensor([100, 0, 1],"float32"),Tensor([100, 0, 1],"float32"),], 2, )
paddle.concat(list[Tensor([100, 0, 1],"float32"),Tensor([100, 0, 1],"float32"),], 2, )
paddle.concat(list[Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),], 1, )
paddle.concat(list[Tensor([100, 376, 0],"float32"),Tensor([100, 376, 0],"float32"),Tensor([100, 376, 0],"float32"),], 2, )
paddle.concat(list[Tensor([100, 376, 0],"float32"),Tensor([100, 376, 0],"float32"),], 2, )
paddle.concat(list[Tensor([1000, 0, 31, 31],"float32"),], axis=1, )
paddle.concat(list[Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([992, 0],"float32"),], )
paddle.concat(list[Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1000, 0],"float32"),Tensor([1000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1000, 1, 0, 31],"float32"),], axis=1, )
paddle.concat(list[Tensor([1000, 1, 31, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([8810, 0],"float32"),], )
paddle.concat(list[Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([6512, 0],"float32"),], )
paddle.concat(list[Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([10000, 0],"float32"),Tensor([10000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1002, 0],"float32"),Tensor([1002, 0],"float32"),Tensor([1002, 0],"float32"),Tensor([1002, 0],"float32"),Tensor([1002, 0],"float32"),Tensor([1002, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1002, 0],"float32"),Tensor([1002, 0],"float32"),], -1, )
paddle.concat(list[Tensor([101, 0],"float32"),Tensor([101, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([544, 0],"float32"),], )
paddle.concat(list[Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),Tensor([1024, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([10240, 0],"float32"),Tensor([1820, 0],"float32"),], )
paddle.concat(list[Tensor([103, 0],"float32"),Tensor([103, 0],"float32"),Tensor([103, 0],"float32"),Tensor([103, 0],"float32"),Tensor([103, 0],"float32"),Tensor([103, 0],"float32"),Tensor([103, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([105344, 0],"float32"),Tensor([105344, 0],"float32"),Tensor([105344, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([108, 0],"float32"),Tensor([108, 0],"float32"),Tensor([108, 0],"float32"),Tensor([108, 0],"float32"),Tensor([108, 0],"float32"),Tensor([108, 0],"float32"),Tensor([108, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([11, 0],"float32"),Tensor([11, 0],"float32"),Tensor([11, 0],"float32"),Tensor([11, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1156, 0],"float32"),Tensor([1156, 0],"float32"),Tensor([1156, 0],"float32"),Tensor([1156, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([12, 0, 10, 10, 1],"float32"),Tensor([12, 0, 10, 10, 1],"float32"),Tensor([12, 0, 10, 10, 1],"float32"),Tensor([12, 0, 10, 10, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 0, 20, 20, 1],"float32"),Tensor([12, 0, 20, 20, 1],"float32"),Tensor([12, 0, 20, 20, 1],"float32"),Tensor([12, 0, 20, 20, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 0, 40, 40, 1],"float32"),Tensor([12, 0, 40, 40, 1],"float32"),Tensor([12, 0, 40, 40, 1],"float32"),Tensor([12, 0, 40, 40, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 3, 0, 10, 1],"float32"),Tensor([12, 3, 0, 10, 1],"float32"),Tensor([12, 3, 0, 10, 1],"float32"),Tensor([12, 3, 0, 10, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 3, 0, 20, 1],"float32"),Tensor([12, 3, 0, 20, 1],"float32"),Tensor([12, 3, 0, 20, 1],"float32"),Tensor([12, 3, 0, 20, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 3, 0, 40, 1],"float32"),Tensor([12, 3, 0, 40, 1],"float32"),Tensor([12, 3, 0, 40, 1],"float32"),Tensor([12, 3, 0, 40, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 3, 10, 0, 1],"float32"),Tensor([12, 3, 10, 0, 1],"float32"),Tensor([12, 3, 10, 0, 1],"float32"),Tensor([12, 3, 10, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 3, 10, 10, 0],"float32"),Tensor([12, 3, 10, 10, 0],"float32"),Tensor([12, 3, 10, 10, 0],"float32"),Tensor([12, 3, 10, 10, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 3, 20, 0, 1],"float32"),Tensor([12, 3, 20, 0, 1],"float32"),Tensor([12, 3, 20, 0, 1],"float32"),Tensor([12, 3, 20, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 3, 20, 20, 0],"float32"),Tensor([12, 3, 20, 20, 0],"float32"),Tensor([12, 3, 20, 20, 0],"float32"),Tensor([12, 3, 20, 20, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 3, 40, 0, 1],"float32"),Tensor([12, 3, 40, 0, 1],"float32"),Tensor([12, 3, 40, 0, 1],"float32"),Tensor([12, 3, 40, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([12, 3, 40, 40, 0],"float32"),Tensor([12, 3, 40, 40, 0],"float32"),Tensor([12, 3, 40, 40, 0],"float32"),Tensor([12, 3, 40, 40, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1200, 0],"float32"),Tensor([1200, 0],"float32"),], 1, )
paddle.concat(list[Tensor([121, 0],"float32"),Tensor([121, 0],"float32"),Tensor([121, 0],"float32"),Tensor([121, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([1240, 0],"float32"),Tensor([1240, 0],"float32"),Tensor([1240, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([128, 0, 14, 14],"float16"),Tensor([128, 0, 14, 14],"float16"),Tensor([128, 0, 14, 14],"float16"),Tensor([128, 0, 14, 14],"float16"),Tensor([128, 0, 14, 14],"float16"),Tensor([128, 0, 14, 14],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 0, 14, 14],"float32"),Tensor([128, 0, 14, 14],"float32"),Tensor([128, 0, 14, 14],"float32"),Tensor([128, 0, 14, 14],"float32"),Tensor([128, 0, 14, 14],"float32"),Tensor([128, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 0, 28, 28],"float16"),Tensor([128, 0, 28, 28],"float16"),Tensor([128, 0, 28, 28],"float16"),Tensor([128, 0, 28, 28],"float16"),Tensor([128, 0, 28, 28],"float16"),Tensor([128, 0, 28, 28],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 0, 28, 28],"float32"),Tensor([128, 0, 28, 28],"float32"),Tensor([128, 0, 28, 28],"float32"),Tensor([128, 0, 28, 28],"float32"),Tensor([128, 0, 28, 28],"float32"),Tensor([128, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([89, 0],"float32"),], )
paddle.concat(list[Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),], -1, )
paddle.concat(list[Tensor([128, 0],"int32"),Tensor([128, 0],"int32"),Tensor([128, 0],"int32"),], axis=1, )
paddle.concat(list[Tensor([128, 224, 0, 28],"float16"),Tensor([128, 128, 0, 28],"float16"),Tensor([128, 128, 0, 28],"float16"),Tensor([128, 128, 0, 28],"float16"),Tensor([128, 128, 0, 28],"float16"),Tensor([128, 128, 0, 28],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 224, 0, 28],"float32"),Tensor([128, 128, 0, 28],"float32"),Tensor([128, 128, 0, 28],"float32"),Tensor([128, 128, 0, 28],"float32"),Tensor([128, 128, 0, 28],"float32"),Tensor([128, 128, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 224, 28, 0],"float16"),Tensor([128, 128, 28, 0],"float16"),Tensor([128, 128, 28, 0],"float16"),Tensor([128, 128, 28, 0],"float16"),Tensor([128, 128, 28, 0],"float16"),Tensor([128, 128, 28, 0],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 224, 28, 0],"float32"),Tensor([128, 128, 28, 0],"float32"),Tensor([128, 128, 28, 0],"float32"),Tensor([128, 128, 28, 0],"float32"),Tensor([128, 128, 28, 0],"float32"),Tensor([128, 128, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 448, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 448, 0, 14],"float32"),Tensor([128, 160, 0, 14],"float32"),Tensor([128, 160, 0, 14],"float32"),Tensor([128, 160, 0, 14],"float32"),Tensor([128, 160, 0, 14],"float32"),Tensor([128, 160, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 448, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 448, 14, 0],"float32"),Tensor([128, 160, 14, 0],"float32"),Tensor([128, 160, 14, 0],"float32"),Tensor([128, 160, 14, 0],"float32"),Tensor([128, 160, 14, 0],"float32"),Tensor([128, 160, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 512, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),Tensor([128, 160, 0, 14],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 512, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),Tensor([128, 160, 14, 0],"float16"),], axis=1, )
paddle.concat(list[Tensor([128512, 0],"float32"),Tensor([128512, 0],"float32"),Tensor([128512, 0],"float32"),Tensor([128512, 0],"float32"),Tensor([128512, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1291, 0],"float32"),Tensor([1291, 0],"float32"),], 1, )
paddle.concat(list[Tensor([13, 0, 16, 4],"int64"),Tensor([13, 0, 16, 4],"int64"),], axis=3, )
paddle.concat(list[Tensor([13, 0, 2, 1, 8],"float32"),Tensor([13, 0, 3, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 0, 2, 7],"float32"),Tensor([13, 0, 2, 2],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 0, 3, 1, 8],"float32"),Tensor([13, 0, 2, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 0, 3, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([13, 0, 4, 16, 1],"float32"),Tensor([13, 0, 4, 16, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([13, 0, 4],"float32"),Tensor([13, 0, 4],"float32"),Tensor([13, 0, 4],"float32"),Tensor([13, 0, 4],"float32"),Tensor([13, 0, 4],"float32"),Tensor([13, 0, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([13, 0, 5, 5, 8],"float32"),Tensor([13, 0, 5, 2, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 0, 7, 7],"float32"),Tensor([13, 0, 7, 2],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 0, 8, 4, 16],"float32"),Tensor([13, 0, 8, 4, 16],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 0, 8, 4],"int64"),Tensor([13, 0, 8, 4],"int64"),], axis=3, )
paddle.concat(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([13, 1, 0, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([13, 1, 0, 4],"int64"),Tensor([13, 1, 0, 4],"int64"),], axis=3, )
paddle.concat(list[Tensor([13, 1, 3, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([13, 1, 8, 0],"int64"),Tensor([13, 1, 8, 0],"int64"),], axis=3, )
paddle.concat(list[Tensor([13, 13, 0],"float32"),Tensor([13, 3, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([13, 2, 0, 4],"int64"),Tensor([13, 2, 0, 4],"int64"),], axis=3, )
paddle.concat(list[Tensor([13, 2, 1, 0, 16],"float32"),Tensor([13, 2, 15, 0, 16],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 2, 16, 0, 16],"float32"),Tensor([13, 2, 16, 0, 16],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 2, 16, 0],"int64"),Tensor([13, 2, 16, 0],"int64"),], axis=3, )
paddle.concat(list[Tensor([13, 2, 16, 4, 0],"float32"),Tensor([13, 2, 16, 4, 0],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 2, 4, 0, 1],"float32"),Tensor([13, 2, 4, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([13, 2, 8, 0, 16],"float32"),Tensor([13, 2, 8, 0, 16],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 2, 8, 0],"int64"),Tensor([13, 2, 8, 0],"int64"),], axis=3, )
paddle.concat(list[Tensor([13, 2, 8, 4, 0],"float32"),Tensor([13, 2, 8, 4, 0],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 3, 0],"float32"),Tensor([13, 3, 0],"float32"),Tensor([13, 3, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 4, 0, 1, 8],"float32"),Tensor([13, 4, 0, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 4, 0, 5, 1, 8],"float32"),Tensor([13, 4, 0, 5, 1, 8],"float32"),Tensor([13, 4, 0, 5, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 4, 0, 5, 8],"float32"),Tensor([13, 4, 0, 2, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 4, 0, 7],"float32"),Tensor([13, 4, 0, 2],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 4, 0, 8],"float32"),Tensor([13, 4, 0, 8],"float32"),Tensor([13, 4, 0, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 4, 1, 5, 0, 8],"float32"),Tensor([13, 4, 3, 5, 0, 8],"float32"),Tensor([13, 4, 1, 5, 0, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 4, 2, 0, 8],"float32"),Tensor([13, 4, 3, 0, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 4, 2, 0],"float32"),Tensor([13, 4, 2, 0],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 4, 2, 1, 0],"float32"),Tensor([13, 4, 3, 1, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 4, 3, 0, 1, 8],"float32"),Tensor([13, 4, 3, 0, 1, 8],"float32"),Tensor([13, 4, 3, 0, 1, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 4, 3, 0, 8],"float32"),Tensor([13, 4, 2, 0, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 4, 3, 1, 0, 8],"float32"),Tensor([13, 4, 3, 1, 0, 8],"float32"),Tensor([13, 4, 3, 1, 0, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 4, 3, 1, 0],"float32"),Tensor([13, 4, 2, 1, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([13, 4, 5, 0, 8],"float32"),Tensor([13, 4, 5, 0, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 4, 5, 5, 0],"float32"),Tensor([13, 4, 5, 2, 0],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 4, 7, 0],"float32"),Tensor([13, 4, 7, 0],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 49, 0],"float32"),Tensor([13, 49, 0],"float32"),Tensor([13, 49, 0],"float32"),Tensor([13, 49, 0],"float32"),Tensor([13, 49, 0],"float32"),Tensor([13, 49, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([13, 5, 0, 1],"float32"),Tensor([13, 5, 0, 3],"float32"),Tensor([13, 5, 0, 1],"float32"),], axis=3, )
paddle.concat(list[Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([13125, 0],"float32"),Tensor([13125, 0],"float32"),Tensor([13125, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),Tensor([15, 0],"float64"),], )
paddle.concat(list[Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),Tensor([15000, 0],"bool"),], axis=1, )
paddle.concat(list[Tensor([1536, 0],"float16"),Tensor([1536, 0],"float16"),Tensor([1536, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([16, 0, 1, 2],"float32"),Tensor([16, 0, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([16, 0, 1, 64, 64],"float32"),Tensor([16, 0, 3, 64, 64],"float32"),], axis=2, )
paddle.concat(list[Tensor([16, 0, 121],"float32"),Tensor([16, 0, 484],"float32"),Tensor([16, 0, 1936],"float32"),], axis=-1, )
paddle.concat(list[Tensor([16, 0, 225],"float32"),Tensor([16, 0, 900],"float32"),Tensor([16, 0, 3600],"float32"),], axis=-1, )
paddle.concat(list[Tensor([16, 0, 256],"float32"),Tensor([16, 0, 1024],"float32"),Tensor([16, 0, 4096],"float32"),], axis=-1, )
paddle.concat(list[Tensor([16, 0, 640, 640],"float16"),Tensor([16, 0, 640, 640],"float16"),Tensor([16, 0, 640, 640],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 0, 640, 640],"float32"),Tensor([16, 0, 640, 640],"float32"),Tensor([16, 0, 640, 640],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 1, 0, 64, 2],"float32"),Tensor([16, 10, 0, 64, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([16, 1, 640, 0],"float16"),Tensor([16, 1, 640, 0],"float16"),Tensor([16, 1, 640, 0],"float16"),], axis=1, )
paddle.concat(list[Tensor([16, 10, 0, 2],"float32"),Tensor([16, 10, 0, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([16, 10, 0],"float32"),Tensor([16, 10, 0],"float32"),Tensor([16, 10, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([16, 10, 1, 0],"float32"),Tensor([16, 10, 1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([16, 11, 0, 64, 64],"float32"),Tensor([16, 11, 0, 64, 64],"float32"),], axis=2, )
paddle.concat(list[Tensor([16, 11, 1, 0, 64],"float32"),Tensor([16, 11, 3, 0, 64],"float32"),], axis=2, )
paddle.concat(list[Tensor([16, 11, 1, 64, 0],"float32"),Tensor([16, 11, 3, 64, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),Tensor([16800, 0],"float32"),], -1, )
paddle.concat(list[Tensor([18, 0],"float32"),Tensor([18, 0],"float32"),Tensor([18, 0],"float32"),Tensor([18, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([18, 0],"float32"),Tensor([18, 0],"float32"),], -1, )
paddle.concat(list[Tensor([1800, 0],"float32"),Tensor([1800, 0],"float32"),], 1, )
paddle.concat(list[Tensor([1820, 0],"float32"),Tensor([1820, 0],"float32"),Tensor([1820, 0],"float32"),], -1, )
paddle.concat(list[Tensor([2, 0, 10, 10, 1],"float32"),Tensor([2, 0, 10, 10, 1],"float32"),Tensor([2, 0, 10, 10, 1],"float32"),Tensor([2, 0, 10, 10, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 0, 11, 11, 1],"float32"),Tensor([2, 0, 11, 11, 1],"float32"),Tensor([2, 0, 11, 11, 1],"float32"),Tensor([2, 0, 11, 11, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 0, 240, 240],"float32"),Tensor([2, 0, 240, 240],"float32"),Tensor([2, 0, 240, 240],"float32"),Tensor([2, 0, 240, 240],"float32"),], 1, )
paddle.concat(list[Tensor([2, 0, 248, 216],"float32"),Tensor([2, 0, 248, 216],"float32"),Tensor([2, 0, 248, 216],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 2],"float32"),Tensor([2, 0, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([2, 0, 336, 336],"float32"),Tensor([2, 0, 336, 336],"float32"),Tensor([2, 0, 336, 336],"float32"),Tensor([2, 0, 336, 336],"float32"),], 1, )
paddle.concat(list[Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),], 1, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),], axis=0, )
paddle.concat(list[Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([2, 128, 0, 216],"float32"),Tensor([2, 128, 0, 216],"float32"),Tensor([2, 128, 0, 216],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 248, 0],"float32"),Tensor([2, 128, 248, 0],"float32"),Tensor([2, 128, 248, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 3, 0, 10, 1],"float32"),Tensor([2, 3, 0, 10, 1],"float32"),Tensor([2, 3, 0, 10, 1],"float32"),Tensor([2, 3, 0, 10, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 3, 0, 11, 1],"float32"),Tensor([2, 3, 0, 11, 1],"float32"),Tensor([2, 3, 0, 11, 1],"float32"),Tensor([2, 3, 0, 11, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 3, 0, 240],"float32"),Tensor([2, 3, 0, 240],"float32"),Tensor([2, 3, 0, 240],"float32"),Tensor([2, 3, 0, 240],"float32"),], 1, )
paddle.concat(list[Tensor([2, 3, 0, 336],"float32"),Tensor([2, 3, 0, 336],"float32"),Tensor([2, 3, 0, 336],"float32"),Tensor([2, 3, 0, 336],"float32"),], 1, )
paddle.concat(list[Tensor([2, 3, 10, 0, 1],"float32"),Tensor([2, 3, 10, 0, 1],"float32"),Tensor([2, 3, 10, 0, 1],"float32"),Tensor([2, 3, 10, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 3, 10, 10, 0],"float32"),Tensor([2, 3, 10, 10, 0],"float32"),Tensor([2, 3, 10, 10, 0],"float32"),Tensor([2, 3, 10, 10, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 3, 11, 0, 1],"float32"),Tensor([2, 3, 11, 0, 1],"float32"),Tensor([2, 3, 11, 0, 1],"float32"),Tensor([2, 3, 11, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 3, 11, 11, 0],"float32"),Tensor([2, 3, 11, 11, 0],"float32"),Tensor([2, 3, 11, 11, 0],"float32"),Tensor([2, 3, 11, 11, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 3, 240, 0],"float32"),Tensor([2, 3, 240, 0],"float32"),Tensor([2, 3, 240, 0],"float32"),Tensor([2, 3, 240, 0],"float32"),], 1, )
paddle.concat(list[Tensor([2, 3, 336, 0],"float32"),Tensor([2, 3, 336, 0],"float32"),Tensor([2, 3, 336, 0],"float32"),Tensor([2, 3, 336, 0],"float32"),], 1, )
paddle.concat(list[Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),], )
paddle.concat(list[Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),Tensor([20000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([21, 0],"float32"),Tensor([21, 0],"float32"),Tensor([21, 0],"float32"),Tensor([21, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([216, 0, 1, 1, 2, 1],"float32"),Tensor([216, 0, 1, 1, 2, 1],"float32"),Tensor([216, 0, 1, 1, 2, 1],"float32"),Tensor([216, 0, 1, 1, 2, 3],"float32"),Tensor([216, 0, 1, 1, 2, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([216, 248, 0, 1, 2, 1],"float32"),Tensor([216, 248, 0, 1, 2, 1],"float32"),Tensor([216, 248, 0, 1, 2, 1],"float32"),Tensor([216, 248, 0, 1, 2, 3],"float32"),Tensor([216, 248, 0, 1, 2, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([216, 248, 1, 0, 2, 1],"float32"),Tensor([216, 248, 1, 0, 2, 1],"float32"),Tensor([216, 248, 1, 0, 2, 1],"float32"),Tensor([216, 248, 1, 0, 2, 3],"float32"),Tensor([216, 248, 1, 0, 2, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([216, 248, 1, 1, 0, 1],"float32"),Tensor([216, 248, 1, 1, 0, 1],"float32"),Tensor([216, 248, 1, 1, 0, 1],"float32"),Tensor([216, 248, 1, 1, 0, 3],"float32"),Tensor([216, 248, 1, 1, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([216, 248, 1, 1, 2, 0],"float32"),Tensor([216, 248, 1, 1, 2, 0],"float32"),Tensor([216, 248, 1, 1, 2, 0],"float32"),Tensor([216, 248, 1, 1, 2, 0],"float32"),Tensor([216, 248, 1, 1, 2, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),Tensor([22120, 0],"float32"),], -1, )
paddle.concat(list[Tensor([24, 0],"float32"),Tensor([24, 0],"float32"),], 1, )
paddle.concat(list[Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),Tensor([2419, 0],"float32"),], )
paddle.concat(list[Tensor([256, 0, 1],"float32"),Tensor([256, 0, 1],"float32"),], 2, )
paddle.concat(list[Tensor([3, 0, 1],"float64"),Tensor([3, 0, 1],"float64"),Tensor([3, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0],"float32"),Tensor([3, 0],"float32"),], -1, )
paddle.concat(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.concat(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], axis=1, )
paddle.concat(list[Tensor([3, 2, 0],"float64"),Tensor([3, 2, 0],"float64"),Tensor([3, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([32, 0, 240, 240],"float32"),], axis=1, )
paddle.concat(list[Tensor([32, 0, 241, 241],"float32"),], axis=1, )
paddle.concat(list[Tensor([32, 1, 0, 240],"float32"),], axis=1, )
paddle.concat(list[Tensor([32, 1, 0, 241],"float32"),], axis=1, )
paddle.concat(list[Tensor([32, 1, 240, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([32, 1, 241, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([32, 32, 0, 241],"float32"),], axis=1, )
paddle.concat(list[Tensor([32, 32, 241, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([32812, 0],"float32"),Tensor([32812, 0],"float32"),Tensor([32812, 0],"float32"),Tensor([32812, 0],"float32"),Tensor([32812, 0],"float32"),Tensor([32812, 0],"float32"),Tensor([32812, 0],"float32"),Tensor([32812, 0],"float32"),], -1, )
paddle.concat(list[Tensor([4, 0, 256, 256],"float32"),Tensor([4, 0, 256, 256],"float32"),Tensor([4, 0, 256, 256],"float32"),Tensor([4, 0, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),Tensor([4, 0, 918],"float16"),], axis=-1, )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([20, 0],"float32"),Tensor([32, 0],"float32"),Tensor([88, 0],"float32"),Tensor([20, 0],"float32"),Tensor([20, 0],"float32"),Tensor([72, 0],"float32"),Tensor([12, 0],"float32"),Tensor([36, 0],"float32"),Tensor([16, 0],"float32"),Tensor([4, 0],"float32"),Tensor([8, 0],"float32"),Tensor([44, 0],"float32"),Tensor([12, 0],"float32"),], )
paddle.concat(list[Tensor([4, 0],"float32"),], 1, )
paddle.concat(list[Tensor([4, 0],"int32"),Tensor([8, 0],"int32"),Tensor([8, 0],"int32"),Tensor([20, 0],"int32"),Tensor([32, 0],"int32"),Tensor([88, 0],"int32"),Tensor([20, 0],"int32"),Tensor([20, 0],"int32"),Tensor([72, 0],"int32"),Tensor([12, 0],"int32"),Tensor([36, 0],"int32"),Tensor([16, 0],"int32"),Tensor([4, 0],"int32"),Tensor([8, 0],"int32"),Tensor([44, 0],"int32"),Tensor([12, 0],"int32"),], )
paddle.concat(list[Tensor([4, 128, 0, 256],"float32"),Tensor([4, 128, 0, 256],"float32"),Tensor([4, 128, 0, 256],"float32"),Tensor([4, 128, 0, 256],"float32"),], 1, )
paddle.concat(list[Tensor([4, 128, 256, 0],"float32"),Tensor([4, 128, 256, 0],"float32"),Tensor([4, 128, 256, 0],"float32"),Tensor([4, 128, 256, 0],"float32"),], 1, )
paddle.concat(list[Tensor([4, 3, 0, 256],"float32"),Tensor([4, 3, 0, 256],"float32"),Tensor([4, 3, 0, 256],"float32"),Tensor([4, 3, 0, 256],"float32"),], 1, )
paddle.concat(list[Tensor([4, 3, 256, 0],"float32"),Tensor([4, 3, 256, 0],"float32"),Tensor([4, 3, 256, 0],"float32"),Tensor([4, 3, 256, 0],"float32"),], 1, )
paddle.concat(list[Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),Tensor([4, 304, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),Tensor([4, 346, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),Tensor([4, 377, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),Tensor([4, 396, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),Tensor([40, 0, 8],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),], 0, )
paddle.concat(list[Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),Tensor([40, 0],"float32"),], 0, )
paddle.concat(list[Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),Tensor([40, 1, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([402, 0],"float32"),Tensor([402, 0],"float32"),Tensor([402, 0],"float32"),Tensor([402, 0],"float32"),], -1, )
paddle.concat(list[Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([4096, 0],"float32"),Tensor([512, 0],"float32"),], )
paddle.concat(list[Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),Tensor([4800, 0],"float32"),], -1, )
paddle.concat(list[Tensor([5, 0, 1],"float32"),Tensor([5, 0, 1],"float32"),], 2, )
paddle.concat(list[Tensor([5, 0],"float64"),Tensor([5, 0],"float64"),Tensor([5, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([50, 0, 1],"float32"),Tensor([50, 0, 1],"float32"),Tensor([50, 0, 1],"float32"),], 2, )
paddle.concat(list[Tensor([50, 1501, 0],"float32"),Tensor([50, 1501, 0],"float32"),Tensor([50, 1501, 0],"float32"),], 2, )
paddle.concat(list[Tensor([500, 0],"float32"),Tensor([500, 0],"float32"),Tensor([500, 0],"float32"),Tensor([500, 0],"float32"),Tensor([500, 0],"float32"),Tensor([500, 0],"float32"),Tensor([500, 0],"float32"),Tensor([500, 0],"float32"),Tensor([500, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([50000, 0],"float32"),Tensor([50000, 0],"float32"),Tensor([50000, 0],"float32"),Tensor([50000, 0],"float32"),Tensor([50000, 0],"float32"),Tensor([50000, 0],"float32"),Tensor([50000, 0],"float32"),Tensor([50000, 0],"float32"),], -1, )
paddle.concat(list[Tensor([502, 0],"float32"),Tensor([502, 0],"float32"),Tensor([502, 0],"float32"),Tensor([502, 0],"float32"),Tensor([502, 0],"float32"),], -1, )
paddle.concat(list[Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),], -1, )
paddle.concat(list[Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),], -1, )
paddle.concat(list[Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),Tensor([512, 0],"float32"),], -1, )
paddle.concat(list[Tensor([52, 0, 1],"float32"),Tensor([52, 0, 1],"float32"),Tensor([52, 0, 1],"float32"),], axis=2, )
paddle.concat(list[Tensor([52, 0, 3, 1, 1, 8],"float32"),Tensor([52, 0, 3, 1, 1, 8],"float32"),Tensor([52, 0, 3, 1, 1, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 0, 3, 1, 1, 8],"float32"),Tensor([52, 0, 3, 3, 1, 8],"float32"),Tensor([52, 0, 3, 1, 1, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 0, 3, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([52, 0, 5, 5, 8],"float32"),Tensor([52, 0, 5, 2, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 1, 0, 1],"float32"),], axis=1, )
paddle.concat(list[Tensor([52, 1, 3, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([52, 3, 0],"float32"),Tensor([52, 3, 0],"float32"),Tensor([52, 3, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([52, 4, 0, 1, 1, 8],"float32"),Tensor([52, 4, 0, 1, 1, 8],"float32"),Tensor([52, 4, 0, 1, 1, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 4, 0, 1, 1, 8],"float32"),Tensor([52, 4, 0, 3, 1, 8],"float32"),Tensor([52, 4, 0, 1, 1, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 4, 0, 5, 1, 8],"float32"),Tensor([52, 4, 0, 5, 1, 8],"float32"),Tensor([52, 4, 0, 5, 1, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([52, 4, 0, 5, 8],"float32"),Tensor([52, 4, 0, 2, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 4, 0, 8],"float32"),Tensor([52, 4, 0, 8],"float32"),Tensor([52, 4, 0, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([52, 4, 1, 5, 0, 8],"float32"),Tensor([52, 4, 3, 5, 0, 8],"float32"),Tensor([52, 4, 1, 5, 0, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([52, 4, 3, 0, 1, 8],"float32"),Tensor([52, 4, 3, 0, 1, 8],"float32"),Tensor([52, 4, 3, 0, 1, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 4, 3, 1, 0, 8],"float32"),Tensor([52, 4, 3, 1, 0, 8],"float32"),Tensor([52, 4, 3, 1, 0, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 4, 3, 1, 0, 8],"float32"),Tensor([52, 4, 3, 3, 0, 8],"float32"),Tensor([52, 4, 3, 1, 0, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 4, 3, 1, 1, 0],"float32"),Tensor([52, 4, 3, 1, 1, 0],"float32"),Tensor([52, 4, 3, 1, 1, 0],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 4, 3, 1, 1, 0],"float32"),Tensor([52, 4, 3, 3, 1, 0],"float32"),Tensor([52, 4, 3, 1, 1, 0],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 4, 5, 0, 5],"float32"),Tensor([52, 4, 5, 0, 2],"float32"),], axis=4, )
paddle.concat(list[Tensor([52, 4, 5, 0, 8],"float32"),Tensor([52, 4, 5, 0, 8],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 4, 5, 5, 0],"float32"),Tensor([52, 4, 5, 2, 0],"float32"),], axis=3, )
paddle.concat(list[Tensor([52, 5, 0, 1],"float32"),Tensor([52, 5, 0, 3],"float32"),Tensor([52, 5, 0, 1],"float32"),], axis=3, )
paddle.concat(list[Tensor([56, 0, 16, 16],"float32"),Tensor([56, 0, 16, 16],"float32"),Tensor([56, 0, 16, 16],"float32"),], 1, )
paddle.concat(list[Tensor([56, 0, 32, 32],"float32"),Tensor([56, 0, 32, 32],"float32"),Tensor([56, 0, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([56, 0, 4, 4],"float32"),Tensor([56, 0, 4, 4],"float32"),Tensor([56, 0, 4, 4],"float32"),], 1, )
paddle.concat(list[Tensor([56, 0, 64, 64],"float32"),Tensor([56, 0, 64, 64],"float32"),Tensor([56, 0, 64, 64],"float32"),], 1, )
paddle.concat(list[Tensor([56, 3, 0, 32],"float32"),Tensor([56, 3, 0, 32],"float32"),Tensor([56, 2, 0, 32],"float32"),], 1, )
paddle.concat(list[Tensor([56, 3, 0, 4],"float32"),Tensor([56, 3, 0, 4],"float32"),Tensor([56, 2, 0, 4],"float32"),], 1, )
paddle.concat(list[Tensor([56, 3, 0, 64],"float32"),Tensor([56, 3, 0, 64],"float32"),Tensor([56, 2, 0, 64],"float32"),], 1, )
paddle.concat(list[Tensor([56, 3, 32, 0],"float32"),Tensor([56, 3, 32, 0],"float32"),Tensor([56, 2, 32, 0],"float32"),], 1, )
paddle.concat(list[Tensor([56, 3, 4, 0],"float32"),Tensor([56, 3, 4, 0],"float32"),Tensor([56, 2, 4, 0],"float32"),], 1, )
paddle.concat(list[Tensor([56, 3, 64, 0],"float32"),Tensor([56, 3, 64, 0],"float32"),Tensor([56, 2, 64, 0],"float32"),], 1, )
paddle.concat(list[Tensor([58, 0, 1],"float32"),Tensor([58, 0, 1],"float32"),], 2, )
paddle.concat(list[Tensor([58, 58, 0],"float32"),Tensor([58, 58, 0],"float32"),], 2, )
paddle.concat(list[Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),Tensor([60000, 0],"bool"),], axis=1, )
paddle.concat(list[Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 0, 1],"float32"),Tensor([64, 0, 1],"float32"),], 2, )
paddle.concat(list[Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 0, 7, 7],"float32"),Tensor([64, 0, 7, 7],"float32"),Tensor([64, 0, 7, 7],"float32"),Tensor([64, 0, 7, 7],"float32"),Tensor([64, 0, 7, 7],"float32"),Tensor([64, 0, 7, 7],"float32"),Tensor([64, 0, 7, 7],"float32"),Tensor([64, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([40, 0],"float32"),], )
paddle.concat(list[Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([36, 0],"float32"),], )
paddle.concat(list[Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([16, 0],"float32"),], )
paddle.concat(list[Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([25, 0],"float32"),], )
paddle.concat(list[Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([32, 0],"float32"),], )
paddle.concat(list[Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),Tensor([25, 0],"float32"),], )
paddle.concat(list[Tensor([64, 1280, 0, 7],"float32"),Tensor([64, 288, 0, 7],"float32"),Tensor([64, 288, 0, 7],"float32"),Tensor([64, 288, 0, 7],"float32"),Tensor([64, 288, 0, 7],"float32"),Tensor([64, 288, 0, 7],"float32"),Tensor([64, 288, 0, 7],"float32"),Tensor([64, 288, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 1280, 7, 0],"float32"),Tensor([64, 288, 7, 0],"float32"),Tensor([64, 288, 7, 0],"float32"),Tensor([64, 288, 7, 0],"float32"),Tensor([64, 288, 7, 0],"float32"),Tensor([64, 288, 7, 0],"float32"),Tensor([64, 288, 7, 0],"float32"),Tensor([64, 288, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 160, 0, 56],"float32"),Tensor([64, 192, 0, 56],"float32"),Tensor([64, 192, 0, 56],"float32"),Tensor([64, 192, 0, 56],"float32"),Tensor([64, 192, 0, 56],"float32"),Tensor([64, 192, 0, 56],"float32"),Tensor([64, 192, 0, 56],"float32"),Tensor([64, 192, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 160, 56, 0],"float32"),Tensor([64, 192, 56, 0],"float32"),Tensor([64, 192, 56, 0],"float32"),Tensor([64, 192, 56, 0],"float32"),Tensor([64, 192, 56, 0],"float32"),Tensor([64, 192, 56, 0],"float32"),Tensor([64, 192, 56, 0],"float32"),Tensor([64, 192, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 320, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 320, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 64, 0],"float32"),Tensor([64, 64, 0],"float32"),], 2, )
paddle.concat(list[Tensor([64, 640, 0, 14],"float32"),Tensor([64, 256, 0, 14],"float32"),Tensor([64, 256, 0, 14],"float32"),Tensor([64, 256, 0, 14],"float32"),Tensor([64, 256, 0, 14],"float32"),Tensor([64, 256, 0, 14],"float32"),Tensor([64, 256, 0, 14],"float32"),Tensor([64, 256, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 640, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),Tensor([64, 224, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 640, 14, 0],"float32"),Tensor([64, 256, 14, 0],"float32"),Tensor([64, 256, 14, 0],"float32"),Tensor([64, 256, 14, 0],"float32"),Tensor([64, 256, 14, 0],"float32"),Tensor([64, 256, 14, 0],"float32"),Tensor([64, 256, 14, 0],"float32"),Tensor([64, 256, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([64, 640, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),Tensor([64, 224, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([6512, 0],"float32"),Tensor([6512, 0],"float32"),Tensor([6512, 0],"float32"),Tensor([6512, 0],"float32"),Tensor([6512, 0],"float32"),Tensor([6512, 0],"float32"),], -1, )
paddle.concat(list[Tensor([8, 0, 128, 64],"float32"),Tensor([8, 0, 1, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 0, 4, 4, 4, 1],"float32"),Tensor([8, 0, 4, 4, 4, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 16, 128, 0],"float32"),Tensor([8, 16, 1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 8, 0, 4, 4, 1],"float32"),Tensor([8, 8, 0, 4, 4, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 8, 4, 0, 4, 1],"float32"),Tensor([8, 8, 4, 0, 4, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 8, 4, 4, 0, 1],"float32"),Tensor([8, 8, 4, 4, 0, 1],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 8, 4, 4, 4, 0],"float32"),Tensor([8, 8, 4, 4, 4, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([8192, 0],"float32"),Tensor([1168, 0],"float32"),], )
paddle.concat(list[Tensor([8810, 0],"float32"),Tensor([8810, 0],"float32"),Tensor([8810, 0],"float32"),Tensor([8810, 0],"float32"),Tensor([8810, 0],"float32"),Tensor([8810, 0],"float32"),Tensor([8810, 0],"float32"),Tensor([8810, 0],"float32"),], -1, )
paddle.concat(tuple(Tensor([0, 1, 16, 16],"float32"),Tensor([0, 1, 16, 16],"float32"),Tensor([0, 1, 16, 16],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 1, 19, 2],"float32"),Tensor([0, 1, 19, 80],"float32"),Tensor([0, 1, 19, 2],"float32"),), 3, )
paddle.concat(tuple(Tensor([0, 1, 192],"float32"),Tensor([0, 576, 192],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 1, 2, 49],"float32"),Tensor([0, 1, 272, 49],"float32"),Tensor([0, 1, 2, 49],"float32"),), 2, )
paddle.concat(tuple(Tensor([0, 1, 2, 84],"float32"),Tensor([0, 1, 15, 84],"float32"),Tensor([0, 1, 2, 84],"float32"),), 2, )
paddle.concat(tuple(Tensor([0, 1, 256],"float32"),Tensor([0, 112, 256],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 1, 256],"float32"),Tensor([0, 144, 256],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 1, 256],"float32"),Tensor([0, 156, 256],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 1, 276, 2],"float32"),Tensor([0, 1, 276, 45],"float32"),Tensor([0, 1, 276, 2],"float32"),), 3, )
paddle.concat(tuple(Tensor([0, 1, 32, 32],"float32"),Tensor([0, 1, 32, 32],"float32"),Tensor([0, 1, 32, 32],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 1, 32],"float32"),Tensor([0, 1, 32],"float32"),Tensor([0, 1, 32],"float32"),Tensor([0, 1, 32],"float32"),Tensor([0, 1, 32],"float32"),Tensor([0, 1, 32],"float32"),Tensor([0, 1, 32],"float32"),Tensor([0, 1, 32],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 1, 4, 4],"float32"),Tensor([0, 1, 4, 4],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 100],"bool"),Tensor([0, 1],"bool"),), axis=1, )
paddle.concat(tuple(Tensor([0, 100],"int64"),Tensor([0, 1],"int64"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 101],"bool"),Tensor([0, 1],"bool"),), axis=1, )
paddle.concat(tuple(Tensor([0, 101],"int64"),Tensor([0, 1],"int64"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 102],"bool"),Tensor([0, 1],"bool"),), axis=1, )
paddle.concat(tuple(Tensor([0, 102],"int64"),Tensor([0, 1],"int64"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 103],"bool"),Tensor([0, 1],"bool"),), axis=1, )
paddle.concat(tuple(Tensor([0, 103],"int64"),Tensor([0, 1],"int64"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 104],"bool"),Tensor([0, 1],"bool"),), axis=1, )
paddle.concat(tuple(Tensor([0, 104],"int64"),Tensor([0, 1],"int64"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 10],"bool"),Tensor([0, 1],"bool"),), axis=1, )
paddle.concat(tuple(Tensor([0, 10],"int64"),Tensor([0, 1],"int64"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 120, 14, 14],"float16"),Tensor([0, 120, 14, 14],"float16"),Tensor([0, 120, 14, 14],"float16"),Tensor([0, 120, 14, 14],"float16"),), axis=1, )
paddle.concat(tuple(Tensor([0, 120, 14, 14],"float32"),Tensor([0, 120, 14, 14],"float32"),Tensor([0, 120, 14, 14],"float32"),Tensor([0, 120, 14, 14],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 128, 56, 56],"float16"),Tensor([0, 128, 56, 56],"float16"),), 1, )
paddle.concat(tuple(Tensor([0, 128, 56, 56],"float16"),Tensor([0, 128, 56, 56],"float16"),Tensor([0, 128, 56, 56],"float16"),), 1, )
paddle.concat(tuple(Tensor([0, 128, 56, 56],"float32"),Tensor([0, 128, 56, 56],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 128, 56, 56],"float32"),Tensor([0, 128, 56, 56],"float32"),Tensor([0, 128, 56, 56],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 12],"float64"),), 1, )
paddle.concat(tuple(Tensor([0, 144, 200, 128],"float32"),Tensor([0, 144, 200, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([0, 144, 200, 2],"float32"),Tensor([0, 144, 200, 2],"float32"),), -1, )
paddle.concat(tuple(Tensor([0, 156, 14, 14],"float16"),Tensor([0, 156, 14, 14],"float16"),Tensor([0, 156, 14, 14],"float16"),Tensor([0, 156, 14, 14],"float16"),), axis=1, )
paddle.concat(tuple(Tensor([0, 156, 14, 14],"float32"),Tensor([0, 156, 14, 14],"float32"),Tensor([0, 156, 14, 14],"float32"),Tensor([0, 156, 14, 14],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 18, 25, 128],"float32"),Tensor([0, 18, 25, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([0, 18, 25, 2],"float32"),Tensor([0, 18, 25, 2],"float32"),), -1, )
paddle.concat(tuple(Tensor([0, 192, 144, 128],"float32"),Tensor([0, 192, 144, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([0, 192, 144, 2],"float32"),Tensor([0, 192, 144, 2],"float32"),), -1, )
paddle.concat(tuple(Tensor([0, 1],"bool"),Tensor([0, 1],"bool"),), axis=1, )
paddle.concat(tuple(Tensor([0, 1],"float64"),), 1, )
paddle.concat(tuple(Tensor([0, 1],"int64"),Tensor([0, 1],"int64"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 2, 1, 2],"float32"),Tensor([0, 2, 1, 2],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 2, 128, 128],"float32"),Tensor([0, 1, 128, 128],"float32"),Tensor([0, 3, 128, 128],"float32"),Tensor([0, 2, 128, 128],"float32"),Tensor([0, 2, 128, 128],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 2, 2, 2],"float32"),Tensor([0, 2, 2, 2],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([0, 2, 248, 216],"float32"),Tensor([0, 1, 248, 216],"float32"),Tensor([0, 3, 248, 216],"float32"),Tensor([0, 2, 248, 216],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 256, 28, 28],"float16"),Tensor([0, 256, 28, 28],"float16"),), 1, )
paddle.concat(tuple(Tensor([0, 256, 28, 28],"float16"),Tensor([0, 256, 28, 28],"float16"),Tensor([0, 128, 28, 28],"float16"),Tensor([0, 256, 28, 28],"float16"),Tensor([0, 256, 28, 28],"float16"),), 1, )
paddle.concat(tuple(Tensor([0, 256, 28, 28],"float16"),Tensor([0, 256, 28, 28],"float16"),Tensor([0, 256, 28, 28],"float16"),), 1, )
paddle.concat(tuple(Tensor([0, 256, 28, 28],"float32"),Tensor([0, 256, 28, 28],"float32"),Tensor([0, 128, 28, 28],"float32"),Tensor([0, 256, 28, 28],"float32"),Tensor([0, 256, 28, 28],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 3, 28, 28],"float32"),Tensor([0, 1, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 280, 350],"float32"),Tensor([0, 1, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 298, 364],"float32"),Tensor([0, 1, 298, 364],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 32, 170, 12],"float32"),Tensor([0, 64, 170, 12],"float32"),Tensor([0, 64, 170, 12],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 3],"float64"),), 1, )
paddle.concat(tuple(Tensor([0, 4, 3, 8],"float32"),Tensor([0, 4, 1, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([0, 4, 7, 8],"float32"),Tensor([0, 4, 1, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([0, 4, 7, 8],"float32"),Tensor([0, 4, 3, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),Tensor([0, 256, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),), 1, )
paddle.concat(tuple(Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),), 1, )
paddle.concat(tuple(Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),Tensor([0, 512, 14, 14],"float16"),), 1, )
paddle.concat(tuple(Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),Tensor([0, 256, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),Tensor([0, 512, 14, 14],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 64, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 64, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),Tensor([0, 32, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([1, 0, 1, 2],"float32"),Tensor([1, 0, 1, 2],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 0, 1, 8],"float32"),Tensor([1, 0, 1, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([1, 0, 144, 128],"float32"),Tensor([1, 0, 144, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 0, 144, 2],"float32"),Tensor([1, 0, 144, 2],"float32"),), -1, )
paddle.concat(tuple(Tensor([1, 0, 16, 16],"float32"),Tensor([1, 0, 16, 16],"float32"),Tensor([1, 0, 16, 16],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 19, 2],"float32"),Tensor([1, 0, 19, 80],"float32"),Tensor([1, 0, 19, 2],"float32"),), 3, )
paddle.concat(tuple(Tensor([1, 0, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 0, 2, 49],"float32"),Tensor([1, 0, 272, 49],"float32"),Tensor([1, 0, 2, 49],"float32"),), 2, )
paddle.concat(tuple(Tensor([1, 0, 2, 4],"float32"),Tensor([1, 0, 2, 4],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 0, 2, 84],"float32"),Tensor([1, 0, 15, 84],"float32"),Tensor([1, 0, 2, 84],"float32"),), 2, )
paddle.concat(tuple(Tensor([1, 0, 200, 128],"float32"),Tensor([1, 0, 200, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 0, 200, 2],"float32"),Tensor([1, 0, 200, 2],"float32"),), -1, )
paddle.concat(tuple(Tensor([1, 0, 25, 128],"float32"),Tensor([1, 0, 25, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 0, 25, 2],"float32"),Tensor([1, 0, 25, 2],"float32"),), -1, )
paddle.concat(tuple(Tensor([1, 0, 256],"float32"),Tensor([1, 0, 256],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 276, 2],"float32"),Tensor([1, 0, 276, 45],"float32"),Tensor([1, 0, 276, 2],"float32"),), 3, )
paddle.concat(tuple(Tensor([1, 0, 28, 28],"float32"),Tensor([1, 0, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 280, 350],"float32"),Tensor([1, 0, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 298, 364],"float32"),Tensor([1, 0, 298, 364],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 32, 32],"float32"),Tensor([1, 0, 32, 32],"float32"),Tensor([1, 0, 32, 32],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 4, 4],"float32"),Tensor([1, 0, 4, 4],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 0, 9, 128],"float32"),Tensor([1, 0, 9, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 0],"int64"),Tensor([1, 0],"int64"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 1, 0, 16],"float32"),Tensor([1, 1, 0, 16],"float32"),Tensor([1, 1, 0, 16],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 1, 0, 2],"float32"),Tensor([1, 1, 0, 45],"float32"),Tensor([1, 1, 0, 2],"float32"),), 3, )
paddle.concat(tuple(Tensor([1, 1, 0, 2],"float32"),Tensor([1, 1, 0, 80],"float32"),Tensor([1, 1, 0, 2],"float32"),), 3, )
paddle.concat(tuple(Tensor([1, 1, 0, 32],"float32"),Tensor([1, 1, 0, 32],"float32"),Tensor([1, 1, 0, 32],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 1, 0, 49],"float32"),Tensor([1, 1, 0, 49],"float32"),Tensor([1, 1, 0, 49],"float32"),), 2, )
paddle.concat(tuple(Tensor([1, 1, 0, 84],"float32"),Tensor([1, 1, 0, 84],"float32"),Tensor([1, 1, 0, 84],"float32"),), 2, )
paddle.concat(tuple(Tensor([1, 1, 0],"float32"),Tensor([1, 112, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 1, 0],"float32"),Tensor([1, 144, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 1, 0],"float32"),Tensor([1, 156, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 1, 16, 0],"float32"),Tensor([1, 1, 16, 0],"float32"),Tensor([1, 1, 16, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 1, 19, 0],"float32"),Tensor([1, 1, 19, 0],"float32"),Tensor([1, 1, 19, 0],"float32"),), 3, )
paddle.concat(tuple(Tensor([1, 1, 2, 0],"float32"),Tensor([1, 1, 15, 0],"float32"),Tensor([1, 1, 2, 0],"float32"),), 2, )
paddle.concat(tuple(Tensor([1, 1, 2, 0],"float32"),Tensor([1, 1, 2, 0],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 1, 2, 0],"float32"),Tensor([1, 1, 272, 0],"float32"),Tensor([1, 1, 2, 0],"float32"),), 2, )
paddle.concat(tuple(Tensor([1, 1, 20, 0],"float32"),Tensor([1, 1, 20, 0],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 1, 276, 0],"float32"),Tensor([1, 1, 276, 0],"float32"),Tensor([1, 1, 276, 0],"float32"),), 3, )
paddle.concat(tuple(Tensor([1, 1, 32, 0],"float32"),Tensor([1, 1, 32, 0],"float32"),Tensor([1, 1, 32, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 1, 4, 0],"float32"),Tensor([1, 1, 4, 0],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 1, 8, 0],"float32"),Tensor([1, 1, 8, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 10, 0, 128],"float32"),Tensor([1, 10, 0, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 12, 0, 128],"float32"),Tensor([1, 12, 0, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 144, 0, 128],"float32"),Tensor([1, 144, 0, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 144, 0, 2],"float32"),Tensor([1, 144, 0, 2],"float32"),), -1, )
paddle.concat(tuple(Tensor([1, 144, 200, 0],"float32"),Tensor([1, 144, 200, 0],"float32"),), -1, )
paddle.concat(tuple(Tensor([1, 144, 200, 0],"float32"),Tensor([1, 144, 200, 0],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 18, 0, 128],"float32"),Tensor([1, 18, 0, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 18, 0, 2],"float32"),Tensor([1, 18, 0, 2],"float32"),), -1, )
paddle.concat(tuple(Tensor([1, 18, 25, 0],"float32"),Tensor([1, 18, 25, 0],"float32"),), -1, )
paddle.concat(tuple(Tensor([1, 18, 25, 0],"float32"),Tensor([1, 18, 25, 0],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 192, 0, 128],"float32"),Tensor([1, 192, 0, 128],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 192, 0, 2],"float32"),Tensor([1, 192, 0, 2],"float32"),), -1, )
paddle.concat(tuple(Tensor([1, 192, 144, 0],"float32"),Tensor([1, 192, 144, 0],"float32"),), -1, )
paddle.concat(tuple(Tensor([1, 192, 144, 0],"float32"),Tensor([1, 192, 144, 0],"float32"),), axis=3, )
paddle.concat(tuple(Tensor([1, 2, 0, 2],"float32"),Tensor([1, 2, 0, 2],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 2, 0, 4],"float32"),Tensor([1, 1, 0, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 2, 1, 0],"float32"),Tensor([1, 2, 1, 0],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 2, 2, 0],"float32"),Tensor([1, 2, 2, 0],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 20, 0],"float32"),Tensor([1, 20, 0],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([1, 3, 0, 256],"float32"),Tensor([1, 3, 0, 256],"float32"),), 1, )
paddle.concat(tuple(Tensor([1, 3, 0, 28],"float32"),Tensor([1, 1, 0, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 350],"float32"),Tensor([1, 1, 0, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 364],"float32"),Tensor([1, 1, 0, 364],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 28, 0],"float32"),Tensor([1, 1, 28, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 280, 0],"float32"),Tensor([1, 1, 280, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 298, 0],"float32"),Tensor([1, 1, 298, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 4, 0, 8],"float32"),Tensor([1, 4, 0, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([1, 4, 1, 0],"float32"),Tensor([1, 4, 1, 0],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([1, 4, 2, 0],"float32"),Tensor([1, 4, 1, 0],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),), 2, )
paddle.concat(tuple(Tensor([13, 0, 32],"float32"),Tensor([13, 0, 32],"float32"),Tensor([13, 0, 32],"float32"),Tensor([13, 0, 32],"float32"),Tensor([13, 0, 32],"float32"),Tensor([13, 0, 32],"float32"),Tensor([13, 0, 32],"float32"),Tensor([13, 0, 32],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([13, 0, 4],"float32"),Tensor([13, 0, 4],"float32"),), axis=2, )
paddle.concat(tuple(Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),), 2, )
paddle.concat(tuple(Tensor([14, 0, 7, 8],"float32"),Tensor([14, 0, 1, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([14, 0, 7, 8],"float32"),Tensor([14, 0, 3, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([14, 4, 0, 8],"float32"),Tensor([14, 4, 0, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([14, 4, 7, 0],"float32"),Tensor([14, 4, 1, 0],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([14, 4, 7, 0],"float32"),Tensor([14, 4, 3, 0],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([140, 0, 1, 1, 2, 6],"float32"),Tensor([140, 0, 1, 1, 2, 1],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([140, 188, 1, 1, 2, 0],"float32"),Tensor([140, 188, 1, 1, 2, 0],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([2, 0, 3, 8],"float32"),Tensor([2, 0, 1, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([2, 0],"float64"),), 1, )
paddle.concat(tuple(Tensor([2, 4, 0, 8],"float32"),Tensor([2, 4, 0, 8],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([2, 4, 0],"float32"),Tensor([2, 4, 0],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([2, 4, 3, 0],"float32"),Tensor([2, 4, 1, 0],"float32"),), axis=-2, )
paddle.concat(tuple(Tensor([28, 0, 170, 12],"float32"),Tensor([28, 0, 170, 12],"float32"),Tensor([28, 0, 170, 12],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([28, 32, 0, 12],"float32"),Tensor([28, 64, 0, 12],"float32"),Tensor([28, 64, 0, 12],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([28, 32, 170, 0],"float32"),Tensor([28, 64, 170, 0],"float32"),Tensor([28, 64, 170, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([3, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([385, 0],"float32"),Tensor([385, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([4, 0, 376, 25, 2],"float32"),Tensor([4, 0, 376, 25, 1],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([4, 0],"float64"),), 1, )
paddle.concat(tuple(Tensor([4, 2, 0, 128],"float32"),Tensor([4, 1, 0, 128],"float32"),Tensor([4, 3, 0, 128],"float32"),Tensor([4, 2, 0, 128],"float32"),Tensor([4, 2, 0, 128],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 2, 0, 216],"float32"),Tensor([4, 1, 0, 216],"float32"),Tensor([4, 3, 0, 216],"float32"),Tensor([4, 2, 0, 216],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 2, 128, 0],"float32"),Tensor([4, 1, 128, 0],"float32"),Tensor([4, 3, 128, 0],"float32"),Tensor([4, 2, 128, 0],"float32"),Tensor([4, 2, 128, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 2, 248, 0],"float32"),Tensor([4, 1, 248, 0],"float32"),Tensor([4, 3, 248, 0],"float32"),Tensor([4, 2, 248, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 280, 0, 25, 2],"float32"),Tensor([4, 280, 0, 25, 1],"float32"),), axis=-1, )
paddle.concat(tuple(Tensor([5, 0],"float32"),Tensor([5, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([516, 0],"float16"),Tensor([516, 0],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 28, 28],"float16"),Tensor([64, 0, 28, 28],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 28, 28],"float16"),Tensor([64, 0, 28, 28],"float16"),Tensor([64, 0, 28, 28],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 32, 32],"float32"),Tensor([64, 0, 32, 32],"float32"),Tensor([64, 0, 32, 32],"float32"),Tensor([64, 0, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 32, 32],"float32"),Tensor([64, 0, 32, 32],"float32"),Tensor([64, 0, 32, 32],"float32"),Tensor([64, 0, 32, 32],"float32"),Tensor([64, 0, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 56, 56],"float16"),Tensor([64, 0, 56, 56],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 56, 56],"float16"),Tensor([64, 0, 56, 56],"float16"),Tensor([64, 0, 56, 56],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),Tensor([64, 0, 56, 56],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 120, 0, 14],"float32"),Tensor([64, 120, 0, 14],"float32"),Tensor([64, 120, 0, 14],"float32"),Tensor([64, 120, 0, 14],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([64, 120, 14, 0],"float32"),Tensor([64, 120, 14, 0],"float32"),Tensor([64, 120, 14, 0],"float32"),Tensor([64, 120, 14, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([64, 128, 0, 56],"float16"),Tensor([64, 128, 0, 56],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 128, 0, 56],"float16"),Tensor([64, 128, 0, 56],"float16"),Tensor([64, 128, 0, 56],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 128, 0, 56],"float32"),Tensor([64, 128, 0, 56],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 128, 0, 56],"float32"),Tensor([64, 128, 0, 56],"float32"),Tensor([64, 128, 0, 56],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 128, 56, 0],"float16"),Tensor([64, 128, 56, 0],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 128, 56, 0],"float16"),Tensor([64, 128, 56, 0],"float16"),Tensor([64, 128, 56, 0],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 128, 56, 0],"float32"),Tensor([64, 128, 56, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 128, 56, 0],"float32"),Tensor([64, 128, 56, 0],"float32"),Tensor([64, 128, 56, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 156, 0, 14],"float16"),Tensor([64, 156, 0, 14],"float16"),Tensor([64, 156, 0, 14],"float16"),Tensor([64, 156, 0, 14],"float16"),), axis=1, )
paddle.concat(tuple(Tensor([64, 156, 0, 14],"float32"),Tensor([64, 156, 0, 14],"float32"),Tensor([64, 156, 0, 14],"float32"),Tensor([64, 156, 0, 14],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([64, 156, 14, 0],"float16"),Tensor([64, 156, 14, 0],"float16"),Tensor([64, 156, 14, 0],"float16"),Tensor([64, 156, 14, 0],"float16"),), axis=1, )
paddle.concat(tuple(Tensor([64, 156, 14, 0],"float32"),Tensor([64, 156, 14, 0],"float32"),Tensor([64, 156, 14, 0],"float32"),Tensor([64, 156, 14, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([64, 256, 0, 28],"float16"),Tensor([64, 256, 0, 28],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 256, 0, 28],"float16"),Tensor([64, 256, 0, 28],"float16"),Tensor([64, 256, 0, 28],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 256, 0, 28],"float32"),Tensor([64, 256, 0, 28],"float32"),Tensor([64, 128, 0, 28],"float32"),Tensor([64, 256, 0, 28],"float32"),Tensor([64, 256, 0, 28],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 256, 28, 0],"float16"),Tensor([64, 256, 28, 0],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 256, 28, 0],"float16"),Tensor([64, 256, 28, 0],"float16"),Tensor([64, 128, 28, 0],"float16"),Tensor([64, 256, 28, 0],"float16"),Tensor([64, 256, 28, 0],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 256, 28, 0],"float16"),Tensor([64, 256, 28, 0],"float16"),Tensor([64, 256, 28, 0],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 256, 28, 0],"float32"),Tensor([64, 256, 28, 0],"float32"),Tensor([64, 128, 28, 0],"float32"),Tensor([64, 256, 28, 0],"float32"),Tensor([64, 256, 28, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),Tensor([64, 256, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),Tensor([64, 512, 0, 14],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),Tensor([64, 256, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),Tensor([64, 512, 0, 14],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),Tensor([64, 256, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),Tensor([64, 512, 14, 0],"float16"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),Tensor([64, 256, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),Tensor([64, 512, 14, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 64, 0, 32],"float32"),Tensor([64, 32, 0, 32],"float32"),Tensor([64, 32, 0, 32],"float32"),Tensor([64, 32, 0, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 64, 0, 32],"float32"),Tensor([64, 32, 0, 32],"float32"),Tensor([64, 32, 0, 32],"float32"),Tensor([64, 32, 0, 32],"float32"),Tensor([64, 32, 0, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 64, 32, 0],"float32"),Tensor([64, 32, 32, 0],"float32"),Tensor([64, 32, 32, 0],"float32"),Tensor([64, 32, 32, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([64, 64, 32, 0],"float32"),Tensor([64, 32, 32, 0],"float32"),Tensor([64, 32, 32, 0],"float32"),Tensor([64, 32, 32, 0],"float32"),Tensor([64, 32, 32, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([8, 0, 128, 128],"float32"),Tensor([8, 0, 128, 128],"float32"),Tensor([8, 0, 128, 128],"float32"),Tensor([8, 0, 128, 128],"float32"),Tensor([8, 0, 128, 128],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([8, 2, 0, 128],"float32"),Tensor([8, 1, 0, 128],"float32"),Tensor([8, 3, 0, 128],"float32"),Tensor([8, 2, 0, 128],"float32"),Tensor([8, 2, 0, 128],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([8, 2, 128, 0],"float32"),Tensor([8, 1, 128, 0],"float32"),Tensor([8, 3, 128, 0],"float32"),Tensor([8, 2, 128, 0],"float32"),Tensor([8, 2, 128, 0],"float32"),), axis=1, )
paddle.concat(x=list[Tensor([0, 1024, 4, 14, 14],"float32"),Tensor([0, 256, 4, 14, 14],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([0, 12, 2],"float32"),Tensor([0, 96, 2],"float32"),Tensor([0, 12, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([0, 128, 1],"int64"),Tensor([0, 128, 1],"int64"),], axis=2, )
paddle.concat(x=list[Tensor([0, 18, 3, 3],"float32"),Tensor([0, 18, 3, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([0, 24, 32],"float32"),Tensor([0, 24, 32],"float32"),], axis=2, )
paddle.concat(x=list[Tensor([0, 256, 4, 56, 56],"float32"),Tensor([0, 64, 4, 56, 56],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([0, 32],"float16"),Tensor([0, 32],"float16"),], axis=-1, )
paddle.concat(x=list[Tensor([0, 500, 1],"int64"),Tensor([0, 500, 1],"int64"),], axis=2, )
paddle.concat(x=list[Tensor([0, 512, 4, 28, 28],"float32"),Tensor([0, 128, 4, 28, 28],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([0, 5632],"float16"),Tensor([0, 5632],"float16"),], axis=-1, )
paddle.concat(x=list[Tensor([0, 64, 4, 56, 56],"float32"),Tensor([0, 16, 4, 56, 56],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([0, 64],"float16"),Tensor([0, 64],"float16"),], axis=-1, )
paddle.concat(x=list[Tensor([0, 722, 2, 2],"float32"),Tensor([0, 722, 2, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([100, 0, 2, 2],"float32"),Tensor([100, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([100, 0, 3, 3],"float32"),Tensor([100, 0, 3, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([100, 18, 0, 3],"float32"),Tensor([100, 18, 0, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([100, 18, 3, 0],"float32"),Tensor([100, 18, 3, 0],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([100, 722, 0, 2],"float32"),Tensor([100, 722, 0, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([100, 722, 2, 0],"float32"),Tensor([100, 722, 2, 0],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([13, 0, 1],"float32"),Tensor([13, 0, 1],"float32"),Tensor([13, 0, 1],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([16, 0, 1],"float32"),Tensor([16, 0, 1],"float32"),Tensor([16, 0, 1],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([16, 0, 2],"float32"),Tensor([16, 0, 2],"float32"),Tensor([16, 0, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([16, 0, 32],"float32"),Tensor([16, 0, 32],"float32"),], axis=2, )
paddle.concat(x=list[Tensor([16, 12, 0],"float32"),Tensor([16, 96, 0],"float32"),Tensor([16, 12, 0],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([2, 0, 2],"float32"),Tensor([2, 0, 2],"float32"),Tensor([2, 0, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([2, 12, 0],"float32"),Tensor([2, 96, 0],"float32"),Tensor([2, 12, 0],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([20, 0, 1],"int64"),Tensor([20, 0, 1],"int64"),], axis=2, )
paddle.concat(x=list[Tensor([20, 500, 0],"int64"),Tensor([20, 500, 0],"int64"),], axis=2, )
paddle.concat(x=list[Tensor([2048, 0],"float16"),Tensor([2048, 0],"float16"),], axis=-1, )
paddle.concat(x=list[Tensor([227, 0, 3, 3],"float32"),Tensor([227, 0, 3, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([227, 18, 0, 3],"float32"),Tensor([227, 18, 0, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([227, 18, 3, 0],"float32"),Tensor([227, 18, 3, 0],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([24, 0, 32],"float32"),Tensor([24, 0, 32],"float32"),], axis=2, )
paddle.concat(x=list[Tensor([24, 24, 0],"float32"),Tensor([24, 24, 0],"float32"),], axis=2, )
paddle.concat(x=list[Tensor([256, 0, 2, 2],"float32"),Tensor([256, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([256, 0, 3, 3],"float32"),Tensor([256, 0, 3, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([256, 18, 0, 3],"float32"),Tensor([256, 18, 0, 3],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([256, 18, 3, 0],"float32"),Tensor([256, 18, 3, 0],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([256, 722, 0, 2],"float32"),Tensor([256, 722, 0, 2],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([256, 722, 2, 0],"float32"),Tensor([256, 722, 2, 0],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([3, 0, 1],"float32"),Tensor([3, 0, 1],"float32"),Tensor([3, 0, 1],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([3, 12, 0],"float32"),Tensor([3, 96, 0],"float32"),Tensor([3, 12, 0],"float32"),], axis=1, )
paddle.concat(x=list[Tensor([4, 0, 1],"int64"),Tensor([4, 0, 1],"int64"),], axis=2, )
paddle.concat(x=list[Tensor([4, 128, 0],"int64"),Tensor([4, 128, 0],"int64"),], axis=2, )
paddle.concat(x=list[Tensor([64, 0],"float16"),Tensor([64, 0],"float16"),], axis=-1, )
paddle.concat(x=list[Tensor([8, 0, 4, 14, 14],"float32"),Tensor([8, 0, 4, 14, 14],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 0, 4, 28, 28],"float32"),Tensor([8, 0, 4, 28, 28],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 0, 4, 56, 56],"float32"),Tensor([8, 0, 4, 56, 56],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 1024, 0, 14, 14],"float32"),Tensor([8, 256, 0, 14, 14],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 256, 0, 56, 56],"float32"),Tensor([8, 64, 0, 56, 56],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 256, 4, 0, 56],"float32"),Tensor([8, 64, 4, 0, 56],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 256, 4, 56, 0],"float32"),Tensor([8, 64, 4, 56, 0],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 512, 0, 28, 28],"float32"),Tensor([8, 128, 0, 28, 28],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 512, 4, 0, 28],"float32"),Tensor([8, 128, 4, 0, 28],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 512, 4, 28, 0],"float32"),Tensor([8, 128, 4, 28, 0],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 64, 0, 56, 56],"float32"),Tensor([8, 16, 0, 56, 56],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 64, 4, 0, 56],"float32"),Tensor([8, 16, 4, 0, 56],"float32"),], axis=1, name=None, )
paddle.concat(x=list[Tensor([8, 64, 4, 56, 0],"float32"),Tensor([8, 16, 4, 56, 0],"float32"),], axis=1, name=None, )
paddle.concat(x=tuple(Tensor([0, 1, 1024],"float32"),Tensor([0, 256, 1024],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([0, 1, 1408],"float32"),Tensor([0, 256, 1408],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([0, 1, 192],"float32"),Tensor([0, 256, 192],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([0, 1, 192],"float32"),Tensor([0, 576, 192],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([0, 128, 14, 14],"float32"),Tensor([0, 384, 14, 14],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([0, 128, 7, 7],"float32"),Tensor([0, 384, 7, 7],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([0, 16, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([0, 192, 7, 7],"float32"),Tensor([0, 576, 7, 7],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([0, 1],"float32"),Tensor([0, 10],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([0, 3, 1, 64],"float32"),Tensor([0, 3, 256, 64],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([0, 3, 1, 64],"float32"),Tensor([0, 3, 576, 64],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([0, 96, 1],"float32"),Tensor([0, 384, 1],"float32"),Tensor([0, 384, 1],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([1, 1, 0],"float32"),Tensor([1, 256, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([1, 16, 0, 64],"float32"),Tensor([1, 16, 0, 64],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([1, 16, 1, 0],"float32"),Tensor([1, 16, 256, 0],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([124, 0, 14, 14],"float32"),Tensor([124, 0, 14, 14],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 0, 56, 56],"float32"),Tensor([124, 0, 56, 56],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 0, 7, 7],"float32"),Tensor([124, 0, 7, 7],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 10, 0, 56],"float32"),Tensor([124, 30, 0, 56],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 128, 0, 14],"float32"),Tensor([124, 384, 0, 14],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 128, 0, 7],"float32"),Tensor([124, 384, 0, 7],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 128, 14, 0],"float32"),Tensor([124, 384, 14, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 128, 7, 0],"float32"),Tensor([124, 384, 7, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 16, 0, 56],"float32"),Tensor([124, 48, 0, 56],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 16, 56, 0],"float32"),Tensor([124, 48, 56, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 192, 0, 7],"float32"),Tensor([124, 576, 0, 7],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([124, 192, 7, 0],"float32"),Tensor([124, 576, 7, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([128, 0, 1, 64],"float32"),Tensor([128, 0, 576, 64],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([128, 0, 192],"float32"),Tensor([128, 0, 192],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([128, 1, 0],"float32"),Tensor([128, 576, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([128, 3, 0, 64],"float32"),Tensor([128, 3, 0, 64],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([128, 3, 1, 0],"float32"),Tensor([128, 3, 576, 0],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([13, 0, 1],"float32"),Tensor([13, 0, 1],"float32"),Tensor([13, 0, 1],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([13, 0, 96, 32],"float32"),Tensor([13, 0, 96, 4],"float32"),), axis=3, )
paddle.concat(x=tuple(Tensor([13, 96, 0],"float32"),Tensor([13, 384, 0],"float32"),Tensor([13, 384, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([16, 0, 1],"float32"),Tensor([16, 0, 1],"float32"),Tensor([16, 0, 1],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([16, 0, 96, 32],"float32"),Tensor([16, 0, 96, 4],"float32"),), axis=3, )
paddle.concat(x=tuple(Tensor([16, 1, 0, 32],"float32"),Tensor([16, 1, 0, 4],"float32"),), axis=3, )
paddle.concat(x=tuple(Tensor([16, 1, 96, 0],"float32"),Tensor([16, 1, 96, 0],"float32"),), axis=3, )
paddle.concat(x=tuple(Tensor([16, 96, 0],"float32"),Tensor([16, 384, 0],"float32"),Tensor([16, 384, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([187679, 0],"float32"),Tensor([187679, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([2, 0, 1, 64],"float32"),Tensor([2, 0, 256, 64],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([2, 0, 1408],"float32"),Tensor([2, 0, 1408],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([2, 0, 192],"float32"),Tensor([2, 0, 192],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([2, 1, 0],"float32"),Tensor([2, 256, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([2, 3, 0, 64],"float32"),Tensor([2, 3, 0, 64],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([2, 3, 1, 0],"float32"),Tensor([2, 3, 256, 0],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([3, 0, 1],"float32"),Tensor([3, 0, 1],"float32"),Tensor([3, 0, 1],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([3, 0, 96, 32],"float32"),Tensor([3, 0, 96, 4],"float32"),), axis=3, )
paddle.concat(x=tuple(Tensor([3, 1, 0, 32],"float32"),Tensor([3, 1, 0, 4],"float32"),), axis=3, )
paddle.concat(x=tuple(Tensor([3, 1, 96, 0],"float32"),Tensor([3, 1, 96, 0],"float32"),), axis=3, )
paddle.concat(x=tuple(Tensor([3, 96, 0],"float32"),Tensor([3, 384, 0],"float32"),Tensor([3, 384, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([80, 0, 1, 64],"float32"),Tensor([80, 0, 576, 64],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([80, 0, 192],"float32"),Tensor([80, 0, 192],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([80, 1, 0],"float32"),Tensor([80, 576, 0],"float32"),), axis=1, )
paddle.concat(x=tuple(Tensor([80, 3, 0, 64],"float32"),Tensor([80, 3, 0, 64],"float32"),), axis=-2, )
paddle.concat(x=tuple(Tensor([80, 3, 1, 0],"float32"),Tensor([80, 3, 576, 0],"float32"),), axis=-2, )
paddle.crop(x=Tensor([0, 3],"int32"), shape=list[2,2,], )
paddle.crop(x=Tensor([0, 3],"int64"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 0],"int32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 0],"int64"), shape=list[2,2,], )
paddle.cummax(Tensor([0, 100],"float32"), axis=-2, dtype="int32", )
paddle.cummax(Tensor([100, 0],"float32"), axis=-2, dtype="int32", )
paddle.cummin(Tensor([0, 100],"float32"), axis=-2, dtype="int32", )
paddle.cummin(Tensor([100, 0],"float32"), axis=-2, dtype="int32", )
paddle.cumulative_trapezoid(y=Tensor([0, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float32"), x=Tensor([0, 3],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float64"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float64"), x=Tensor([0, 3],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float32"), x=Tensor([2, 0],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float64"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float64"), x=Tensor([2, 0],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 0],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.diag(Tensor([0, 10],"float32"), offset=-1, )
paddle.diag(Tensor([0, 1500],"float32"), offset=-1, )
paddle.diag(Tensor([0, 2000],"float32"), offset=-1, )
paddle.diag(Tensor([10, 0],"float32"), offset=1, )
paddle.diag(Tensor([2000, 0],"float32"), offset=1, )
paddle.diag(x=Tensor([0, 2],"float64"), offset=-1, )
paddle.diag(x=Tensor([0, 3],"float64"), offset=-1, )
paddle.diag(x=Tensor([2, 0],"float64"), offset=2, )
paddle.diag(x=Tensor([3, 0],"float64"), offset=1, )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([0, 3],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 2],"float32"), append=Tensor([0, 3],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=1, axis=-1, prepend=Tensor([0, 3],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=-1, prepend=None, append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=-1, prepend=Tensor([0, 4],"float32"), append=None, )
paddle.diff(Tensor([0, 4],"float32"), n=2, axis=-1, prepend=Tensor([0, 4],"float32"), append=Tensor([0, 4],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=-1, prepend=None, append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=1, axis=-1, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=None, append=Tensor([2, 0],"float32"), )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 0],"float32"), append=None, )
paddle.diff(Tensor([2, 0],"float32"), n=2, axis=-1, prepend=Tensor([2, 0],"float32"), append=Tensor([2, 0],"float32"), )
paddle.dist(Tensor([0, 2, 3, 2],"float32"), Tensor([0, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([0, 2, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), 0, )
paddle.dist(Tensor([2, 0, 3, 2],"float32"), Tensor([1, 0, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 0, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), 0, )
paddle.dist(Tensor([2, 2, 0, 2],"float32"), Tensor([1, 1, 0, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 0],"float32"), Tensor([1, 1, 3, 0],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 0],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(x=Tensor([0, 1, 1, 4, 4],"float64"), y=Tensor([0, 8, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([0, 1, 4, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), p=0, )
paddle.dist(x=Tensor([0, 4, 1, 3],"float64"), y=Tensor([4, 3, 1],"float64"), p=7, )
paddle.dist(x=Tensor([0, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.dist(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.dist(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), p=1, )
paddle.dist(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([0, 10],"float64"), )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([0, 10],"float64"), p=4, )
paddle.dist(x=Tensor([2, 0, 1, 4, 4],"float64"), y=Tensor([2, 0, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 0],"float64"), y=Tensor([2, 0],"float64"), p=0, )
paddle.dist(x=Tensor([2, 1, 0, 4, 4],"float64"), y=Tensor([2, 8, 0, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 0, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 0, 4],"float64"), y=Tensor([2, 8, 7, 0, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 0, 4],"float64"), y=Tensor([2, 8, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 0],"float64"), y=Tensor([2, 8, 7, 1, 0],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 0, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 8, 0, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 1, 4, 4],"float64"), y=Tensor([0, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 4, 1, 0],"float64"), y=Tensor([4, 3, 1],"float64"), p=7, )
paddle.dist(x=Tensor([2, 4, 1, 3],"float64"), y=Tensor([4, 0, 1],"float64"), p=7, )
paddle.dist(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.dist(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )
paddle.dist(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), p=1, )
paddle.dot(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.dot(Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.dot(Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), )
paddle.dot(Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.dot(Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.dot(x=Tensor([0, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.dot(x=Tensor([0, 3],"float64"), y=Tensor([2, 3],"float64"), )
paddle.dot(x=Tensor([2, 0],"float64"), y=Tensor([2, 3],"float64"), )
paddle.dot(x=Tensor([2, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.dot(x=Tensor([2, 3],"float64"), y=Tensor([2, 0],"float64"), )
paddle.dsplit(Tensor([0, 2, 6],"float16"), 3, )
paddle.dsplit(Tensor([0, 2, 6],"float32"), 3, )
paddle.dsplit(Tensor([0, 2, 6],"float64"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"float16"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"float32"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"float64"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"float16"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"float32"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"float64"), 3, )
paddle.dstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([0, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([0, 1],"float64"),], )
paddle.dstack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.dstack(list[Tensor([0, 2],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([0],"float64"),], )
paddle.dstack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 0],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.dstack(list[Tensor([3, 0],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.einsum("..., ...", Tensor([3, 12],"float64"), Tensor([0, 3, 12],"float64"), )
paddle.einsum("..., ...", Tensor([3, 13],"float64"), Tensor([0, 3, 13],"float64"), )
paddle.einsum("..., ...", Tensor([3, 14],"float64"), Tensor([0, 3, 14],"float64"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([0, 16, 128, 50],"float32"), Tensor([0, 50, 16, 16],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([0, 16, 50, 50],"float32"), Tensor([0, 50, 16, 16],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([256, 16, 0, 50],"float32"), Tensor([256, 50, 16, 16],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([256, 16, 128, 50],"float32"), Tensor([256, 50, 16, 0],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([256, 16, 50, 50],"float32"), Tensor([256, 50, 16, 0],"float32"), )
paddle.einsum("...i, ...i", Tensor([0, 3, 12],"float64"), Tensor([12],"float64"), )
paddle.einsum("...i, ...i", Tensor([0, 3, 13],"float64"), Tensor([13],"float64"), )
paddle.einsum("...i, ...i", Tensor([0, 3, 14],"float64"), Tensor([14],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 0, 12],"float64"), Tensor([12],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 0, 13],"float64"), Tensor([13],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 0, 14],"float64"), Tensor([14],"float64"), )
paddle.einsum("...i->...", Tensor([0, 3, 12],"float64"), )
paddle.einsum("...i->...", Tensor([0, 3, 13],"float64"), )
paddle.einsum("...i->...", Tensor([0, 3, 14],"float64"), )
paddle.einsum("...i->...", Tensor([2, 0, 12],"float64"), )
paddle.einsum("...i->...", Tensor([2, 0, 13],"float64"), )
paddle.einsum("...i->...", Tensor([2, 0, 14],"float64"), )
paddle.einsum("...km,mlk->...lm", Tensor([0, 32, 32, 16],"float32"), Tensor([16, 32, 32],"float32"), )
paddle.einsum("...km,mlk->...lm", Tensor([4, 0, 32, 16],"float32"), Tensor([16, 32, 32],"float32"), )
paddle.einsum("...km,mlk->...lm", Tensor([4, 32, 32, 16],"float32"), Tensor([16, 0, 32],"float32"), )
paddle.einsum("...lm, mlk->...km", Tensor([0, 32, 32, 16],"float32"), Tensor([16, 32, 32],"float32"), )
paddle.einsum("...lm, mlk->...km", Tensor([4, 0, 32, 16],"float32"), Tensor([16, 32, 32],"float32"), )
paddle.einsum("...lm, mlk->...km", Tensor([4, 32, 32, 16],"float32"), Tensor([16, 32, 0],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([0, 128, 16, 16],"float32"), Tensor([0, 50, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([0, 50, 16, 16],"float32"), Tensor([0, 50, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 0, 16, 16],"float32"), Tensor([256, 0, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 0, 16, 16],"float32"), Tensor([256, 50, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 128, 0, 16],"float32"), Tensor([256, 50, 0, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 128, 16, 0],"float32"), Tensor([256, 50, 16, 0],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 128, 16, 16],"float32"), Tensor([256, 0, 16, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 50, 0, 16],"float32"), Tensor([256, 50, 0, 16],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 50, 16, 0],"float32"), Tensor([256, 50, 16, 0],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([256, 50, 16, 16],"float32"), Tensor([256, 0, 16, 16],"float32"), )
paddle.einsum("abcd,bec->aecd", Tensor([0, 32, 32, 16],"float32"), Tensor([32, 32, 32],"float32"), )
paddle.einsum("abcd,bec->aecd", Tensor([4, 32, 32, 0],"float32"), Tensor([32, 32, 32],"float32"), )
paddle.einsum("abcd,bec->aecd", Tensor([4, 32, 32, 16],"float32"), Tensor([32, 0, 32],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 128, 8, 5],"float32"), Tensor([128, 64, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 32, 16, 9],"float32"), Tensor([32, 32, 16, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 32, 8, 5],"float32"), Tensor([32, 64, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 64, 16, 9],"float32"), Tensor([64, 32, 16, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([0, 64, 8, 5],"float32"), Tensor([64, 64, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 128, 0, 5],"float32"), Tensor([128, 64, 0, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 128, 8, 0],"float32"), Tensor([128, 64, 8, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 128, 8, 5],"float32"), Tensor([128, 0, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 0, 5],"float32"), Tensor([32, 64, 0, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 0, 9],"float32"), Tensor([32, 32, 0, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 16, 0],"float32"), Tensor([32, 32, 16, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 16, 9],"float32"), Tensor([32, 0, 16, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 8, 0],"float32"), Tensor([32, 64, 8, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 32, 8, 5],"float32"), Tensor([32, 0, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 0, 5],"float32"), Tensor([64, 64, 0, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 0, 9],"float32"), Tensor([64, 32, 0, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 16, 0],"float32"), Tensor([64, 32, 16, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 16, 9],"float32"), Tensor([64, 0, 16, 9],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 8, 0],"float32"), Tensor([64, 64, 8, 0],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 64, 8, 5],"float32"), Tensor([64, 0, 8, 5],"float32"), )
paddle.einsum("acdbi,bio->acdbo", Tensor([0, 15, 8, 8, 32],"float32"), Tensor([8, 32, 32],"float32"), )
paddle.einsum("acdbi,bio->acdbo", Tensor([32, 0, 8, 8, 32],"float32"), Tensor([8, 32, 32],"float32"), )
paddle.einsum("acdbi,bio->acdbo", Tensor([32, 15, 0, 8, 32],"float32"), Tensor([8, 32, 32],"float32"), )
paddle.einsum("acdbi,bio->acdbo", Tensor([32, 15, 8, 8, 32],"float32"), Tensor([8, 32, 0],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([0, 11],"float32"), Tensor([11, 50],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([60000, 11],"float32"), Tensor([11, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([0, 8, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([0, 8, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([0, 8, 157, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([1, 8, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([1, 8, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([1, 8, 157, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 0, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 0, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 0, 157, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 157, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 113, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 145, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 157, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([0, 8, 113, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([0, 8, 145, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([0, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 145],"float32"), Tensor([0, 8, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 145],"float32"), Tensor([1, 8, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 157],"float32"), Tensor([0, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 157],"float32"), Tensor([1, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 169],"float32"), Tensor([0, 8, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 169],"float32"), Tensor([1, 8, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 145],"float32"), Tensor([1, 0, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 157],"float32"), Tensor([1, 0, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 169],"float32"), Tensor([1, 0, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 145],"float32"), Tensor([1, 8, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 157],"float32"), Tensor([1, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 169],"float32"), Tensor([1, 8, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 145],"float32"), Tensor([0, 8, 145, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 145],"float32"), Tensor([1, 8, 145, 0],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 157],"float32"), Tensor([0, 8, 157, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 157],"float32"), Tensor([1, 8, 157, 0],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 169],"float32"), Tensor([0, 8, 169, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 169],"float32"), Tensor([1, 8, 169, 0],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 0, 1, 1, 7],"float32"), Tensor([52, 0, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 0, 3, 1, 3],"float32"), Tensor([52, 0, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 0, 1, 3],"float32"), Tensor([52, 4, 0, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 0, 1, 7],"float32"), Tensor([52, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 0, 1, 7],"float32"), Tensor([52, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 1, 0, 7],"float32"), Tensor([52, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 1, 1, 7],"float32"), Tensor([52, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 1, 1, 7],"float32"), Tensor([52, 4, 1, 7, 0],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 3, 0, 3],"float32"), Tensor([52, 4, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([52, 4, 3, 1, 3],"float32"), Tensor([52, 4, 3, 3, 0],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([0, 48, 48, 64],"float32"), Tensor([48, 48, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([60, 48, 0, 64],"float32"), Tensor([48, 48, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([60, 48, 48, 64],"float32"), Tensor([48, 0, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([864, 14, 0, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([864, 14, 14, 64],"float32"), Tensor([14, 0, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([96, 32, 0, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([96, 32, 32, 64],"float32"), Tensor([32, 0, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([0, 48, 48, 64],"float32"), Tensor([48, 48, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([60, 0, 48, 64],"float32"), Tensor([48, 48, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([60, 48, 48, 64],"float32"), Tensor([48, 0, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([864, 0, 14, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([864, 14, 14, 64],"float32"), Tensor([14, 0, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([96, 0, 32, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([96, 32, 32, 64],"float32"), Tensor([32, 0, 64],"float32"), )
paddle.einsum("bi,bi->b", Tensor([0, 40],"float32"), Tensor([0, 40],"float32"), )
paddle.einsum("bi,bi->b", Tensor([10000, 0],"float32"), Tensor([10000, 0],"float32"), )
paddle.einsum("bi,bi->b", Tensor([100000, 0],"float32"), Tensor([100000, 0],"float32"), )
paddle.einsum("bi,bi->b", Tensor([40, 0],"float32"), Tensor([40, 0],"float32"), )
paddle.einsum("bi,bi->b", Tensor([64, 0],"float32"), Tensor([64, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 4, 4, 4],"float32"), Tensor([0, 4, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 4, 4, 4],"float32"), Tensor([0, 7, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 7, 4, 4],"float32"), Tensor([0, 7, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 0, 4, 4],"float32"), Tensor([13, 7, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 0, 4],"float32"), Tensor([13, 4, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 0, 4],"float32"), Tensor([13, 7, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 4, 0],"float32"), Tensor([13, 4, 4, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 4, 0],"float32"), Tensor([13, 7, 4, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 4, 4, 4],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 7, 0, 4],"float32"), Tensor([13, 7, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 7, 4, 0],"float32"), Tensor([13, 7, 4, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 7, 4, 4],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([0, 7, 4, 4],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 7, 4, 4],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([0, 4, 4, 4],"float32"), Tensor([15, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([0, 4, 4, 4],"float32"), Tensor([8, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([0, 7, 4, 4],"float32"), Tensor([14, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 0, 4, 4],"float32"), Tensor([14, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 0, 4, 4],"float32"), Tensor([15, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 4, 4, 4],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 7, 4, 4],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("bix,iox->box", Tensor([0, 64, 64],"float32"), Tensor([64, 64, 64],"float32"), )
paddle.einsum("bix,iox->box", Tensor([20, 64, 0],"float32"), Tensor([64, 64, 0],"float32"), )
paddle.einsum("bix,iox->box", Tensor([20, 64, 64],"float32"), Tensor([64, 0, 64],"float32"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([0, 32, 12, 12],"complex64"), Tensor([32, 32, 12, 12],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([32, 32, 0, 12],"complex64"), Tensor([32, 32, 0, 12],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([32, 32, 12, 0],"complex64"), Tensor([32, 32, 12, 0],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([32, 32, 12, 12],"complex64"), Tensor([32, 0, 12, 12],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([8, 32, 0, 12],"complex64"), Tensor([32, 32, 0, 12],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([8, 32, 12, 0],"complex64"), Tensor([32, 32, 12, 0],"complex64"), )
paddle.einsum("bixy,ioxy->boxy", Tensor([8, 32, 12, 12],"complex64"), Tensor([32, 0, 12, 12],"complex64"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([52, 5, 0],"float32"), Tensor([52, 4, 5, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([52, 5, 1],"float32"), Tensor([52, 0, 5, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([52, 5, 1],"float32"), Tensor([52, 4, 5, 0],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 4, 4],"float32"), Tensor([0, 4, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 4, 7],"float32"), Tensor([0, 7, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 7, 7],"float32"), Tensor([0, 7, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 0, 7],"float32"), Tensor([13, 7, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 4, 4],"float32"), Tensor([13, 4, 4, 0],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 4, 7],"float32"), Tensor([13, 7, 4, 0],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 7, 7],"float32"), Tensor([13, 7, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 0, 7],"float32"), Tensor([7, 14, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 0, 8],"float32"), Tensor([8, 14, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 7, 7],"float32"), Tensor([7, 14, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 8, 7],"float32"), Tensor([7, 14, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([14, 4, 8, 8],"float32"), Tensor([8, 14, 4, 0],"float32"), )
paddle.einsum("i , j -> i j", Tensor([2],"float32"), Tensor([0],"float32"), )
paddle.einsum("i , j -> i j", Tensor([3],"float32"), Tensor([0],"float32"), )
paddle.einsum("i , j -> i j", Tensor([4],"float32"), Tensor([0],"float32"), )
paddle.einsum("i, i", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("i, i", Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.einsum("i,j", Tensor([0],"float64"), Tensor([12],"float64"), )
paddle.einsum("i,j", Tensor([0],"float64"), Tensor([13],"float64"), )
paddle.einsum("i,j", Tensor([0],"float64"), Tensor([14],"float64"), )
paddle.einsum("i,j->ij", Tensor([0],"float32"), Tensor([4],"float32"), )
paddle.einsum("i,j->ij", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,j->ij", Tensor([0],"float64"), Tensor([6],"float64"), )
paddle.einsum("i,j->ij", Tensor([10],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,j->ij", Tensor([11],"float32"), Tensor([0],"float32"), )
paddle.einsum("i,j->ij", Tensor([131072],"float32"), Tensor([0],"float32"), )
paddle.einsum("i..., i...", Tensor([2, 0, 2],"float64"), Tensor([2],"float64"), )
paddle.einsum("i..., i...", Tensor([2, 3, 0],"float64"), Tensor([2],"float64"), )
paddle.einsum("i..., i...", Tensor([3, 0, 2],"float64"), Tensor([3],"float64"), )
paddle.einsum("i..., i...", Tensor([3, 3, 0],"float64"), Tensor([3],"float64"), )
paddle.einsum("i..., i...", Tensor([4, 0, 2],"float64"), Tensor([4],"float64"), )
paddle.einsum("i..., i...", Tensor([4, 3, 0],"float64"), Tensor([4],"float64"), )
paddle.einsum("i...->...", Tensor([0, 12],"float64"), )
paddle.einsum("i...->...", Tensor([0, 13],"float64"), )
paddle.einsum("i...->...", Tensor([0, 14],"float64"), )
paddle.einsum("i...->...", Tensor([0, 3, 12],"float64"), )
paddle.einsum("i...->...", Tensor([0, 3, 13],"float64"), )
paddle.einsum("i...->...", Tensor([0, 3, 14],"float64"), )
paddle.einsum("i...->...", Tensor([2, 0, 12],"float64"), )
paddle.einsum("i...->...", Tensor([2, 0, 13],"float64"), )
paddle.einsum("i...->...", Tensor([2, 0, 14],"float64"), )
paddle.einsum("ibm,hm->ibh", Tensor([0, 11, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([0, 4, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 11, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 14, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 4, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 11, 4, 8],"float32"), Tensor([0, 11, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 11, 4, 8],"float32"), Tensor([14, 11, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 11, 4, 8],"float32"), Tensor([7, 11, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 14, 4, 8],"float32"), Tensor([0, 14, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 14, 4, 8],"float32"), Tensor([14, 14, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 0, 8],"float32"), Tensor([14, 11, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 0, 8],"float32"), Tensor([7, 11, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 4, 0],"float32"), Tensor([14, 11, 4, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 4, 0],"float32"), Tensor([7, 11, 4, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 11, 4, 8],"float32"), Tensor([0, 11, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 14, 0, 8],"float32"), Tensor([14, 14, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 14, 4, 0],"float32"), Tensor([14, 14, 4, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 14, 4, 8],"float32"), Tensor([0, 14, 4, 8],"float32"), )
paddle.einsum("ic,pi->pc", Tensor([200, 0],"float32"), Tensor([128, 200],"float32"), )
paddle.einsum("ic,pi->pc", Tensor([200, 256],"float32"), Tensor([0, 200],"float32"), )
paddle.einsum("ij, j", Tensor([0, 12],"float64"), Tensor([12],"float64"), )
paddle.einsum("ij, j", Tensor([0, 13],"float64"), Tensor([13],"float64"), )
paddle.einsum("ij, j", Tensor([0, 14],"float64"), Tensor([14],"float64"), )
paddle.einsum("ij,ij->j", Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.einsum("ij,ij->j", Tensor([0, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.einsum("ij,ij->j", Tensor([10, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 12],"float64"), Tensor([12, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 13],"float64"), Tensor([13, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 14],"float64"), Tensor([14, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 12],"float64"), Tensor([12, 0],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 13],"float64"), Tensor([13, 0],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 14],"float64"), Tensor([14, 0],"float64"), )
paddle.einsum("ij,k->ijk", Tensor([0, 4096],"float32"), Tensor([64],"float32"), )
paddle.einsum("ij,k->ijk", Tensor([1, 0],"float32"), Tensor([64],"float32"), )
paddle.einsum("iok,dr->iokr", Tensor([0, 8, 4],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("iok,dr->iokr", Tensor([8, 0, 4],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("iok,dr->iokr", Tensor([8, 8, 0],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("iok,dr->iokr", Tensor([8, 8, 4],"complex64"), Tensor([0, 14],"complex64"), )
paddle.einsum("iok,dr->iokr", Tensor([8, 8, 4],"complex64"), Tensor([1, 0],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([0, 8, 4],"complex64"), Tensor([1, 39],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([8, 0, 4],"complex64"), Tensor([1, 39],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([8, 8, 0],"complex64"), Tensor([1, 39],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([8, 8, 4],"complex64"), Tensor([0, 39],"complex64"), )
paddle.einsum("iom,dp->iomp", Tensor([8, 8, 4],"complex64"), Tensor([1, 0],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([0, 8, 4],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([8, 0, 4],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([8, 8, 0],"complex64"), Tensor([1, 14],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([8, 8, 4],"complex64"), Tensor([0, 14],"complex64"), )
paddle.einsum("ion,dq->ionq", Tensor([8, 8, 4],"complex64"), Tensor([1, 0],"complex64"), )
paddle.einsum("ji,j", Tensor([11, 0],"float64"), Tensor([11],"float64"), )
paddle.einsum("ji,j", Tensor([12, 0],"float64"), Tensor([12],"float64"), )
paddle.einsum("ji,j", Tensor([13, 0],"float64"), Tensor([13],"float64"), )
paddle.einsum("m,d->md", Tensor([0],"float32"), Tensor([128],"float32"), )
paddle.einsum("m,d->md", Tensor([50],"float32"), Tensor([0],"float32"), )
paddle.einsum("mixy,bmxy,kmxy->bixy", Tensor([32, 32, 1, 1],"float32"), Tensor([8, 32, 241, 241],"float32"), Tensor([0, 32, 1, 1],"float32"), )
paddle.einsum("mlk,k->mlk", Tensor([0, 32, 32],"float64"), Tensor([32],"float64"), )
paddle.einsum("mlk,k->mlk", Tensor([16, 0, 32],"float64"), Tensor([32],"float64"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([0, 3, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 0, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 0, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 5, 6],"float32"), Tensor([6, 0, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 5, 6],"float32"), Tensor([6, 2, 0],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([2, 0, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([2, 3, 0, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([2, 3, 5, 6],"float32"), Tensor([6, 0, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([2, 3, 5, 6],"float32"), Tensor([6, 2, 0],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([2, 0, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([2, 3, 0, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([2, 3, 5, 6],"float32"), Tensor([6, 0, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([2, 3, 5, 6],"float32"), Tensor([6, 2, 0],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([0, 3, 5, 2, 4],"float32"), Tensor([0, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([0, 3, 5, 2, 4],"float32"), Tensor([1, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 0, 5, 2, 4],"float32"), Tensor([1, 0, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 0, 2, 4],"float32"), Tensor([1, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 0, 4],"float32"), Tensor([1, 3, 5, 0, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 0],"float32"), Tensor([1, 3, 5, 2, 0],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float32"), Tensor([0, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 0, 5, 2, 4],"float32"), Tensor([2, 0, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 0, 2, 4],"float32"), Tensor([2, 3, 0, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 0, 2, 4],"float32"), Tensor([2, 3, 5, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 5, 0, 4],"float32"), Tensor([2, 3, 5, 0, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 5, 2, 0],"float32"), Tensor([2, 3, 5, 2, 0],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([2, 3, 5, 2, 4],"float32"), Tensor([2, 3, 0, 2, 4],"float32"), )
paddle.einsum("se,sec->sec", Tensor([20, 60],"float32"), Tensor([20, 60, 0],"float32"), )
paddle.einsum("se,sec->sec", Tensor([30, 60],"float32"), Tensor([30, 60, 0],"float32"), )
paddle.einsum("se,sec->sec", Tensor([4, 60],"float32"), Tensor([4, 60, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 20],"float32"), Tensor([60, 20, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 30],"float32"), Tensor([60, 30, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 4],"float32"), Tensor([60, 4, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([20, 60, 20],"float32"), Tensor([60, 20, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([30, 60, 30],"float32"), Tensor([60, 30, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([4, 60, 4],"float32"), Tensor([60, 4, 0],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([20, 0, 20],"float32"), Tensor([20, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([20, 60, 0],"float32"), Tensor([20, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([20, 60, 20],"float32"), Tensor([20, 0],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([30, 0, 30],"float32"), Tensor([30, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([30, 60, 0],"float32"), Tensor([30, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([30, 60, 30],"float32"), Tensor([30, 0],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([4, 0, 4],"float32"), Tensor([4, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([4, 60, 0],"float32"), Tensor([4, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([4, 60, 4],"float32"), Tensor([4, 0],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([4, 32],"float32"), Tensor([32, 0, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([4, 32],"float32"), Tensor([32, 4, 0],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([8, 32],"float32"), Tensor([32, 0, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([8, 32],"float32"), Tensor([32, 4, 0],"float32"), )
paddle.einsum("xy,yz->xz", Tensor([0, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.einsum("xy,yz->xz", Tensor([4, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.expand_as(Tensor([0, 1],"float32"), Tensor([0, 3],"float32"), )
paddle.expand_as(Tensor([0, 1],"float32"), Tensor([0, 4],"float32"), )
paddle.expand_as(Tensor([0, 2, 1, 1],"float32"), Tensor([0, 2, 14, 14],"float32"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([0, 500, 2],"float16"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([0, 500, 2],"float32"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([0, 500, 4],"float16"), )
paddle.expand_as(Tensor([0, 80, 1, 1],"float32"), Tensor([0, 80, 28, 28],"float16"), )
paddle.expand_as(Tensor([0, 80, 1, 1],"float32"), Tensor([0, 80, 28, 28],"float32"), )
paddle.expand_as(Tensor([106, 0, 1, 1],"float32"), Tensor([106, 0, 28, 28],"float16"), )
paddle.expand_as(Tensor([106, 0, 1, 1],"float32"), Tensor([106, 0, 28, 28],"float32"), )
paddle.expand_as(Tensor([106, 80, 0, 1],"float32"), Tensor([106, 80, 0, 28],"float16"), )
paddle.expand_as(Tensor([106, 80, 0, 1],"float32"), Tensor([106, 80, 0, 28],"float32"), )
paddle.expand_as(Tensor([106, 80, 1, 0],"float32"), Tensor([106, 80, 28, 0],"float16"), )
paddle.expand_as(Tensor([106, 80, 1, 0],"float32"), Tensor([106, 80, 28, 0],"float32"), )
paddle.expand_as(Tensor([106, 80, 1, 1],"float32"), Tensor([106, 80, 0, 28],"float16"), )
paddle.expand_as(Tensor([106, 80, 1, 1],"float32"), Tensor([106, 80, 0, 28],"float32"), )
paddle.expand_as(Tensor([106, 80, 1, 1],"float32"), Tensor([106, 80, 28, 0],"float16"), )
paddle.expand_as(Tensor([106, 80, 1, 1],"float32"), Tensor([106, 80, 28, 0],"float32"), )
paddle.expand_as(Tensor([11, 0, 1, 1],"float32"), Tensor([11, 0, 14, 14],"float32"), )
paddle.expand_as(Tensor([11, 2, 0, 1],"float32"), Tensor([11, 2, 0, 14],"float32"), )
paddle.expand_as(Tensor([11, 2, 1, 0],"float32"), Tensor([11, 2, 14, 0],"float32"), )
paddle.expand_as(Tensor([11, 2, 1, 1],"float32"), Tensor([11, 2, 0, 14],"float32"), )
paddle.expand_as(Tensor([11, 2, 1, 1],"float32"), Tensor([11, 2, 14, 0],"float32"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 0, 2],"float16"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 0, 2],"float32"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 0, 4],"float16"), )
paddle.expand_as(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.expand_as(Tensor([3, 1],"float32"), Tensor([3, 0],"float32"), )
paddle.expand_as(Tensor([3],"float32"), Tensor([0, 3],"int64"), )
paddle.expand_as(Tensor([6, 0],"float32"), Tensor([6, 0],"float32"), )
paddle.expand_as(Tensor([6, 1],"float32"), Tensor([6, 0],"float32"), )
paddle.expand_as(x=Tensor([3],"int64"), y=Tensor([0, 3],"int64"), )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=0.0, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=10000000000, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=3, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=3.8, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int64"),Tensor([0],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=0.0, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=10000000000, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=3, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=3.8, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int64"),Tensor([1],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=0.0, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=10000000000, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=3, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=3.8, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int64"),Tensor([1],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([1],"int64"),Tensor([0],"int64"),], dtype="float32", fill_value=1.1, )
paddle.gather(Tensor([0, 1, 1, 11],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 1, 1, 15],"float32"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 1, 1, 17],"float32"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 1, 1, 1],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 1, 1, 3],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 1, 16],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 1000],"float32"), Tensor([128, 1],"int32"), )
paddle.gather(Tensor([0, 100],"float32"), Tensor([128, 1],"int32"), )
paddle.gather(Tensor([0, 11, 8],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 11],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 15],"int64"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 17],"int64"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 1],"float16"), Tensor([113],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"float16"), Tensor([127],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"float16"), Tensor([187],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"int32"), Tensor([100],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"int32"), Tensor([1],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"int32"), Tensor([33],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"int32"), Tensor([4],"int64"), axis=0, )
paddle.gather(Tensor([0, 1],"int64"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 2048, 7, 7],"float16"), Tensor([153, 1],"int64"), )
paddle.gather(Tensor([0, 2048, 7, 7],"float16"), Tensor([201, 1],"int64"), )
paddle.gather(Tensor([0, 2048, 7, 7],"float16"), Tensor([208, 1],"int64"), )
paddle.gather(Tensor([0, 2048, 7, 7],"float16"), Tensor([244, 1],"int64"), )
paddle.gather(Tensor([0, 2048, 7, 7],"float16"), Tensor([289, 1],"int64"), )
paddle.gather(Tensor([0, 20],"float32"), Tensor([3],"int32"), 0, )
paddle.gather(Tensor([0, 20],"float64"), Tensor([3],"int64"), 0, )
paddle.gather(Tensor([0, 256, 14, 14],"float32"), Tensor([1, 1],"int32"), )
paddle.gather(Tensor([0, 256, 14, 14],"float32"), Tensor([10, 1],"int32"), )
paddle.gather(Tensor([0, 256, 14, 14],"float32"), Tensor([106, 1],"int32"), )
paddle.gather(Tensor([0, 256, 14, 14],"float32"), Tensor([11, 1],"int32"), )
paddle.gather(Tensor([0, 256, 7, 7],"float32"), Tensor([1024, 1],"int32"), )
paddle.gather(Tensor([0, 25600],"float32"), Tensor([8400],"int64"), axis=0, )
paddle.gather(Tensor([0, 256],"float16"), index=Tensor([100],"int32"), )
paddle.gather(Tensor([0, 256],"float16"), index=Tensor([104],"int32"), )
paddle.gather(Tensor([0, 256],"float16"), index=Tensor([108],"int32"), )
paddle.gather(Tensor([0, 256],"float16"), index=Tensor([112],"int32"), )
paddle.gather(Tensor([0, 256],"float16"), index=Tensor([116],"int32"), )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([100],"int32"), )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([104],"int32"), )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([108],"int32"), )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([112],"int32"), )
paddle.gather(Tensor([0, 256],"float32"), index=Tensor([116],"int32"), )
paddle.gather(Tensor([0, 2],"float32"), index=Tensor([1242, 1],"int32"), )
paddle.gather(Tensor([0, 3, 4],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([0, 3, 8],"float32"), Tensor([4],"int64"), )
paddle.gather(Tensor([0, 3],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([0, 3],"float64"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([0, 4],"float16"), Tensor([1028],"int64"), )
paddle.gather(Tensor([0, 4],"float16"), Tensor([1060],"int64"), )
paddle.gather(Tensor([0, 4],"float16"), Tensor([1071],"int64"), )
paddle.gather(Tensor([0, 4],"float16"), Tensor([1084],"int64"), )
paddle.gather(Tensor([0, 4],"float16"), Tensor([110, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float16"), Tensor([1111],"int64"), )
paddle.gather(Tensor([0, 4],"float16"), Tensor([115, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float16"), Tensor([170, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float16"), Tensor([181, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float16"), Tensor([200, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float32"), Tensor([105840],"int64"), )
paddle.gather(Tensor([0, 4],"float32"), Tensor([110, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float32"), Tensor([111, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float32"), Tensor([115, 1],"int64"), )
paddle.gather(Tensor([0, 4],"float32"), Tensor([4],"int32"), axis=1, )
paddle.gather(Tensor([0, 4],"float32"), Tensor([8],"int32"), axis=1, )
paddle.gather(Tensor([0, 50, 50],"float32"), Tensor([10],"int64"), )
paddle.gather(Tensor([0, 50, 50],"float32"), Tensor([5],"int64"), )
paddle.gather(Tensor([0, 544, 544],"float32"), Tensor([100],"int64"), axis=0, )
paddle.gather(Tensor([0, 544, 544],"float32"), Tensor([1],"int64"), axis=0, )
paddle.gather(Tensor([0, 68],"float16"), Tensor([113],"int64"), axis=0, )
paddle.gather(Tensor([0, 68],"float16"), Tensor([127],"int64"), axis=0, )
paddle.gather(Tensor([0, 704, 704],"float32"), Tensor([100],"int64"), axis=0, )
paddle.gather(Tensor([0, 704, 704],"float32"), Tensor([1],"int64"), axis=0, )
paddle.gather(Tensor([0, 736, 736],"float32"), Tensor([100],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([10],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([1],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([2],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([3],"int64"), axis=0, )
paddle.gather(Tensor([0, 7],"float32"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(Tensor([0, 80],"float32"), Tensor([4],"int32"), axis=1, )
paddle.gather(Tensor([0, 88, 10],"float32"), Tensor([3],"int32"), 0, )
paddle.gather(Tensor([0, 88, 10],"float32"), Tensor([3],"int32"), 1, )
paddle.gather(Tensor([0, 88, 30],"float32"), Tensor([3],"int32"), 1, )
paddle.gather(Tensor([0],"float16"), Tensor([1024, 1],"int64"), )
paddle.gather(Tensor([0],"float32"), Tensor([1000110],"int64"), )
paddle.gather(Tensor([0],"float32"), Tensor([1001730],"int64"), )
paddle.gather(Tensor([0],"float32"), Tensor([1024, 1],"int64"), )
paddle.gather(Tensor([0],"float32"), Tensor([1],"int64"), name="Categorical_probs", )
paddle.gather(Tensor([0],"float32"), Tensor([3],"int32"), 0, )
paddle.gather(Tensor([0],"float32"), Tensor([3],"int64"), name="Categorical_probs", )
paddle.gather(Tensor([0],"float32"), Tensor([512, 1],"int64"), )
paddle.gather(Tensor([0],"float64"), Tensor([5, 1],"int64"), axis=0, )
paddle.gather(Tensor([0],"int32"), Tensor([1024, 1],"int64"), )
paddle.gather(Tensor([0],"int32"), Tensor([427],"int32"), )
paddle.gather(Tensor([0],"int32"), Tensor([451],"int32"), )
paddle.gather(Tensor([0],"int32"), Tensor([511],"int32"), )
paddle.gather(Tensor([0],"int32"), Tensor([512, 1],"int64"), )
paddle.gather(Tensor([0],"int64"), Tensor([113],"int64"), axis=0, )
paddle.gather(Tensor([0],"int64"), Tensor([125],"int64"), axis=0, )
paddle.gather(Tensor([0],"int64"), Tensor([127],"int64"), axis=0, )
paddle.gather(Tensor([0],"int64"), Tensor([186],"int64"), axis=0, )
paddle.gather(Tensor([0],"int64"), Tensor([187],"int64"), axis=0, )
paddle.gather(Tensor([1, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([1, 256, 14, 14],"float32"), Tensor([1, 0],"int32"), )
paddle.gather(Tensor([10, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([10, 256, 14, 14],"float32"), Tensor([10, 0],"int32"), )
paddle.gather(Tensor([10, 88, 0],"float32"), Tensor([3],"int32"), 1, )
paddle.gather(Tensor([100, 0],"float32"), Tensor([128, 0],"int32"), )
paddle.gather(Tensor([100, 1000],"float32"), Tensor([128, 0],"int32"), )
paddle.gather(Tensor([1000, 0],"float32"), Tensor([128, 0],"int32"), )
paddle.gather(Tensor([1000, 100],"float32"), Tensor([128, 0],"int32"), )
paddle.gather(Tensor([1002624, 0],"float32"), Tensor([110, 0],"int64"), )
paddle.gather(Tensor([1002624, 0],"float32"), Tensor([111, 0],"int64"), )
paddle.gather(Tensor([1002624, 0],"float32"), Tensor([115, 0],"int64"), )
paddle.gather(Tensor([1002624, 4],"float32"), Tensor([110, 0],"int64"), )
paddle.gather(Tensor([1002624, 4],"float32"), Tensor([111, 0],"int64"), )
paddle.gather(Tensor([1002624, 4],"float32"), Tensor([115, 0],"int64"), )
paddle.gather(Tensor([1002624],"float32"), Tensor([1024, 0],"int64"), )
paddle.gather(Tensor([1002624],"int32"), Tensor([1024, 0],"int64"), )
paddle.gather(Tensor([100440],"float32"), Tensor([512, 0],"int64"), )
paddle.gather(Tensor([100440],"int32"), Tensor([512, 0],"int64"), )
paddle.gather(Tensor([100500],"float32"), Tensor([512, 0],"int64"), )
paddle.gather(Tensor([1024, 256, 7, 7],"float32"), Tensor([1024, 0],"int32"), )
paddle.gather(Tensor([106, 256, 14, 14],"float32"), Tensor([106, 0],"int32"), )
paddle.gather(Tensor([11, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([11, 256, 14, 14],"float32"), Tensor([11, 0],"int32"), )
paddle.gather(Tensor([12, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([1200, 0],"float32"), Tensor([4],"int32"), axis=1, )
paddle.gather(Tensor([13, 0],"float32"), index=Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([1800, 0],"float32"), Tensor([4],"int32"), axis=1, )
paddle.gather(Tensor([2, 0],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([2, 0],"float64"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([2400, 0],"float32"), Tensor([8],"int32"), axis=1, )
paddle.gather(Tensor([2],"float64"), Tensor([5, 0],"int64"), axis=0, )
paddle.gather(Tensor([3, 0, 4],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([3, 3, 0],"float32"), Tensor([2],"int64"), axis=1, )
paddle.gather(Tensor([3, 88, 0],"float32"), Tensor([3],"int32"), 1, )
paddle.gather(Tensor([4, 0],"float16"), Tensor([3],"int64"), axis=1, )
paddle.gather(Tensor([600, 0],"float16"), Tensor([4],"int32"), axis=1, )
paddle.gather(Tensor([8120, 0],"float32"), index=Tensor([1242, 0],"int32"), )
paddle.gather(Tensor([8120, 2],"float32"), index=Tensor([1242, 0],"int32"), )
paddle.gather(x=Tensor([0, 3],"float32"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([0, 3],"float32"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(x=Tensor([0, 3],"float32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([0, 3],"float32"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([0, 3],"float64"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([0, 3],"float64"), index=Tensor([4],"int64"), axis=0, )
paddle.gather(x=Tensor([0, 3],"float64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([0, 3],"int32"), index=Tensor([4],"int32"), axis=0, )
paddle.gather(x=Tensor([0, 3],"int32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([0, 3],"int32"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([0, 3],"int64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([0, 3],"int64"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 0],"float32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 0],"float32"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 0],"float64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 0],"float64"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 0],"int32"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 0],"int32"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather(x=Tensor([3, 0],"int64"), index=Tensor([4],"int64"), axis=1, )
paddle.gather(x=Tensor([3, 0],"int64"), index=Tensor([4],"int64"), axis=Tensor([1],"int64"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 10, 2],"int32"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 108, 2],"int32"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 11, 2],"int32"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 12, 2],"int32"), )
paddle.gather_nd(Tensor([0, 10, 21504],"float32"), Tensor([1, 13, 2],"int32"), )
paddle.gather_nd(Tensor([0, 100],"float32"), Tensor([2, 2],"int32"), )
paddle.gather_nd(Tensor([0, 128, 128],"float16"), Tensor([10, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128, 128],"float16"), Tensor([11, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128, 128],"float16"), Tensor([12, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128, 128],"float16"), Tensor([13, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128, 128],"float16"), Tensor([14, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128, 128],"float32"), Tensor([10, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128, 128],"float32"), Tensor([11, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128, 128],"float32"), Tensor([12, 3],"int64"), )
paddle.gather_nd(Tensor([0, 128],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 16384, 2],"float32"), index=Tensor([4, 128, 2],"int64"), )
paddle.gather_nd(Tensor([0, 16],"float32"), Tensor([400, 2],"int64"), )
paddle.gather_nd(Tensor([0, 16],"float32"), Tensor([404, 2],"int64"), )
paddle.gather_nd(Tensor([0, 2, 14, 14],"float32"), Tensor([2156, 4],"int64"), )
paddle.gather_nd(Tensor([0, 2, 28, 28],"float32"), Tensor([784, 4],"int64"), )
paddle.gather_nd(Tensor([0, 2, 28, 28],"float32"), Tensor([7840, 4],"int64"), )
paddle.gather_nd(Tensor([0, 2, 28, 28],"float32"), Tensor([8624, 4],"int64"), )
paddle.gather_nd(Tensor([0, 256],"float32"), Tensor([4, 8, 2],"int64"), )
paddle.gather_nd(Tensor([0, 320],"float16"), Tensor([424, 2],"int64"), )
paddle.gather_nd(Tensor([0, 320],"float16"), Tensor([440, 2],"int64"), )
paddle.gather_nd(Tensor([0, 320],"float16"), Tensor([448, 2],"int64"), )
paddle.gather_nd(Tensor([0, 320],"float16"), Tensor([452, 2],"int64"), )
paddle.gather_nd(Tensor([0, 320],"float16"), Tensor([456, 2],"int64"), )
paddle.gather_nd(Tensor([0, 3],"float32"), Tensor([2],"int64"), )
paddle.gather_nd(Tensor([0, 41344, 128],"float16"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([0, 41344, 128],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([0, 41344, 2],"float16"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([0, 41344, 2],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([0, 41344, 4],"float16"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([0, 41344, 4],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([0, 4],"bool"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 4],"int64"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 64],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 7, 32],"float32"), Tensor([832, 3],"int64"), )
paddle.gather_nd(Tensor([0, 7, 3],"float32"), Tensor([13, 2],"int64"), )
paddle.gather_nd(Tensor([0, 80, 14, 14],"float16"), Tensor([21560, 4],"int64"), )
paddle.gather_nd(Tensor([0, 80, 14, 14],"float16"), Tensor([21952, 4],"int64"), )
paddle.gather_nd(Tensor([0, 80, 14, 14],"float16"), Tensor([22344, 4],"int64"), )
paddle.gather_nd(Tensor([0, 80, 28, 28],"float16"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([0, 80, 28, 28],"float16"), Tensor([88592, 4],"int64"), )
paddle.gather_nd(Tensor([0, 80, 28, 28],"float32"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([0, 8],"float32"), Tensor([4, 2],"int64"), )
paddle.gather_nd(Tensor([0, 8],"float32"), Tensor([40, 2],"int64"), )
paddle.gather_nd(Tensor([0, 8],"float32"), index=Tensor([364, 7, 2],"int64"), )
paddle.gather_nd(Tensor([0, 8],"float32"), index=Tensor([728, 14, 2],"int64"), )
paddle.gather_nd(Tensor([0],"float32"), Tensor([1],"int64"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 10, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 108, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 11, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 12, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 21504],"float32"), Tensor([1, 13, 2],"int32"), )
paddle.gather_nd(Tensor([1, 0, 28, 28],"float32"), Tensor([784, 4],"int64"), )
paddle.gather_nd(Tensor([1, 0],"float32"), Tensor([4, 2],"int64"), )
paddle.gather_nd(Tensor([1, 2, 0, 28],"float32"), Tensor([784, 4],"int64"), )
paddle.gather_nd(Tensor([1, 2, 28, 0],"float32"), Tensor([784, 4],"int64"), )
paddle.gather_nd(Tensor([10, 0, 28, 28],"float32"), Tensor([7840, 4],"int64"), )
paddle.gather_nd(Tensor([10, 0],"float32"), Tensor([40, 2],"int64"), )
paddle.gather_nd(Tensor([10, 2, 0, 28],"float32"), Tensor([7840, 4],"int64"), )
paddle.gather_nd(Tensor([10, 2, 28, 0],"float32"), Tensor([7840, 4],"int64"), )
paddle.gather_nd(Tensor([100, 0],"float32"), Tensor([2, 2],"int32"), )
paddle.gather_nd(Tensor([100, 0],"float32"), Tensor([400, 2],"int64"), )
paddle.gather_nd(Tensor([101, 0],"float32"), Tensor([404, 2],"int64"), )
paddle.gather_nd(Tensor([106, 0, 28, 28],"float16"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([106, 0, 28, 28],"float32"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([106, 0],"float16"), Tensor([424, 2],"int64"), )
paddle.gather_nd(Tensor([106, 80, 0, 28],"float16"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([106, 80, 0, 28],"float32"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([106, 80, 28, 0],"float16"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([106, 80, 28, 0],"float32"), Tensor([83104, 4],"int64"), )
paddle.gather_nd(Tensor([11, 0, 14, 14],"float32"), Tensor([2156, 4],"int64"), )
paddle.gather_nd(Tensor([11, 0, 28, 28],"float32"), Tensor([8624, 4],"int64"), )
paddle.gather_nd(Tensor([11, 2, 0, 14],"float32"), Tensor([2156, 4],"int64"), )
paddle.gather_nd(Tensor([11, 2, 0, 28],"float32"), Tensor([8624, 4],"int64"), )
paddle.gather_nd(Tensor([11, 2, 14, 0],"float32"), Tensor([2156, 4],"int64"), )
paddle.gather_nd(Tensor([11, 2, 28, 0],"float32"), Tensor([8624, 4],"int64"), )
paddle.gather_nd(Tensor([110, 0, 14, 14],"float16"), Tensor([21560, 4],"int64"), )
paddle.gather_nd(Tensor([110, 0],"float16"), Tensor([440, 2],"int64"), )
paddle.gather_nd(Tensor([110, 80, 0, 14],"float16"), Tensor([21560, 4],"int64"), )
paddle.gather_nd(Tensor([110, 80, 14, 0],"float16"), Tensor([21560, 4],"int64"), )
paddle.gather_nd(Tensor([112, 0, 14, 14],"float16"), Tensor([21952, 4],"int64"), )
paddle.gather_nd(Tensor([112, 0],"float16"), Tensor([448, 2],"int64"), )
paddle.gather_nd(Tensor([112, 80, 0, 14],"float16"), Tensor([21952, 4],"int64"), )
paddle.gather_nd(Tensor([112, 80, 14, 0],"float16"), Tensor([21952, 4],"int64"), )
paddle.gather_nd(Tensor([113, 0, 28, 28],"float16"), Tensor([88592, 4],"int64"), )
paddle.gather_nd(Tensor([113, 0],"float16"), Tensor([452, 2],"int64"), )
paddle.gather_nd(Tensor([113, 80, 0, 28],"float16"), Tensor([88592, 4],"int64"), )
paddle.gather_nd(Tensor([113, 80, 28, 0],"float16"), Tensor([88592, 4],"int64"), )
paddle.gather_nd(Tensor([114, 0, 14, 14],"float16"), Tensor([22344, 4],"int64"), )
paddle.gather_nd(Tensor([114, 0],"float16"), Tensor([456, 2],"int64"), )
paddle.gather_nd(Tensor([114, 80, 0, 14],"float16"), Tensor([22344, 4],"int64"), )
paddle.gather_nd(Tensor([114, 80, 14, 0],"float16"), Tensor([22344, 4],"int64"), )
paddle.gather_nd(Tensor([13, 0, 32],"float32"), Tensor([832, 3],"int64"), )
paddle.gather_nd(Tensor([13, 0, 3],"float32"), Tensor([13, 2],"int64"), )
paddle.gather_nd(Tensor([13, 7, 0],"float32"), Tensor([832, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float16"), Tensor([10, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float16"), Tensor([11, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float16"), Tensor([12, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float16"), Tensor([13, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float16"), Tensor([14, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float32"), Tensor([10, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float32"), Tensor([11, 3],"int64"), )
paddle.gather_nd(Tensor([17, 0, 128],"float32"), Tensor([12, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float16"), Tensor([10, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float16"), Tensor([11, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float16"), Tensor([12, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float16"), Tensor([13, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float16"), Tensor([14, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float32"), Tensor([10, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float32"), Tensor([11, 3],"int64"), )
paddle.gather_nd(Tensor([17, 128, 0],"float32"), Tensor([12, 3],"int64"), )
paddle.gather_nd(Tensor([2, 0],"float32"), Tensor([2],"int64"), )
paddle.gather_nd(Tensor([2, 3],"float32"), Tensor([0],"int64"), )
paddle.gather_nd(Tensor([20, 0, 128],"float16"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([20, 0, 128],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([20, 0, 2],"float16"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([20, 0, 2],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([20, 0, 4],"float16"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([20, 0, 4],"float32"), index=Tensor([20, 500, 2],"int64"), )
paddle.gather_nd(Tensor([364, 0],"float32"), index=Tensor([364, 7, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0, 2],"float32"), index=Tensor([4, 128, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0],"bool"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0],"float32"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0],"float32"), Tensor([4, 8, 2],"int64"), )
paddle.gather_nd(Tensor([4, 0],"int64"), Tensor([4, 4, 2],"int64"), )
paddle.gather_nd(Tensor([5],"float32"), Tensor([0],"int64"), )
paddle.gather_nd(Tensor([728, 0],"float32"), index=Tensor([728, 14, 2],"int64"), )
paddle.gather_nd(x=Tensor([0, 2, 3, 2],"float64"), index=Tensor([1, 1, 1, 3],"int64"), )
paddle.gather_nd(x=Tensor([0, 2, 3, 2],"float64"), index=Tensor([3],"int64"), )
paddle.gather_nd(x=Tensor([0, 3],"float32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([0, 3],"float32"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([0, 3],"float64"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([0, 3],"float64"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([0, 3],"int32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([1, 0, 3, 2],"float64"), index=Tensor([1, 1, 1, 3],"int64"), )
paddle.gather_nd(x=Tensor([1, 0, 3, 2],"float64"), index=Tensor([3],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 0, 2],"float64"), index=Tensor([1, 1, 1, 3],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 0, 2],"float64"), index=Tensor([3],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 3, 2],"float64"), index=Tensor([0],"int64"), )
paddle.gather_nd(x=Tensor([3, 0],"float32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 0],"float32"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([3, 0],"float64"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 0],"float64"), index=Tensor([2],"int64"), )
paddle.gather_nd(x=Tensor([3, 0],"int32"), index=Tensor([2],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"float32"), index=Tensor([0],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"float32"), index=Tensor([0],"int64"), )
paddle.gather_nd(x=Tensor([3, 3],"float64"), index=Tensor([0],"int32"), )
paddle.gather_nd(x=Tensor([3, 3],"float64"), index=Tensor([0],"int64"), )
paddle.gather_nd(x=Tensor([3, 3],"int32"), index=Tensor([0],"int32"), )
paddle.geometric.segment_max(Tensor([0, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([0, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([0, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([0, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_max(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_max(Tensor([3, 0],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_max(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_max(Tensor([40, 0],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 0],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 0],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([0, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([0, 20],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_mean(Tensor([0, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([0, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([3, 0],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([30, 0],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 0],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 0],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([0, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([0, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([0, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([0, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([3, 0],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([40, 0],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 0],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 0],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_sum(Tensor([0, 15],"float16"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([0, 15],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([0, 15],"float64"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([0, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([3, 0],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([30, 0],"float16"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([30, 0],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([30, 0],"float64"), Tensor([30],"int64"), )
paddle.geometric.send_u_recv(Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "sum", None, None, )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([3],"int32"), Tensor([3],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([0, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([0, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([0, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([0, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([0],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([0],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([0],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([0],"int64"), Tensor([15],"int64"), "sum", None, None, )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([3],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([4],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([4],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([4],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([0],"int32"), Tensor([4],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([0],"int32"), Tensor([5],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([0],"int32"), Tensor([5],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([0],"int32"), Tensor([5],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([0],"int32"), Tensor([5],"int32"), "sum", )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 3, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float16"), Tensor([4, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "mean", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([0, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "sum", )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([0, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 0],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 0],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 0],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 0],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 0],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 0],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 0],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 0],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 1],"float64"), Tensor([150],"int64"), Tensor([150],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([0],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([0],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([0],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([0],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([0],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([0],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([0],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([150, 1],"float64"), Tensor([150],"int64"), Tensor([0],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 0],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([0, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([0],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([3, 0, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([4, 0],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([0, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([0, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([0, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([0, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([0, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([0, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([0, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float16"), Tensor([0, 1],"float16"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([0, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "sub", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([0],"int32"), "sub", "sum", )
paddle.geometric.send_uv(Tensor([0, 10, 1],"float64"), Tensor([10, 10, 10],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([0, 10, 1],"float64"), Tensor([10, 10, 10],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([0, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([0, 1],"float64"), Tensor([100, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([0, 20],"float64"), Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([0, 20],"float64"), Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([0, 20],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([0, 20],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="add", )
paddle.geometric.send_uv(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="div", )
paddle.geometric.send_uv(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="mul", )
paddle.geometric.send_uv(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="sub", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([0, 10, 10],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([0, 10, 10],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([10, 10, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([10, 10, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 0],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 0],"float64"), Tensor([100, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([0, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 0],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([0, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([0, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="add", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="div", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="mul", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="sub", )
paddle.histogram(input=Tensor([0, 4],"float32"), )
paddle.histogram(input=Tensor([0, 4],"float64"), )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, max=5, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=-2, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=-4, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=-40, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=-41, max=-5, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=4, max=5, )
paddle.histogram(input=Tensor([0, 4],"int32"), )
paddle.histogram(input=Tensor([0, 4],"int64"), )
paddle.histogram(input=Tensor([0],"float64"), )
paddle.histogram(input=Tensor([4, 0],"float32"), )
paddle.histogram(input=Tensor([4, 0],"float64"), )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, max=5, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=-2, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=-4, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=-40, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=-41, max=-5, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=4, max=5, )
paddle.histogram(input=Tensor([4, 0],"int32"), )
paddle.histogram(input=Tensor([4, 0],"int64"), )
paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.hstack(list[Tensor([0, 2],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.hstack(list[Tensor([3, 0],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.imag(Tensor([0, 20, 2, 3],"complex128"), )
paddle.imag(Tensor([0, 20, 2, 3],"complex64"), )
paddle.imag(Tensor([0, 3],"complex64"), )
paddle.imag(Tensor([2, 0, 2, 3],"complex128"), )
paddle.imag(Tensor([2, 0, 2, 3],"complex64"), )
paddle.imag(Tensor([2, 0],"complex64"), )
paddle.imag(Tensor([2, 20, 0, 3],"complex128"), )
paddle.imag(Tensor([2, 20, 0, 3],"complex64"), )
paddle.imag(Tensor([2, 20, 2, 0],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 0],"complex64"), )
paddle.imag(x=Tensor([0, 10],"complex128"), )
paddle.imag(x=Tensor([20, 0],"complex128"), )
paddle.imag(x=Tensor([20, 0],"complex64"), )
paddle.increment(x=Tensor([0],"int32"), )
paddle.increment(x=Tensor([0],"int64"), )
paddle.increment(x=Tensor([0],"int64"), value=1.0, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 11008],"float32"), Tensor([1, 1, 11008],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 18],"float32"), Tensor([1, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 86],"float32"), Tensor([1, 1, 86],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 10, 1408],"float32"), Tensor([1, 10, 1408],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 11008],"float32"), Tensor([1, 1, 11008],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 18],"float32"), Tensor([1, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 86],"float32"), Tensor([1, 1, 86],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 11008],"float32"), Tensor([0, 1, 11008],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 11008],"float32"), Tensor([1, 0, 11008],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 18],"float32"), Tensor([0, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 18],"float32"), Tensor([1, 0, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 86],"float32"), Tensor([0, 1, 86],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 86],"float32"), Tensor([1, 0, 86],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 10, 1408],"float32"), Tensor([0, 10, 1408],"float32"), )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([0, 4, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 0, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 0, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 0, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 8, 0, 16],"float32"), Tensor([1, 2, 64, 16],"float32"), Tensor([1, 2, 64, 16],"float32"), Tensor([1],"int32"), Tensor([1],"int32"), Tensor([1, 1, 64, 64],"float32"), 0.25, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 8, 64, 16],"float32"), Tensor([1, 2, 0, 16],"float32"), Tensor([1, 2, 64, 16],"float32"), Tensor([1],"int32"), Tensor([1],"int32"), Tensor([1, 1, 64, 64],"float32"), 0.25, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 8, 64, 16],"float32"), Tensor([1, 2, 64, 16],"float32"), Tensor([1, 2, 0, 16],"float32"), Tensor([1],"int32"), Tensor([1],"int32"), Tensor([1, 1, 64, 64],"float32"), 0.25, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 0, 39, 128],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 0, 40, 128],"float16"), Tensor([2, 2, 40, 128],"float16"), Tensor([2, 2, 40, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 0, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 35, 64],"float16"), Tensor([2, 1, 35, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 36, 64],"float16"), Tensor([2, 1, 36, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 37, 64],"float16"), Tensor([2, 1, 37, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 38, 64],"float16"), Tensor([2, 1, 38, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 39, 64],"float16"), Tensor([2, 1, 39, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 45, 64],"float16"), Tensor([2, 1, 45, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 47, 64],"float16"), Tensor([2, 1, 47, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 50, 64],"float16"), Tensor([2, 1, 50, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 51, 64],"float16"), Tensor([2, 1, 51, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 35, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 35, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 35, 64],"float16"), Tensor([2, 1, 35, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 36, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 36, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 36, 64],"float16"), Tensor([2, 1, 36, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 37, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 37, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 37, 64],"float16"), Tensor([2, 1, 37, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 38, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 38, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 38, 64],"float16"), Tensor([2, 1, 38, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 39, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 39, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 39, 64],"float16"), Tensor([2, 1, 39, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 45, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 45, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 45, 64],"float16"), Tensor([2, 1, 45, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 47, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 47, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 47, 64],"float16"), Tensor([2, 1, 47, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 50, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 50, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 50, 64],"float16"), Tensor([2, 1, 50, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 51, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1, 51, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 1, 51, 64],"float16"), Tensor([2, 1, 51, 64],"float16"), Tensor([2, 1, 0, 64],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 0, 128],"float16"), Tensor([2, 2, 38, 128],"float16"), Tensor([2, 2, 38, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 0, 128],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 0, 128],"float16"), Tensor([2, 2, 40, 128],"float16"), Tensor([2, 2, 40, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 0, 128],"float16"), Tensor([2, 2, 41, 128],"float16"), Tensor([2, 2, 41, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 0, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 38, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 2, 38, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 38, 128],"float16"), Tensor([2, 2, 38, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 38, 128],"float16"), Tensor([2, 2, 38, 128],"float16"), Tensor([2, 2, 38, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 0],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 39, 128],"float16"), Tensor([2, 0, 39, 128],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 39, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 39, 128],"float16"), Tensor([2, 2, 39, 0],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 39, 128],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 39, 128],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 2, 39, 128],"float16"), Tensor([2, 1],"int32"), Tensor([0, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 40, 128],"float16"), Tensor([0, 2, 40, 128],"float16"), Tensor([2, 2, 40, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 40, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 2, 40, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 40, 128],"float16"), Tensor([2, 2, 40, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 41, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 2, 41, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 41, 128],"float16"), Tensor([2, 2, 41, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 47, 0],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 47, 128],"float16"), Tensor([0, 2, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 47, 128],"float16"), Tensor([2, 0, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 47, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 2, 0, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 2, 47, 0],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 4, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 2, 47, 128],"float16"), Tensor([2, 1],"int32"), Tensor([2, 0],"int32"), mask=Tensor([2, 1, 32768, 32768],"float16"), scale=0.08838834764831845, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 110, 96],"float16"), Tensor([2, 8, 110, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 219, 96],"float16"), Tensor([2, 8, 219, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 237, 96],"float16"), Tensor([2, 8, 237, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 238, 96],"float16"), Tensor([2, 8, 238, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 0],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 0, 107, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 1],"int32"), Tensor([0, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 107, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 0],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 235, 0],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([0, 8, 235, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 0, 235, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 8, 235, 0],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([0, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 0],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 1],"int32"), Tensor([0, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 107, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 8, 235, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 0],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 0],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 0],"float16"), Tensor([2, 8, 237, 96],"float16"), Tensor([2, 8, 237, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([0, 8, 109, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([0, 8, 237, 96],"float16"), Tensor([2, 8, 237, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 0, 109, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 0, 237, 96],"float16"), Tensor([2, 8, 237, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 237, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 109, 0],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([0, 8, 109, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 0, 109, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 109, 0],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 109, 96],"float16"), Tensor([2, 8, 237, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 110, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 110, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 110, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 238, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 110, 96],"float16"), Tensor([2, 8, 110, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 110, 96],"float16"), Tensor([2, 8, 238, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 0],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([0, 8, 240, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 0, 240, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 8, 240, 0],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([0, 8, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 0, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 8, 240, 0],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 0],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([0, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 112, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 8, 240, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 0],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 0],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([0, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 0, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 0],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([0, 8, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 0, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 0],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([0, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 0],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([0, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 8, 74, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 0],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 91, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 8, 219, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([2, 8, 91, 96],"float16"), Tensor([2, 8, 219, 96],"float16"), Tensor([2, 8, 0, 96],"float16"), Tensor([2, 1],"int32"), Tensor([2, 1],"int32"), mask=Tensor([2, 1, 4096, 4096],"float16"), scale=0.10206207261596575, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([3, 16, 0, 32],"float16"), Tensor([3, 2, 64, 32],"float16"), Tensor([3, 2, 64, 32],"float16"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([3, 1, 64, 64],"float16"), 0.17677669529663687, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([3, 16, 64, 32],"float16"), Tensor([3, 2, 0, 32],"float16"), Tensor([3, 2, 64, 32],"float16"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([3, 1, 64, 64],"float16"), 0.17677669529663687, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([3, 16, 64, 32],"float16"), Tensor([3, 2, 64, 32],"float16"), Tensor([3, 2, 0, 32],"float16"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([3, 1, 64, 64],"float16"), 0.17677669529663687, )
paddle.incubate.segment_max(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_max(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.incubate.softmax_mask_fuse(Tensor([0, 1, 8, 32],"float32"), Tensor([0, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([0, 1, 8, 32],"float32"), Tensor([1, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 0, 8, 32],"float32"), Tensor([1, 0, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 0, 8, 32],"float32"), Tensor([1, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 0, 32],"float32"), Tensor([1, 1, 0, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 8, 0],"float32"), Tensor([1, 1, 8, 0],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 8, 32],"float32"), Tensor([0, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 8, 32],"float32"), Tensor([1, 0, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([0, 4, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 0, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 0, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 32, 0],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([0, 1, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([0, 1, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([0, 11, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([0, 7, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 0, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 0, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 0],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 0, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 1, 0, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([3, 1, 224, 0],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 0, 224, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 7, 0, 224],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([5, 7, 224, 0],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 0, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 11, 0, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([7, 11, 32, 0],"float32"), )
paddle.index_add(Tensor([0, 3],"float16"), Tensor([3],"int64"), 0, Tensor([3, 3],"float16"), )
paddle.index_add(Tensor([0, 3],"float32"), Tensor([3],"int64"), 0, Tensor([3, 3],"float32"), )
paddle.index_add(Tensor([0, 3],"float64"), Tensor([3],"int64"), 0, Tensor([3, 3],"float64"), )
paddle.index_add(Tensor([0, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_add(Tensor([0, 5],"float64"), Tensor([20],"int64"), 0, Tensor([20, 5],"float64"), )
paddle.index_add(Tensor([0],"float32"), Tensor([0],"int32"), 0, Tensor([0],"float32"), )
paddle.index_add(Tensor([0],"float32"), Tensor([4],"int32"), 0, Tensor([4],"float32"), )
paddle.index_add(Tensor([10, 0],"float32"), Tensor([4],"int32"), -1, Tensor([10, 4],"float32"), )
paddle.index_add(Tensor([10, 10],"float32"), Tensor([0],"int32"), -1, Tensor([10, 4],"float32"), )
paddle.index_add(Tensor([100, 0, 5],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 5],"float32"), )
paddle.index_add(Tensor([100, 100, 0],"float32"), Tensor([20],"int32"), 2, Tensor([100, 100, 20],"float32"), )
paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([0],"int32"), 2, Tensor([100, 100, 20],"float32"), )
paddle.index_add(Tensor([100, 100, 5],"float32"), Tensor([0],"int32"), 1, Tensor([100, 20, 5],"float32"), )
paddle.index_add(Tensor([100, 5],"float32"), Tensor([0],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_add(Tensor([100, 5],"float64"), Tensor([0],"int64"), 0, Tensor([20, 5],"float64"), )
paddle.index_add(Tensor([101, 3],"float16"), Tensor([0],"int64"), 0, Tensor([3, 3],"float16"), )
paddle.index_add(Tensor([101, 3],"float32"), Tensor([0],"int64"), 0, Tensor([3, 3],"float32"), )
paddle.index_add(Tensor([101, 3],"float64"), Tensor([0],"int64"), 0, Tensor([3, 3],"float64"), )
paddle.index_add(Tensor([10],"float32"), Tensor([0],"int32"), 0, Tensor([4],"float32"), )
paddle.index_add(Tensor([4, 0, 2],"float32"), Tensor([16],"int64"), 1, Tensor([4, 16, 2],"float32"), )
paddle.index_add(Tensor([4, 3, 2],"float32"), Tensor([0],"int64"), 1, Tensor([4, 16, 2],"float32"), )
paddle.index_fill(Tensor([0, 40],"float64"), Tensor([5],"int64"), 0, -1, )
paddle.index_fill(Tensor([10, 0, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 0, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 0, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_put(Tensor([0, 110],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), False, )
paddle.index_put(Tensor([0, 110],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), True, )
paddle.index_put(Tensor([0, 110],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), False, )
paddle.index_put(Tensor([0, 110],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), True, )
paddle.index_put(Tensor([0, 110],"float32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float32"), False, )
paddle.index_put(Tensor([0, 110],"float32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float32"), True, )
paddle.index_put(Tensor([0, 110],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([0, 110],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([0, 110],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([0, 110],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([0, 110],"int32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"int32"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), True, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), True, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), False, )
paddle.index_put(Tensor([0, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), True, )
paddle.index_put(Tensor([0, 42, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([0, 42, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), True, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([0, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([100, 0],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), False, )
paddle.index_put(Tensor([100, 0],"bool"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"bool"), True, )
paddle.index_put(Tensor([100, 0],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), False, )
paddle.index_put(Tensor([100, 0],"float16"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float16"), True, )
paddle.index_put(Tensor([100, 0],"float32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float32"), False, )
paddle.index_put(Tensor([100, 0],"float32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float32"), True, )
paddle.index_put(Tensor([100, 0],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([100, 0],"float64"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([100, 0],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), False, )
paddle.index_put(Tensor([100, 0],"float64"), tuple(Tensor([21],"int64"),Tensor([21],"int64"),), Tensor([21],"float64"), True, )
paddle.index_put(Tensor([100, 0],"int32"), tuple(Tensor([21],"int32"),Tensor([21],"int32"),), Tensor([21],"int32"), False, )
paddle.index_put(Tensor([110, 0, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 0, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), True, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([110, 0, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([110, 0],"float64"), tuple(Tensor([110],"bool"),), Tensor([55, 94],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([110, 42, 0, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([110, 42, 32, 0],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([0],"bool"),), Tensor([16, 16, 56],"float64"), False, )
paddle.index_put(Tensor([110, 42, 32, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([0],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([1, 16],"int32"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 0],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([1, 16],"int64"),Tensor([1, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([0, 94],"bool"),), Tensor([5170],"float64"), False, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([0, 94],"bool"),), Tensor([5170],"float64"), True, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([55, 94],"float64"), False, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([55, 94],"float64"), True, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([110, 0],"bool"),), Tensor([5170],"float64"), False, )
paddle.index_put(Tensor([110, 94],"float64"), tuple(Tensor([110, 0],"bool"),), Tensor([5170],"float64"), True, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), False, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), True, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), False, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), True, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), False, )
paddle.index_put(Tensor([16, 0],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), True, )
paddle.index_put(Tensor([44, 0],"float64"), tuple(Tensor([44],"bool"),), Tensor([94],"float64"), True, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([94],"float64"), False, )
paddle.index_put(Tensor([44, 94],"float64"), tuple(Tensor([0],"bool"),), Tensor([94],"float64"), True, )
paddle.index_sample(Tensor([1, 0],"float16"), Tensor([1, 1],"int64"), )
paddle.index_sample(Tensor([1, 0],"float32"), Tensor([1, 1],"int64"), )
paddle.index_sample(Tensor([1, 0],"float32"), Tensor([1, 36],"int64"), )
paddle.index_sample(Tensor([1, 100],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([1, 10285],"float32"), Tensor([0, 36],"int64"), )
paddle.index_sample(Tensor([1, 200],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([1, 256],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([1, 30000],"float32"), Tensor([0, 1],"int64"), )
paddle.index_sample(Tensor([10920192, 0],"float16"), Tensor([10920192, 1],"int64"), )
paddle.index_sample(Tensor([1865664, 0],"float16"), Tensor([1865664, 1],"int64"), )
paddle.index_sample(Tensor([2, 0],"float16"), Tensor([2, 1],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"float32"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"float64"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"int32"), index=Tensor([3, 3],"int64"), )
paddle.index_sample(x=Tensor([3, 0],"int64"), index=Tensor([3, 3],"int64"), )
paddle.index_select(Tensor([0, 1, 3, 3],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 1, 3, 3],"int64"), Tensor([6],"int64"), )
paddle.index_select(Tensor([0, 10, 8, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 10, 8, 96],"float16"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 10],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 11, 8, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 11, 8, 96],"float16"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 11],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 12, 8, 96],"float16"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 128],"float32"), Tensor([2],"int64"), axis=0, )
paddle.index_select(Tensor([0, 12],"float16"), Tensor([2401],"int64"), )
paddle.index_select(Tensor([0, 12],"float32"), Tensor([2401],"int64"), )
paddle.index_select(Tensor([0, 12],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 13, 8, 96],"float16"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 13],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 14, 8, 96],"float16"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 14],"int64"), index=Tensor([2],"int64"), )
paddle.index_select(Tensor([0, 16],"float16"), Tensor([2401],"int64"), )
paddle.index_select(Tensor([0, 16],"float32"), Tensor([2401],"int64"), )
paddle.index_select(Tensor([0, 2, 1, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 2001, 2],"float32"), Tensor([1000],"int64"), )
paddle.index_select(Tensor([0, 2001],"float32"), Tensor([1000],"int64"), )
paddle.index_select(Tensor([0, 24],"float16"), Tensor([2401],"int64"), )
paddle.index_select(Tensor([0, 3, 32],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([0, 3, 32],"float32"), Tensor([6],"int64"), )
paddle.index_select(Tensor([0, 32],"float16"), Tensor([2401],"int64"), )
paddle.index_select(Tensor([0, 32],"float32"), index=Tensor([32],"int64"), axis=0, )
paddle.index_select(Tensor([0, 3],"float16"), Tensor([2401],"int64"), )
paddle.index_select(Tensor([0, 3],"float32"), Tensor([1],"int64"), axis=0, )
paddle.index_select(Tensor([0, 3],"float32"), Tensor([2],"int64"), axis=0, )
paddle.index_select(Tensor([0, 3],"float32"), Tensor([3],"int64"), )
paddle.index_select(Tensor([0, 4],"float32"), Tensor([1],"int64"), axis=0, )
paddle.index_select(Tensor([0, 4],"float32"), Tensor([6],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([10, 1],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([11, 1],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([12, 1],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([13, 1],"int64"), )
paddle.index_select(Tensor([0, 4],"int64"), Tensor([14, 1],"int64"), )
paddle.index_select(Tensor([0, 5],"float32"), Tensor([20],"int32"), 0, )
paddle.index_select(Tensor([0, 5],"float64"), Tensor([20],"int64"), 0, )
paddle.index_select(Tensor([0, 64],"float32"), index=Tensor([16],"int64"), axis=0, )
paddle.index_select(Tensor([0, 64],"float32"), index=Tensor([3],"int64"), axis=0, )
paddle.index_select(Tensor([0, 8],"float32"), Tensor([2],"int64"), axis=0, )
paddle.index_select(Tensor([0],"float32"), Tensor([2],"int64"), axis=0, )
paddle.index_select(Tensor([0],"float32"), Tensor([3],"int64"), axis=0, )
paddle.index_select(Tensor([0],"float32"), Tensor([4],"int32"), 0, )
paddle.index_select(Tensor([1, 10285, 0],"float32"), Tensor([11],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 10285, 12],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 21504, 0],"float32"), Tensor([10],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 21504, 0],"float32"), Tensor([15],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 21504, 11],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 21504, 16],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 24276, 0],"float32"), Tensor([10],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 24276, 11],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 27216, 0],"float32"), Tensor([10],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 27216, 11],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([1, 4],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([10, 0],"float32"), Tensor([4],"int32"), 1, )
paddle.index_select(Tensor([10, 10],"float32"), Tensor([0],"int32"), 1, )
paddle.index_select(Tensor([10, 3],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([10, 4, 7, 0],"float32"), index=Tensor([7],"int64"), axis=3, )
paddle.index_select(Tensor([10, 4, 7, 13],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([10, 4],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([100, 0, 5],"float32"), Tensor([20],"int32"), 1, )
paddle.index_select(Tensor([100, 100, 0],"float32"), Tensor([20],"int32"), 2, )
paddle.index_select(Tensor([100, 100, 25],"float32"), Tensor([0],"int32"), 2, )
paddle.index_select(Tensor([100, 100, 5],"float32"), Tensor([0],"int32"), 1, )
paddle.index_select(Tensor([100, 5],"float32"), Tensor([0],"int32"), 0, )
paddle.index_select(Tensor([100, 5],"float64"), Tensor([0],"int64"), 0, )
paddle.index_select(Tensor([1000, 2001, 2],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([1000, 2001],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([107136, 0],"float32"), Tensor([4],"int64"), axis=1, )
paddle.index_select(Tensor([107136, 0],"float32"), Tensor([5],"int64"), axis=1, )
paddle.index_select(Tensor([107136, 5],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([107136, 7],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([10],"float32"), Tensor([0],"int32"), 0, )
paddle.index_select(Tensor([11, 4, 7, 0],"float32"), index=Tensor([7],"int64"), axis=3, )
paddle.index_select(Tensor([11, 4, 7, 13],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 7, 0],"float32"), index=Tensor([7],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 7, 13],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 8, 0],"float32"), index=Tensor([7],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 8, 0],"float32"), index=Tensor([8],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 8, 13],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 8, 15],"float32"), index=Tensor([0],"int64"), axis=3, )
paddle.index_select(Tensor([16, 64],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([169, 12],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([169, 16],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([17, 4],"int64"), Tensor([0, 1],"int64"), )
paddle.index_select(Tensor([187679, 0],"float32"), Tensor([10],"int64"), axis=1, )
paddle.index_select(Tensor([187679, 13],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([2, 0, 2],"float32"), Tensor([1],"int64"), axis=1, )
paddle.index_select(Tensor([2, 0],"float32"), Tensor([1],"int64"), axis=-1, )
paddle.index_select(Tensor([2, 1, 3, 3],"int64"), Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 10],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 11],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 12],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 13],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 14],"int64"), index=Tensor([0],"int64"), )
paddle.index_select(Tensor([2, 1],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([2, 2, 2],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([2, 2],"float32"), Tensor([0],"int64"), axis=-1, )
paddle.index_select(Tensor([2, 3, 32],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([20, 3],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([21128, 128],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([21128],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([32, 32],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([4, 10, 8, 4],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([4, 11, 8, 4],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([4, 2, 1, 4],"float32"), Tensor([0],"int64"), )
paddle.index_select(Tensor([4, 500, 0],"float32"), index=Tensor([8],"int32"), axis=-1, )
paddle.index_select(Tensor([4, 500, 8],"float32"), index=Tensor([0],"int32"), axis=-1, )
paddle.index_select(Tensor([40, 3],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([40000, 8],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([40000],"float32"), Tensor([0],"int64"), axis=0, )
paddle.index_select(Tensor([5, 0, 1, 4],"float32"), Tensor([4],"int64"), axis=1, )
paddle.index_select(Tensor([5, 0],"float32"), Tensor([1],"int64"), axis=1, )
paddle.index_select(Tensor([5, 2],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([5, 4, 1, 4],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([6, 0, 1, 4],"float32"), Tensor([4],"int64"), axis=1, )
paddle.index_select(Tensor([6, 4, 1, 4],"float32"), Tensor([0],"int64"), axis=1, )
paddle.index_select(Tensor([8, 5, 0, 7, 7],"float32"), Tensor([1],"int64"), axis=2, )
paddle.index_select(Tensor([8, 5, 0, 7, 7],"float32"), Tensor([24],"int64"), axis=2, )
paddle.index_select(Tensor([8, 5, 29, 7, 7],"float32"), Tensor([0],"int64"), axis=2, )
paddle.index_select(Tensor([8, 64],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([105344],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([4936],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([5168],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([58584],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 128],"float32"), index=Tensor([78112],"int64"), axis=0, )
paddle.index_select(x=Tensor([0, 3],"float32"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([0, 3],"float64"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([0, 3],"int32"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([0, 3],"int64"), index=Tensor([1],"int32"), )
paddle.index_select(x=Tensor([11661, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([1358, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([15548, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([2, 0],"float64"), index=Tensor([2],"int32"), axis=1, )
paddle.index_select(x=Tensor([2, 0],"float64"), index=Tensor([2],"int64"), axis=1, )
paddle.index_select(x=Tensor([2, 3],"float32"), index=Tensor([0],"int32"), )
paddle.index_select(x=Tensor([2, 3],"float64"), index=Tensor([0],"int32"), )
paddle.index_select(x=Tensor([2, 3],"float64"), index=Tensor([0],"int32"), axis=1, )
paddle.index_select(x=Tensor([2, 3],"float64"), index=Tensor([0],"int64"), axis=1, )
paddle.index_select(x=Tensor([2, 3],"int32"), index=Tensor([0],"int32"), )
paddle.index_select(x=Tensor([2, 3],"int64"), index=Tensor([0],"int32"), )
paddle.index_select(x=Tensor([26736, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.index_select(x=Tensor([3029, 128],"float32"), index=Tensor([0],"int64"), axis=0, )
paddle.inner(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 0],"float64"), )
paddle.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.inner(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )
paddle.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([0, 3],"float64"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([0, 3],"float32"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([3, 0],"float64"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([3, 0],"float32"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 2, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 0, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 2, 0],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([3, 0],"float64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([0, 2, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([0, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([2, 0, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([2, 2, 0],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([3, 0],"float32"), )
paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 6],"float64"), Tensor([0, 1, 6],"float64"), Tensor([0, 1, 6],"float64"), )
paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.lerp(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), )
paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([0, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), )
paddle.lerp(Tensor([0, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.lerp(Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([0, 6, 3, 4, 2, 1],"float64"), Tensor([0, 6, 3, 4, 2, 1],"float64"), Tensor([0, 6, 3, 4, 2, 1],"float64"), )
paddle.lerp(Tensor([0, 7, 1],"float64"), Tensor([0, 7, 1],"float64"), Tensor([0, 7, 1],"float64"), )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.lerp(Tensor([0],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), )
paddle.lerp(Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.lerp(Tensor([1, 0, 4],"float64"), Tensor([1, 0, 4],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([10, 1, 0, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 0, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 0],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 0, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([1],"float64"), Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 0, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([0, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([0, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 0, 3, 4, 2, 1],"float64"), Tensor([3, 0, 3, 4, 2, 1],"float64"), Tensor([3, 0, 3, 4, 2, 1],"float64"), )
paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.2, )
paddle.lerp(Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 0, 4, 2, 1],"float64"), Tensor([3, 6, 0, 4, 2, 1],"float64"), Tensor([3, 6, 0, 4, 2, 1],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 2, 1],"float64"), Tensor([3, 6, 3, 0, 2, 1],"float64"), Tensor([3, 6, 3, 0, 2, 1],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 0, 1],"float64"), Tensor([3, 6, 3, 4, 0, 1],"float64"), Tensor([3, 6, 3, 4, 0, 1],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 0],"float64"), Tensor([3, 6, 3, 4, 2, 0],"float64"), Tensor([3, 6, 3, 4, 2, 0],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 0],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 0],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 1],"float64"), Tensor([3, 6, 3, 4, 2, 0],"float64"), )
paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([4, 0, 1],"float64"), Tensor([4, 0, 1],"float64"), Tensor([4, 0, 1],"float64"), )
paddle.lerp(Tensor([4, 0, 6],"float64"), Tensor([4, 0, 6],"float64"), Tensor([4, 0, 6],"float64"), )
paddle.lerp(Tensor([4, 0, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 0],"float32"), Tensor([4, 0],"float32"), Tensor([4, 0],"float32"), )
paddle.lerp(Tensor([4, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 0],"float64"), Tensor([4, 0],"float64"), Tensor([4, 0],"float64"), )
paddle.lerp(Tensor([4, 0],"float64"), Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), )
paddle.lerp(Tensor([4, 1, 0],"float64"), Tensor([4, 1, 0],"float64"), Tensor([4, 1, 0],"float64"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 0, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 0, 6],"float64"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 0],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4, 0],"float32"), )
paddle.lerp(Tensor([4, 1],"float64"), Tensor([4, 0],"float64"), Tensor([4, 1],"float64"), )
paddle.lerp(Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), Tensor([4, 0],"float64"), )
paddle.lerp(Tensor([4, 7, 0],"float64"), Tensor([4, 7, 0],"float64"), Tensor([4, 7, 0],"float64"), )
paddle.lerp(Tensor([4, 7, 0],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 7, 0],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 7, 0],"float64"), )
paddle.lerp(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), )
paddle.lerp(Tensor([5, 0],"float64"), Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), )
paddle.lerp(Tensor([5, 1],"float64"), Tensor([5, 0],"float64"), Tensor([5, 1],"float64"), )
paddle.lerp(Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), Tensor([5, 0],"float64"), )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.lerp(x=Tensor([0],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.lerp(x=Tensor([0],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.linalg.cholesky(Tensor([0, 2],"float32"), )
paddle.linalg.cholesky(Tensor([0, 2],"float64"), )
paddle.linalg.cholesky(Tensor([0, 3],"float64"), )
paddle.linalg.cholesky(Tensor([2, 0],"float32"), )
paddle.linalg.cholesky(Tensor([2, 0],"float64"), )
paddle.linalg.cholesky(Tensor([3, 0],"float64"), )
paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.linalg.cond(Tensor([0, 3],"float32"), )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=-1, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=1, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=2, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), 1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), None, )
paddle.linalg.cond(Tensor([0, 5],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 7],"float64"), -2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), 2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), None, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), -1, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), -2, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), -math.inf, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), 1, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), 2, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), None, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), math.inf, )
paddle.linalg.cond(Tensor([3, 0],"float32"), )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=-1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=2, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([3, 5, 0, 1],"float32"), -2, )
paddle.linalg.cond(Tensor([3, 5, 0, 1],"float32"), 2, )
paddle.linalg.cond(Tensor([3, 5, 0, 1],"float32"), None, )
paddle.linalg.cond(Tensor([3, 5, 4, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([3, 5, 4, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([3, 5, 4, 0],"float32"), None, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), -1, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), -2, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), -math.inf, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), 1, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), 2, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), None, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), None, )
paddle.linalg.cond(Tensor([5, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([9, 0],"float64"), -2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), 2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), None, )
paddle.linalg.cond(x=Tensor([0, 3],"float32"), )
paddle.linalg.cond(x=Tensor([0, 3],"float64"), )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([3, 0],"float32"), )
paddle.linalg.cond(x=Tensor([3, 0],"float64"), )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([6, 0],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([6, 2, 4, 0, 4],"float64"), )
paddle.linalg.cond(x=Tensor([6, 2, 4, 3, 0],"float64"), )
paddle.linalg.cov(Tensor([3, 0],"float32"), )
paddle.linalg.cov(x=Tensor([4, 0],"float32"), )
paddle.linalg.eigh(Tensor([0, 2],"complex128"), "L", )
paddle.linalg.eigh(Tensor([0, 2],"complex128"), "U", )
paddle.linalg.eigh(Tensor([0, 2],"complex64"), "L", )
paddle.linalg.eigh(Tensor([0, 32],"float32"), "L", )
paddle.linalg.eigh(Tensor([0, 4],"complex128"), "L", )
paddle.linalg.eigh(Tensor([0, 4],"complex128"), "U", )
paddle.linalg.eigh(Tensor([0, 4],"complex64"), "L", )
paddle.linalg.eigh(Tensor([0, 4],"complex64"), "U", )
paddle.linalg.eigh(Tensor([0, 4],"float32"), "U", )
paddle.linalg.eigh(Tensor([0, 4],"float64"), "U", )
paddle.linalg.eigh(Tensor([0, 5, 5],"complex64"), )
paddle.linalg.eigh(Tensor([0, 5],"complex64"), )
paddle.linalg.eigh(Tensor([0, 5],"float32"), )
paddle.linalg.eigh(Tensor([2, 0, 5],"complex64"), )
paddle.linalg.eigh(Tensor([2, 0],"complex128"), "L", )
paddle.linalg.eigh(Tensor([2, 0],"complex128"), "U", )
paddle.linalg.eigh(Tensor([2, 0],"complex64"), "L", )
paddle.linalg.eigh(Tensor([2, 5, 0],"complex64"), )
paddle.linalg.eigh(Tensor([32, 0],"float32"), "L", )
paddle.linalg.eigh(Tensor([4, 0],"complex128"), "L", )
paddle.linalg.eigh(Tensor([4, 0],"complex128"), "U", )
paddle.linalg.eigh(Tensor([4, 0],"complex64"), "L", )
paddle.linalg.eigh(Tensor([4, 0],"complex64"), "U", )
paddle.linalg.eigh(Tensor([4, 0],"float32"), "U", )
paddle.linalg.eigh(Tensor([4, 0],"float64"), "U", )
paddle.linalg.eigh(Tensor([5, 0],"complex64"), )
paddle.linalg.eigh(Tensor([5, 0],"float32"), )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"float64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"float64"), name="small_x", )
paddle.linalg.lstsq(Tensor([0, 100],"float64"), Tensor([0, 50],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([0, 10],"float64"), Tensor([0, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 2, 8],"float32"), Tensor([0, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 2],"float32"), Tensor([0, 10],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([0, 2],"float64"), Tensor([0, 3],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([0, 3, 10],"float32"), Tensor([0, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([0, 4],"float64"), Tensor([0, 3],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([0, 5],"float32"), Tensor([0, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 5],"float64"), Tensor([0, 1],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([0, 600],"float64"), Tensor([0, 300],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([0, 7, 3],"float64"), Tensor([0, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 8, 6],"float64"), Tensor([0, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 9],"float32"), Tensor([0, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 3],"float64"), Tensor([10, 0, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 6],"float64"), Tensor([10, 0, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([2, 0, 10],"float32"), Tensor([2, 0, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 0],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 3, 10],"float32"), Tensor([2, 3, 0],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([200, 0],"float64"), Tensor([200, 50],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([200, 100],"float64"), Tensor([200, 0],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 0],"float64"), Tensor([3, 3],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2],"float64"), Tensor([3, 0],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 1],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 3],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 4],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 0],"float64"), Tensor([50, 0],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 0],"float64"), Tensor([50, 300],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 600],"float64"), Tensor([50, 0],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([8, 0],"float32"), Tensor([8, 0],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([8, 0],"float32"), Tensor([8, 10],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([8, 2],"float32"), Tensor([8, 0],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 0],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([9, 0],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lu(Tensor([0, 3, 2, 2],"float64"), )
paddle.linalg.lu(Tensor([0, 3, 3],"float64"), )
paddle.linalg.lu(Tensor([0, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 3],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([0, 5, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([0, 5, 5, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([0, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([0, 5, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5],"float32"), )
paddle.linalg.lu(Tensor([0, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 0, 3],"float64"), )
paddle.linalg.lu(Tensor([3, 0, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 0, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 0, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 0, 5, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 0, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 0, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 0, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 0, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 3, 0],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 0, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 0, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 0, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 0, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 0],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 0],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 0],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 5, 0],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 5, 0],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 5, 0],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 0, 2, 2],"float64"), )
paddle.linalg.lu(Tensor([4, 0, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 0, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 3, 0, 2],"float64"), )
paddle.linalg.lu(Tensor([4, 3, 2, 0],"float64"), )
paddle.linalg.lu(Tensor([4, 5, 0, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 5, 5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([5, 0],"float32"), )
paddle.linalg.lu(Tensor([5, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([5, 0],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu_unpack(Tensor([0, 3],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 3],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([0, 5],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 0, 5],"float32"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 0, 5],"float64"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 0],"float32"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 0],"float64"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float32"), Tensor([0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float64"), Tensor([0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 0, 5],"float32"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 0, 5],"float64"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 0],"float32"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 0],"float64"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float32"), Tensor([0, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float32"), Tensor([2, 0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float64"), Tensor([0, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float64"), Tensor([2, 0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0, 3],"float64"), Tensor([3, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0, 5],"float32"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0, 5],"float64"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 0],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3, 3],"float64"), Tensor([0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 0, 5],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 0, 5],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 0],"float32"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 0],"float64"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 0],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 0],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float32"), Tensor([0, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float32"), Tensor([3, 0, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([0, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([3, 0, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float32"), Tensor([0, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float64"), Tensor([0, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 0, 3],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 0],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([0, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([4, 0, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 0],"float32"), Tensor([3],"int32"), )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), None, False, Tensor([0, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([0, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), None, True, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), None, True, Tensor([0, 200],"float64"), Tensor([0, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([0, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 3],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), None, True, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), None, True, Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), None, False, Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 0],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(x=Tensor([0, 3, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 4, 4, 4],"float64"), tol=Tensor([2, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 4, 4, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([0, 4],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 0, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 0],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 0, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 0, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 0],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 0],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 0, 4],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 0, 4],"float64"), tol=Tensor([2, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 0],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 0],"float64"), tol=Tensor([2, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float32"),Tensor([8, 0],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 0],"float64"),], )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.pinv(Tensor([0, 200, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 0, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 200, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([0, 2, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.pinv(x=Tensor([0, 4, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([0, 4, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([0, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([0, 4],"float32"), )
paddle.linalg.pinv(x=Tensor([0, 4],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 0, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 0, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([2, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 4, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 4, 0],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([3, 0],"float32"), )
paddle.linalg.pinv(x=Tensor([3, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([4, 0, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.pinv(x=Tensor([4, 2, 0],"float64"), rcond=5, hermitian=True, )
paddle.linalg.svd_lowrank(Tensor([0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([4, 0],"float64"), q=4, )
paddle.linalg.svdvals(Tensor([0, 40],"float64"), )
paddle.linalg.svdvals(Tensor([40, 0],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 0],"float64"), )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.logsumexp(Tensor([0, 16, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([0, 4, 16, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([0, 5, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 5],"float32"), axis=None, )
paddle.logsumexp(Tensor([0, 5],"float32"), keepdim=True, )
paddle.logsumexp(Tensor([0, 60],"float32"), axis=1, )
paddle.logsumexp(Tensor([0, 8, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([0],"float32"), )
paddle.logsumexp(Tensor([0],"float32"), axis=0, )
paddle.logsumexp(Tensor([10, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([20, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([26, 0, 16, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 0, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 16, 0, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 16, 4, 0],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 4, 0, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 4, 16, 0],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 8, 0, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 8, 4, 0],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([3, 0],"float32"), axis=None, )
paddle.logsumexp(Tensor([3, 0],"float32"), keepdim=True, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([30, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([4, 0, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([4, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([4, 5, 0],"float64"), list[-1,], False, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=list[0,1,], keepdim=True, )
paddle.masked_scatter(Tensor([0, 1],"float16"), Tensor([0, 40],"bool"), Tensor([0, 300],"float16"), )
paddle.masked_scatter(Tensor([0, 3],"float32"), Tensor([0, 1],"bool"), Tensor([0, 30],"float32"), )
paddle.masked_scatter(Tensor([0, 40],"float16"), Tensor([0, 1],"bool"), Tensor([0, 300],"float16"), )
paddle.masked_scatter(Tensor([0, 40],"float32"), Tensor([0, 1],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([3, 0],"float16"), Tensor([3, 0],"bool"), Tensor([300, 0],"float16"), )
paddle.masked_scatter(Tensor([3, 0],"float16"), Tensor([3, 1],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([3, 0],"float32"), Tensor([3, 0],"bool"), Tensor([300, 0],"float32"), )
paddle.masked_scatter(Tensor([3, 0],"float32"), Tensor([3, 1],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([30, 0],"float32"), Tensor([30, 0],"bool"), Tensor([30, 0],"float32"), )
paddle.masked_scatter(Tensor([30, 0],"float32"), Tensor([30, 1],"bool"), Tensor([30, 30],"float32"), )
paddle.masked_scatter(Tensor([300, 0],"float16"), Tensor([300, 0],"bool"), Tensor([300, 0],"float16"), )
paddle.masked_scatter(Tensor([300, 1],"float16"), Tensor([300, 0],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([50, 0],"float32"), Tensor([50, 0],"bool"), Tensor([300, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 25],"float32"), Tensor([0, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 25],"float32"), Tensor([1, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 26],"float32"), Tensor([0, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 26],"float32"), Tensor([1, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 32],"float32"), Tensor([0, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 32],"float32"), Tensor([1, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([0, 1, 16, 49, 32],"float32"), Tensor([0, 1, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([0, 1, 16, 49, 49],"float32"), Tensor([0, 1, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 5, 2],"float64"), Tensor([0, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float64"), Tensor([1, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([0, 1, 8],"float32"), Tensor([0, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([0, 40, 12],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([0, 40, 6],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([0, 40, 8],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([1, 40, 12],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([1, 40, 6],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([1, 40, 8],"float64"), )
paddle.matmul(Tensor([0, 16, 4, 49, 32],"float32"), Tensor([0, 16, 4, 32, 49],"float32"), )
paddle.matmul(Tensor([0, 16, 512, 16],"float64"), Tensor([0, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 512, 32],"float64"), Tensor([0, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 512, 64],"float64"), Tensor([0, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([0, 17, 256],"float32"), Tensor([0, 256, 102144],"float32"), )
paddle.matmul(Tensor([0, 17, 256],"float32"), Tensor([0, 256, 112896],"float32"), )
paddle.matmul(Tensor([0, 170],"float32"), Tensor([64, 64, 170, 12],"float32"), )
paddle.matmul(Tensor([0, 2, 3],"float64"), Tensor([0, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float64"), Tensor([1, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([0, 23],"float32"), Tensor([512, 23, 2],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float32"), Tensor([0, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([0, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float64"), Tensor([0, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float64"), Tensor([0, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([0, 3],"float64"), Tensor([2, 3, 1],"float64"), )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([0, 4, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([0, 4, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([0, 4, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([1, 4, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([1, 4, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([1, 4, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 3],"float64"), Tensor([0, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float64"), Tensor([0, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([0, 6, 256],"float32"), Tensor([0, 256, 60800],"float32"), )
paddle.matmul(Tensor([0, 6, 256],"float32"), Tensor([1, 256, 60800],"float32"), )
paddle.matmul(Tensor([0, 9, 256],"float32"), Tensor([0, 256, 60800],"float32"), )
paddle.matmul(Tensor([0, 9, 256],"float32"), Tensor([0, 256, 62400],"float32"), )
paddle.matmul(Tensor([0, 9, 256],"float32"), Tensor([1, 256, 60800],"float32"), )
paddle.matmul(Tensor([0, 9, 256],"float32"), Tensor([1, 256, 62400],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 25],"float32"), Tensor([1, 0, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 25],"float32"), Tensor([1, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 26],"float32"), Tensor([1, 0, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 26],"float32"), Tensor([1, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 32],"float32"), Tensor([1, 0, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 32],"float32"), Tensor([1, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 2, 5, 5],"float32"), Tensor([1, 0, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 0, 256],"float32"), Tensor([1, 256, 60800],"float32"), )
paddle.matmul(Tensor([1, 0, 256],"float32"), Tensor([1, 256, 62400],"float32"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([3, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([4, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 0, 25],"float32"), Tensor([1, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 0, 26],"float32"), Tensor([1, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 0, 32],"float32"), Tensor([1, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 25],"float32"), Tensor([0, 1, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 25],"float32"), Tensor([1, 0, 25, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 25],"float32"), Tensor([1, 1, 25, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 26],"float32"), Tensor([0, 1, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 26],"float32"), Tensor([1, 0, 26, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 26],"float32"), Tensor([1, 1, 26, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 32],"float32"), Tensor([0, 1, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 32],"float32"), Tensor([1, 0, 32, 23],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 32],"float32"), Tensor([1, 1, 32, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 768],"float32"), Tensor([768, 0],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 8],"float32"), Tensor([0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 10, 32],"float32"), Tensor([0, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 40, 0],"float64"), )
paddle.matmul(Tensor([1, 11, 512],"float32"), Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 11, 512],"float32"), Tensor([512, 0],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 13, 1024],"float32"), Tensor([0, 1024],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 17, 64],"float32"), Tensor([64, 0],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 3, 0, 5, 5],"float32"), Tensor([1, 3, 0, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 0, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([0, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([1, 3, 2, 5, 0],"float32"), )
paddle.matmul(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 4, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 4, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 4, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 3, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 4, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 5, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([0, 4, 3, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([0, 4, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([0, 4, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 58, 16],"float32"), Tensor([0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 58, 64],"float32"), Tensor([64, 0],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 6, 256],"float32"), Tensor([0, 256, 60800],"float32"), )
paddle.matmul(Tensor([1, 6, 256],"float32"), Tensor([1, 256, 0],"float32"), )
paddle.matmul(Tensor([1, 8, 128],"float32"), Tensor([0, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 9, 256],"float32"), Tensor([0, 256, 60800],"float32"), )
paddle.matmul(Tensor([1, 9, 256],"float32"), Tensor([0, 256, 62400],"float32"), )
paddle.matmul(Tensor([1, 9, 256],"float32"), Tensor([1, 256, 0],"float32"), )
paddle.matmul(Tensor([1000, 2],"float32"), y=Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([104, 128],"float32"), Tensor([128, 0],"float32"), )
paddle.matmul(Tensor([128, 0, 16, 49, 32],"float32"), Tensor([128, 0, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 0, 16, 49, 32],"float32"), Tensor([128, 1, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 0, 16, 49, 49],"float32"), Tensor([128, 0, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 0, 16, 49, 49],"float32"), Tensor([128, 1, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 0, 4, 49, 32],"float32"), Tensor([128, 0, 4, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 1, 0, 49, 32],"float32"), Tensor([128, 1, 0, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 1, 0, 49, 49],"float32"), Tensor([128, 1, 0, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 0, 32],"float32"), Tensor([128, 1, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 0, 49],"float32"), Tensor([128, 1, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 49, 32],"float32"), Tensor([128, 0, 16, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 49, 32],"float32"), Tensor([128, 1, 16, 32, 0],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 49, 49],"float32"), Tensor([128, 0, 16, 49, 32],"float32"), )
paddle.matmul(Tensor([128, 1, 16, 49, 49],"float32"), Tensor([128, 1, 16, 49, 0],"float32"), )
paddle.matmul(Tensor([128, 128],"float32"), Tensor([128, 0],"float32"), )
paddle.matmul(Tensor([128, 16, 0, 49, 32],"float32"), Tensor([128, 16, 0, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 16, 4, 0, 32],"float32"), Tensor([128, 16, 4, 32, 49],"float32"), )
paddle.matmul(Tensor([128, 16, 4, 49, 32],"float32"), Tensor([128, 16, 4, 32, 0],"float32"), )
paddle.matmul(Tensor([16, 0, 512, 16],"float64"), Tensor([16, 0, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 32],"float64"), Tensor([16, 0, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 64],"float64"), Tensor([16, 0, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 16],"float64"), Tensor([16, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 32],"float64"), Tensor([16, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 64],"float64"), Tensor([16, 16, 0, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 64],"float64"), Tensor([16, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 0],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 16],"float64"), Tensor([16, 16, 0, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 32],"float64"), Tensor([16, 16, 0, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 64],"float64"), Tensor([16, 16, 0, 64],"float64"), False, True, )
paddle.matmul(Tensor([170, 170],"float32"), Tensor([0, 64, 170, 12],"float32"), )
paddle.matmul(Tensor([170, 170],"float32"), Tensor([64, 0, 170, 12],"float32"), )
paddle.matmul(Tensor([170, 170],"float32"), Tensor([64, 64, 170, 0],"float32"), )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([1, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 0, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([2, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 0, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 0, 5, 2],"float64"), Tensor([1, 0, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float64"), Tensor([1, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([1, 0, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([1, 3, 2, 0],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 64],"float32"), Tensor([0, 64],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([1, 3, 0],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([2, 3, 0],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float64"), Tensor([2, 5, 0],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 1, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 4, 0],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 0, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 4, 0],"float64"), False, False, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 4, 0],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 0, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 4, 0],"float64"), True, False, )
paddle.matmul(Tensor([200, 2],"float32"), y=Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([23, 23],"float32"), Tensor([0, 23, 2],"float32"), )
paddle.matmul(Tensor([23, 23],"float32"), Tensor([512, 23, 0],"float32"), )
paddle.matmul(Tensor([250, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([0, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([2, 3, 0],"float64"), )
paddle.matmul(Tensor([3200, 23],"float32"), Tensor([0, 23, 2],"float32"), )
paddle.matmul(Tensor([3200, 23],"float32"), Tensor([512, 23, 0],"float32"), )
paddle.matmul(Tensor([4, 0, 256],"float32"), Tensor([4, 256, 102144],"float32"), )
paddle.matmul(Tensor([4, 0, 256],"float32"), Tensor([4, 256, 112896],"float32"), )
paddle.matmul(Tensor([4, 17, 256],"float32"), Tensor([4, 256, 0],"float32"), )
paddle.matmul(Tensor([52, 0, 128],"float32"), Tensor([52, 0, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([52, 0, 128],"float32"), Tensor([52, 7, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([52, 7, 0],"float32"), Tensor([52, 7, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([52, 7, 128],"float32"), Tensor([52, 0, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 8],"float32"), Tensor([8, 0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 8],"float32"), Tensor([8, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 4, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([8, 0, 8],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([0, 16, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([0, 16, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([0, 16, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([1, 16, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([1, 16, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([1, 16, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 4, 12, 4],"float32"), y=Tensor([0, 4, 4, 12],"float32"), )
paddle.matmul(x=Tensor([0, 4, 38, 38],"float32"), y=Tensor([0, 4, 38, 256],"float32"), )
paddle.matmul(x=Tensor([0, 4, 9, 9],"float32"), y=Tensor([0, 4, 9, 64],"float32"), )
paddle.matmul(x=Tensor([1, 0, 1, 64],"float32"), y=Tensor([1, 0, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 0, 1, 64],"float32"), y=Tensor([1, 0, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 0, 1, 64],"float32"), y=Tensor([1, 0, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 0, 64],"float32"), y=Tensor([1, 16, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 0, 64],"float32"), y=Tensor([1, 16, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 0, 64],"float32"), y=Tensor([1, 16, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 0],"float32"), y=Tensor([1, 16, 101, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 0],"float32"), y=Tensor([1, 16, 102, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 0],"float32"), y=Tensor([1, 16, 103, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([0, 16, 101, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([0, 16, 102, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([0, 16, 103, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([100, 0, 38, 38],"float32"), y=Tensor([100, 0, 38, 256],"float32"), )
paddle.matmul(x=Tensor([100, 0, 9, 9],"float32"), y=Tensor([100, 0, 9, 64],"float32"), )
paddle.matmul(x=Tensor([100, 4, 0, 38],"float32"), y=Tensor([100, 4, 38, 256],"float32"), )
paddle.matmul(x=Tensor([100, 4, 0, 9],"float32"), y=Tensor([100, 4, 9, 64],"float32"), )
paddle.matmul(x=Tensor([100, 4, 38, 38],"float32"), y=Tensor([100, 4, 38, 0],"float32"), )
paddle.matmul(x=Tensor([100, 4, 9, 9],"float32"), y=Tensor([100, 4, 9, 0],"float32"), )
paddle.matmul(x=Tensor([104, 28, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 30, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 31, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 32, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([13, 0, 12, 4],"float32"), y=Tensor([13, 0, 4, 12],"float32"), )
paddle.matmul(x=Tensor([13, 4, 0, 4],"float32"), y=Tensor([13, 4, 4, 12],"float32"), )
paddle.matmul(x=Tensor([13, 4, 12, 4],"float32"), y=Tensor([13, 4, 4, 0],"float32"), )
paddle.matmul(x=Tensor([8, 24],"float32"), y=Tensor([24, 0],"float32"), )
paddle.max(Tensor([0, 1024, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.max(Tensor([0, 50, 7, 256],"float32"), axis=1, )
paddle.max(Tensor([0, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 5],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 5],"float64"), axis=1, )
paddle.max(Tensor([1, 0, 8],"float32"), axis=list[0,], )
paddle.max(Tensor([1, 32, 0],"float32"), axis=list[0,], )
paddle.max(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([0],"int64"),Tensor([1],"int64"),], )
paddle.max(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([0],"int64"),], )
paddle.max(Tensor([10, 5, 0, 9],"float64"), Tensor([2],"int64"), )
paddle.max(Tensor([10, 5, 9, 0],"float64"), Tensor([2],"int64"), )
paddle.max(Tensor([2, 0],"float32"), axis=0, )
paddle.max(Tensor([2, 0],"int32"), axis=0, )
paddle.max(Tensor([20, 4, 0],"int32"), axis=1, )
paddle.max(Tensor([30, 4, 0],"int32"), axis=1, )
paddle.max(Tensor([4, 4, 0],"int32"), axis=1, )
paddle.max(Tensor([416, 50, 0, 256],"float32"), axis=1, )
paddle.max(Tensor([416, 50, 7, 0],"float32"), axis=1, )
paddle.max(Tensor([512, 50, 0, 256],"float32"), axis=1, )
paddle.max(Tensor([512, 50, 7, 0],"float32"), axis=1, )
paddle.max(Tensor([52, 50, 0, 256],"float32"), axis=1, )
paddle.max(Tensor([52, 50, 7, 0],"float32"), axis=1, )
paddle.max(Tensor([8, 0, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(x=Tensor([0, 3],"float32"), axis=Tensor([1],"int64"), )
paddle.median(Tensor([0, 4, 2],"int32"), -1, False, )
paddle.median(Tensor([0, 4, 2],"int32"), -1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), -1, True, )
paddle.median(Tensor([0, 4, 2],"int32"), -1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), 1, False, )
paddle.median(Tensor([0, 4, 2],"int32"), 1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), 1, True, )
paddle.median(Tensor([0, 4, 2],"int32"), 1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), 2, False, )
paddle.median(Tensor([0, 4, 2],"int32"), 2, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int32"), 2, True, )
paddle.median(Tensor([0, 4, 2],"int32"), 2, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), -1, False, )
paddle.median(Tensor([0, 4, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), -1, True, )
paddle.median(Tensor([0, 4, 2],"int64"), -1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), 1, False, )
paddle.median(Tensor([0, 4, 2],"int64"), 1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), 1, True, )
paddle.median(Tensor([0, 4, 2],"int64"), 1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), 2, False, )
paddle.median(Tensor([0, 4, 2],"int64"), 2, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"int64"), 2, True, )
paddle.median(Tensor([0, 4, 2],"int64"), 2, True, mode="min", )
paddle.median(Tensor([0, 4, 5],"int32"), mode="min", )
paddle.median(Tensor([0, 4, 5],"int64"), mode="min", )
paddle.median(Tensor([0, 4],"float16"), -1, False, )
paddle.median(Tensor([0, 4],"float16"), -1, False, mode="min", )
paddle.median(Tensor([0, 4],"float16"), -1, True, )
paddle.median(Tensor([0, 4],"float16"), -1, True, mode="min", )
paddle.median(Tensor([0, 4],"float16"), 1, False, )
paddle.median(Tensor([0, 4],"float16"), 1, False, mode="min", )
paddle.median(Tensor([0, 4],"float16"), 1, True, )
paddle.median(Tensor([0, 4],"float16"), 1, True, mode="min", )
paddle.median(Tensor([0, 4],"float16"), None, False, mode="min", )
paddle.median(Tensor([0, 4],"float16"), None, True, mode="min", )
paddle.median(Tensor([0, 4],"float32"), None, True, mode="min", )
paddle.median(Tensor([0, 4],"float64"), -1, False, )
paddle.median(Tensor([0, 4],"float64"), -1, False, mode="min", )
paddle.median(Tensor([0, 4],"float64"), -1, True, )
paddle.median(Tensor([0, 4],"float64"), -1, True, mode="min", )
paddle.median(Tensor([0, 4],"float64"), 1, False, )
paddle.median(Tensor([0, 4],"float64"), 1, False, mode="min", )
paddle.median(Tensor([0, 4],"float64"), 1, True, )
paddle.median(Tensor([0, 4],"float64"), 1, True, mode="min", )
paddle.median(Tensor([0, 4],"float64"), None, False, mode="min", )
paddle.median(Tensor([0, 4],"float64"), None, True, mode="min", )
paddle.median(Tensor([2, 0, 5],"int32"), mode="min", )
paddle.median(Tensor([2, 0, 5],"int64"), mode="min", )
paddle.median(Tensor([2, 4, 0],"int32"), mode="min", )
paddle.median(Tensor([2, 4, 0],"int64"), mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), -1, False, )
paddle.median(Tensor([3, 0, 2],"int32"), -1, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), -1, True, )
paddle.median(Tensor([3, 0, 2],"int32"), -1, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), 0, False, )
paddle.median(Tensor([3, 0, 2],"int32"), 0, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), 0, True, )
paddle.median(Tensor([3, 0, 2],"int32"), 0, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), 2, False, )
paddle.median(Tensor([3, 0, 2],"int32"), 2, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int32"), 2, True, )
paddle.median(Tensor([3, 0, 2],"int32"), 2, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), -1, False, )
paddle.median(Tensor([3, 0, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), -1, True, )
paddle.median(Tensor([3, 0, 2],"int64"), -1, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), 0, False, )
paddle.median(Tensor([3, 0, 2],"int64"), 0, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), 0, True, )
paddle.median(Tensor([3, 0, 2],"int64"), 0, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), 2, False, )
paddle.median(Tensor([3, 0, 2],"int64"), 2, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"int64"), 2, True, )
paddle.median(Tensor([3, 0, 2],"int64"), 2, True, mode="min", )
paddle.median(Tensor([3, 0],"float16"), 0, False, )
paddle.median(Tensor([3, 0],"float16"), 0, False, mode="min", )
paddle.median(Tensor([3, 0],"float16"), 0, True, )
paddle.median(Tensor([3, 0],"float16"), 0, True, mode="min", )
paddle.median(Tensor([3, 0],"float16"), None, False, mode="min", )
paddle.median(Tensor([3, 0],"float16"), None, True, mode="min", )
paddle.median(Tensor([3, 0],"float64"), 0, False, )
paddle.median(Tensor([3, 0],"float64"), 0, True, )
paddle.median(Tensor([3, 4, 0],"int32"), 0, False, )
paddle.median(Tensor([3, 4, 0],"int32"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"int32"), 0, True, )
paddle.median(Tensor([3, 4, 0],"int32"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"int32"), 1, False, )
paddle.median(Tensor([3, 4, 0],"int32"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"int32"), 1, True, )
paddle.median(Tensor([3, 4, 0],"int32"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"int64"), 0, False, )
paddle.median(Tensor([3, 4, 0],"int64"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"int64"), 0, True, )
paddle.median(Tensor([3, 4, 0],"int64"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"int64"), 1, False, )
paddle.median(Tensor([3, 4, 0],"int64"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"int64"), 1, True, )
paddle.median(Tensor([3, 4, 0],"int64"), 1, True, mode="min", )
paddle.median(Tensor([5, 0],"float32"), None, True, mode="min", )
paddle.median(Tensor([5, 0],"float64"), 0, False, mode="min", )
paddle.median(Tensor([5, 0],"float64"), 0, True, mode="min", )
paddle.median(Tensor([5, 0],"float64"), None, False, mode="min", )
paddle.median(Tensor([5, 0],"float64"), None, True, mode="min", )
paddle.min(Tensor([0, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([0],"int64"),Tensor([1],"int64"),], )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([0],"int64"),], )
paddle.min(Tensor([8, 0],"float64"), axis=0, )
paddle.mm(Tensor([0, 1, 256],"float32"), Tensor([0, 256, 512],"float32"), )
paddle.mm(Tensor([0, 6, 49, 32],"float32"), Tensor([0, 6, 32, 49],"float32"), )
paddle.mm(Tensor([0, 6, 49, 49],"float32"), Tensor([0, 6, 49, 32],"float32"), )
paddle.mm(Tensor([0, 8, 144, 144],"float32"), Tensor([0, 8, 144, 32],"float32"), )
paddle.mm(Tensor([1, 12],"float32"), Tensor([12, 0],"float32"), )
paddle.mm(Tensor([10, 20],"float64"), Tensor([20, 0],"float64"), )
paddle.mm(Tensor([1024, 0, 144, 144],"float32"), Tensor([1024, 0, 144, 32],"float32"), )
paddle.mm(Tensor([1024, 6, 0, 32],"float32"), Tensor([1024, 6, 32, 49],"float32"), )
paddle.mm(Tensor([1024, 6, 0, 49],"float32"), Tensor([1024, 6, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 6, 49, 32],"float32"), Tensor([1024, 6, 32, 0],"float32"), )
paddle.mm(Tensor([1024, 6, 49, 49],"float32"), Tensor([1024, 6, 49, 0],"float32"), )
paddle.mm(Tensor([1024, 8, 0, 144],"float32"), Tensor([1024, 8, 144, 32],"float32"), )
paddle.mm(Tensor([1024, 8, 144, 144],"float32"), Tensor([1024, 8, 144, 0],"float32"), )
paddle.mm(Tensor([16, 32],"float32"), Tensor([32, 0],"float32"), )
paddle.mm(Tensor([4, 0, 256],"float32"), Tensor([4, 256, 512],"float32"), )
paddle.mm(Tensor([4, 1, 256],"float32"), Tensor([4, 256, 0],"float32"), )
paddle.mm(Tensor([8, 0, 256],"float32"), Tensor([8, 256, 512],"float32"), )
paddle.mm(Tensor([8, 1, 256],"float32"), Tensor([8, 256, 0],"float32"), )
paddle.mode(x=Tensor([0, 2, 3],"int32"), )
paddle.mode(x=Tensor([0, 2, 3],"int64"), )
paddle.mode(x=Tensor([3, 0, 3],"int32"), )
paddle.mode(x=Tensor([3, 0, 3],"int64"), )
paddle.multiplex(inputs=list[Tensor([0, 3],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([0, 4],"float32"),Tensor([2, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 0],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([0, 3],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([2, 0],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),Tensor([0, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),Tensor([2, 0],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 4],"float32"),Tensor([0, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 4],"float32"),Tensor([2, 0],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 3],"float32"),Tensor([0, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 0],"float32"),Tensor([4, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 0],"float32"),Tensor([4, 4],"float32"),], index=Tensor([4, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 0],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.mv(Tensor([0, 12],"float32"), Tensor([12],"float32"), )
paddle.mv(Tensor([0, 18],"float32"), Tensor([18],"float32"), )
paddle.mv(Tensor([0, 6],"float32"), Tensor([6],"float32"), )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([0, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([0],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([0],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([4, 0],"float64"), keepdim=True, mode="min", )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([128, 16],"float32"), Tensor([0],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([4, 8],"float32"), Tensor([0],"int64"), Tensor([8, 3],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([8, 8],"float32"), Tensor([0],"int64"), Tensor([8, 3],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float32"), Tensor([0],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float64"), Tensor([0],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([0],"int64"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([0],"int32"), align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([0],"int32"), align_corners=True, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.batch_norm(Tensor([0, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 128, 1152],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([0, 128, 256],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([0, 128, 512],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([0, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 24, 16, 8],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1, 0, 1152],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 0, 256],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 0, 512],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 128, 0],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 0, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 24, 0, 8],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 24, 16, 0],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), Tensor([24],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 0, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 0, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 0, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 0, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 16, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 0, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 16, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 1, 2],"float64"), label=Tensor([0, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 13125, 1],"float32"), Tensor([0, 13125, 1],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 2, 4],"float32"), Tensor([0, 2, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), None, "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 3, 11, 11, 1],"float32"), Tensor([0, 3, 11, 11, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 3, 12, 12, 1],"float32"), Tensor([0, 3, 12, 12, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 3, 13, 13, 1],"float32"), Tensor([0, 3, 13, 13, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 3, 14, 14, 1],"float32"), Tensor([0, 3, 14, 14, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 3, 4],"float32"), Tensor([0, 3, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), None, "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), None, "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), None, "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 4725, 1],"float32"), Tensor([0, 4725, 1],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 5376, 1],"float32"), Tensor([0, 5376, 1],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 6804, 1],"float32"), Tensor([0, 6804, 1],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 7, 4],"float32"), Tensor([0, 7, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 80],"float32"), Tensor([0, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([0, 9261, 1],"float32"), Tensor([0, 9261, 1],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 0, 2],"float64"), label=Tensor([1, 0, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy(Tensor([1, 1, 0],"float64"), label=Tensor([1, 1, 0],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1000, 0],"float32"), Tensor([1000, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([10000, 0],"float32"), Tensor([10000, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1003, 0, 4],"float32"), Tensor([1003, 0, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1003, 7, 0],"float32"), Tensor([1003, 7, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([101, 0],"float32"), Tensor([101, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([102, 0],"float32"), Tensor([102, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([1021, 0, 4],"float32"), Tensor([1021, 0, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1021, 2, 0],"float32"), Tensor([1021, 2, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1038, 0, 4],"float32"), Tensor([1038, 0, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1038, 3, 0],"float32"), Tensor([1038, 3, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1041, 0, 4],"float32"), Tensor([1041, 0, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1041, 2, 0],"float32"), Tensor([1041, 2, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1043, 0, 4],"float32"), Tensor([1043, 0, 4],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([1043, 2, 0],"float32"), Tensor([1043, 2, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([107, 0],"float32"), Tensor([107, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([108, 0],"float32"), Tensor([108, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([110, 0],"float32"), Tensor([110, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 0, 10, 10, 1],"float32"), Tensor([2, 0, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 0, 11, 11, 1],"float32"), Tensor([2, 0, 11, 11, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 0, 12, 12, 1],"float32"), Tensor([2, 0, 12, 12, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 0, 13, 13, 1],"float32"), Tensor([2, 0, 13, 13, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 0, 14, 14, 1],"float32"), Tensor([2, 0, 14, 14, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 0, 1],"float32"), Tensor([2, 0, 1],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 0, 10, 1],"float32"), Tensor([2, 3, 0, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 0, 11, 1],"float32"), Tensor([2, 3, 0, 11, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 0, 12, 1],"float32"), Tensor([2, 3, 0, 12, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 0, 13, 1],"float32"), Tensor([2, 3, 0, 13, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 0, 14, 1],"float32"), Tensor([2, 3, 0, 14, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 10, 0, 1],"float32"), Tensor([2, 3, 10, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 10, 10, 0],"float32"), Tensor([2, 3, 10, 10, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 11, 0, 1],"float32"), Tensor([2, 3, 11, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 11, 11, 0],"float32"), Tensor([2, 3, 11, 11, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 12, 0, 1],"float32"), Tensor([2, 3, 12, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 12, 12, 0],"float32"), Tensor([2, 3, 12, 12, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 13, 0, 1],"float32"), Tensor([2, 3, 13, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 13, 13, 0],"float32"), Tensor([2, 3, 13, 13, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 14, 0, 1],"float32"), Tensor([2, 3, 14, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 14, 14, 0],"float32"), Tensor([2, 3, 14, 14, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 4725, 0],"float32"), Tensor([2, 4725, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 9261, 0],"float32"), Tensor([2, 9261, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), None, "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), None, "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), None, "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([4, 0, 1],"float32"), Tensor([4, 0, 1],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([4, 5376, 0],"float32"), Tensor([4, 5376, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([4, 6804, 0],"float32"), Tensor([4, 6804, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), None, "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([8, 0, 1],"float32"), Tensor([8, 0, 1],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([8, 13125, 0],"float32"), Tensor([8, 13125, 0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1, 2],"float64"), label=Tensor([0, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1, 30, 30],"float32"), Tensor([0, 1, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1000],"float32"), Tensor([0, 1000],"float32"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 12544],"float32"), Tensor([0, 12544],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 160, 160],"float32"), Tensor([0, 160, 160],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 200, 80],"float32"), Tensor([0, 200, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 10, 10, 80],"float32"), Tensor([0, 3, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 20, 20, 1],"float32"), Tensor([0, 3, 20, 20, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 20, 20, 80],"float32"), Tensor([0, 3, 20, 20, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 40, 40, 1],"float32"), Tensor([0, 3, 40, 40, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 300, 80],"float32"), Tensor([0, 300, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), None, "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), weight=None, reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), weight=None, reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 80],"float32"), Tensor([0, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 900, 80],"float32"), Tensor([0, 900, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0],"float32"), Tensor([0],"float32"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0],"float32"), Tensor([0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 2],"float64"), label=Tensor([1, 0, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 30, 30],"float32"), Tensor([1, 0, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 0, 30],"float32"), Tensor([1, 1, 0, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 0],"float64"), label=Tensor([1, 1, 0],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 30, 0],"float32"), Tensor([1, 1, 30, 0],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10032, 0],"float32"), Tensor([10032, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([100352, 0],"float32"), Tensor([100352, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1024, 0],"float32"), Tensor([1024, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 0, 10, 10, 1],"float32"), Tensor([12, 0, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 0, 10, 10, 80],"float32"), Tensor([12, 0, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 0, 20, 20, 1],"float32"), Tensor([12, 0, 20, 20, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 0, 20, 20, 80],"float32"), Tensor([12, 0, 20, 20, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 0, 40, 40, 1],"float32"), Tensor([12, 0, 40, 40, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 0, 10, 1],"float32"), Tensor([12, 3, 0, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 0, 10, 80],"float32"), Tensor([12, 3, 0, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 0, 20, 1],"float32"), Tensor([12, 3, 0, 20, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 0, 20, 80],"float32"), Tensor([12, 3, 0, 20, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 0, 40, 1],"float32"), Tensor([12, 3, 0, 40, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 0, 1],"float32"), Tensor([12, 3, 10, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 0, 80],"float32"), Tensor([12, 3, 10, 0, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 20, 0, 1],"float32"), Tensor([12, 3, 20, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 20, 0, 80],"float32"), Tensor([12, 3, 20, 0, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 20, 20, 0],"float32"), Tensor([12, 3, 20, 20, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 40, 0, 1],"float32"), Tensor([12, 3, 40, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 40, 40, 0],"float32"), Tensor([12, 3, 40, 40, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 0, 160],"float32"), Tensor([13, 0, 160],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 0],"float32"), Tensor([13, 0],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 160, 0],"float32"), Tensor([13, 160, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 80],"float32"), Tensor([2, 0, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 200, 0],"float32"), Tensor([2, 200, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 300, 0],"float32"), Tensor([2, 300, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 900, 0],"float32"), Tensor([2, 900, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), None, "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), weight=None, reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), weight=None, reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 0],"float32"), Tensor([300, 0],"float32"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([459, 0],"float32"), Tensor([459, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([465, 0],"float32"), Tensor([465, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([512, 0],"float32"), Tensor([512, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0, 19],"float32"), label=Tensor([0, 19],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0, 1],"float32"), label=Tensor([0, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0, 26],"float32"), label=Tensor([0, 26],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0],"float32"), label=Tensor([0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([2, 0],"float32"), label=Tensor([2, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([64, 0],"float32"), label=Tensor([64, 0],"float32"), reduction="none", )
paddle.nn.functional.conv1d(Tensor([0, 1, 25500],"float32"), Tensor([64, 1, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 20, 2048],"float32"), Tensor([256, 20, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 200, 1],"float32"), Tensor([256, 1, 4],"float32"), bias=Tensor([256],"float32"), padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 256, 2048],"float32"), Tensor([20, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 2048],"float32"), Tensor([256, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float32"), Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([1, 32, 7],"float32"), bias=Tensor([1],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 11],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 3],"float32"), bias=Tensor([32],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 1792],"float32"), Tensor([32, 32, 7],"float32"), bias=Tensor([32],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 62],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 384, 3000],"float32"), Tensor([384, 384, 3],"float32"), bias=Tensor([384],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 400, 100],"float32"), Tensor([256, 100, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 512, 3000],"float32"), Tensor([512, 512, 3],"float32"), bias=Tensor([512],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([1, 64, 1],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([64, 64, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 3],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 11],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 3],"float32"), bias=Tensor([64],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 448],"float32"), Tensor([64, 64, 7],"float32"), bias=Tensor([64],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 7],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 768, 3000],"float32"), Tensor([768, 768, 3],"float32"), bias=Tensor([768],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 80, 25500],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 80, 3000],"float32"), Tensor([1024, 80, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 2048],"float32"), Tensor([20, 0, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 2048],"float32"), Tensor([256, 0, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 62],"float32"), Tensor([32, 0, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 0, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float64"), weight=Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 293],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 389],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 421],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 11, 11],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 259, 259],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 260, 260],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 36, 36],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 67, 67],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 69, 357],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 69, 453],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 69, 517],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 69, 549],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 69, 613],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 128, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 2, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 2, 34],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 2, 36],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 256, 256],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 256, 256],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 36],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 48],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 52],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 56],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 17, 153],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 17, 169],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 25, 113],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 255, 255],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 128, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 257, 257],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 128, 8, 68],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 8, 84],"float32"), Tensor([512, 128, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 32, 32],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 32, 32],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 4, 4],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 4, 4],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 64, 64],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 64, 64],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 8, 8],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 24, 8, 8],"float32"), Tensor([96, 24, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 256, 127, 127],"float32"), Tensor([512, 256, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 256, 129, 129],"float32"), Tensor([512, 256, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 256, 16, 104],"float32"), Tensor([128, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 256, 16, 104],"float32"), Tensor([64, 256, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 256, 16, 160],"float32"), Tensor([512, 256, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 3, 256, 256],"float32"), Tensor([128, 3, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 3, 284, 284],"float32"), weight=Tensor([3, 1, 29, 29],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([0, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([32],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 384, 2, 2],"float32"), Tensor([96, 384, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 4096, 16, 16],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 16, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 32, 32],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 32, 32],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 4, 4],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 4, 4],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 64, 64],"float32"), Tensor([24, 512, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 64, 64],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 4096, 8, 8],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 48, 4, 4],"float32"), Tensor([192, 48, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 48, 9, 9],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 512, 15, 15],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 16, 16],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 17, 17],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 256, 256],"float32"), Tensor([12, 128, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 512, 256, 256],"float32"), Tensor([512, 128, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 512, 31, 31],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 32, 32],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 32, 32],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 32, 32],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 33, 33],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 4, 4],"float32"), Tensor([3, 512, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 4, 4],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 63, 63],"float32"), Tensor([512, 512, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 512, 64, 64],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 64, 64],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 8, 8],"float32"), Tensor([512, 512, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 512, 8, 8],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 513, 4, 4],"float32"), Tensor([512, 513, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 64, 16, 104],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 64, 16, 112],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 64, 16, 120],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 64, 16, 128],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 64, 16, 136],"float32"), Tensor([64, 64, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 8, 2, 2],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 8, 8, 8],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 8, 8, 8],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 96, 2, 2],"float32"), Tensor([96, 96, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 96, 5, 5],"float32"), Tensor([96, 96, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 96, 8, 8],"float32"), Tensor([192, 96, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 293],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 389],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 421],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 36],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 48],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 52],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([1024, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([256, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 2, 32],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 2, 34],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 2, 36],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([1024, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([128, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 4, 4],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 64, 64],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 8, 8],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 8, 8],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 8, 8],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([10, 0, 16, 136],"float32"), Tensor([64, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 0, 69, 357],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 0, 69, 517],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([10, 0, 69, 549],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1024, 0, 259, 259],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 0, 260, 260],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([12, 0, 11, 11],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([16, 0, 284, 284],"float32"), weight=Tensor([3, 0, 29, 29],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([2, 0, 2, 2],"float32"), Tensor([96, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 2, 2],"float32"), Tensor([96, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([192, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([96, 0, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 8, 8],"float32"), Tensor([192, 0, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 8, 8],"float32"), Tensor([96, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 9, 9],"float32"), Tensor([48, 0, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([24, 0, 67, 67],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([3, 0, 2, 2],"float32"), Tensor([8, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 8, 8],"float32"), Tensor([8, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 8, 8],"float32"), Tensor([8, 0, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([30, 0, 12, 56],"float32"), Tensor([512, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 16, 104],"float32"), Tensor([128, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 16, 104],"float32"), Tensor([64, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 16, 104],"float32"), Tensor([64, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 16, 112],"float32"), Tensor([64, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 16, 120],"float32"), Tensor([64, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 16, 128],"float32"), Tensor([64, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 16, 160],"float32"), Tensor([512, 0, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 17, 153],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 17, 169],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 25, 113],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 8, 68],"float32"), Tensor([512, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([30, 0, 8, 84],"float32"), Tensor([512, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([4096, 0, 36, 36],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([7, 0, 69, 613],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 127, 127],"float32"), Tensor([512, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 128, 128],"float32"), Tensor([256, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 129, 129],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 15, 15],"float32"), Tensor([512, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 16, 16],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 17, 17],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 255, 255],"float32"), Tensor([256, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 256, 256],"float32"), Tensor([128, 0, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 256, 256],"float32"), Tensor([128, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 257, 257],"float32"), Tensor([256, 0, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 31, 31],"float32"), Tensor([512, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 32, 32],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 33, 33],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 4, 4],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 63, 63],"float32"), Tensor([512, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 64, 64],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 69, 453],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 8, 8],"float32"), Tensor([512, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 36, 3, 3],"float32"), weight=Tensor([36, 36, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([100, 0, 3, 3],"float32"), weight=Tensor([36, 0, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([227, 0, 3, 3],"float32"), weight=Tensor([36, 0, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([256, 0, 3, 3],"float32"), weight=Tensor([36, 0, 1, 1],"float32"), )
paddle.nn.functional.conv2d(x=Tensor([82, 0, 3, 3],"float32"), weight=Tensor([36, 0, 1, 1],"float32"), )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 4, 4],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 8, 8],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([2, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 32, 32],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 4, 4],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 64, 64],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 8, 8],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 32, 32],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 4, 4],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 64, 64],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 8, 8],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 32, 32],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 4, 4],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 64, 64],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float32"), Tensor([128, 0, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([0],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 216],"float32"), Tensor([64, 0, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([24, 66, 128, 128],"float32"), Tensor([66, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 94, 70],"float32"), Tensor([128, 0, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 124, 108],"float32"), Tensor([256, 0, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 64, 64],"float32"), Tensor([256, 0, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 64, 64],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 188, 140],"float32"), Tensor([64, 0, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 128, 64, 64],"float32"), Tensor([128, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 0, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([0],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 0, 4],"float64"), x2=Tensor([2, 0, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cross_entropy(Tensor([0, 1000],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([0, 100],"float32"), Tensor([0, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(Tensor([0, 1024, 151936],"float32"), Tensor([0, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 1024, 50257],"float32"), Tensor([0, 1024, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 102],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([0, 10],"float32"), Tensor([0, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(Tensor([0, 10],"float32"), Tensor([0, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 10],"float32"), Tensor([0, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 20, 100],"float32"), Tensor([0, 20, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 2048, 125696],"float32"), Tensor([0, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 2048, 151936],"float32"), Tensor([0, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 2048, 32000],"float32"), Tensor([0, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 2048, 65024],"float32"), Tensor([0, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 20],"float32"), Tensor([0, 1],"int64"), reduction="none", use_softmax=True, )
paddle.nn.functional.cross_entropy(Tensor([0, 212],"float32"), Tensor([0, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 22400, 2],"float32"), Tensor([0, 22400, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([0, 2],"float32"), Tensor([0, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([0, 2],"float32"), label=Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([0, 30, 10],"float32"), Tensor([0, 30, 1],"int64"), soft_label=False, ignore_index=4, reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(Tensor([0, 30522],"float32"), Tensor([0, 1],"int64"), reduction="none", ignore_index=-1, )
paddle.nn.functional.cross_entropy(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), soft_label=True, axis=-1, weight=None, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), soft_label=True, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), soft_label=True, label_smoothing=0.5986189939413826, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([0, 400],"float32"), Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([0, 400],"float32"), Tensor([0, 400],"float32"), soft_label=True, )
paddle.nn.functional.cross_entropy(Tensor([0, 58, 32000],"float32"), Tensor([0, 58, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 5],"float32"), Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([0, 5],"float32"), Tensor([0, 5],"float32"), soft_label=True, )
paddle.nn.functional.cross_entropy(Tensor([0, 7, 99],"float32"), Tensor([0, 7, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 7, 99],"float32"), Tensor([0, 7, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([0, 93431],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 125696],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 151936],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 32000],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 50257],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0, 65024],"float32"), Tensor([1, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0],"float16"), Tensor([1, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1, 0],"float32"), Tensor([1, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1, 0],"float32"), Tensor([1, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(Tensor([1, 0],"float32"), Tensor([1, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 0],"float32"), label=Tensor([1, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1, 1024, 0],"float16"), Tensor([1, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 1024, 0],"float32"), Tensor([1, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 1024, 0],"float32"), Tensor([1, 1024, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 2048, 0],"float32"), Tensor([1, 2048, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 4, 0],"float32"), Tensor([1, 4],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([1, 58, 0],"float32"), Tensor([1, 58, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([10, 0],"float16"), Tensor([10],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([10, 0],"float32"), Tensor([10],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([10, 0],"float32"), Tensor([10],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([10, 4, 0],"float32"), Tensor([10, 4],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float16"), Tensor([100],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float32"), Tensor([100],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=None, ignore_index=-1, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), ignore_index=0, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 0],"float64"), Tensor([100],"int64"), weight=Tensor([200],"float64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([100, 4, 0],"float16"), Tensor([100, 4],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([100, 4, 0],"float32"), Tensor([100, 4],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([1000, 0],"float16"), Tensor([1000],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([1000, 0],"float32"), Tensor([1000],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([10008, 0],"float16"), Tensor([10008],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([10008, 0],"float32"), Tensor([10008],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([1004, 0],"float16"), Tensor([1004],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([1006, 0],"float16"), Tensor([1006],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1006, 0],"float32"), Tensor([1006],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1008, 0],"float16"), Tensor([1008],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([10080, 0],"float32"), Tensor([10080],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([101, 0],"float16"), Tensor([101, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([101, 0],"float16"), Tensor([101],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([101, 0],"float32"), Tensor([101, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([101, 0],"float32"), Tensor([101],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1015, 0],"float16"), Tensor([1015],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1015, 0],"float32"), Tensor([1015],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([10170, 0],"float32"), Tensor([10170],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1018, 0],"float16"), Tensor([1018],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1018, 0],"float32"), Tensor([1018],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([102, 0],"float16"), Tensor([102, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([102, 0],"float32"), Tensor([102, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1020, 0],"float32"), Tensor([1020],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([104, 0],"float16"), Tensor([104, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([104, 0],"float32"), Tensor([104, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([104, 0],"float32"), label=Tensor([104, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1040, 0],"float16"), Tensor([1040, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1040, 0],"float32"), Tensor([1040, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([105, 0],"float16"), Tensor([105, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([105, 0],"float32"), Tensor([105, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([12, 0],"float32"), Tensor([12],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([12, 0],"float32"), Tensor([12],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([124, 0],"float32"), label=Tensor([124, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([128, 0],"float16"), label=Tensor([128, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([128, 0],"float32"), Tensor([128, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(Tensor([128, 0],"float32"), label=Tensor([128, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([13, 0, 99],"float32"), Tensor([13, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([14, 0, 99],"float32"), Tensor([14, 0, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([14, 0],"float16"), Tensor([14, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([14, 0],"float32"), Tensor([14, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([14, 7, 0],"float32"), Tensor([14, 7, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([14, 7, 0],"float32"), Tensor([14, 7],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([14800, 0],"float32"), Tensor([14800],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1536, 0],"float16"), label=Tensor([1536, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([1536, 0],"float32"), Tensor([1536],"int64"), weight=None, ignore_index=6626, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([16, 0],"float32"), Tensor([16, 0],"float32"), soft_label=True, )
paddle.nn.functional.cross_entropy(Tensor([16, 0],"float32"), Tensor([16, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([16, 1024, 0],"float16"), Tensor([16, 1024],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([16032, 0],"float32"), Tensor([16032],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1914, 0],"float32"), Tensor([1914],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1914, 0],"float32"), Tensor([1914],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([192, 0],"float32"), Tensor([192],"int64"), weight=None, ignore_index=6626, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 0, 100],"float32"), Tensor([2, 0, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 0, 10],"float32"), Tensor([2, 0, 1],"int64"), soft_label=False, ignore_index=4, reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float64"), Tensor([2],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 0],"float64"), Tensor([2],"int64"), weight=Tensor([4],"float64"), ignore_index=-100, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 1024, 1024, 0],"float32"), Tensor([2, 1024, 1024],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 2, 2, 0],"float64"), Tensor([2, 2, 2],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 2, 2, 0],"float64"), Tensor([2, 2, 2],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 2, 2, 0],"float64"), Tensor([2, 2, 2],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 2, 2, 0],"float64"), Tensor([2, 2, 2],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 2, 2, 0],"float64"), Tensor([2, 2, 2],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 2, 2, 0],"float64"), Tensor([2, 2, 2],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 20, 0],"float32"), Tensor([2, 20, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 30, 0],"float32"), Tensor([2, 30, 1],"int64"), soft_label=False, ignore_index=4, reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(Tensor([2, 32, 32, 0],"float32"), Tensor([2, 32, 32],"int64"), weight=None, ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 512, 1024, 0],"float32"), Tensor([2, 512, 1024],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 512, 512, 0],"float32"), Tensor([2, 512, 512],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.cross_entropy(Tensor([20, 0],"float32"), Tensor([20],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([200, 0],"float32"), Tensor([200],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([200, 0],"float32"), Tensor([200],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([24, 158, 0],"float32"), Tensor([24, 158],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([256, 0],"float16"), label=Tensor([256, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([3, 0],"float32"), Tensor([3],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([3, 2, 2, 0],"float64"), Tensor([3, 2, 2],"int64"), soft_label=True, label_smoothing=0.7336344401714625, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([30, 0],"float32"), Tensor([30, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float16"), Tensor([32, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float16"), Tensor([32],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float16"), Tensor([32],"int64"), weight=None, ignore_index=512, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float32"), Tensor([32, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float32"), Tensor([32, 1],"int64"), reduction="none", use_softmax=True, )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float32"), Tensor([32, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([32, 0],"float32"), Tensor([32],"int64"), weight=None, ignore_index=512, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([36, 0],"float32"), Tensor([36, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([36, 0],"float32"), Tensor([36],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float16"), Tensor([4, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float32"), Tensor([4, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float32"), Tensor([4, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float64"), Tensor([4, 0],"float64"), soft_label=True, axis=-1, weight=None, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float64"), Tensor([4, 0],"float64"), soft_label=True, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float64"), Tensor([4, 0],"float64"), soft_label=True, label_smoothing=0.5986189939413826, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float64"), Tensor([4, 3],"float64"), soft_label=True, label_smoothing=0.5986189939413826, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float64"), Tensor([4, 3],"float64"), soft_label=True, label_smoothing=0.8211263365048883, axis=-1, weight=Tensor([3],"float64"), reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float64"), Tensor([4],"int64"), soft_label=True, label_smoothing=0.1858912794612338, axis=-1, weight=Tensor([3],"float64"), reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([4, 0],"float64"), Tensor([4],"int64"), soft_label=True, label_smoothing=0.5436483450993637, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 100, 0],"float32"), Tensor([4, 100],"int64"), weight=Tensor([5],"float32"), )
paddle.nn.functional.cross_entropy(Tensor([4, 1024, 1024, 0],"float32"), Tensor([4, 1024, 1024],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 125, 125, 0],"float64"), Tensor([4, 125, 125],"int64"), weight=Tensor([7],"float64"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 157920, 0],"float32"), Tensor([4, 157920],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 22400, 0],"float32"), Tensor([4, 22400, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 512, 1024, 0],"float32"), Tensor([4, 512, 1024],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 512, 512, 0],"float32"), Tensor([4, 512, 512],"int64"), ignore_index=255, reduction="none", weight=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 512, 512, 0],"float64"), Tensor([4, 512, 512],"int64"), weight=Tensor([3],"float64"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([40, 0],"float32"), Tensor([40, 1],"int64"), reduction="none", ignore_index=-1, )
paddle.nn.functional.cross_entropy(Tensor([416, 30, 0],"float32"), Tensor([416, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4990, 0],"float32"), Tensor([4990],"int64"), weight=None, ignore_index=42, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([5, 0],"float64"), Tensor([5],"int64"), weight=Tensor([10],"float64"), ignore_index=-25, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([5, 0],"float64"), label=Tensor([5],"int64"), weight=None, ignore_index=-100, soft_label=False, axis=-1, reduction="mean", name=None, )
paddle.nn.functional.cross_entropy(Tensor([512, 30, 0],"float32"), Tensor([512, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([52, 30, 0],"float32"), Tensor([52, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([58086, 0],"float32"), Tensor([58086],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([64, 0],"float16"), Tensor([64, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(Tensor([64, 0],"float16"), Tensor([64, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([64, 0],"float16"), label=Tensor([64, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([64, 0],"float32"), Tensor([64, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([64, 187, 0],"float32"), Tensor([64, 187],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([7, 0],"float16"), Tensor([7],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 0],"float16"), Tensor([8, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([8, 0],"float32"), Tensor([8, 0],"float32"), soft_label=True, )
paddle.nn.functional.cross_entropy(Tensor([8, 0],"float32"), Tensor([8, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 102, 0],"float32"), Tensor([8, 102],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 1024, 0],"float16"), Tensor([8, 1024, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 103, 0],"float32"), Tensor([8, 103],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 105, 0],"float32"), Tensor([8, 105],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(input=Tensor([0, 1000],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, reduction="mean", use_softmax=True, )
paddle.nn.functional.cross_entropy(input=Tensor([0, 102],"float32"), label=Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([0, 102],"float32"), label=Tensor([0, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(input=Tensor([0, 10],"float32"), label=Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([0, 10],"float32"), label=Tensor([0, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(input=Tensor([0, 21128],"float32"), label=Tensor([0, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(input=Tensor([0, 2],"float32"), label=Tensor([0, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([0, 400],"float32"), label=Tensor([0, 1],"int64"), ignore_index=-1, reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(input=Tensor([1, 0],"float32"), label=Tensor([1, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(input=Tensor([100, 0],"float16"), label=Tensor([100, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([100, 0],"float32"), label=Tensor([100, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([1024, 0],"float32"), label=Tensor([1024],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([1242, 0],"float32"), label=Tensor([1242, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(input=Tensor([1914, 0],"float16"), label=Tensor([1914],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([1917, 0],"float16"), label=Tensor([1917],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([1921, 0],"float16"), label=Tensor([1921],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([1929, 0],"float16"), label=Tensor([1929],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([1934, 0],"float16"), label=Tensor([1934],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([1950, 0],"float32"), label=Tensor([1950],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2, 0],"float16"), label=Tensor([2, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(input=Tensor([2, 0],"float32"), label=Tensor([2, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([2, 0],"float32"), label=Tensor([2, 1],"int64"), ignore_index=-1, reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(input=Tensor([2, 0],"float32"), label=Tensor([2, 1],"int64"), reduction="none", use_softmax=False, )
paddle.nn.functional.cross_entropy(input=Tensor([2, 0],"float32"), label=Tensor([2, 1],"int64"), soft_label=False, reduction="mean", use_softmax=True, )
paddle.nn.functional.cross_entropy(input=Tensor([20, 0],"float32"), label=Tensor([20, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([2012, 0],"float32"), label=Tensor([2012],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2022, 0],"float32"), label=Tensor([2022],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2036, 0],"float32"), label=Tensor([2036],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([32, 0],"float16"), label=Tensor([32, 1],"int64"), )
paddle.nn.functional.ctc_loss(Tensor([0, 128, 6625],"float32"), Tensor([128, 25],"int32"), Tensor([128],"int64"), Tensor([128],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([0, 2, 3],"float64"), Tensor([2, 3],"int32"), Tensor([2],"int64"), Tensor([2],"int64"), 0, "mean", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([0, 2, 3],"float64"), labels=Tensor([2, 3],"int32"), input_lengths=Tensor([2],"int64"), label_lengths=Tensor([2],"int64"), blank=0, reduction="mean", )
paddle.nn.functional.ctc_loss(Tensor([0, 2, 3],"float64"), labels=Tensor([2, 3],"int32"), input_lengths=Tensor([2],"int64"), label_lengths=Tensor([2],"int64"), blank=0, reduction="none", )
paddle.nn.functional.ctc_loss(Tensor([0, 256, 37],"float32"), Tensor([256, 25],"int32"), Tensor([256],"int64"), Tensor([256],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([0, 256, 96],"float32"), Tensor([256, 25],"int32"), Tensor([256],"int64"), Tensor([256],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([0, 3, 15],"float32"), Tensor([3, 2],"int32"), Tensor([3],"int64"), Tensor([3],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([0, 4, 34],"float32"), Tensor([4, 4],"int32"), Tensor([4],"int64"), Tensor([4],"int64"), blank=33, reduction="mean", )
paddle.nn.functional.ctc_loss(Tensor([0, 4, 34],"float32"), Tensor([4, 4],"int32"), Tensor([4],"int64"), Tensor([4],"int64"), blank=33, reduction="sum", )
paddle.nn.functional.ctc_loss(Tensor([0, 512, 37],"float32"), Tensor([512, 25],"int32"), Tensor([512],"int64"), Tensor([512],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([25, 256, 37],"float32"), Tensor([256, 0],"int32"), Tensor([256],"int64"), Tensor([256],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([25, 256, 96],"float32"), Tensor([256, 0],"int32"), Tensor([256],"int64"), Tensor([256],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([25, 512, 37],"float32"), Tensor([512, 0],"int32"), Tensor([512],"int64"), Tensor([512],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([3, 3, 15],"float32"), Tensor([3, 0],"int32"), Tensor([3],"int64"), Tensor([3],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([4, 4, 34],"float32"), Tensor([4, 0],"int32"), Tensor([4],"int64"), Tensor([4],"int64"), blank=33, reduction="mean", )
paddle.nn.functional.ctc_loss(Tensor([4, 4, 34],"float32"), Tensor([4, 0],"int32"), Tensor([4],"int64"), Tensor([4],"int64"), blank=33, reduction="sum", )
paddle.nn.functional.ctc_loss(Tensor([40, 128, 6625],"float32"), Tensor([128, 0],"int32"), Tensor([128],"int64"), Tensor([128],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([5, 2, 3],"float64"), Tensor([2, 0],"int32"), Tensor([2],"int64"), Tensor([2],"int64"), 0, "mean", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([5, 2, 3],"float64"), labels=Tensor([2, 0],"int32"), input_lengths=Tensor([2],"int64"), label_lengths=Tensor([2],"int64"), blank=0, reduction="mean", )
paddle.nn.functional.ctc_loss(Tensor([5, 2, 3],"float64"), labels=Tensor([2, 0],"int32"), input_lengths=Tensor([2],"int64"), label_lengths=Tensor([2],"int64"), blank=0, reduction="none", )
paddle.nn.functional.dice_loss(Tensor([0, 2],"float64"), label=Tensor([0, 1],"int64"), epsilon=1e-05, )
paddle.nn.functional.dice_loss(Tensor([5, 0],"float64"), label=Tensor([5, 0],"int64"), epsilon=1e-05, )
paddle.nn.functional.dice_loss(Tensor([5, 0],"float64"), label=Tensor([5, 1],"int64"), epsilon=1e-05, )
paddle.nn.functional.embedding(Tensor([0, 100],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 101],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 1024],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 1024],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 128],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 16],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 2048],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1024],"int64"), weight=Tensor([0, 4096],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int32"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([0, 16],"int64"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 20],"int64"), weight=Tensor([0, 128],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 20],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 2],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 44],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 45],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), Tensor([0, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([0, 4],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1, 1],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 100],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 101],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([0, 1024],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([0, 1024],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([0, 128],"bfloat16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1024],"int64"), weight=Tensor([0, 16],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 1],"int64"), weight=Tensor([0, 64],"float32"), padding_idx=3, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 20],"int64"), weight=Tensor([0, 128],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 20],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 20],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=1, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 300, 4096],"int64"), Tensor([0, 3],"float32"), padding_idx=1, )
paddle.nn.functional.embedding(Tensor([1, 44],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 45],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([10, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([100],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([100],"int64"), weight=Tensor([0, 512],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([101],"int64"), weight=Tensor([0, 256],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([101],"int64"), weight=Tensor([0, 64],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1024, 1],"int64"), weight=Tensor([0, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 2, 7],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 3],"int32"), weight=Tensor([0, 24],"float32"), padding_idx=1, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 4, 7],"int32"), weight=Tensor([0, 16],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 4, 7],"int32"), weight=Tensor([0, 32],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 4, 7],"int32"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 7, 8],"int32"), weight=Tensor([0, 128],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([13, 7],"int32"), weight=Tensor([0, 64],"float32"), padding_idx=1, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([14, 209],"int64"), weight=Tensor([0, 384],"float32"), padding_idx=1, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1],"int64"), weight=Tensor([0, 300],"float32"), padding_idx=19528, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 10],"int64"), weight=Tensor([0, 64],"float32"), padding_idx=3, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 1],"int64"), weight=Tensor([0, 64],"float32"), padding_idx=3, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 2],"int64"), weight=Tensor([0, 32],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 3, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 3, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2, 3],"int64"), Tensor([0, 4],"float32"), padding_idx=-1, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 3],"int64"), Tensor([0, 4],"float32"), padding_idx=-1, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2, 4],"int64"), Tensor([0, 4],"float32"), padding_idx=2, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([2, 4],"int64"), Tensor([0, 4],"float32"), padding_idx=2, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([2],"int64"), weight=Tensor([0, 300],"float32"), padding_idx=99, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2],"int64"), weight=Tensor([0, 8],"float32"), padding_idx=0, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=9, max_norm=0.5, norm_type=3.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=9, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([0, 3],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 1],"int64"), weight=Tensor([10, 0],"float32"), padding_idx=9, max_norm=0.5, norm_type=3.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 4],"int64"), Tensor([0, 4],"float64"), padding_idx=-4, )
paddle.nn.functional.embedding(Tensor([3, 4],"int64"), Tensor([0, 4],"float64"), padding_idx=9, )
paddle.nn.functional.embedding(Tensor([3, 4],"int64"), Tensor([0, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([0, 512],"bfloat16"), )
paddle.nn.functional.embedding(Tensor([30],"int64"), Tensor([0, 512],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"complex64"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"float16"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int32"), Tensor([0, 1024],"float32"), )
paddle.nn.functional.embedding(Tensor([32, 16],"int64"), Tensor([0, 1024],"complex128"), )
paddle.nn.functional.embedding(Tensor([32, 4],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4, 3, 1],"int64"), weight=Tensor([0, 10],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([4],"int32"), Tensor([0, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([4],"int64"), Tensor([0, 4],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([6, 3],"int32"), Tensor([0, 4],"float32"), padding_idx=5, scale_grad_by_freq=False, )
paddle.nn.functional.embedding(Tensor([6, 3],"int32"), Tensor([0, 4],"float32"), padding_idx=5, scale_grad_by_freq=True, )
paddle.nn.functional.embedding(Tensor([64, 25],"int64"), weight=Tensor([0, 512],"float16"), padding_idx=6626, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([64, 25],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=6626, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([0, 2048],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 1024],"int64"), weight=Tensor([0, 4096],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([8, 25],"int64"), weight=Tensor([0, 512],"float32"), padding_idx=6626, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.gather_tree(Tensor([11, 0, 4],"int64"), Tensor([11, 0, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 0, 4],"int64"), Tensor([11, 4, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 0, 8],"int64"), Tensor([11, 0, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 0, 8],"int64"), Tensor([11, 4, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 0],"int64"), Tensor([11, 4, 0],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 0],"int64"), Tensor([11, 4, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 0],"int64"), Tensor([11, 4, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([21, 0, 4],"int64"), Tensor([21, 0, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([21, 0, 4],"int64"), Tensor([21, 8, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([21, 8, 0],"int64"), Tensor([21, 8, 0],"int64"), )
paddle.nn.functional.gather_tree(Tensor([21, 8, 0],"int64"), Tensor([21, 8, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([3, 0, 2],"int64"), Tensor([3, 0, 2],"int64"), )
paddle.nn.functional.gather_tree(Tensor([3, 0, 2],"int64"), Tensor([3, 2, 2],"int64"), )
paddle.nn.functional.gather_tree(Tensor([3, 2, 0],"int64"), Tensor([3, 2, 0],"int64"), )
paddle.nn.functional.gather_tree(Tensor([3, 2, 0],"int64"), Tensor([3, 2, 2],"int64"), )
paddle.nn.functional.gather_tree(Tensor([6, 0, 4],"int64"), Tensor([6, 0, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([6, 0, 4],"int64"), Tensor([6, 4, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([6, 4, 0],"int64"), Tensor([6, 4, 0],"int64"), )
paddle.nn.functional.gather_tree(Tensor([6, 4, 0],"int64"), Tensor([6, 4, 4],"int64"), )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2, 3],"float32"), Tensor([0, 2, 3],"float32"), Tensor([0, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2, 3],"float32"), Tensor([0, 2, 3],"float32"), Tensor([0, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0, 3],"float32"), Tensor([10, 0, 3],"float32"), Tensor([10, 0, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0, 3],"float32"), Tensor([10, 0, 3],"float32"), Tensor([10, 0, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 0],"float32"), Tensor([10, 2, 0],"float32"), Tensor([10, 2, 0],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 0],"float32"), Tensor([10, 2, 0],"float32"), Tensor([10, 2, 0],"float32"), full=False, reduction="none", )
paddle.nn.functional.glu(Tensor([0, 1, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([0, 10, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([0, 100, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([0, 101, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([0, 102, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), -1, )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), -1, None, )
paddle.nn.functional.glu(Tensor([1, 0, 512],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([1, 1, 0],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([1, 10, 0],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([1, 100, 0],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([1, 101, 0],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([1, 102, 0],"float32"), -1, None, )
paddle.nn.functional.glu(Tensor([5, 0],"float64"), -1, )
paddle.nn.functional.glu(Tensor([6, 0],"float64"), -1, None, )
paddle.nn.functional.glu(x=Tensor([0, 2, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([0, 2, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([0, 4],"float32"), )
paddle.nn.functional.glu(x=Tensor([0, 4],"float64"), )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float32"), axis=2, )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([0, 6, 2, 8],"float64"), axis=2, )
paddle.nn.functional.glu(x=Tensor([10, 0, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([10, 0, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([10, 2, 0],"float32"), )
paddle.nn.functional.glu(x=Tensor([10, 2, 0],"float64"), )
paddle.nn.functional.glu(x=Tensor([2, 0],"float32"), )
paddle.nn.functional.glu(x=Tensor([2, 0],"float64"), )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float32"), )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float64"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float32"), axis=2, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float64"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 0, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 0, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 2, 0],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 0, 4, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 0, 4, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 0],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 0],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 0, 32, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 0, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 0],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.interpolate(Tensor([0, 1, 128, 128],"float32"), list[256,256,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 128, 128],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 192, 192],"float32"), scale_factor=2, mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 256, 256],"float32"), list[512,512,], mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 276, 49],"float32"), size=list[274,47,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 1, 64, 64],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 640, 480],"float32"), size=list[10,8,], )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=False, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=True, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=Tensor([1],"int32"), scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 100, 176, 176],"float32"), scale_factor=2, mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 100, 184, 184],"float32"), scale_factor=2, mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1024, 8, 8],"float32"), scale_factor=2, )
paddle.nn.functional.interpolate(Tensor([0, 128, 1, 1],"float16"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 1, 1],"float16"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 128, 100, 156],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 128, 128],"float16"), list[256,256,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 128, 128],"float32"), list[256,256,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 128, 128],"float32"), scale_factor=2, )
paddle.nn.functional.interpolate(Tensor([0, 128, 152, 100],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 16, 16],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 2, 2],"float16"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 2, 2],"float16"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 128, 2, 2],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 23, 23],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 3, 3],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 32, 32],"float16"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 128, 32, 32],"float32"), scale_factor=2, )
paddle.nn.functional.interpolate(Tensor([0, 128, 4, 4],"float16"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 128, 4, 4],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 128, 6, 6],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 8, 16],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 150, 64, 64],"float16"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 150, 64, 64],"float32"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 160, 20, 20],"float32"), size=None, scale_factor=2, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 160, 21, 21],"float32"), size=None, scale_factor=2, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 160, 22, 22],"float32"), size=None, scale_factor=2, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 160, 4, 3],"float16"), size=list[8,6,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 160, 4, 3],"float32"), size=list[8,6,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 160, 8, 6],"float32"), size=list[16,12,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 19, 128, 128],"float16"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 128, 256],"float16"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 19, 16, 32],"float16"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 16, 32],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 256, 256],"float16"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 256, 256],"float16"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 32, 64],"float16"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 32, 64],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 64, 128],"float16"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 192, 108, 108],"float32"), scale_factor=2.0, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 192, 112, 112],"float32"), scale_factor=2.0, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 192, 116, 116],"float32"), scale_factor=2.0, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 128, 128],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 2, 16, 16],"float32"), scale_factor=2, mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 2, 16, 16],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 19, 84],"float32"), size=list[17,82,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 2, 2],"float32"), scale_factor=2, mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 2, 256, 256],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 2, 4, 5],"float64"), size=list[10,11,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 512, 512],"float32"), list[Tensor([1],"int64"),Tensor([1],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 2, 608, 913],"float32"), size=tuple(Tensor([1],"int64"),Tensor([1],"int64"),), )
paddle.nn.functional.interpolate(Tensor([0, 2, 64, 64],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 256, 1, 1],"float16"), list[64,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 256, 1, 1],"float16"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 256, 100, 156],"float32"), scale_factor=2.0, mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 256, 124, 80],"float32"), scale_factor=2.0, mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 256, 128, 84],"float32"), scale_factor=2.0, mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 256, 152, 120],"float32"), scale_factor=2.0, mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 256, 152, 124],"float32"), scale_factor=2.0, mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 256, 152, 128],"float32"), scale_factor=2.0, mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 256, 16, 16],"float16"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 256, 16, 16],"float32"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 256, 2, 2],"float32"), scale_factor=2, mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 256, 20, 20],"float16"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 256, 200, 272],"float16"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 256, 200, 312],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 256, 304, 200],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 256, 32, 32],"float16"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 256, 4, 4],"float32"), scale_factor=2, mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 256, 62, 64],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 256, 64, 128],"float16"), list[128,256,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 256, 64, 64],"float16"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 256, 64, 64],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 256, 64, 64],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 256, 8, 8],"float32"), scale_factor=2, mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 258, 100, 156],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 100, 156],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 152, 100],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 152, 100],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 25, 39],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 25, 39],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 38, 25],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 38, 25],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 50, 78],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 258, 76, 50],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([0, 3, 128],"float32"), size=list[64,], mode="linear", align_mode=1, align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 3, 128],"float32"), size=list[64,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NCW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 3, 16, 16],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 3, 16, 16],"float32"), size=list[32,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 3, 212, 274],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 227, 276],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 250, 210],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 32, 32],"float32"), size=list[32,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 3, 374, 297],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 5, 5],"float16"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 5, 5],"float32"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 64, 256],"float32"), list[32,64,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 3, 64],"float16"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 64],"float32"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([0, 32, 1, 1],"float16"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 32, 16, 16],"float16"), scale_factor=8, )
paddle.nn.functional.interpolate(Tensor([0, 32, 16, 16],"float32"), scale_factor=8, )
paddle.nn.functional.interpolate(Tensor([0, 32, 19, 19],"float32"), size=tuple(19,19,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 32, 19, 19],"float32"), size=tuple(20,20,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 32, 2, 2],"float16"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 32, 2, 2],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 32, 20, 20],"float32"), size=list[19,19,], mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 32, 20, 20],"float32"), size=list[40,40,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 32, 3, 3],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 32, 32, 32],"float16"), scale_factor=4, )
paddle.nn.functional.interpolate(Tensor([0, 32, 32, 64],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 32, 6, 6],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 32, 8, 6],"float16"), scale_factor=8, )
paddle.nn.functional.interpolate(Tensor([0, 320, 30, 30],"float32"), scale_factor=2.0, mode="nearest", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 4, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 4, 10, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 4, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 4, 10, 10, 10],"float32"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 4, 10, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=False, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 4, 10, 10, 10],"float64"), size=None, scale_factor=list[0.6,0.6,0.6,], mode="trilinear", align_corners=True, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 4, 10, 10, 10],"float64"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=1, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 4, 10, 10, 10],"float64"), size=list[2,2,2,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 40, 16, 12],"float16"), size=list[32,24,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 40, 16, 12],"float32"), size=list[32,24,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 40, 32, 24],"float32"), size=list[64,48,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 40, 4, 3],"float16"), size=None, scale_factor=8, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 40, 8, 6],"float16"), size=None, scale_factor=4, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 5, 20, 20],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 5, 6, 7],"float32"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 5, 6, 7],"float64"), size=None, scale_factor=list[1.2,3.3,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 5, 6, 7],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 5, 6, 7],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 5, 6, 7],"float64"), size=list[100,50,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 512, 20, 20],"float16"), scale_factor=2.0, mode="nearest", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 512, 20, 20],"float32"), scale_factor=2.0, mode="nearest", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 64, 10, 10],"float32"), size=list[20,20,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 64, 10, 10],"float32"), size=tuple(10,10,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 64, 10, 10],"float32"), size=tuple(20,20,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 64, 19, 19],"float32"), size=tuple(10,10,), mode="bicubic", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 64, 20, 20],"float16"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([0, 64, 2001],"float32"), size=list[2001,], mode="linear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 64, 40, 40],"float16"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([0, 64, 40, 40],"float32"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([0, 64, 8, 6],"float16"), scale_factor=4, )
paddle.nn.functional.interpolate(Tensor([0, 64, 8, 6],"float32"), scale_factor=4, )
paddle.nn.functional.interpolate(Tensor([0, 64, 80, 80],"float16"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([0, 64, 80, 80],"float32"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([0, 768, 16, 16],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 768, 16, 16],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 768, 31, 32],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 768, 32, 32],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 80, 16, 12],"float32"), size=list[32,24,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 80, 4, 3],"float32"), size=None, scale_factor=4, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 80, 8, 6],"float16"), size=list[16,12,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 80, 8, 6],"float32"), size=None, scale_factor=4, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 80, 8, 6],"float32"), size=list[16,12,], mode="bilinear", align_corners=True, )
paddle.nn.functional.kl_div(Tensor([0, 20, 50],"float32"), Tensor([0, 20, 50],"float32"), "batchmean", False, )
paddle.nn.functional.kl_div(Tensor([0, 20, 50],"float32"), Tensor([0, 20, 50],"float32"), "batchmean", True, )
paddle.nn.functional.kl_div(Tensor([0, 20, 50],"float32"), Tensor([0, 20, 50],"float32"), "none", False, )
paddle.nn.functional.kl_div(Tensor([0, 20],"float32"), Tensor([0, 20],"float64"), "mean", False, )
paddle.nn.functional.kl_div(Tensor([0, 20],"float64"), Tensor([0, 20],"float32"), )
paddle.nn.functional.kl_div(Tensor([0, 20],"float64"), Tensor([0, 20],"float64"), "batchmean", False, )
paddle.nn.functional.kl_div(Tensor([0, 20],"float64"), Tensor([0, 20],"float64"), "mean", False, )
paddle.nn.functional.kl_div(Tensor([0, 20],"float64"), Tensor([0, 20],"float64"), "mean", True, )
paddle.nn.functional.kl_div(Tensor([0, 20],"float64"), Tensor([0, 20],"float64"), "none", False, )
paddle.nn.functional.kl_div(Tensor([0, 20],"float64"), Tensor([0, 20],"float64"), "sum", False, )
paddle.nn.functional.kl_div(Tensor([0, 2],"float32"), label=Tensor([0, 2],"float32"), reduction="mean", name=None, )
paddle.nn.functional.kl_div(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), "mean", False, )
paddle.nn.functional.kl_div(Tensor([40, 0, 50],"float32"), Tensor([40, 0, 50],"float32"), "batchmean", False, )
paddle.nn.functional.kl_div(Tensor([40, 0, 50],"float32"), Tensor([40, 0, 50],"float32"), "batchmean", True, )
paddle.nn.functional.kl_div(Tensor([40, 0, 50],"float32"), Tensor([40, 0, 50],"float32"), "none", False, )
paddle.nn.functional.kl_div(Tensor([40, 20, 0],"float32"), Tensor([40, 20, 0],"float32"), "batchmean", False, )
paddle.nn.functional.kl_div(Tensor([40, 20, 0],"float32"), Tensor([40, 20, 0],"float32"), "batchmean", True, )
paddle.nn.functional.kl_div(Tensor([40, 20, 0],"float32"), Tensor([40, 20, 0],"float32"), "none", False, )
paddle.nn.functional.kl_div(Tensor([5, 0],"float32"), Tensor([5, 0],"float64"), "mean", False, )
paddle.nn.functional.kl_div(Tensor([5, 0],"float32"), label=Tensor([5, 0],"float32"), reduction="mean", name=None, )
paddle.nn.functional.kl_div(Tensor([5, 0],"float64"), Tensor([5, 0],"float32"), )
paddle.nn.functional.kl_div(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), "batchmean", False, )
paddle.nn.functional.kl_div(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), "mean", False, )
paddle.nn.functional.kl_div(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), "mean", True, )
paddle.nn.functional.kl_div(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), "none", False, )
paddle.nn.functional.kl_div(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), "sum", False, )
paddle.nn.functional.kl_div(input=Tensor([0, 128, 128],"float32"), label=Tensor([0, 128, 128],"float32"), reduction="batchmean", )
paddle.nn.functional.kl_div(input=Tensor([32, 0, 128],"float32"), label=Tensor([32, 0, 128],"float32"), reduction="batchmean", )
paddle.nn.functional.kl_div(input=Tensor([32, 128, 0],"float32"), label=Tensor([32, 128, 0],"float32"), reduction="batchmean", )
paddle.nn.functional.layer_norm(Tensor([0, 10, 60, 30],"float32"), list[10,60,30,], weight=Tensor([18000],"float32"), bias=Tensor([18000],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 10, 60, 70],"float32"), list[60,70,], weight=Tensor([4200],"float32"), bias=Tensor([4200],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 165, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 186, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 206, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 209, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 209, 384],"float32"), 384, weight=Tensor([384],"float32"), bias=Tensor([384],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 220, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 3, 10, 10],"float32"), list[3,10,10,], Tensor([300],"float32"), Tensor([300],"float32"), )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float32"), list[6,6,3,], weight=None, bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 64, 128],"float32"), list[64,128,], Tensor([8192],"float32"), Tensor([8192],"float32"), )
paddle.nn.functional.layer_norm(Tensor([0, 64, 64],"float32"), list[64,], Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.nn.functional.layer_norm(Tensor([14, 0, 384],"float32"), 384, weight=Tensor([384],"float32"), bias=Tensor([384],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 0, 60, 70],"float32"), list[60,70,], weight=Tensor([4200],"float32"), bias=Tensor([4200],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([7, 0, 1024],"float32"), 1024, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), epsilon=1e-05, )
paddle.nn.functional.linear(Tensor([20, 64],"float32"), Tensor([64, 0],"float32"), None, )
paddle.nn.functional.linear(Tensor([30, 64],"float32"), Tensor([64, 0],"float32"), None, )
paddle.nn.functional.linear(Tensor([4, 512],"float32"), Tensor([512, 0],"float32"), )
paddle.nn.functional.linear(Tensor([4, 64],"float32"), Tensor([64, 0],"float32"), None, )
paddle.nn.functional.linear(Tensor([8, 512],"float32"), Tensor([512, 0],"float32"), )
paddle.nn.functional.linear(Tensor([8, 8192],"float32"), Tensor([8192, 0],"float32"), )
paddle.nn.functional.linear(x=Tensor([1, 1, 1024],"float32"), weight=Tensor([1024, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 11008],"float32"), weight=Tensor([11008, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 1280],"float32"), weight=Tensor([1280, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 13696],"float32"), weight=Tensor([13696, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 15, 768],"float32"), weight=Tensor([768, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 16, 768],"float32"), weight=Tensor([768, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 17, 768],"float32"), weight=Tensor([768, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 18, 768],"float32"), weight=Tensor([768, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([10, 14336],"float32"), weight=Tensor([14336, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([10, 32],"float32"), weight=Tensor([32, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([128, 512],"float32"), weight=Tensor([512, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([30, 16],"float32"), weight=Tensor([16, 0],"float32"), )
paddle.nn.functional.linear(x=Tensor([32, 15, 15, 256],"float32"), weight=Tensor([256, 0],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([38, 16],"float32"), weight=Tensor([16, 0],"float32"), )
paddle.nn.functional.log_loss(Tensor([102400, 0],"float32"), Tensor([102400, 0],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([102400, 0],"float32"), Tensor([102400, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([102400, 1],"float32"), Tensor([102400, 0],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([25600, 0],"float32"), Tensor([25600, 0],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([25600, 0],"float32"), Tensor([25600, 1],"float32"), epsilon=1e-07, )
paddle.nn.functional.log_loss(Tensor([25600, 1],"float32"), Tensor([25600, 0],"float32"), epsilon=1e-07, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 0],"float64"), Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=64.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 0],"float64"), label=Tensor([2],"int64"), margin1=0.8, margin2=0.0, margin3=0.15, scale=40.0, group=None, return_softmax=False, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 0],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=64.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 0],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=32.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 0],"float16"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 0],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 0],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 0],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="sum", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 0],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 0],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.0, margin3=0.35, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 0],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 0],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.35, margin2=0.0, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 0],"float64"), 2, 1, list[1,1,], False, False, None, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 0],"float64"), kernel_size=2, stride=1, padding=list[1,1,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 11],"float32"), Tensor([2, 4, 0, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 11],"float32"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 11],"float64"), Tensor([2, 4, 0, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 11],"float64"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 21],"float32"), Tensor([2, 4, 0, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 21],"float32"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 21],"float64"), Tensor([2, 4, 0, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 21],"float64"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 0],"float32"), Tensor([2, 4, 11, 0],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 0],"float32"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 0],"float64"), Tensor([2, 4, 11, 0],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 11, 0],"float64"), Tensor([2, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 0],"float32"), Tensor([2, 4, 21, 0],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 0],"float32"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 0],"float64"), Tensor([2, 4, 21, 0],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 21, 0],"float64"), Tensor([2, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 0],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=Tensor([2],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 0],"float64"), Tensor([5],"int64"), p=2, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 0],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=Tensor([2],"float64"), reduction="mean", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 0],"float64"), label=Tensor([5],"int64"), p=2, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=None, ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=Tensor([10],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=Tensor([10],"float64"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 0],"float64"), Tensor([10],"int64"), weight=Tensor([10],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([4, 0],"float32"), Tensor([4],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 0, 2, 4],"float32"), Tensor([5, 2, 4],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=None, ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 0],"float32"), Tensor([5],"int64"), )
paddle.nn.functional.pad(Tensor([0, 1, 1, 1],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 10, 10],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 100, 100],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 101, 101],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 102, 102],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([0, 1, 128, 224],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 160, 416],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 192, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 32, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 32, 544],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 3, 6, 6, 6],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 6, 6, 3],"float32"), Tensor([4],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 6, 6],"int64"), pad=Tensor([2],"int32"), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 256],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 272],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 288],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 336],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 48, 128],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 1, 1],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 10, 10],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 100, 100],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 101, 101],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 102, 102],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 0, 128, 224],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 16, 256],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 16, 272],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 16, 288],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 16, 336],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 160, 416],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 192, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 32, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 32, 544],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 0, 48, 128],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 0, 6, 3],"float32"), Tensor([4],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 1, 0, 100],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 101],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 102],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 10],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 1],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 224],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 416],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 512],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 544],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 1, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 1, 1],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 10, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 10, 10],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 100, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 100, 100],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 101, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 101, 101],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 102, 0],"int32"), Tensor([4],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 102, 102],"int32"), Tensor([0],"int32"), value=False, )
paddle.nn.functional.pad(Tensor([1, 1, 128, 0],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 128, 224],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 160, 0],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 160, 416],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 192, 0],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 192, 512],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 32, 0],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 32, 512],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 1, 32, 544],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([1, 6, 0, 3],"float32"), Tensor([4],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 6, 6, 0],"float32"), Tensor([4],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 6, 6, 3],"float32"), Tensor([0],"int32"), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 64, 0, 128],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 0, 256],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 0, 272],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 0, 288],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 0, 336],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 0],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 256],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 272],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 288],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 16, 336],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 48, 0],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1, 64, 48, 128],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex128"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex64"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float32"), pad=Tensor([4],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NHWC", )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"float32"), pad=Tensor([2],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex128"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex64"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"float32"), pad=Tensor([6],"int64"), mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex128"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"complex64"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 5],"float32"), pad=Tensor([0],"int32"), mode="constant", value=100, data_format="NLC", )
paddle.nn.functional.pad(Tensor([4, 0, 6, 6, 6],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6],"int64"), pad=Tensor([2],"int32"), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 0, 6, 6],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 0, 6],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 0],"int64"), pad=Tensor([6],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 6],"int64"), pad=Tensor([0],"int32"), mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 0],"int64"), pad=Tensor([2],"int32"), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 6],"int64"), pad=Tensor([0],"int32"), mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 0, 17, 82],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 0, 274, 47],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 1, 0, 47],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 1, 0, 82],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 1, 17, 0],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([1, 1, 274, 0],"float32"), 1, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 0, 64, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 128, 0, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 128, 64, 0],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 0, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 0, 64],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 128, 0],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 256, 64, 0],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 9, 0, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 9, 4, 0],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 0, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 0, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([64, 256, 128, 0],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 9, 0, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 9, 4, 0],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 0, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 0],"float64"), 3, "NCHW", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 80],"float32"), Tensor([0, 80],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([110484, 0],"float32"), Tensor([110484, 0],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([122760, 0],"float32"), Tensor([122760, 0],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([135036, 0],"float32"), Tensor([135036, 0],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([190960, 0],"float32"), Tensor([190960, 0],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([210056, 0],"float32"), Tensor([210056, 0],"float32"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 10],"float32"), Tensor([0, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16, 32, 64],"float32"), Tensor([0, 1, 32, 64],"int64"), axis=1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16, 32, 64],"float32"), Tensor([0, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16, 32, 64],"float32"), Tensor([0, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16, 32, 64],"float32"), Tensor([0, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16],"float32"), Tensor([0, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 16],"float32"), Tensor([0, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([0, 2],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, ignore_index=-100, numeric_stable_mode=True, return_softmax=False, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([1, 0],"float32"), Tensor([1, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([100, 0],"float32"), Tensor([100, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0, 32, 64],"float32"), Tensor([2, 0, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0, 32, 64],"float32"), Tensor([2, 0, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0, 32, 64],"float32"), Tensor([2, 0, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0, 32, 64],"float32"), Tensor([2, 1, 32, 64],"int64"), axis=1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 0],"float32"), Tensor([2, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 0, 64],"float32"), Tensor([2, 16, 0, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 0, 64],"float32"), Tensor([2, 16, 0, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 0, 64],"float32"), Tensor([2, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 0],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 0],"float32"), Tensor([2, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([5, 0],"float32"), label=Tensor([5, 1],"int64"), soft_label=False, ignore_index=-100, numeric_stable_mode=True, return_softmax=False, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 1000],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 1000],"float64"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 10],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 128],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 32],"float32"), label=Tensor([0, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0, 4],"float64"), label=Tensor([0, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([0],"float32"), label=Tensor([1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([12, 0],"float32"), label=Tensor([12, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([12, 0],"float64"), label=Tensor([12, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([16, 0],"float32"), label=Tensor([16, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([18, 0],"float32"), label=Tensor([18, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2, 0],"float64"), label=Tensor([2, 1],"int64"), return_softmax=True, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.upsample(Tensor([0, 160, 7, 7],"float16"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 160, 7, 7],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 18, 14, 14],"float16"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 18, 14, 14],"float32"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 18, 7, 7],"float16"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 18, 7, 7],"float32"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 192, 7, 7],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 24, 30, 30],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 24, 60, 60],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 256, 20, 20],"float16"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([0, 256, 20, 20],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 256, 20, 20],"float16"), scale_factor=8, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([0, 256, 20, 20],"float32"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([0, 256, 20, 20],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 256, 20, 20],"float32"), scale_factor=8, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([0, 256, 40, 40],"float16"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([0, 256, 40, 40],"float16"), scale_factor=4, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([0, 256, 40, 40],"float32"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([0, 256, 40, 40],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 256, 40, 40],"float32"), scale_factor=4, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([0, 256, 80, 80],"float16"), scale_factor=2, mode="bilinear", )
paddle.nn.functional.upsample(Tensor([0, 256, 80, 80],"float32"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 36, 7, 7],"float16"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 40, 7, 7],"float16"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 40, 7, 7],"float32"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 48, 14, 14],"float32"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 48, 28, 28],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 48, 40, 40],"float32"), size=list[80,80,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 48, 7, 7],"float32"), scale_factor=8, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 64, 20, 20],"float16"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 64, 20, 20],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 64, 30, 30],"float32"), scale_factor=8, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 64, 40, 40],"float16"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 64, 40, 40],"float32"), scale_factor=4, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 64, 80, 80],"float16"), scale_factor=2, mode="nearest", align_mode=1, )
paddle.nn.functional.upsample(Tensor([0, 96, 14, 14],"float32"), scale_factor=2, mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 96, 16, 16],"float16"), size=list[31,31,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 96, 16, 16],"float32"), size=list[31,31,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 96, 31, 31],"float16"), size=list[61,61,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 96, 31, 31],"float32"), size=list[61,61,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 96, 61, 61],"float16"), size=list[122,122,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 96, 61, 61],"float32"), size=list[122,122,], mode="nearest", )
paddle.nn.functional.upsample(Tensor([0, 96, 7, 7],"float32"), scale_factor=4, mode="nearest", )
paddle.nn.functional.upsample(x=Tensor([0, 1, 4, 4],"float32"), size=Tensor([2],"float32"), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", )
paddle.nn.functional.upsample(x=Tensor([0, 1, 4, 4],"float64"), size=Tensor([2],"float64"), scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", )
paddle.nn.functional.upsample(x=Tensor([0, 2, 1],"float64"), size=Tensor([1],"float64"), scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", )
paddle.nn.functional.upsample(x=Tensor([0, 2, 2, 1],"float64"), size=None, scale_factor=Tensor([2],"float64"), mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([0, 2, 2, 1],"float64"), size=Tensor([2],"float64"), scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([0, 2, 2, 1],"float64"), size=Tensor([2],"float64"), scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", )
paddle.nn.functional.upsample(x=Tensor([0, 2, 2, 2, 1],"float64"), size=Tensor([3],"float64"), scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.utils.vector_to_parameters(Tensor([165],"float32"), list[Tensor([0, 15],"float32"),Tensor([15],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([165],"float32"), list[Tensor([10, 0],"float32"),Tensor([15],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([165],"float32"), list[Tensor([10, 15],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([0, 2, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([3, 0, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([3, 2, 0],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([3, 2, 4],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([0, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 0],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([0, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 0],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([0],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([0],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([0, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 0],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([0, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 0],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([0],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([30],"float32"), list[Tensor([0, 3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([30],"float32"), list[Tensor([10, 0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([0, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 0],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([0, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 0],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([0],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([0],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([0, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 0],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 0],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 0, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([6],"float32"), list[Tensor([0, 2],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([6],"float32"), list[Tensor([2, 0],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([6],"float32"), list[Tensor([2, 2],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([0, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 0],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([0, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 0],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([0],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([0],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([0, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 0],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([0, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 0],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([0],"float32"),Tensor([16],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([960],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([0],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 0, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nonzero(Tensor([0, 196],"float32"), )
paddle.nonzero(Tensor([0, 1],"int32"), )
paddle.nonzero(Tensor([0, 2, 14, 14],"float32"), )
paddle.nonzero(Tensor([0, 200],"float32"), )
paddle.nonzero(Tensor([0, 80, 28, 28],"float32"), )
paddle.nonzero(Tensor([1, 0],"int32"), )
paddle.nonzero(Tensor([106, 0, 28, 28],"float32"), )
paddle.nonzero(Tensor([106, 80, 0, 28],"float32"), )
paddle.nonzero(Tensor([106, 80, 28, 0],"float32"), )
paddle.nonzero(Tensor([11, 0, 14, 14],"float32"), )
paddle.nonzero(Tensor([11, 0, 28, 28],"float32"), )
paddle.nonzero(Tensor([11, 2, 0, 14],"float32"), )
paddle.nonzero(Tensor([11, 2, 0, 28],"float32"), )
paddle.nonzero(Tensor([11, 2, 14, 0],"float32"), )
paddle.nonzero(Tensor([11, 2, 28, 0],"float32"), )
paddle.nonzero(x=Tensor([0, 3],"int32"), as_tuple=False, )
paddle.nonzero(x=Tensor([0, 4, 7],"float32"), )
paddle.nonzero(x=Tensor([3, 0, 7],"float32"), )
paddle.nonzero(x=Tensor([3, 0],"int32"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 4, 0],"float32"), )
paddle.outer(Tensor([10],"float32"), Tensor([0],"float32"), )
paddle.outer(Tensor([142],"float32"), Tensor([0],"float32"), )
paddle.outer(Tensor([2048],"float32"), Tensor([0],"float32"), )
paddle.prod(Tensor([0, 10, 5],"complex64"), )
paddle.prod(Tensor([0, 10, 5],"complex64"), axis=1, )
paddle.prod(Tensor([0, 10, 5],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([0, 10, 5],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([0, 10, 5],"float32"), )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=-1, )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=1, )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([0, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([0, 1024],"float32"), -1, )
paddle.prod(Tensor([0, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(Tensor([0, 5, 3, 2, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 5, 3, 2, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([0, 5],"float32"), axis=None, )
paddle.prod(Tensor([0, 5],"float32"), keepdim=True, )
paddle.prod(Tensor([0, 6, 10],"float32"), list[0,], False, )
paddle.prod(Tensor([0, 6, 10],"float64"), list[0,], False, )
paddle.prod(Tensor([0, 6, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 6, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([0],"float32"), axis=0, )
paddle.prod(Tensor([10, 0, 5],"complex64"), )
paddle.prod(Tensor([10, 0, 5],"complex64"), axis=1, )
paddle.prod(Tensor([10, 0, 5],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 0, 5],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([10, 0, 5],"float32"), )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=-1, )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=1, )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([10, 0, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 0, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 10, 0, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 10, 0],"complex64"), )
paddle.prod(Tensor([10, 10, 0],"complex64"), axis=1, )
paddle.prod(Tensor([10, 10, 0],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 10, 0],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([10, 10, 0],"float32"), )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=-1, )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=1, )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([10, 10, 9, 0],"float64"), list[0,Tensor([1],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([0],"int64"),Tensor([1],"int64"),], )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([1],"int64"),Tensor([0],"int64"),], )
paddle.prod(Tensor([10, 5, 0, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 5, 9, 0],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 5, 9, 9],"float64"), Tensor([0],"int64"), )
paddle.prod(Tensor([16, 0],"float32"), -1, )
paddle.prod(Tensor([2, 0, 3, 2, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 0, 3, 2, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 0],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(Tensor([2, 2],"float64"), axis=Tensor([0],"int64"), )
paddle.prod(Tensor([2, 5, 0, 2, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 0, 2, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 0, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 0, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 0, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 0, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 0, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 0, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 0, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 0, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 0],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 0],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([3, 0],"float32"), axis=None, )
paddle.prod(Tensor([3, 0],"float32"), keepdim=True, )
paddle.prod(Tensor([5, 0, 10],"float32"), list[0,], False, )
paddle.prod(Tensor([5, 0, 10],"float64"), list[0,], False, )
paddle.prod(Tensor([5, 0, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 0, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 0, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 0, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 0],"float32"), list[0,], False, )
paddle.prod(Tensor([5, 6, 0],"float64"), list[0,], False, )
paddle.prod(Tensor([5, 6, 2, 0, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 0, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 0, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 0, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 4, 0],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 4, 0],"float64"), list[2,3,4,], False, )
paddle.prod(x=Tensor([0, 2],"float32"), )
paddle.prod(x=Tensor([0, 2],"float32"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([0, 2],"float32"), dtype="float32", )
paddle.prod(x=Tensor([0, 2],"float64"), )
paddle.prod(x=Tensor([0, 2],"float64"), axis=-1, )
paddle.prod(x=Tensor([0, 2],"float64"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([0, 2],"float64"), axis=1, )
paddle.prod(x=Tensor([0, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(x=Tensor([0, 2],"float64"), axis=list[0,1,], )
paddle.prod(x=Tensor([0, 2],"float64"), axis=tuple(0,1,), )
paddle.prod(x=Tensor([0, 2],"float64"), dtype="float32", )
paddle.prod(x=Tensor([0, 2],"int32"), )
paddle.prod(x=Tensor([0, 2],"int32"), dtype="int64", )
paddle.prod(x=Tensor([0, 2],"int64"), dtype="int64", )
paddle.prod(x=Tensor([2, 0],"float32"), )
paddle.prod(x=Tensor([2, 0],"float32"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([2, 0],"float32"), dtype="float32", )
paddle.prod(x=Tensor([2, 0],"float64"), )
paddle.prod(x=Tensor([2, 0],"float64"), axis=-1, )
paddle.prod(x=Tensor([2, 0],"float64"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([2, 0],"float64"), axis=1, )
paddle.prod(x=Tensor([2, 0],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(x=Tensor([2, 0],"float64"), axis=list[0,1,], )
paddle.prod(x=Tensor([2, 0],"float64"), axis=tuple(0,1,), )
paddle.prod(x=Tensor([2, 0],"float64"), dtype="float32", )
paddle.prod(x=Tensor([2, 0],"int32"), )
paddle.prod(x=Tensor([2, 0],"int32"), dtype="int64", )
paddle.prod(x=Tensor([2, 0],"int64"), dtype="int64", )
paddle.prod(x=Tensor([2, 2],"float64"), axis=Tensor([0],"int64"), )
paddle.put_along_axis(Tensor([0, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([0, 4, 4, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([0, 4, 4],"float64"), Tensor([1, 1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([0, 4],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([0, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "add", True, False, )
paddle.put_along_axis(Tensor([0, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "assign", True, False, )
paddle.put_along_axis(Tensor([0, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "mul", True, False, )
paddle.put_along_axis(Tensor([0],"float32"), Tensor([1],"int64"), Tensor([1],"float32"), 0, "assign", )
paddle.put_along_axis(Tensor([0],"float64"), Tensor([1],"int64"), Tensor([1],"float64"), 0, "assign", )
paddle.put_along_axis(Tensor([10, 0, 10],"float32"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 0, 10],"int32"), Tensor([5, 5, 5],"int32"), Tensor([5, 5, 5],"int32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 0, 10],"int64"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"int64"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([10, 0, 10],"uint8"), Tensor([5, 5, 5],"int64"), Tensor([5, 5, 5],"uint8"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([2, 0],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "add", )
paddle.put_along_axis(Tensor([2, 0],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "assign", )
paddle.put_along_axis(Tensor([2, 0],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "mul", )
paddle.put_along_axis(Tensor([3, 0],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 0],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([64, 0],"float32"), Tensor([64, 1327104],"int64"), Tensor([64, 1327104],"float32"), 1, )
paddle.put_along_axis(Tensor([64, 1327104],"float32"), Tensor([64, 1327104],"int64"), Tensor([0, 1327104],"float32"), 1, )
paddle.put_along_axis(Tensor([64, 1327104],"float32"), Tensor([64, 1327104],"int64"), Tensor([64, 0],"float32"), 1, )
paddle.real(Tensor([0, 20, 2, 3],"complex64"), )
paddle.real(Tensor([0, 8, 39, 14, 14],"complex64"), )
paddle.real(Tensor([2, 0, 2, 3],"complex64"), )
paddle.real(Tensor([2, 20, 0, 3],"complex64"), )
paddle.real(Tensor([2, 20, 2, 0],"complex64"), )
paddle.real(Tensor([50, 0, 39, 14, 14],"complex64"), )
paddle.real(Tensor([50, 8, 0, 14, 14],"complex64"), )
paddle.real(Tensor([50, 8, 39, 0, 14],"complex64"), )
paddle.real(Tensor([50, 8, 39, 14, 0],"complex64"), )
paddle.real(x=Tensor([0, 8, 39, 14, 14],"complex64"), )
paddle.real(x=Tensor([20, 0],"complex64"), )
paddle.real(x=Tensor([50, 0, 39, 14, 14],"complex64"), )
paddle.real(x=Tensor([50, 8, 0, 14, 14],"complex64"), )
paddle.real(x=Tensor([50, 8, 39, 0, 14],"complex64"), )
paddle.real(x=Tensor([50, 8, 39, 14, 0],"complex64"), )
paddle.repeat_interleave(Tensor([0, 4],"float32"), Tensor([4],"int32"), -1, )
paddle.repeat_interleave(Tensor([0, 4],"float32"), Tensor([4],"int32"), 1, )
paddle.repeat_interleave(Tensor([3, 0],"float32"), Tensor([3],"int32"), axis=0, )
paddle.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.reshape(Tensor([0, 1, 128, 128],"float32"), list[3,1,128,128,], )
paddle.reshape(Tensor([0, 1, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([0, 1, 128, 128],"float32"), list[8,1,128,128,], )
paddle.reshape(Tensor([0, 1, 15, 16, 15, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([0, 1, 512, 512],"float32"), list[3,1,512,512,], )
paddle.reshape(Tensor([0, 1, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([0, 1, 512, 512],"float32"), list[8,1,512,512,], )
paddle.reshape(Tensor([0, 1, 58081],"float32"), list[32,1,241,241,], )
paddle.reshape(Tensor([0, 1, 58081],"float32"), list[8,1,241,241,], )
paddle.reshape(Tensor([0, 1, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 1, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 100],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([0, 15, 8, 256],"complex64"), list[32,15,8,8,32,], )
paddle.reshape(Tensor([0, 15, 8, 8, 32],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([0, 1],"float32"), Tensor([1],"int32"), )
paddle.reshape(Tensor([0, 1],"float32"), Tensor([3],"int32"), )
paddle.reshape(Tensor([0, 2, 1, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 2, 3],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([0, 2, 64, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 20, 1],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([0, 225, 256],"float32"), list[32,15,15,256,], )
paddle.reshape(Tensor([0, 25],"float32"), shape=Tensor([3],"int32"), )
paddle.reshape(Tensor([0, 25],"float32"), shape=list[Tensor([1],"int32"),10,], )
paddle.reshape(Tensor([0, 2],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([0, 3, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([0, 3, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([0, 4, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0, 4, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([0],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([0],"float32"), list[1,1,1,481,], )
paddle.reshape(Tensor([0],"float32"), list[1,1,481,1,], )
paddle.reshape(Tensor([0],"float32"), list[1,16,1,1,], )
paddle.reshape(Tensor([0],"float64"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0],"float64"), Tensor([1],"int64"), )
paddle.reshape(Tensor([0],"float64"), list[1,1,1,1,], )
paddle.reshape(Tensor([1, 0, 3],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([1, 0, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 0, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 0],"float32"), Tensor([1],"int32"), )
paddle.reshape(Tensor([1, 0],"float32"), Tensor([3],"int32"), )
paddle.reshape(Tensor([1, 0],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([1, 2, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 0],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([10, 0, 1],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([10, 20, 0],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([1000, 0],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([2, 0, 1, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([2, 0, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([2, 0, 64, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0],"float32"), shape=Tensor([3],"int32"), )
paddle.reshape(Tensor([2, 0],"float32"), shape=list[Tensor([1],"int32"),10,], )
paddle.reshape(Tensor([2, 1, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 0, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 0, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 1, 0, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 1, 32, 0],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 64, 0, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 64, 32, 0],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 3, 0, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([2, 3, 0, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([2, 3, 128, 0],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([2, 3, 512, 0],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([2, 4, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 4, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([22, 0],"float32"), shape=tuple(0,-1,4,), )
paddle.reshape(Tensor([3, 0, 128, 128],"float32"), list[3,1,128,128,], )
paddle.reshape(Tensor([3, 0, 512, 512],"float32"), list[3,1,512,512,], )
paddle.reshape(Tensor([3, 1, 0, 128],"float32"), list[3,1,128,128,], )
paddle.reshape(Tensor([3, 1, 0, 512],"float32"), list[3,1,512,512,], )
paddle.reshape(Tensor([3, 1, 128, 0],"float32"), list[3,1,128,128,], )
paddle.reshape(Tensor([3, 1, 512, 0],"float32"), list[3,1,512,512,], )
paddle.reshape(Tensor([32, 0, 15, 16, 15, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 0, 256],"float32"), list[32,15,15,256,], )
paddle.reshape(Tensor([32, 0, 58081],"float32"), list[32,1,241,241,], )
paddle.reshape(Tensor([32, 0, 8, 256],"complex64"), list[32,15,8,8,32,], )
paddle.reshape(Tensor([32, 0, 8, 8, 32],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([32, 1, 0, 16, 15, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 1, 0],"float32"), list[32,1,241,241,], )
paddle.reshape(Tensor([32, 1, 15, 0, 15, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 1, 15, 16, 0, 16],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 1, 15, 16, 15, 0],"float32"), list[32,1,240,240,], )
paddle.reshape(Tensor([32, 15, 0, 256],"complex64"), list[32,15,8,8,32,], )
paddle.reshape(Tensor([32, 15, 0, 8, 32],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([32, 15, 8, 0, 32],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([32, 15, 8, 0],"complex64"), list[32,15,8,8,32,], )
paddle.reshape(Tensor([32, 15, 8, 8, 0],"complex64"), list[32,15,8,256,], )
paddle.reshape(Tensor([32, 225, 0],"float32"), list[32,15,15,256,], )
paddle.reshape(Tensor([6, 0, 128, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([6, 0, 512, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([6, 1, 0, 128],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([6, 1, 0, 512],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([6, 1, 128, 0],"float32"), list[6,1,128,128,], )
paddle.reshape(Tensor([6, 1, 512, 0],"float32"), list[6,1,512,512,], )
paddle.reshape(Tensor([8, 0, 128, 128],"float32"), list[8,1,128,128,], )
paddle.reshape(Tensor([8, 0, 512, 512],"float32"), list[8,1,512,512,], )
paddle.reshape(Tensor([8, 0, 58081],"float32"), list[8,1,241,241,], )
paddle.reshape(Tensor([8, 1, 0, 128],"float32"), list[8,1,128,128,], )
paddle.reshape(Tensor([8, 1, 0, 512],"float32"), list[8,1,512,512,], )
paddle.reshape(Tensor([8, 1, 0],"float32"), list[8,1,241,241,], )
paddle.reshape(Tensor([8, 1, 128, 0],"float32"), list[8,1,128,128,], )
paddle.reshape(Tensor([8, 1, 512, 0],"float32"), list[8,1,512,512,], )
paddle.reshape(Tensor([9, 0],"float32"), shape=tuple(0,-1,4,), )
paddle.reshape(x=Tensor([0, 1, 10],"uint8"), shape=list[5,10,], )
paddle.reshape(x=Tensor([0, 2048],"float16"), shape=list[16777216,], )
paddle.reshape(x=Tensor([0, 2],"float64"), shape=Tensor([2],"int32"), )
paddle.reshape(x=Tensor([0, 2],"int32"), shape=list[1,4,], )
paddle.reshape(x=Tensor([0, 2],"int64"), shape=list[1,4,], )
paddle.reshape(x=Tensor([0, 30, 256],"float32"), shape=list[416,30,4,64,], )
paddle.reshape(x=Tensor([0, 30, 256],"float32"), shape=list[512,30,4,64,], )
paddle.reshape(x=Tensor([0, 30, 256],"float32"), shape=list[52,30,4,64,], )
paddle.reshape(x=Tensor([0, 30, 4, 64],"float32"), shape=list[416,30,256,], )
paddle.reshape(x=Tensor([0, 30, 4, 64],"float32"), shape=list[512,30,256,], )
paddle.reshape(x=Tensor([0, 30, 4, 64],"float32"), shape=list[52,30,256,], )
paddle.reshape(x=Tensor([0, 50, 256],"float32"), shape=list[416,50,4,64,], )
paddle.reshape(x=Tensor([0, 50, 256],"float32"), shape=list[512,50,4,64,], )
paddle.reshape(x=Tensor([0, 50, 256],"float32"), shape=list[52,50,4,64,], )
paddle.reshape(x=Tensor([0, 50, 4, 64],"float32"), shape=list[416,50,256,], )
paddle.reshape(x=Tensor([0, 50, 4, 64],"float32"), shape=list[512,50,256,], )
paddle.reshape(x=Tensor([0, 50, 4, 64],"float32"), shape=list[52,50,256,], )
paddle.reshape(x=Tensor([0, 7, 256],"float32"), shape=list[416,7,4,64,], )
paddle.reshape(x=Tensor([0, 7, 256],"float32"), shape=list[512,7,4,64,], )
paddle.reshape(x=Tensor([0, 7, 256],"float32"), shape=list[52,7,4,64,], )
paddle.reshape(x=Tensor([1, 1296, 0, 256],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 1296, 4, 0],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 1444, 0, 256],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 1444, 4, 0],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 1600, 0, 256],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 1600, 4, 0],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 18, 0, 32],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 18, 8, 0],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 21, 0, 32],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 21, 8, 0],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 2116, 0, 32],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 2116, 8, 0],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 484, 0, 64],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([1, 484, 8, 0],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([14, 10, 0],"float32"), shape=list[0,0,4,8,], )
paddle.reshape(x=Tensor([14, 3, 0],"float32"), shape=list[0,0,4,8,], )
paddle.reshape(x=Tensor([14, 7, 0],"float32"), shape=list[0,0,4,8,], )
paddle.reshape(x=Tensor([2, 0],"float64"), shape=Tensor([2],"int32"), )
paddle.reshape(x=Tensor([2, 0],"int32"), shape=list[1,4,], )
paddle.reshape(x=Tensor([2, 0],"int64"), shape=list[1,4,], )
paddle.reshape(x=Tensor([2, 100, 0, 128],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([2, 100, 4, 0],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([2, 121, 0, 128],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([2, 121, 4, 0],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([2, 7, 0],"float32"), shape=list[0,0,6,6,], )
paddle.reshape(x=Tensor([416, 0, 256],"float32"), shape=list[416,30,4,64,], )
paddle.reshape(x=Tensor([416, 0, 256],"float32"), shape=list[416,50,4,64,], )
paddle.reshape(x=Tensor([416, 0, 256],"float32"), shape=list[416,7,4,64,], )
paddle.reshape(x=Tensor([416, 0, 4, 64],"float32"), shape=list[416,30,256,], )
paddle.reshape(x=Tensor([416, 0, 4, 64],"float32"), shape=list[416,50,256,], )
paddle.reshape(x=Tensor([416, 30, 0, 64],"float32"), shape=list[416,30,256,], )
paddle.reshape(x=Tensor([416, 30, 0],"float32"), shape=list[416,30,4,64,], )
paddle.reshape(x=Tensor([416, 30, 4, 0],"float32"), shape=list[416,30,256,], )
paddle.reshape(x=Tensor([416, 50, 0, 64],"float32"), shape=list[416,50,256,], )
paddle.reshape(x=Tensor([416, 50, 0],"float32"), shape=list[416,50,4,64,], )
paddle.reshape(x=Tensor([416, 50, 4, 0],"float32"), shape=list[416,50,256,], )
paddle.reshape(x=Tensor([416, 7, 0],"float32"), shape=list[416,7,4,64,], )
paddle.reshape(x=Tensor([5, 0, 10],"uint8"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 1, 0],"uint8"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 17, 0],"float32"), shape=list[0,0,2,4,], )
paddle.reshape(x=Tensor([512, 0, 256],"float32"), shape=list[512,30,4,64,], )
paddle.reshape(x=Tensor([512, 0, 256],"float32"), shape=list[512,50,4,64,], )
paddle.reshape(x=Tensor([512, 0, 256],"float32"), shape=list[512,7,4,64,], )
paddle.reshape(x=Tensor([512, 0, 4, 64],"float32"), shape=list[512,30,256,], )
paddle.reshape(x=Tensor([512, 0, 4, 64],"float32"), shape=list[512,50,256,], )
paddle.reshape(x=Tensor([512, 30, 0, 64],"float32"), shape=list[512,30,256,], )
paddle.reshape(x=Tensor([512, 30, 0],"float32"), shape=list[512,30,4,64,], )
paddle.reshape(x=Tensor([512, 30, 4, 0],"float32"), shape=list[512,30,256,], )
paddle.reshape(x=Tensor([512, 50, 0, 64],"float32"), shape=list[512,50,256,], )
paddle.reshape(x=Tensor([512, 50, 0],"float32"), shape=list[512,50,4,64,], )
paddle.reshape(x=Tensor([512, 50, 4, 0],"float32"), shape=list[512,50,256,], )
paddle.reshape(x=Tensor([512, 7, 0],"float32"), shape=list[512,7,4,64,], )
paddle.reshape(x=Tensor([52, 0, 256],"float32"), shape=list[52,30,4,64,], )
paddle.reshape(x=Tensor([52, 0, 256],"float32"), shape=list[52,50,4,64,], )
paddle.reshape(x=Tensor([52, 0, 256],"float32"), shape=list[52,7,4,64,], )
paddle.reshape(x=Tensor([52, 0, 4, 64],"float32"), shape=list[52,30,256,], )
paddle.reshape(x=Tensor([52, 0, 4, 64],"float32"), shape=list[52,50,256,], )
paddle.reshape(x=Tensor([52, 30, 0, 64],"float32"), shape=list[52,30,256,], )
paddle.reshape(x=Tensor([52, 30, 0],"float32"), shape=list[52,30,4,64,], )
paddle.reshape(x=Tensor([52, 30, 4, 0],"float32"), shape=list[52,30,256,], )
paddle.reshape(x=Tensor([52, 50, 0, 64],"float32"), shape=list[52,50,256,], )
paddle.reshape(x=Tensor([52, 50, 0],"float32"), shape=list[52,50,4,64,], )
paddle.reshape(x=Tensor([52, 50, 4, 0],"float32"), shape=list[52,50,256,], )
paddle.reshape(x=Tensor([52, 7, 0],"float32"), shape=list[52,7,4,64,], )
paddle.reshape(x=Tensor([6, 15, 0],"float32"), shape=list[0,0,2,4,], )
paddle.reshape(x=Tensor([6, 17, 0],"float32"), shape=list[0,0,2,4,], )
paddle.reshape(x=Tensor([6, 7, 0],"float32"), shape=list[0,0,6,6,], )
paddle.reshape(x=Tensor([8192, 0],"float16"), shape=list[16777216,], )
paddle.scale(Tensor([0, 3, 4, 5, 6],"float32"), scale=Tensor([1],"float32"), )
paddle.scale(Tensor([2, 0, 4, 5, 6],"float32"), scale=Tensor([1],"float32"), )
paddle.scale(Tensor([2, 3, 0, 5, 6],"float32"), scale=Tensor([1],"float32"), )
paddle.scale(Tensor([2, 3, 4, 0, 6],"float32"), scale=Tensor([1],"float32"), )
paddle.scale(Tensor([2, 3, 4, 5, 0],"float32"), scale=Tensor([1],"float32"), )
paddle.scatter(Tensor([0, 128],"float32"), Tensor([105344],"int64"), Tensor([105344, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 128],"float32"), Tensor([4936],"int64"), Tensor([4936, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 128],"float32"), Tensor([58584],"int64"), Tensor([58584, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 128],"float32"), Tensor([78112],"int64"), Tensor([78112, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 1],"float32"), Tensor([100],"int64"), Tensor([100, 1],"float32"), )
paddle.scatter(Tensor([0, 1],"float32"), Tensor([4],"int64"), Tensor([4, 1],"float32"), )
paddle.scatter(Tensor([0, 1],"float32"), Tensor([800],"int64"), Tensor([800, 1],"float32"), )
paddle.scatter(Tensor([0, 1],"int64"), Tensor([100],"int64"), Tensor([100, 1],"int64"), )
paddle.scatter(Tensor([0, 1],"int64"), Tensor([4],"int64"), Tensor([4, 1],"int64"), )
paddle.scatter(Tensor([0, 256],"float32"), Tensor([10759233],"int64"), Tensor([10759233, 256],"float32"), )
paddle.scatter(Tensor([0, 2],"float32"), Tensor([4],"int64"), Tensor([4, 2],"float32"), overwrite=False, )
paddle.scatter(Tensor([0, 3],"float16"), Tensor([2],"int32"), Tensor([2, 3],"float16"), )
paddle.scatter(Tensor([0, 3],"float32"), index=Tensor([2],"int32"), updates=Tensor([2, 3],"float32"), )
paddle.scatter(Tensor([0, 64],"float16"), Tensor([5551],"int32"), Tensor([5551, 64],"float16"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float16"), Tensor([5633],"int32"), Tensor([5633, 64],"float16"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float16"), Tensor([7355],"int32"), Tensor([7355, 64],"float16"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float16"), Tensor([7485],"int32"), Tensor([7485, 64],"float16"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float16"), Tensor([7974],"int32"), Tensor([7974, 64],"float16"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([16, 1],"int64"), Tensor([16, 64],"float32"), )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([5551],"int32"), Tensor([5551, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([5633],"int32"), Tensor([5633, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([7355],"int32"), Tensor([7355, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([7485],"int32"), Tensor([7485, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0, 64],"float32"), Tensor([7974],"int32"), Tensor([7974, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([0],"float16"), Tensor([10],"int64"), Tensor([10],"float16"), )
paddle.scatter(Tensor([0],"float16"), Tensor([18],"int64"), Tensor([18],"float16"), )
paddle.scatter(Tensor([0],"float16"), Tensor([24],"int64"), Tensor([24],"float16"), )
paddle.scatter(Tensor([0],"float16"), Tensor([6],"int64"), Tensor([6],"float16"), )
paddle.scatter(Tensor([0],"float16"), Tensor([8],"int64"), Tensor([8],"float16"), )
paddle.scatter(Tensor([0],"float32"), Tensor([1024],"int64"), Tensor([1024],"float32"), )
paddle.scatter(Tensor([0],"float32"), Tensor([12],"int64"), Tensor([12],"float32"), )
paddle.scatter(Tensor([0],"float32"), Tensor([20],"int64"), Tensor([20],"float32"), )
paddle.scatter(Tensor([0],"float32"), Tensor([24],"int64"), Tensor([24],"float32"), )
paddle.scatter(Tensor([0],"float32"), Tensor([28],"int64"), Tensor([28],"float32"), )
paddle.scatter(Tensor([0],"int32"), Tensor([10],"int64"), Tensor([10],"int32"), overwrite=True, )
paddle.scatter(Tensor([0],"int32"), Tensor([12],"int64"), Tensor([12],"int32"), overwrite=True, )
paddle.scatter(Tensor([0],"int32"), Tensor([13],"int64"), Tensor([13],"int32"), overwrite=True, )
paddle.scatter(Tensor([0],"int32"), Tensor([14],"int64"), Tensor([14],"int32"), overwrite=True, )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52367],"int32"), updates=Tensor([52367],"int32"), )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52376],"int32"), updates=Tensor([52376],"int32"), )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52388],"int32"), updates=Tensor([52388],"int32"), )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52397],"int32"), updates=Tensor([52397],"int32"), )
paddle.scatter(Tensor([0],"int32"), index=Tensor([52404],"int32"), updates=Tensor([52404],"int32"), )
paddle.scatter(Tensor([0],"int64"), Tensor([1664],"int64"), Tensor([1664],"int64"), overwrite=True, )
paddle.scatter(Tensor([100, 0],"float32"), Tensor([100],"int64"), Tensor([100, 1],"float32"), )
paddle.scatter(Tensor([100, 0],"int64"), Tensor([100],"int64"), Tensor([100, 1],"int64"), )
paddle.scatter(Tensor([1200, 0],"float32"), Tensor([4],"int64"), Tensor([4, 1],"float32"), )
paddle.scatter(Tensor([1200, 0],"int64"), Tensor([4],"int64"), Tensor([4, 1],"int64"), )
paddle.scatter(Tensor([1600, 0],"float32"), Tensor([800],"int64"), Tensor([800, 1],"float32"), )
paddle.scatter(Tensor([31, 0],"float32"), Tensor([16, 0],"int64"), Tensor([16, 0],"float32"), )
paddle.scatter(Tensor([31, 64],"float32"), Tensor([16, 0],"int64"), Tensor([16, 64],"float32"), )
paddle.scatter(x=Tensor([0, 3],"float32"), index=Tensor([3],"int64"), updates=Tensor([3, 3],"float32"), overwrite=False, )
paddle.scatter_nd(Tensor([0, 1],"int64"), Tensor([4],"float32"), list[4,], )
paddle.scatter_nd(Tensor([0, 1],"int64"), Tensor([4],"int64"), list[4,], )
paddle.scatter_nd(Tensor([4, 0],"int64"), Tensor([4],"float32"), list[4,], )
paddle.scatter_nd(Tensor([4, 0],"int64"), Tensor([4],"int64"), list[4,], )
paddle.scatter_nd_add(Tensor([0, 2, 2],"float32"), Tensor([1, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([0, 2, 2],"float32"), Tensor([2, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([0, 3, 4],"int64"), Tensor([2, 3],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([0, 5, 9, 10],"float32"), Tensor([3, 2],"int64"), Tensor([3, 9, 10],"float32"), )
paddle.scatter_nd_add(Tensor([1, 0, 2],"float32"), Tensor([1, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([1, 2, 0],"float32"), Tensor([1, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([1, 2, 2],"float32"), Tensor([0, 3],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([1, 2, 2],"float32"), Tensor([1, 0],"int64"), Tensor([1],"float32"), )
paddle.scatter_nd_add(Tensor([2, 0, 2],"float32"), Tensor([2, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([2, 0, 4],"int64"), Tensor([2, 3],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([2, 2, 0],"float32"), Tensor([2, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([2, 2, 2],"float32"), Tensor([0, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([2, 2, 2],"float32"), Tensor([2, 0],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([2, 3, 0],"int64"), Tensor([2, 3],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([3, 0, 9, 10],"float32"), Tensor([3, 2],"int64"), Tensor([3, 9, 10],"float32"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4, 2, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4],"float32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4],"int32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([0, 3, 4],"int64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int64"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4, 2, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4],"float32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4],"int32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 0, 4],"int64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0, 2, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0],"float32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0],"int32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 0],"int64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int64"), )
paddle.sgn(Tensor([0, 4],"complex128"), )
paddle.sgn(Tensor([0, 4],"complex64"), )
paddle.sgn(Tensor([2, 0],"complex128"), )
paddle.sgn(Tensor([2, 0],"complex64"), )
paddle.shard_index(input=Tensor([2, 0],"int64"), index_num=20, nshards=2, shard_id=1, )
paddle.shard_index(input=Tensor([2, 0],"int64"), index_num=6, nshards=40, shard_id=4, )
paddle.shard_index(input=Tensor([4, 0],"int64"), index_num=13, nshards=3, shard_id=0, )
paddle.shard_index(input=Tensor([4, 2, 0],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([4, 2, 0],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.slice(Tensor([0, 5, 6],"float32"), axes=list[0,1,2,], starts=Tensor([3],"int64"), ends=Tensor([3],"int64"), )
paddle.slice(Tensor([1, 11, 32],"float64"), axes=list[1,], starts=list[Tensor([0],"int32"),], ends=list[Tensor([1],"int32"),], )
paddle.slice(Tensor([4, 0, 6],"float32"), axes=list[0,1,2,], starts=Tensor([3],"int32"), ends=Tensor([3],"int32"), )
paddle.slice(Tensor([4, 5, 0],"float32"), axes=list[0,1,2,], starts=Tensor([3],"int32"), ends=Tensor([3],"int32"), )
paddle.slice(Tensor([4, 5, 6],"float32"), axes=list[0,1,2,], starts=Tensor([0],"int32"), ends=Tensor([3],"int32"), )
paddle.slice(Tensor([4, 5, 6],"float32"), axes=list[0,1,2,], starts=Tensor([0],"int64"), ends=Tensor([3],"int64"), )
paddle.slice_scatter(Tensor([0, 6],"complex128"), Tensor([0, 2],"complex128"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6],"complex64"), Tensor([0, 2],"complex64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6],"float16"), Tensor([0, 2],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.split(Tensor([0, 1, 240, 240],"float32"), list[1,], axis=1, )
paddle.split(Tensor([0, 1, 241, 241],"float32"), list[1,], axis=1, )
paddle.split(Tensor([0, 1, 241, 241],"float32"), num_or_sections=list[1,], axis=1, )
paddle.split(Tensor([0, 1, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([0, 1, 32, 32],"float32"), list[1,], axis=1, )
paddle.split(Tensor([0, 1, 400, 192, 192],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 1, 500, 4],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([0, 1, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([0, 1, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([0, 10, 4, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 10, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([0, 1024, 16, 16],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([0, 1024, 16, 16],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([0, 1024, 8, 8],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([0, 11, 16, 96],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 112, 13, 13],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([0, 112, 14, 14],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([0, 112, 15, 15],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([0, 1156, 4],"float32"), 2, -1, )
paddle.split(Tensor([0, 12, 12096],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([0, 12, 4725],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([0, 12, 5376],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([0, 12, 8400],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([0, 121, 4],"float32"), 2, -1, )
paddle.split(Tensor([0, 1296, 4],"float32"), 2, -1, )
paddle.split(Tensor([0, 12],"float64"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 13, 10164],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([0, 13, 10285],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([0, 13, 11109],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([0, 13, 12096],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([0, 13, 16, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 13, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([0, 13, 3549],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([0, 13, 3598],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([0, 13, 4725],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([0, 13, 5376],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([0, 13, 6804],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([0, 13, 7581],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([0, 13, 8400],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([0, 13, 9261],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([0, 14, 10164],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([0, 14, 11109],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([0, 14, 12096],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([0, 14, 2100],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([0, 14, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([0, 14, 2541],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([0, 14, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([0, 14, 4116],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([0, 14, 4725],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([0, 14, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([0, 14, 5376],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([0, 14, 6069],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([0, 14, 6804],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([0, 14, 7581],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([0, 14, 8400],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([0, 15, 10164],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([0, 15, 11109],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([0, 15, 2100],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([0, 15, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([0, 15, 2541],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([0, 15, 3549],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([0, 15, 4116],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([0, 15, 6069],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([0, 15, 7581],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([0, 15, 9261],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([0, 16, 2, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 16, 2100],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([0, 16, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([0, 16, 2541],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([0, 16, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([0, 16, 3024],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([0, 16, 3549],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([0, 16, 3598],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([0, 16, 4116],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([0, 16, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([0, 16, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 16, 6804],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([0, 16, 6885],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([0, 16, 9261],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([0, 16],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 17, 3024],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([0, 17, 6069],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([0, 18, 1360],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([0, 18, 1726],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([0, 18, 3024],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([0, 19, 1360],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([0, 19, 1726],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([0, 192, 16, 16],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([0, 192, 18, 18],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([0, 192, 18, 18],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([0, 192, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([0, 196, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([0, 2, 400, 136, 136],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 2, 400, 2],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 2, 400, 4],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 2, 4165],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([0, 2, 492, 1],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([0, 2, 492, 4],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([0, 2, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 2, 500, 4],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([0, 2, 5440],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([0, 2, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([0, 20, 1360],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([0, 20, 1726],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([0, 2048, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 208, 28, 28],"float16"), 4, 1, )
paddle.split(Tensor([0, 208, 28, 28],"float32"), 4, 1, )
paddle.split(Tensor([0, 208, 56, 56],"float16"), 4, 1, )
paddle.split(Tensor([0, 27, 152, 272],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([0, 27, 152, 272],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([0, 27, 19, 34],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([0, 3, 10285],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([0, 3, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([0, 3, 34],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([0, 3, 5440],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([0, 310, 4],"float32"), 4, axis=-1, )
paddle.split(Tensor([0, 33, 18, 18],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([0, 33, 19, 19],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([0, 33, 20, 20],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([0, 384, 11, 11],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([0, 384, 11, 11],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([0, 384, 12, 12],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([0, 3],"float32"), 3, axis=1, )
paddle.split(Tensor([0, 4, 1, 192],"float16"), 3, axis=-1, )
paddle.split(Tensor([0, 4, 10285],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([0, 4, 3598],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([0, 4, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([0, 4, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 4, 5440],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([0, 4, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([0, 4, 7, 2],"float32"), 2, -1, )
paddle.split(Tensor([0, 400, 136, 136],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 400, 192, 192],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 43, 12, 9],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([0, 43, 13, 10],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([0, 43, 24, 18],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([0, 48, 28, 28],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([0, 48],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([0, 4],"float32"), 4, axis=-1, )
paddle.split(Tensor([0, 4],"float32"), list[1,1,1,1,], axis=-1, )
paddle.split(Tensor([0, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 5, 30, 30],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([0, 5, 4165],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([0, 5, 42, 42],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([0, 5, 60, 60],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([0, 5, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([0, 5, 6885],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([0, 54, 25, 25],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([0, 54, 25, 25],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([0, 54, 50, 50],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([0, 58, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 5],"float32"), 5, axis=-1, )
paddle.split(Tensor([0, 6, 8500],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([0, 6],"float32"), 6, axis=-1, )
paddle.split(Tensor([0, 7, 34],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([0, 7, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([0, 7, 6885],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([0, 7, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([0, 7, 8500],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([0, 7, 96],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 8, 4165],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([0, 8, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([0, 9, 512],"float32"), 2, axis=2, )
paddle.split(Tensor([0, 9, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([0, 9, 8500],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([0, 96, 32, 32],"float16"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([0, 96, 32, 32],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([0, 96, 7, 7],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([0, 96],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([0, 9],"float64"), num_or_sections=3, axis=1, )
paddle.split(Tensor([1, 0, 16, 96],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0, 4],"float32"), 4, axis=-1, )
paddle.split(Tensor([1, 11, 0, 96],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 13, 0, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 400, 0, 192],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 400, 192, 0],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1000, 1, 0, 32],"float32"), list[1,], axis=1, )
paddle.split(Tensor([1000, 1, 32, 0],"float32"), list[1,], axis=1, )
paddle.split(Tensor([1024, 0, 2, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1024, 16, 0, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([114, 0, 1, 192],"float16"), 3, axis=-1, )
paddle.split(Tensor([114, 4, 0, 192],"float16"), 3, axis=-1, )
paddle.split(Tensor([13, 0, 7, 2],"float32"), 2, -1, )
paddle.split(Tensor([13, 0, 96],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([14, 0, 34],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([14, 0, 4, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([14, 1, 0, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([14, 10, 0, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([2, 0, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([2, 0, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([2, 0, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([2, 0, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([2, 116, 0, 28],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([2, 116, 28, 0],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([2, 232, 0, 14],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([2, 232, 14, 0],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([2, 33, 0, 18],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 0, 19],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 0, 20],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 18, 0],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 19, 0],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 20, 0],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 400, 0, 136],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([2, 400, 0],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([2, 400, 136, 0],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([2, 464, 0, 7],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([2, 464, 7, 0],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([2, 48, 0, 28],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([2, 48, 28, 0],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([2, 5, 0, 30],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 0, 42],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 0, 60],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 30, 0],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 42, 0],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 60, 0],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 96, 0, 7],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([2, 96, 7, 0],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([20, 27, 0, 272],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([20, 27, 0, 272],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([20, 27, 0, 34],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([20, 27, 152, 0],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([20, 27, 152, 0],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([20, 27, 19, 0],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([24, 43, 0, 10],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 0, 18],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 0, 9],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 12, 0],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 13, 0],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 24, 0],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([3, 8, 5],"float64"), num_or_sections=2, axis=Tensor([0],"int64"), )
paddle.split(Tensor([32, 1, 0, 240],"float32"), list[1,], axis=1, )
paddle.split(Tensor([32, 1, 0, 241],"float32"), list[1,], axis=1, )
paddle.split(Tensor([32, 1, 240, 0],"float32"), list[1,], axis=1, )
paddle.split(Tensor([32, 1, 241, 0],"float32"), list[1,], axis=1, )
paddle.split(Tensor([32, 112, 0, 13],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 0, 14],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 0, 15],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 13, 0],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 14, 0],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 15, 0],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([4, 0, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([4, 6, 6],"int32"), num_or_sections=list[-1,], axis=Tensor([0],"int32"), )
paddle.split(Tensor([4, 6, 6],"int32"), num_or_sections=list[2,2,2,], axis=Tensor([0],"int32"), )
paddle.split(Tensor([512, 232, 0, 14],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([512, 232, 0, 14],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([512, 232, 14, 0],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([512, 232, 14, 0],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([512, 464, 0, 7],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([512, 464, 0, 7],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([512, 464, 7, 0],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([512, 464, 7, 0],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([6, 0, 400, 136, 136],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 400, 192, 192],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 492, 1],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 0, 500, 4],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 0, 192],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 192, 0],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 2, 400, 0, 136],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 2, 400, 0],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 2, 400, 136, 0],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 2, 492, 0],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 2, 500, 0],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([6, 4, 500, 0],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([6, 54, 0, 25],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 0, 25],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 0, 50],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 25, 0],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 25, 0],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 50, 0],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([64, 0, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([64, 0, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([64, 0, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([64, 1024, 0, 16],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 0, 16],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 0, 8],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 16, 0],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 16, 0],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 8, 0],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 192, 0, 16],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 0, 18],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 0, 18],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 16, 0],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 18, 0],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 18, 0],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 208, 0, 28],"float16"), 4, 1, )
paddle.split(Tensor([64, 208, 0, 28],"float32"), 4, 1, )
paddle.split(Tensor([64, 208, 0, 56],"float16"), 4, 1, )
paddle.split(Tensor([64, 208, 28, 0],"float16"), 4, 1, )
paddle.split(Tensor([64, 208, 28, 0],"float32"), 4, 1, )
paddle.split(Tensor([64, 208, 56, 0],"float16"), 4, 1, )
paddle.split(Tensor([64, 384, 0, 11],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 0, 11],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 0, 12],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 11, 0],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 11, 0],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 12, 0],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 96, 0, 32],"float16"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([64, 96, 0, 32],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([64, 96, 32, 0],"float16"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([64, 96, 32, 0],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([8, 1, 0, 241],"float32"), list[1,], axis=1, )
paddle.split(Tensor([8, 1, 0, 241],"float32"), num_or_sections=list[1,], axis=1, )
paddle.split(Tensor([8, 1, 241, 0],"float32"), list[1,], axis=1, )
paddle.split(Tensor([8, 1, 241, 0],"float32"), num_or_sections=list[1,], axis=1, )
paddle.split(x=Tensor([0, 192, 56, 56],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([0, 384, 28, 28],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([0, 768, 14, 14],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([128, 128, 0, 28],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([128, 128, 0, 56],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([128, 128, 28, 0],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([128, 128, 56, 0],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([128, 256, 0, 14],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([128, 256, 0, 28],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([128, 256, 14, 0],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([128, 256, 28, 0],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([128, 512, 0, 14],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([128, 512, 0, 7],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([128, 512, 14, 0],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([128, 512, 7, 0],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([2, 3],"int32"), num_or_sections=3, axis=Tensor([0],"int32"), )
paddle.split(x=Tensor([4, 1024, 0, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([4, 1024, 7, 0],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([4, 128, 0, 28],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([4, 128, 28, 0],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([4, 160, 0, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([4, 160, 14, 0],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([4, 192, 0, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([4, 192, 0, 56],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([4, 192, 28, 0],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([4, 192, 56, 0],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([4, 256, 0, 14],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([4, 256, 14, 0],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([4, 320, 0, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([4, 320, 7, 0],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([4, 384, 0, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([4, 384, 0, 28],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([4, 384, 14, 0],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([4, 384, 28, 0],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([4, 40, 0, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([4, 40, 56, 0],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([4, 512, 0, 14],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([4, 512, 14, 0],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([4, 64, 0, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([4, 64, 56, 0],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([4, 768, 0, 14],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([4, 768, 0, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([4, 768, 14, 0],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([4, 768, 7, 0],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([4, 80, 0, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([4, 80, 28, 0],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([4, 96, 0, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([4, 96, 56, 0],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([60, 192, 0, 56],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([60, 192, 56, 0],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([60, 384, 0, 28],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([60, 384, 28, 0],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([60, 768, 0, 14],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([60, 768, 14, 0],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([64, 1152, 0, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([64, 1152, 7, 0],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([64, 144, 0, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([64, 144, 56, 0],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([64, 1536, 0, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([64, 1536, 7, 0],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([64, 288, 0, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([64, 288, 28, 0],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([64, 576, 0, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([64, 576, 14, 0],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.squeeze(Tensor([1, 2, 1, 3],"float32"), axis=Tensor([0],"int64"), )
paddle.squeeze(x=Tensor([1, 2, 1, 3],"float64"), axis=Tensor([0],"int64"), )
paddle.std(Tensor([0, 32],"float32"), )
paddle.std(Tensor([0, 5],"float32"), )
paddle.std(Tensor([0],"float32"), )
paddle.std(Tensor([1, 0, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([3, 0],"float32"), )
paddle.std(Tensor([32, 0],"float32"), )
paddle.std(Tensor([6, 0],"float32"), axis=1, )
paddle.std(x=Tensor([0, 3, 3],"float64"), )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=0, )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.std(x=Tensor([0, 3],"float32"), )
paddle.std(x=Tensor([0, 3],"float64"), )
paddle.std(x=Tensor([2, 0],"float32"), )
paddle.std(x=Tensor([2, 0],"float64"), )
paddle.std(x=Tensor([3, 0, 3],"float64"), )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.std(x=Tensor([3, 3, 0],"float64"), )
paddle.sum(Tensor([0, 3, 4],"int32"), axis=0, )
paddle.sum(Tensor([0, 3],"bool"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int32"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 0, 4],"int32"), axis=0, )
paddle.sum(Tensor([2, 0],"bool"), axis=0, keepdim=True, )
paddle.sum(Tensor([2, 3, 0],"int32"), axis=0, )
paddle.sum(Tensor([3, 0, 2],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"int32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int32"), axis=2, keepdim=True, )
paddle.sum(x=Tensor([0, 2],"int32"), )
paddle.sum(x=Tensor([2, 0],"int32"), )
paddle.take(Tensor([0, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"float64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"int32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"int64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"int32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"int64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float32"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float32"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int32"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int32"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int64"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int64"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take_along_axis(Tensor([0, 2, 5],"float32"), Tensor([1, 1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([0, 2],"float32"), Tensor([4, 2],"float32"), 0, )
paddle.take_along_axis(Tensor([0, 2],"float32"), Tensor([4, 2],"int64"), 0, )
paddle.take_along_axis(Tensor([0, 2],"float64"), Tensor([1, 1],"int64"), 1, )
paddle.take_along_axis(Tensor([0, 3, 2],"float32"), Tensor([1, 3, 2],"int64"), axis=1, )
paddle.take_along_axis(Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([0, 3, 4],"float64"), Tensor([1, 3, 4],"int32"), axis=0, )
paddle.take_along_axis(Tensor([0, 36828, 4],"float32"), Tensor([1, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([0, 38367, 4],"float32"), Tensor([1, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([0, 3],"float32"), Tensor([1, 3],"float32"), 0, )
paddle.take_along_axis(Tensor([0, 3],"float32"), Tensor([1, 3],"int64"), 0, )
paddle.take_along_axis(Tensor([0, 3],"float32"), Tensor([1, 3],"int64"), 0, False, )
paddle.take_along_axis(Tensor([0, 3],"float64"), Tensor([1, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([0, 5],"float32"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([0, 5],"float64"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([0, 6380, 4],"float32"), Tensor([1, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([0, 8550, 4],"float32"), Tensor([1, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([1, 0, 4],"float32"), Tensor([1, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([1, 0, 4],"float32"), Tensor([1, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([1, 36828, 4],"float32"), Tensor([0, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([1, 38367, 4],"float32"), Tensor([0, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([1, 6380, 4],"float32"), Tensor([0, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([1, 8550, 4],"float32"), Tensor([0, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([128, 0],"float32"), Tensor([128, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([2, 0, 64],"bfloat16"), axis=1, indices=Tensor([2, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 0, 768],"bfloat16"), axis=1, indices=Tensor([2, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 0],"float32"), Tensor([2, 1],"int32"), axis=1, )
paddle.take_along_axis(Tensor([28, 0],"float32"), Tensor([28, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([3, 0, 5],"float32"), Tensor([1, 1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 0],"float32"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 0],"float32"), Tensor([3, 2],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 0],"float64"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 2, 0],"float32"), Tensor([1, 1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"int32"), axis=3, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"int32"), axis=4, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 2, 0],"float64"), Tensor([3, 6, 3, 4, 2, 1],"int32"), axis=5, )
paddle.take_along_axis(Tensor([30, 0],"float32"), Tensor([30, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([38, 0],"float32"), Tensor([38, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 0, 2],"float32"), Tensor([1, 3, 2],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 0, 4, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 0, 4],"float64"), Tensor([1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 0, 6],"float64"), Tensor([4, 1, 6],"int32"), axis=1, )
paddle.take_along_axis(Tensor([4, 0],"float64"), Tensor([1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 4, 0, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 4, 0],"float64"), Tensor([1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 4, 4, 0],"float64"), Tensor([1, 1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 7, 0],"float64"), Tensor([4, 7, 1],"int32"), axis=2, )
paddle.take_along_axis(Tensor([5, 0, 4],"float64"), Tensor([5, 1, 4],"int32"), axis=1, )
paddle.take_along_axis(Tensor([8, 0, 768],"float32"), axis=1, indices=Tensor([8, 7, 768],"int64"), )
paddle.tensor_split(Tensor([0, 4, 6],"float16"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 6],"float32"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 6],"float64"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 6],"float16"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 6],"float32"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 6],"float64"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0, 6],"float16"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 6],"float32"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 6],"float64"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0],"float16"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0],"float32"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0],"float64"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 4, 0],"float16"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"float32"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"float64"), 3, axis=2, )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 0],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([0],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([0],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 0],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([0],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([0],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([3, 0, 4, 4],"float64"), axes=0, )
paddle.tensordot(x=Tensor([2, 3, 4, 4],"float64"), y=Tensor([3, 4, 4, 0],"float64"), axes=0, )
paddle.tile(Tensor([1, 0, 1, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 0, 1, 1, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 0, 1, 1],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 1, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 0, 13, 13],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 2, 2],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([1, 0, 29, 29],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 5, 5],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 0, 64, 64, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 1, 0, 1, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 0, 13],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 1],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 29],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 2],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([1, 1, 0, 5],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 0, 64, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 1, 1, 0, 1, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 1, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 1, 1, 0, 3],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 1, 1, 1, 0],"float32"), list[216,248,1,1,2,1,], )
paddle.tile(Tensor([1, 1, 13, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 2, 0],"float32"), list[1,10,1,1,], )
paddle.tile(Tensor([1, 1, 29, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 5, 0],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([1, 1, 64, 0, 2],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 1, 64, 64, 0],"float32"), tuple(16,1,1,1,1,), )
paddle.tile(Tensor([1, 2, 0, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 2, 1, 0, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 2, 1, 64, 0],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 3, 0, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 3, 1, 0, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 3, 1, 1, 0, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([1, 3, 1, 1, 1, 0],"float32"), list[1,3,4,4,1,1,], )
paddle.tile(Tensor([13, 0, 16, 16],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([13, 2, 0, 16],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([13, 2, 16, 0],"float32"), repeat_times=list[1,1,4,1,], )
paddle.tile(Tensor([16, 0, 1, 1, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 0, 1, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 0, 1, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 1, 0, 3, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 0, 64, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 0, 64],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 1, 1, 3, 64, 0],"float32"), list[1,11,1,1,1,1,], )
paddle.tile(Tensor([16, 10, 0, 1, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 10, 0, 58, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 10, 1, 0, 4],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 10, 1, 0, 58],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([16, 10, 1, 1, 0],"float32"), list[1,1,64,64,1,], )
paddle.tile(Tensor([16, 10, 1, 58, 0],"float32"), list[1,1,4,1,1,], )
paddle.topk(Tensor([0, 1, 108],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 1, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 1, 117],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 1, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 1, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 1, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 10, 9216],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 1000216],"float32"), 8, axis=1, )
paddle.topk(Tensor([0, 1000],"float16"), k=1, )
paddle.topk(Tensor([0, 1000],"float32"), k=1, )
paddle.topk(Tensor([0, 1000],"float32"), k=5, )
paddle.topk(Tensor([0, 101, 40656],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 102, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 102, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 102],"float32"), k=1, )
paddle.topk(Tensor([0, 102],"float32"), k=5, )
paddle.topk(Tensor([0, 103, 70644],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 105, 75600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 107, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 108, 21504],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 11, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 113, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 116, 40656],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([0, 11645],"float32"), 900, axis=1, )
paddle.topk(Tensor([0, 11],"float64"), k=Tensor([1],"int64"), )
paddle.topk(Tensor([0, 12, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 12096],"float32"), 300, axis=1, )
paddle.topk(Tensor([0, 13, 3136],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 13, 3600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 13, 7744],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 1358],"float32"), k=3, largest=True, )
paddle.topk(Tensor([0, 14, 1936],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 14, 5776],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 14, 7056],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 15, 3600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 15, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([0, 16],"float32"), 2, axis=-1, )
paddle.topk(Tensor([0, 200],"float32"), 4, axis=1, )
paddle.topk(Tensor([0, 246],"float32"), 4, axis=1, )
paddle.topk(Tensor([0, 256000],"float32"), 2, axis=1, )
paddle.topk(Tensor([0, 256],"float32"), 2, axis=1, )
paddle.topk(Tensor([0, 3029],"float32"), k=3, largest=True, )
paddle.topk(Tensor([0, 32000],"float32"), 2, axis=1, )
paddle.topk(Tensor([0, 36828],"float32"), 900, axis=1, )
paddle.topk(Tensor([0, 37632],"float32"), 9408, axis=1, )
paddle.topk(Tensor([0, 396],"float32"), 8, axis=1, )
paddle.topk(Tensor([0, 4, 2],"int32"), 2, axis=2, largest=False, )
paddle.topk(Tensor([0, 4, 2],"int32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([0, 4, 2],"int64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([0, 4, 2],"int64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([0, 4, 4],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([0, 400],"float16"), k=5, )
paddle.topk(Tensor([0, 458],"float32"), k=3, largest=True, )
paddle.topk(Tensor([0, 4],"float64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([0, 4],"float64"), k=1, axis=-1, )
paddle.topk(Tensor([0, 4],"int32"), k=1, axis=-1, )
paddle.topk(Tensor([0, 4],"int64"), k=1, axis=-1, )
paddle.topk(Tensor([0, 512000],"float32"), 4, axis=1, )
paddle.topk(Tensor([0, 512],"float32"), 4, axis=1, )
paddle.topk(Tensor([0, 6380],"float32"), 300, axis=1, )
paddle.topk(Tensor([0, 6804],"float32"), 300, axis=1, )
paddle.topk(Tensor([0, 7, 8],"float64"), k=Tensor([1],"int64"), axis=1, )
paddle.topk(Tensor([0, 8000],"float32"), 799, )
paddle.topk(Tensor([0, 8400],"float32"), 300, axis=1, )
paddle.topk(Tensor([1, 0, 108],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 0, 1156],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 0, 117],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 0, 21504],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 24276],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 30324],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 33600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 37044],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 40656],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 65856],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 7056],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([1, 0, 70644],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1, 0, 75600],"float32"), 13, axis=-1, largest=True, )
paddle.topk(Tensor([1000, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([1022, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([10709, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([12, 0],"float32"), k=1, axis=0, )
paddle.topk(Tensor([1269, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([128, 0],"float16"), k=1, )
paddle.topk(Tensor([12906, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([13, 0],"float32"), k=1, axis=0, )
paddle.topk(Tensor([13, 0],"float64"), k=Tensor([1],"int64"), )
paddle.topk(Tensor([1302, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([1337, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([14, 0],"float16"), k=5, )
paddle.topk(Tensor([1482, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([14877, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([1488, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([1490, 0],"float32"), 10, axis=0, )
paddle.topk(Tensor([16, 0, 1936],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 0, 3136],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 0, 3600],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 0, 5776],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 0, 6400],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 0, 7744],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 0, 8464],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 0, 9216],"float32"), 9, axis=-1, largest=False, )
paddle.topk(Tensor([16, 0],"float16"), k=5, )
paddle.topk(Tensor([3, 0, 2],"int32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 0, 2],"int32"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 0, 2],"int64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 0, 2],"int64"), 2, axis=2, largest=False, )
paddle.topk(Tensor([3, 0],"float64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 4, 0],"int32"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 4, 0],"int32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([3, 4, 0],"int64"), 2, axis=0, largest=False, )
paddle.topk(Tensor([3, 4, 0],"int64"), 3, axis=1, largest=False, )
paddle.topk(Tensor([32, 0],"float16"), k=5, )
paddle.topk(Tensor([4, 4, 0],"float32"), 3, axis=1, largest=False, )
paddle.topk(Tensor([6, 7, 0],"float64"), k=Tensor([1],"int64"), axis=1, )
paddle.topk(x=Tensor([0, 400],"float64"), k=4, )
paddle.trapezoid(y=Tensor([0, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.trapezoid(y=Tensor([0, 3],"float32"), x=None, dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([0, 3],"float32"), x=Tensor([0, 3],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([0, 3],"float64"), x=None, dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([0, 3],"float64"), x=Tensor([0, 3],"float64"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float32"), x=None, dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float32"), x=Tensor([2, 0],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float32"), x=Tensor([2, 3],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float64"), x=None, dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float64"), x=Tensor([2, 0],"float64"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float64"), x=Tensor([2, 3],"float64"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([3, 0, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.trapezoid(y=Tensor([3, 3, 0],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=Tensor([0],"int64"), )
paddle.unique(Tensor([0, 5, 5],"float32"), return_index=True, return_inverse=True, return_counts=True, axis=0, )
paddle.unique(x=Tensor([0, 2],"int32"), axis=0, )
paddle.unique(x=Tensor([0, 2],"int64"), axis=0, )
paddle.unique(x=Tensor([2, 0],"float32"), axis=1, )
paddle.unique(x=Tensor([2, 0],"float64"), axis=1, )
paddle.unique_consecutive(Tensor([0],"float64"), return_inverse=True, return_counts=True, axis=-1, )
paddle.unique_consecutive(x=Tensor([0, 4],"float32"), return_inverse=True, return_counts=True, axis=0, )
paddle.unique_consecutive(x=Tensor([3, 0],"float64"), axis=1, )
paddle.vander(Tensor([0],"complex128"), 2, False, )
paddle.vander(Tensor([0],"complex128"), 3, False, )
paddle.vander(Tensor([0],"complex128"), 4, False, )
paddle.vander(Tensor([0],"float32"), 2, False, )
paddle.vander(Tensor([0],"float32"), 3, False, )
paddle.vander(Tensor([0],"float32"), 4, False, )
paddle.vander(Tensor([0],"float32"), 5, False, )
paddle.vander(Tensor([0],"float32"), 6, False, )
paddle.vander(Tensor([0],"float32"), 7, False, )
paddle.vander(Tensor([0],"float32"), 8, False, )
paddle.var(Tensor([0],"float32"), )
paddle.var(Tensor([1, 0, 4, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), 2, True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([16, 0],"float32"), axis=-1, keepdim=True, )
paddle.var(Tensor([16, 0],"float64"), axis=-1, keepdim=True, )
paddle.var(x=Tensor([0, 3, 3],"float64"), )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=0, )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,], )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.var(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.var(x=Tensor([0, 3],"float32"), )
paddle.var(x=Tensor([0, 3],"float64"), )
paddle.var(x=Tensor([2, 0],"float32"), )
paddle.var(x=Tensor([2, 0],"float64"), )
paddle.var(x=Tensor([3, 0, 3],"float64"), )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,], )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), )
paddle.var(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.var(x=Tensor([3, 3, 0],"float64"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, Tensor([0, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 5, 5],"float32"), Tensor([0, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([0, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 5, 5],"float32"), Tensor([0, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 5, 5],"float32"), Tensor([0, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([0, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 3, 5, 5],"float32"), Tensor([0, 2, 5, 5],"float32"), Tensor([0, 3, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 4, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 4, 4, 4],"float64"), Tensor([0, 18, 4, 4],"float64"), Tensor([0, 4, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 6, 4, 4],"float64"), Tensor([0, 18, 4, 4],"float64"), Tensor([0, 6, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([0, 9, 4, 4],"float64"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 8, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([0, 8, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([0, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([0, 8, 4, 4],"float32"), Tensor([0, 18, 4, 4],"float32"), Tensor([0, 8, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([0, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([2, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 8, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float64"), Tensor([2, 18, 4, 4],"float64"), Tensor([4, 4, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 4, 4],"float64"), Tensor([2, 18, 4, 4],"float64"), Tensor([4, 6, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 4, 4],"float64"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([2, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 0, 5, 5],"float32"), Tensor([2, 2, 5, 5],"float32"), Tensor([40, 3, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 18, 5, 5],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([2, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 2, 5, 5],"float32"), Tensor([0, 3, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 4, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 4, 4, 4],"float64"), Tensor([2, 18, 4, 4],"float64"), Tensor([0, 4, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 6, 4, 4],"float64"), Tensor([2, 18, 4, 4],"float64"), Tensor([0, 6, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 4, 4],"float64"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 8, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 8, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([0, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([2, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 8, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([0, 8, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([2, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([4, 0, 4, 4],"float32"), Tensor([4, 18, 4, 4],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, Tensor([4, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([4, 3, 4, 4],"float32"), Tensor([4, 18, 4, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, Tensor([4, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([5, 0, 4, 4],"float32"), Tensor([5, 18, 4, 4],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([5, 3, 4, 4],"float32"), Tensor([5, 18, 4, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 128, 100, 100],"float32"), offset=Tensor([0, 36, 100, 100],"float32"), weight=Tensor([0, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 128, 200, 200],"float32"), offset=Tensor([0, 36, 100, 100],"float32"), weight=Tensor([0, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 2, 5, 5],"float32"), offset=Tensor([0, 18, 3, 3],"float32"), mask=Tensor([0, 9, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 2, 5, 5],"float32"), offset=Tensor([0, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 2, 5, 5],"float32"), offset=Tensor([0, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 2, 5, 5],"float32"), offset=Tensor([0, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 256, 100, 100],"float32"), offset=Tensor([0, 36, 50, 50],"float32"), weight=Tensor([0, 256, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 256, 50, 50],"float32"), offset=Tensor([0, 36, 50, 50],"float32"), weight=Tensor([0, 256, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 3, 5, 5],"float32"), offset=Tensor([0, 18, 7, 7],"float32"), mask=Tensor([0, 9, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 3, 5, 5],"float32"), offset=Tensor([0, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 3, 5, 5],"float32"), offset=Tensor([0, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 3, 5, 5],"float32"), offset=Tensor([0, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 10, 10],"float32"), offset=Tensor([0, 18, 10, 10],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 13, 13],"float32"), offset=Tensor([0, 18, 13, 13],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 15, 15],"float32"), offset=Tensor([0, 18, 15, 15],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 16, 16],"float32"), offset=Tensor([0, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 20, 20],"float32"), offset=Tensor([0, 18, 10, 10],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 25, 25],"float32"), offset=Tensor([0, 36, 25, 25],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 26, 26],"float32"), offset=Tensor([0, 18, 13, 13],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 30, 30],"float32"), offset=Tensor([0, 18, 15, 15],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 32, 32],"float32"), offset=Tensor([0, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([0, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([0, 512, 50, 50],"float32"), offset=Tensor([0, 36, 25, 25],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([0, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 0, 10, 10],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 0, 20, 20],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 512, 10, 10],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12, 512, 20, 20],"float32"), offset=Tensor([12, 18, 10, 10],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 152, 272],"float32"), offset=Tensor([20, 18, 152, 272],"float32"), weight=Tensor([64, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 152, 272],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 38, 68],"float32"), offset=Tensor([20, 18, 38, 68],"float32"), weight=Tensor([128, 256, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 38, 68],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 38, 68],"float32"), offset=Tensor([20, 18, 38, 68],"float32"), weight=Tensor([256, 256, 3, 3],"float32"), bias=Tensor([256],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 38, 68],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 38, 68],"float32"), offset=Tensor([20, 18, 38, 68],"float32"), weight=Tensor([64, 256, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 38, 68],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 76, 136],"float32"), offset=Tensor([20, 18, 76, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 0, 76, 136],"float32"), offset=Tensor([20, 18, 76, 136],"float32"), weight=Tensor([64, 128, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 16, 16],"float32"), offset=Tensor([4, 18, 16, 16],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 32, 32],"float32"), offset=Tensor([4, 18, 16, 16],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), mask=Tensor([4, 9, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 1, 1],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), mask=Tensor([4, 9, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), mask=Tensor([4, 9, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 5],"float32"), mask=Tensor([4, 9, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=Tensor([4, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 7],"float32"), mask=Tensor([4, 9, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 5, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), mask=Tensor([4, 9, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), mask=Tensor([4, 9, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 90, 5, 5],"float32"), mask=Tensor([4, 45, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 5, 5],"float32"), offset=Tensor([4, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=Tensor([4, 45, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 64, 64],"float32"), offset=Tensor([4, 144, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([4, 72, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 0, 64, 64],"float32"), offset=Tensor([4, 72, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=4, groups=1, mask=Tensor([4, 36, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 2, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), mask=Tensor([4, 9, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 2, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 2, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 2, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([0, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), mask=Tensor([4, 9, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 7, 7],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 512, 16, 16],"float32"), offset=Tensor([4, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 512, 32, 32],"float32"), offset=Tensor([4, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 100, 100],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 100, 100],"float32"), offset=Tensor([6, 36, 50, 50],"float32"), weight=Tensor([256, 256, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 200, 200],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 25, 25],"float32"), offset=Tensor([6, 36, 25, 25],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 50, 50],"float32"), offset=Tensor([6, 36, 25, 25],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 0, 50, 50],"float32"), offset=Tensor([6, 36, 50, 50],"float32"), weight=Tensor([256, 256, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 128, 100, 100],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([0, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 128, 200, 200],"float32"), offset=Tensor([6, 36, 100, 100],"float32"), weight=Tensor([0, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 256, 100, 100],"float32"), offset=Tensor([6, 36, 50, 50],"float32"), weight=Tensor([0, 256, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 256, 50, 50],"float32"), offset=Tensor([6, 36, 50, 50],"float32"), weight=Tensor([0, 256, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 50, 50],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 512, 25, 25],"float32"), offset=Tensor([6, 36, 25, 25],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6, 512, 50, 50],"float32"), offset=Tensor([6, 36, 25, 25],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6, 18, 25, 25],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([64, 0, 16, 16],"float32"), offset=Tensor([64, 144, 16, 16],"float32"), weight=Tensor([64, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([64, 72, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([64, 0, 32, 32],"float32"), offset=Tensor([64, 144, 32, 32],"float32"), weight=Tensor([64, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([64, 72, 32, 32],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([64, 0, 64, 64],"float32"), offset=Tensor([64, 144, 64, 64],"float32"), weight=Tensor([64, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([64, 72, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 13, 13],"float32"), offset=Tensor([8, 18, 13, 13],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 15, 15],"float32"), offset=Tensor([8, 18, 15, 15],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 16, 16],"float32"), offset=Tensor([8, 18, 16, 16],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 26, 26],"float32"), offset=Tensor([8, 18, 13, 13],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 30, 30],"float32"), offset=Tensor([8, 18, 15, 15],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 0, 32, 32],"float32"), offset=Tensor([8, 18, 16, 16],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 13, 13],"float32"), offset=Tensor([8, 18, 13, 13],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 15, 15],"float32"), offset=Tensor([8, 18, 15, 15],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 16, 16],"float32"), offset=Tensor([8, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 16, 16],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 26, 26],"float32"), offset=Tensor([8, 18, 13, 13],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 13, 13],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 30, 30],"float32"), offset=Tensor([8, 18, 15, 15],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 15, 15],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([8, 512, 32, 32],"float32"), offset=Tensor([8, 18, 16, 16],"float32"), weight=Tensor([0, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([8, 9, 16, 16],"float32"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([0, 4],"float32"), 2, 5, 4, 224, rois_num=Tensor([1],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([0, 4],"float32"), 2, 5, 4, 224, rois_num=Tensor([2],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([0, 4],"float32"), 2, 5, 4, 224, rois_num=Tensor([4],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([0, 4],"float32"), 2, 6, 4, 224, rois_num=Tensor([1],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([1, 0],"float32"), 2, 5, 4, 224, rois_num=Tensor([1],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([1, 4],"float32"), 2, 5, 4, 224, rois_num=Tensor([0],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([10, 0],"float32"), 2, 5, 4, 224, rois_num=Tensor([1],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([10, 4],"float32"), 2, 5, 4, 224, rois_num=Tensor([0],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([1024, 0],"float32"), 2, 5, 4, 224, rois_num=Tensor([2],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([1024, 4],"float32"), 2, 5, 4, 224, rois_num=Tensor([0],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([106, 0],"float32"), 2, 5, 4, 224, rois_num=Tensor([4],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([106, 4],"float32"), 2, 5, 4, 224, rois_num=Tensor([0],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([11, 0],"float32"), 2, 5, 4, 224, rois_num=Tensor([1],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([11, 4],"float32"), 2, 5, 4, 224, rois_num=Tensor([0],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([512, 0],"float32"), 2, 6, 4, 224, rois_num=Tensor([1],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(Tensor([512, 4],"float32"), 2, 6, 4, 224, rois_num=Tensor([0],"int64"), )
paddle.vision.ops.distribute_fpn_proposals(fpn_rois=Tensor([0, 4],"float32"), min_level=2, max_level=5, refer_level=4, refer_scale=224, rois_num=Tensor([2],"int32"), )
paddle.vision.ops.distribute_fpn_proposals(fpn_rois=Tensor([10, 0],"float32"), min_level=2, max_level=5, refer_level=4, refer_scale=224, rois_num=Tensor([2],"int32"), )
paddle.vision.ops.distribute_fpn_proposals(fpn_rois=Tensor([10, 4],"float32"), min_level=2, max_level=5, refer_level=4, refer_scale=224, rois_num=Tensor([0],"int32"), )
paddle.vision.ops.roi_align(Tensor([3, 3, 0, 6],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([3, 3, 0, 6],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, True, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 0],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 0],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 0],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, True, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 4],"float64"), Tensor([0],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 6],"float64"), Tensor([6, 4],"float64"), Tensor([0],"int32"), tuple(2,2,), 0.5, -1, True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=1, spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 40, 60],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 40, 60],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 42, 63],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 42, 63],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 59],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 59],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 66],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 66],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 69],"float32"), boxes=Tensor([512, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 1024, 44, 69],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 152],"float32"), boxes=Tensor([103, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 152],"float32"), boxes=Tensor([115, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 152],"float32"), boxes=Tensor([124, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 152],"float32"), boxes=Tensor([133, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 152],"float32"), boxes=Tensor([159, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 216],"float32"), boxes=Tensor([208, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 240],"float32"), boxes=Tensor([113, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 240],"float32"), boxes=Tensor([145, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 60],"float32"), boxes=Tensor([1, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 0, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([103, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([103, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([115, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([115, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([124, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([124, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([133, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([133, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([159, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 100, 152],"float32"), boxes=Tensor([159, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 12, 9],"float32"), boxes=Tensor([5, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 12, 9],"float32"), boxes=Tensor([5, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 144, 200],"float32"), boxes=Tensor([462, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 144, 200],"float32"), boxes=Tensor([462, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 0],"float32"), boxes=Tensor([113, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 0],"float32"), boxes=Tensor([145, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 0],"float32"), boxes=Tensor([200, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 0],"float32"), boxes=Tensor([208, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 216],"float32"), boxes=Tensor([200, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 216],"float32"), boxes=Tensor([200, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 216],"float32"), boxes=Tensor([208, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 216],"float32"), boxes=Tensor([208, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 240],"float32"), boxes=Tensor([113, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 240],"float32"), boxes=Tensor([113, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 240],"float32"), boxes=Tensor([145, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 160, 240],"float32"), boxes=Tensor([145, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 15],"float32"), boxes=Tensor([9, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 15],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([11, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([16, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([9, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 27],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([10, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([10, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([11, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([13, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([13, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([14, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 20, 30],"float32"), boxes=Tensor([14, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 32, 0],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 36, 0],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 36, 50],"float32"), boxes=Tensor([11, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 36, 50],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 0],"float32"), boxes=Tensor([1, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 30],"float32"), boxes=Tensor([34, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 30],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 54],"float32"), boxes=Tensor([116, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 54],"float32"), boxes=Tensor([116, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 54],"float32"), boxes=Tensor([119, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 54],"float32"), boxes=Tensor([119, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([1, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([1, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([142, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([142, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([17, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([18, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([1, 256, 40, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([1, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(Tensor([3, 3, 6, 4],"float64"), Tensor([6, 0],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(Tensor([3, 3, 6, 4],"float64"), Tensor([6, 4],"float64"), Tensor([0],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=1, spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 0],"float32"), boxes_num=Tensor([1],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([1, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([0],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 0, 1, 32, 32],"float64"), n=-10, )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([0, 2, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.logical_and(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 0, 3],"bool"), )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([0],"float32"),Tensor([64],"float32"),], )
paddle.equal(x=Tensor([3, 0],"float64"), y=Tensor([1, 0],"float64"), )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, True, )
paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 0, 3, 3],"float64"), )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([0, 1, 1, 3, 3],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.row_stack(list[Tensor([0],"float64"),], )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), left=False, )
paddle.linalg.norm(Tensor([2, 3, 4, 0],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 4],"float64"), )
paddle.linalg.inv(x=Tensor([0, 3, 4, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float32"), Tensor([3, 4],"float32"), False, )
paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 0, 1, 1, 3, 3],"float64"), )
paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 1, 1, 1, 3, 3],"float64"), )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 0, 4],"float64"), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 2, 0, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 0, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 2, 4, 4],"float32"),Tensor([0],"float32"),], )
paddle.equal(Tensor([2, 1, 0, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), tol=Tensor([0],"float32"), )
paddle.logical_and(x=Tensor([1, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_and(Tensor([1, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([0, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.linalg.cov(x=Tensor([4, 0],"float64"), )
paddle.linalg.norm(Tensor([0, 5, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.concat(tuple(Tensor([64, 0, 28, 28],"float16"),Tensor([64, 0, 28, 28],"float16"),Tensor([64, 0, 28, 28],"float16"),Tensor([64, 0, 28, 28],"float16"),Tensor([64, 0, 28, 28],"float16"),), 1, )
paddle.logical_xor(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 0, 3],"bool"), )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 0, 3],"float64"), )
paddle.logical_or(x=Tensor([1, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_or(x=Tensor([1, 0, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float64"), axis=2, )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.linalg.norm(Tensor([0, 3, 4, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.concat(tuple(Tensor([385, 0],"float16"),Tensor([385, 0],"float16"),), 1, )
paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([0],"int8"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.concat(tuple(Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 0, 32, 32],"float32"),Tensor([2, 0, 32, 32],"float32"),), 1, )
paddle.logical_or(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 0, 3],"bool"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 0],"float64"), axes=0, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.concat(tuple(Tensor([4, 0, 248, 216],"float32"),Tensor([4, 0, 248, 216],"float32"),Tensor([4, 0, 248, 216],"float32"),Tensor([4, 0, 248, 216],"float32"),), axis=1, )
paddle.nn.functional.layer_norm(Tensor([0, 129],"float32"), list[129,], Tensor([129],"float32"), None, )
paddle.bitwise_and(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.equal(x=Tensor([3, 3, 0],"float64"), y=Tensor([3, 3, 3, 1],"float64"), )
paddle.vstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.repeat_interleave(Tensor([0, 3],"int32"), 2, None, )
paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 0, 1, 3, 3],"float64"), )
paddle.nn.functional.layer_norm(Tensor([0, 128, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.bitwise_or(Tensor([3, 0, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.linalg.norm(Tensor([5, 5, 0],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, True, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.logical_and(Tensor([1, 496, 512],"bool"), Tensor([0, 496, 512],"bool"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float64"), axis=2, )
paddle.linalg.norm(Tensor([5, 0, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.concat(tuple(Tensor([64, 0, 512],"float32"),Tensor([64, 0, 512],"float32"),Tensor([64, 0, 512],"float32"),), 2, )
paddle.logical_and(Tensor([10, 0, 499, 1],"float32"), Tensor([499, 499],"float32"), )
paddle.linalg.matrix_power(x=Tensor([3, 0, 3, 2, 1, 32, 32],"float64"), n=10, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 0, 4],"float64"), axes=0, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, False, )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 4],"float64"), )
paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, True, )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 0],"int64"), )
paddle.logical_and(Tensor([0, 1024, 1024],"bool"), Tensor([1, 1024, 1024],"bool"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 5],"float32"), tol=0.1, )
paddle.equal(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.logical_or(Tensor([13, 7, 0],"bool"), Tensor([13, 1, 0],"bool"), )
paddle.linalg.matrix_rank(x=Tensor([0, 5],"float64"), tol=4.4, hermitian=False, )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([0],"float32"),], )
paddle.repeat_interleave(Tensor([2, 0],"int32"), 2, None, )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([200, 0],"float64"), True, )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, False, )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 0],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 3, 2, 1, 32, 32],"float64"), n=10, )
paddle.bitwise_xor(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 0, 1],"int64"), )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.logical_and(Tensor([1, 1001],"bool"), Tensor([0, 1001],"bool"), )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, True, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, False, )
paddle.row_stack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.bitwise_and(Tensor([0, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.equal(x=Tensor([3, 3, 3, 1],"float64"), y=Tensor([3, 3, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float64"), axis=2, )
paddle.linalg.matrix_power(x=Tensor([0, 4, 4],"float32"), n=3, )
paddle.bitwise_xor(Tensor([0, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 0, 32, 32],"float64"), n=10, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([0, 4, 3, 4],"float64"), axes=0, )
paddle.concat(tuple(Tensor([2, 0, 32],"float32"),Tensor([2, 0, 32],"float32"),), axis=-1, )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.equal(Tensor([1, 0, 28],"int32"), Tensor([6, 0, 1],"int32"), )
paddle.logical_xor(x=Tensor([1, 0],"bool"), y=Tensor([2, 0],"bool"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.logical_and(Tensor([0, 1, 499, 1],"float32"), Tensor([499, 499],"float32"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0],"float32"), )
paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.vstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], name=None, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 0, 1, 32, 32],"float64"), n=10, )
paddle.logical_or(Tensor([1, 1],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_xor(x=Tensor([0, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0],"float32"), tol=0.1, )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 0],"int64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 0],"float64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 1, )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 4, 4, 0],"float32"),Tensor([3],"float32"),], )
paddle.logical_and(x=Tensor([1, 0, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 0, 3, 4],"float64"), axes=0, )
paddle.linalg.norm(Tensor([2, 0, 4, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), )
paddle.bitwise_or(Tensor([0, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.equal(x=Tensor([0, 1, 3, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.logical_and(x=Tensor([0, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1],"bool"), y=Tensor([0],"bool"), )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, False, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4, 4],"float64"), n=8, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.concat(tuple(Tensor([4, 0, 128, 128],"float32"),Tensor([4, 0, 128, 128],"float32"),Tensor([4, 0, 128, 128],"float32"),Tensor([4, 0, 128, 128],"float32"),Tensor([4, 0, 128, 128],"float32"),), axis=1, )
paddle.logical_and(Tensor([1, 1],"bool"), Tensor([1, 0],"bool"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), )
paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 4, 4],"float64"), n=64, )
paddle.equal(Tensor([1, 28, 0],"int32"), Tensor([6, 1, 0],"int32"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.logical_and(Tensor([10, 1, 499, 1],"float32"), Tensor([499, 0],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), left=False, )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([0, 200],"float64"), True, )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([0, 1, 3, 3],"float64"), )
paddle.linalg.matrix_power(x=Tensor([3, 0, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.bitwise_xor(Tensor([3, 0, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, False, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 4, 0, 4],"float64"), axes=1, )
paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, False, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 0, 11, 4, 4],"float64"), n=3, )
paddle.equal(Tensor([114, 1],"float64"), Tensor([114, 0],"float64"), )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 0, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 4, 0, 4],"float32"),Tensor([3],"float32"),], )
paddle.linalg.matrix_power(x=Tensor([3, 0, 32, 32],"float64"), n=-10, )
paddle.linalg.norm(Tensor([2, 3, 0, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.logical_and(Tensor([1, 1024, 1024],"bool"), Tensor([0, 1024, 1024],"bool"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 0, 3, 3],"float64"), )
paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 0, 1, 3, 3],"float64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 0, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float32"), axis=2, )
paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), )
paddle.concat(tuple(Tensor([64, 120, 0, 14],"float16"),Tensor([64, 120, 0, 14],"float16"),Tensor([64, 120, 0, 14],"float16"),Tensor([64, 120, 0, 14],"float16"),), axis=1, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 0, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_rank(x=Tensor([4, 4],"float64"), tol=Tensor([0],"float64"), hermitian=True, )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float64"), )
paddle.linalg.matrix_power(x=Tensor([0, 2, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 10, 10],"float64"), n=64, )
paddle.logical_or(Tensor([13, 7, 1],"bool"), Tensor([13, 1, 0],"bool"), )
paddle.logical_xor(x=Tensor([1, 0, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, True, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 4, 3, 0],"float64"), axes=1, )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.bitwise_and(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.concat(tuple(Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),), axis=1, )
paddle.nn.functional.glu(x=Tensor([4, 0, 2, 8],"float32"), axis=2, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.linalg.matrix_power(x=Tensor([0, 4, 4],"float64"), n=3, )
paddle.logical_or(x=Tensor([1, 0],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_or(Tensor([1, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([0, 1, 1],"int32"), )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, True, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), )
paddle.linalg.matrix_power(x=Tensor([0, 2, 32, 32],"float64"), n=10, )
paddle.linalg.solve(x=Tensor([0, 14, 14],"float64"), y=Tensor([0, 14, 2],"float64"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), 0.1, hermitian=False, )
paddle.logical_and(Tensor([0, 1001],"bool"), Tensor([1, 1001],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 0, 1],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([0],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 0, 1, 32, 32],"float64"), n=-2, )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 2, 1, 32, 32],"float64"), n=10, )
paddle.tensordot(x=Tensor([3, 4, 3, 4],"float64"), y=Tensor([4, 0, 3, 4],"float64"), axes=1, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), tol=0.1, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.logical_and(x=Tensor([1],"bool"), y=Tensor([0],"bool"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.linalg.matrix_rank(Tensor([3, 0, 5],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.mm(Tensor([1, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.logical_or(x=Tensor([1],"bool"), y=Tensor([0],"bool"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([0, 3, 1, 5],"int64"), )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.logical_or(Tensor([2, 1],"bool"), Tensor([2, 0],"bool"), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, False, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 0, 4, 4],"float64"), n=3, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, False, )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([0, 3, 1, 5],"int64"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.linalg.matrix_power(x=Tensor([0, 2, 10, 10],"float64"), n=64, )
paddle.fmin(Tensor([1],"int64"), Tensor([0],"int64"), )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 0, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.bitwise_or(Tensor([2, 3, 1, 0],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.concat(tuple(Tensor([64, 256, 0, 28],"float16"),Tensor([64, 256, 0, 28],"float16"),Tensor([64, 128, 0, 28],"float16"),Tensor([64, 256, 0, 28],"float16"),Tensor([64, 256, 0, 28],"float16"),), 1, )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, True, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 0, 1, 11, 4, 4],"float64"), n=3, )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 0, 3, 3],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.bitwise_and(Tensor([2, 3, 1, 0],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.logical_or(Tensor([13, 0, 1],"bool"), Tensor([13, 0, 7],"bool"), )
paddle.mm(input=Tensor([2, 3],"float32"), mat2=Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.bitwise_xor(Tensor([2, 3, 1, 0],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.linalg.matrix_power(x=Tensor([3, 0, 32, 32],"float64"), n=10, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, True, )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([0, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.bitwise_and(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 0, 1],"int64"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.logical_and(Tensor([0, 496, 512],"bool"), Tensor([1, 496, 512],"bool"), )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 2, 1, 32, 32],"float64"), n=-10, )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.tensordot(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), axes=2, )
paddle.equal(x=Tensor([1, 1, 0, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.logical_or(x=Tensor([0, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.nn.functional.glu(x=Tensor([4, 6, 2, 0],"float32"), )
paddle.linalg.matrix_power(x=Tensor([3, 0, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.logical_or(Tensor([0, 7, 1],"bool"), Tensor([0, 1, 7],"bool"), )
paddle.linalg.inv(x=Tensor([0, 2, 2],"float64"), )
paddle.logical_or(Tensor([1],"bool"), Tensor([0],"bool"), )
paddle.linalg.cov(Tensor([0],"float32"), )
paddle.concat(tuple(Tensor([1, 1, 0, 2],"float32"),Tensor([1, 1, 0, 20],"float32"),), axis=-1, )
paddle.equal(Tensor([2, 1, 8, 0],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.logical_or(Tensor([13, 0, 1],"bool"), Tensor([13, 1, 7],"bool"), )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, True, )
paddle.concat(tuple(Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),Tensor([64, 0, 14, 14],"float16"),), 1, )
paddle.nn.functional.layer_norm(Tensor([8, 0, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.concat(tuple(Tensor([1, 0],"bool"),Tensor([1, 0],"bool"),), axis=1, )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 0, 3],"float64"), )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 2, 4, 0],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.concat(tuple(Tensor([1, 0, 2],"float32"),Tensor([1, 0, 20],"float32"),), axis=-1, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, True, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 0, 32, 32],"float64"), n=-2, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.equal(x=Tensor([0, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.linalg.matrix_power(x=Tensor([3, 0, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.vstack(list[Tensor([0],"float64"),], )
paddle.equal(x=Tensor([1, 0, 3, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, True, )
paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([0],"int16"), )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([0, 1, 1],"int32"), )
paddle.logical_and(x=Tensor([1, 0],"bool"), y=Tensor([2, 0],"bool"), )
paddle.bitwise_or(Tensor([2, 3, 3, 3, 4, 0, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.linalg.matrix_power(x=Tensor([0, 2, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.concat(tuple(Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),), 1, )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.equal(Tensor([1, 28, 0],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.concat(tuple(Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),Tensor([64, 0, 28, 28],"float32"),), 1, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.functional.glu(x=Tensor([4, 6, 0, 8],"float32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 0],"int64"), )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, False, )
paddle.bitwise_or(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.linalg.matrix_power(x=Tensor([0, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 4, 4],"float64"), n=8, )
paddle.equal(Tensor([0, 1, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.equal(Tensor([2, 1],"int64"), Tensor([0],"int64"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), left=False, )
paddle.bitwise_xor(Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 0, 5, 2],"bool"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), left=False, )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([0, 3, 1, 5],"int64"), )
paddle.linalg.inv(x=Tensor([5, 0, 4, 4],"float64"), )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=4.4, hermitian=False, )
paddle.vstack(list[Tensor([0],"float64"),], name=None, )
paddle.concat(tuple(Tensor([64, 120, 14, 0],"float16"),Tensor([64, 120, 14, 0],"float16"),Tensor([64, 120, 14, 0],"float16"),Tensor([64, 120, 14, 0],"float16"),), axis=1, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([0],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.concat(tuple(Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),Tensor([64, 0, 14, 14],"float32"),), 1, )
paddle.equal(Tensor([1, 0, 28],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.bitwise_and(Tensor([3, 0, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4, 4],"float64"), n=64, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, True, )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 0],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([1851904],"float32"), list[Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([0, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 128],"float32"),Tensor([128],"float32"),Tensor([128, 512],"float32"),Tensor([512],"float32"),Tensor([512, 128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], )
