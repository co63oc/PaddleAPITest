2025-03-03 11:03:19.448416 test begin: paddle.flatten(Tensor([1, 1024, 1, 4194304],"float32"), 1, )

W0303 11:04:45.320232 57613 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:04:45.321761 57613 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.flatten(Tensor([1, 1024, 1, 4194304],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 1024, 1, 4194304], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 1024.
  [Hint: Expected capacity == in_size, but received capacity:1024 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:04:45.403987 test begin: paddle.flatten(Tensor([1, 1024, 1, 4194304],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 1024, 1, 4194304],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 1024, 1, 4194304], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 1024.
  [Hint: Expected capacity == in_size, but received capacity:1024 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:05:03.682832 test begin: paddle.flatten(Tensor([1, 1024, 4194304, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 1024, 4194304, 1],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 1024, 4194304, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 1024.
  [Hint: Expected capacity == in_size, but received capacity:1024 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:05:25.752028 test begin: paddle.flatten(Tensor([1, 1024, 4194304, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 1024, 4194304, 1],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 1024, 4194304, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 1024.
  [Hint: Expected capacity == in_size, but received capacity:1024 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:05:44.130629 test begin: paddle.flatten(Tensor([1, 119304648, 6, 6],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 119304648, 6, 6],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 119304648, 6, 6], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:05.094924 test begin: paddle.flatten(Tensor([1, 119304648, 6, 6],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 119304648, 6, 6],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 119304648, 6, 6], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:27.740846 test begin: paddle.flatten(Tensor([1, 16, 44739243, 6],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 16, 44739243, 6],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 44739243, 6], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:49.453658 test begin: paddle.flatten(Tensor([1, 16, 44739243, 6],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 16, 44739243, 6],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 44739243, 6], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:07:07.357050 test begin: paddle.flatten(Tensor([1, 16, 5, 53687092],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 16, 5, 53687092],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 5, 53687092], X's size = 4294967360, 'shape' is [1, 64], the capacity of 'shape' is 64.
  [Hint: Expected capacity == in_size, but received capacity:64 != in_size:4294967360.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:07:26.160710 test begin: paddle.flatten(Tensor([1, 16, 5, 53687092],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 16, 5, 53687092],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 5, 53687092], X's size = 4294967360, 'shape' is [1, 64], the capacity of 'shape' is 64.
  [Hint: Expected capacity == in_size, but received capacity:64 != in_size:4294967360.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:07:51.235564 test begin: paddle.flatten(Tensor([1, 16, 53687092, 5],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 16, 53687092, 5],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 53687092, 5], X's size = 4294967360, 'shape' is [1, 64], the capacity of 'shape' is 64.
  [Hint: Expected capacity == in_size, but received capacity:64 != in_size:4294967360.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:08:11.693390 test begin: paddle.flatten(Tensor([1, 16, 53687092, 5],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 16, 53687092, 5],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 53687092, 5], X's size = 4294967360, 'shape' is [1, 64], the capacity of 'shape' is 64.
  [Hint: Expected capacity == in_size, but received capacity:64 != in_size:4294967360.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:08:32.854162 test begin: paddle.flatten(Tensor([1, 16, 6, 44739243],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 16, 6, 44739243],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 6, 44739243], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:08:53.897345 test begin: paddle.flatten(Tensor([1, 16, 6, 44739243],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 16, 6, 44739243],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 16, 6, 44739243], X's size = 4294967328, 'shape' is [1, 32], the capacity of 'shape' is 32.
  [Hint: Expected capacity == in_size, but received capacity:32 != in_size:4294967328.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:18.653864 test begin: paddle.flatten(Tensor([1, 171798692, 5, 5],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 171798692, 5, 5],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 171798692, 5, 5], X's size = 4294967300, 'shape' is [1, 4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:40.092047 test begin: paddle.flatten(Tensor([1, 171798692, 5, 5],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 171798692, 5, 5],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 171798692, 5, 5], X's size = 4294967300, 'shape' is [1, 4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:00.634046 test begin: paddle.flatten(Tensor([1, 2048, 1, 2097152],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 2048, 1, 2097152],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 2048, 1, 2097152], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 2048.
  [Hint: Expected capacity == in_size, but received capacity:2048 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:23.606617 test begin: paddle.flatten(Tensor([1, 2048, 1, 2097152],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 2048, 1, 2097152],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 2048, 1, 2097152], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 2048.
  [Hint: Expected capacity == in_size, but received capacity:2048 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:49.193280 test begin: paddle.flatten(Tensor([1, 2048, 2097152, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 2048, 2097152, 1],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 2048, 2097152, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 2048.
  [Hint: Expected capacity == in_size, but received capacity:2048 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:11:12.046313 test begin: paddle.flatten(Tensor([1, 2048, 2097152, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 2048, 2097152, 1],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 2048, 2097152, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 2048.
  [Hint: Expected capacity == in_size, but received capacity:2048 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:11:32.648106 test begin: paddle.flatten(Tensor([1, 512, 1, 8388608],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 512, 1, 8388608],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 512, 1, 8388608], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 512.
  [Hint: Expected capacity == in_size, but received capacity:512 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:11:52.887431 test begin: paddle.flatten(Tensor([1, 512, 1, 8388608],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 512, 1, 8388608],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 512, 1, 8388608], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 512.
  [Hint: Expected capacity == in_size, but received capacity:512 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:12:19.034170 test begin: paddle.flatten(Tensor([1, 512, 8388608, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 512, 8388608, 1],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 512, 8388608, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 512.
  [Hint: Expected capacity == in_size, but received capacity:512 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:12:38.076849 test begin: paddle.flatten(Tensor([1, 512, 8388608, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 512, 8388608, 1],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 512, 8388608, 1], X's size = 4294967296, 'shape' is [1, 0], the capacity of 'shape' is 512.
  [Hint: Expected capacity == in_size, but received capacity:512 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:01.207784 test begin: paddle.flatten(Tensor([1, 8, 7, 76695845],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([1, 8, 7, 76695845],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 8, 7, 76695845], X's size = 4294967320, 'shape' is [1, 24], the capacity of 'shape' is 24.
  [Hint: Expected capacity == in_size, but received capacity:24 != in_size:4294967320.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:19.467157 test begin: paddle.flatten(Tensor([1, 8, 7, 76695845],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([1, 8, 7, 76695845],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 8, 7, 76695845], X's size = 4294967320, 'shape' is [1, 24], the capacity of 'shape' is 24.
  [Hint: Expected capacity == in_size, but received capacity:24 != in_size:4294967320.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:42.473066 test begin: paddle.flatten(Tensor([1, 8, 76695845, 7],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([1, 8, 76695845, 7],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 8, 76695845, 7], X's size = 4294967320, 'shape' is [1, 24], the capacity of 'shape' is 24.
  [Hint: Expected capacity == in_size, but received capacity:24 != in_size:4294967320.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:10.392620 test begin: paddle.flatten(Tensor([1, 8, 76695845, 7],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([1, 8, 76695845, 7],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 8, 76695845, 7], X's size = 4294967320, 'shape' is [1, 24], the capacity of 'shape' is 24.
  [Hint: Expected capacity == in_size, but received capacity:24 != in_size:4294967320.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:39.341706 test begin: paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), 1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 87652394, 7, 7], X's size = 4294967306, 'shape' is [1, 10], the capacity of 'shape' is 10.
  [Hint: Expected capacity == in_size, but received capacity:10 != in_size:4294967306.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:01.433318 test begin: paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), 1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 87652394, 7, 7], X's size = 4294967306, 'shape' is [1, 10], the capacity of 'shape' is 10.
  [Hint: Expected capacity == in_size, but received capacity:10 != in_size:4294967306.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:29.526344 test begin: paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 87652394, 7, 7], X's size = 4294967306, 'shape' is [1, 10], the capacity of 'shape' is 10.
  [Hint: Expected capacity == in_size, but received capacity:10 != in_size:4294967306.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:48.571225 test begin: paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([1, 87652394, 7, 7],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 87652394, 7, 7], X's size = 4294967306, 'shape' is [1, 10], the capacity of 'shape' is 10.
  [Hint: Expected capacity == in_size, but received capacity:10 != in_size:4294967306.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:16:10.785635 test begin: paddle.flatten(Tensor([1073741824, 4],"float16"), )

[paddle error] paddle.flatten(Tensor([1073741824, 4],"float16"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1073741824, 4], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 1073741824.
  [Hint: Expected capacity == in_size, but received capacity:1073741824 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:34.674092 test begin: paddle.flatten(Tensor([1073741824, 4],"float16"), ) 

[paddle error] paddle.flatten(Tensor([1073741824, 4],"float16"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1073741824, 4], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 1073741824.
  [Hint: Expected capacity == in_size, but received capacity:1073741824 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:41.872415 test begin: paddle.flatten(Tensor([1073741824, 4],"float32"), )

[paddle error] paddle.flatten(Tensor([1073741824, 4],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1073741824, 4], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 1073741824.
  [Hint: Expected capacity == in_size, but received capacity:1073741824 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:08.498536 test begin: paddle.flatten(Tensor([1073741824, 4],"float32"), ) 

[paddle error] paddle.flatten(Tensor([1073741824, 4],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1073741824, 4], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 1073741824.
  [Hint: Expected capacity == in_size, but received capacity:1073741824 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:34.071931 test begin: paddle.flatten(Tensor([107374183, 4, 5],"float64"), )

[paddle error] paddle.flatten(Tensor([107374183, 4, 5],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:04.736417 test begin: paddle.flatten(Tensor([107374183, 4, 5],"float64"), ) 

[paddle error] paddle.flatten(Tensor([107374183, 4, 5],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:22.448964 test begin: paddle.flatten(Tensor([107374183, 4, 5],"int64"), )

[paddle error] paddle.flatten(Tensor([107374183, 4, 5],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:22.872606 test begin: paddle.flatten(Tensor([107374183, 4, 5],"int64"), ) 

[paddle error] paddle.flatten(Tensor([107374183, 4, 5],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:34.305429 test begin: paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:55.016990 test begin: paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:14.034325 test begin: paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:31.226240 test begin: paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 1024, 1, 2097152],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:47.940744 test begin: paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:05.638148 test begin: paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:25.704862 test begin: paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:42.696133 test begin: paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 1024, 2097152, 1],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:00.185604 test begin: paddle.flatten(Tensor([2, 16, 26843546, 5],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 16, 26843546, 5],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483616], shape[1] = -2147483616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:22.306095 test begin: paddle.flatten(Tensor([2, 16, 26843546, 5],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 16, 26843546, 5],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483616], shape[1] = -2147483616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:43.692901 test begin: paddle.flatten(Tensor([2, 16, 5, 26843546],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 16, 5, 26843546],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483616], shape[1] = -2147483616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:25:03.752488 test begin: paddle.flatten(Tensor([2, 16, 5, 26843546],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 16, 5, 26843546],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483616], shape[1] = -2147483616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:04:38.640227 test begin: paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:04:56.489920 test begin: paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:05:13.804823 test begin: paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:05:33.821326 test begin: paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 2048, 1, 1048576],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:05:58.104640 test begin: paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:06:14.118921 test begin: paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:06:31.111607 test begin: paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:06:48.578192 test begin: paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 2048, 1048576, 1],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:07:12.227279 test begin: paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:07:29.062455 test begin: paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:07:51.932086 test begin: paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:08:10.876355 test begin: paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648, 1, 1],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:08:30.517169 test begin: paddle.flatten(Tensor([2, 2147483648],"bfloat16"), )

[paddle error] paddle.flatten(Tensor([2, 2147483648],"bfloat16"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:08:52.075669 test begin: paddle.flatten(Tensor([2, 2147483648],"bfloat16"), ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648],"bfloat16"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:10.974775 test begin: paddle.flatten(Tensor([2, 2147483648],"float32"), )

[paddle error] paddle.flatten(Tensor([2, 2147483648],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:30.950339 test begin: paddle.flatten(Tensor([2, 2147483648],"float32"), ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:09:48.471578 test begin: paddle.flatten(Tensor([2, 2147483648],"int32"), )

[paddle error] paddle.flatten(Tensor([2, 2147483648],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:40.361042 test begin: paddle.flatten(Tensor([2, 2147483648],"int32"), ) 

[paddle error] paddle.flatten(Tensor([2, 2147483648],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 2147483648], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:10:51.315291 test begin: paddle.flatten(Tensor([2, 214748365, 5],"float64"), )

[paddle error] paddle.flatten(Tensor([2, 214748365, 5],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:14.567080 test begin: paddle.flatten(Tensor([2, 214748365, 5],"float64"), ) 

[paddle error] paddle.flatten(Tensor([2, 214748365, 5],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:34.030906 test begin: paddle.flatten(Tensor([2, 214748365, 5],"int64"), )

[paddle error] paddle.flatten(Tensor([2, 214748365, 5],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:13:38.032842 test begin: paddle.flatten(Tensor([2, 214748365, 5],"int64"), ) 

[paddle error] paddle.flatten(Tensor([2, 214748365, 5],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:13:53.350744 test begin: paddle.flatten(Tensor([2, 21474837, 10, 10],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 21474837, 10, 10],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:14:17.363741 test begin: paddle.flatten(Tensor([2, 21474837, 10, 10],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 21474837, 10, 10],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:14:44.317694 test begin: paddle.flatten(Tensor([2, 238609295, 3, 3],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 238609295, 3, 3],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483641], shape[1] = -2147483641.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483641 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:15:06.772152 test begin: paddle.flatten(Tensor([2, 238609295, 3, 3],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 238609295, 3, 3],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483641], shape[1] = -2147483641.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483641 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:15:26.184992 test begin: paddle.flatten(Tensor([2, 4, 268435457],"float64"), )

[paddle error] paddle.flatten(Tensor([2, 4, 268435457],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:15:49.490448 test begin: paddle.flatten(Tensor([2, 4, 268435457],"float64"), ) 

[paddle error] paddle.flatten(Tensor([2, 4, 268435457],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:07.594038 test begin: paddle.flatten(Tensor([2, 4, 268435457],"int64"), )

[paddle error] paddle.flatten(Tensor([2, 4, 268435457],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:30.164247 test begin: paddle.flatten(Tensor([2, 4, 268435457],"int64"), ) 

[paddle error] paddle.flatten(Tensor([2, 4, 268435457],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:45.815056 test begin: paddle.flatten(Tensor([2, 4, 536870912],"float32"), )

[paddle error] paddle.flatten(Tensor([2, 4, 536870912],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 4, 536870912], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:08.026256 test begin: paddle.flatten(Tensor([2, 4, 536870912],"float32"), ) 

[paddle error] paddle.flatten(Tensor([2, 4, 536870912],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 4, 536870912], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:23.946501 test begin: paddle.flatten(Tensor([2, 4, 536870912],"int32"), )

[paddle error] paddle.flatten(Tensor([2, 4, 536870912],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 4, 536870912], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:17:48.164666 test begin: paddle.flatten(Tensor([2, 4, 536870912],"int32"), ) 

[paddle error] paddle.flatten(Tensor([2, 4, 536870912],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 4, 536870912], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:04.526236 test begin: paddle.flatten(Tensor([2, 429496730, 5],"float32"), )

[paddle error] paddle.flatten(Tensor([2, 429496730, 5],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 429496730, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:21.084389 test begin: paddle.flatten(Tensor([2, 429496730, 5],"float32"), ) 

[paddle error] paddle.flatten(Tensor([2, 429496730, 5],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 429496730, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:43.435084 test begin: paddle.flatten(Tensor([2, 429496730, 5],"int32"), )

[paddle error] paddle.flatten(Tensor([2, 429496730, 5],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 429496730, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:18:55.062236 test begin: paddle.flatten(Tensor([2, 429496730, 5],"int32"), ) 

[paddle error] paddle.flatten(Tensor([2, 429496730, 5],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [2, 429496730, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:19:10.916548 test begin: paddle.flatten(Tensor([2, 43826197, 7, 7],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 43826197, 7, 7],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483643], shape[1] = -2147483643.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483643 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:19:30.335532 test begin: paddle.flatten(Tensor([2, 43826197, 7, 7],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 43826197, 7, 7],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483643], shape[1] = -2147483643.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483643 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:19:49.673021 test begin: paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:08.522037 test begin: paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:26.388111 test begin: paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:20:42.637249 test begin: paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 512, 1, 4194304],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:01.734924 test begin: paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:17.693615 test begin: paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:36.788184 test begin: paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:54.514228 test begin: paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 512, 4194304, 1],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483648], shape[1] = -2147483648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:12.865766 test begin: paddle.flatten(Tensor([2, 59652324, 6, 6],"float32"), start_axis=1, stop_axis=-1, )

[paddle error] paddle.flatten(Tensor([2, 59652324, 6, 6],"float32"), start_axis=1, stop_axis=-1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483632], shape[1] = -2147483632.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483632 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:33.362260 test begin: paddle.flatten(Tensor([2, 59652324, 6, 6],"float32"), start_axis=1, stop_axis=-1, ) 

[paddle error] paddle.flatten(Tensor([2, 59652324, 6, 6],"float32"), start_axis=1, stop_axis=-1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483632], shape[1] = -2147483632.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483632 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:53.256864 test begin: paddle.flatten(Tensor([2, 6, 10, 35791395],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 6, 10, 35791395],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:10.585145 test begin: paddle.flatten(Tensor([2, 6, 10, 35791395],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 6, 10, 35791395],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:29.597970 test begin: paddle.flatten(Tensor([2, 6, 35791395, 10],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 6, 35791395, 10],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:23:50.146653 test begin: paddle.flatten(Tensor([2, 6, 35791395, 10],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 6, 35791395, 10],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483596], shape[1] = -2147483596.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483596 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:05.834082 test begin: paddle.flatten(Tensor([2, 85899346, 5, 5],"float32"), 1, )

[paddle error] paddle.flatten(Tensor([2, 85899346, 5, 5],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483646], shape[1] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:24:24.230245 test begin: paddle.flatten(Tensor([2, 85899346, 5, 5],"float32"), 1, ) 

[paddle error] paddle.flatten(Tensor([2, 85899346, 5, 5],"float32"), 1, )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [2, -2147483646], shape[1] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:04:33.340805 test begin: paddle.flatten(Tensor([214748365, 4, 5],"float32"), )

[paddle error] paddle.flatten(Tensor([214748365, 4, 5],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [214748365, 4, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:04:56.699955 test begin: paddle.flatten(Tensor([214748365, 4, 5],"float32"), ) 

[paddle error] paddle.flatten(Tensor([214748365, 4, 5],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [214748365, 4, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:05:19.129818 test begin: paddle.flatten(Tensor([214748365, 4, 5],"int32"), )

[paddle error] paddle.flatten(Tensor([214748365, 4, 5],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [214748365, 4, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:28.737918 test begin: paddle.flatten(Tensor([214748365, 4, 5],"int32"), ) 

[paddle error] paddle.flatten(Tensor([214748365, 4, 5],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [214748365, 4, 5], X's size = 4294967300, 'shape' is [4], the capacity of 'shape' is 4.
  [Hint: Expected capacity == in_size, but received capacity:4 != in_size:4294967300.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:06:50.017311 test begin: paddle.flatten(Tensor([268435457, 4, 2],"float64"), )

[paddle error] paddle.flatten(Tensor([268435457, 4, 2],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:08:18.248532 test begin: paddle.flatten(Tensor([268435457, 4, 2],"float64"), ) 

[paddle error] paddle.flatten(Tensor([268435457, 4, 2],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:08:39.357288 test begin: paddle.flatten(Tensor([268435457, 4, 2],"int64"), )

[paddle error] paddle.flatten(Tensor([268435457, 4, 2],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:09:50.319183 test begin: paddle.flatten(Tensor([268435457, 4, 2],"int64"), ) 

[paddle error] paddle.flatten(Tensor([268435457, 4, 2],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483640], shape[0] = -2147483640.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483640 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:10:08.385055 test begin: paddle.flatten(Tensor([3, 357913942, 2],"float64"), )

[paddle error] paddle.flatten(Tensor([3, 357913942, 2],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:10:30.374350 test begin: paddle.flatten(Tensor([3, 357913942, 2],"float64"), ) 

[paddle error] paddle.flatten(Tensor([3, 357913942, 2],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:10:53.283081 test begin: paddle.flatten(Tensor([3, 357913942, 2],"int64"), )

[paddle error] paddle.flatten(Tensor([3, 357913942, 2],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:11:14.957713 test begin: paddle.flatten(Tensor([3, 357913942, 2],"int64"), ) 

[paddle error] paddle.flatten(Tensor([3, 357913942, 2],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:11:33.292504 test begin: paddle.flatten(Tensor([3, 4, 178956971],"float64"), )

[paddle error] paddle.flatten(Tensor([3, 4, 178956971],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:11:52.804257 test begin: paddle.flatten(Tensor([3, 4, 178956971],"float64"), ) 

[paddle error] paddle.flatten(Tensor([3, 4, 178956971],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:12.976399 test begin: paddle.flatten(Tensor([3, 4, 178956971],"int64"), )

[paddle error] paddle.flatten(Tensor([3, 4, 178956971],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:33.552292 test begin: paddle.flatten(Tensor([3, 4, 178956971],"int64"), ) 

[paddle error] paddle.flatten(Tensor([3, 4, 178956971],"int64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:12:51.729963 test begin: paddle.flatten(Tensor([3, 4, 357913942],"float32"), )

[paddle error] paddle.flatten(Tensor([3, 4, 357913942],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 4, 357913942], X's size = 4294967304, 'shape' is [8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:13.607458 test begin: paddle.flatten(Tensor([3, 4, 357913942],"float32"), ) 

[paddle error] paddle.flatten(Tensor([3, 4, 357913942],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 4, 357913942], X's size = 4294967304, 'shape' is [8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:13:36.504094 test begin: paddle.flatten(Tensor([3, 4, 357913942],"int32"), )

[paddle error] paddle.flatten(Tensor([3, 4, 357913942],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 4, 357913942], X's size = 4294967304, 'shape' is [8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:11.331639 test begin: paddle.flatten(Tensor([3, 4, 357913942],"int32"), ) 

[paddle error] paddle.flatten(Tensor([3, 4, 357913942],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 4, 357913942], X's size = 4294967304, 'shape' is [8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:33.681808 test begin: paddle.flatten(Tensor([3, 715827883, 2],"float32"), )

[paddle error] paddle.flatten(Tensor([3, 715827883, 2],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 715827883, 2], X's size = 4294967298, 'shape' is [2], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967298.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:14:56.374786 test begin: paddle.flatten(Tensor([3, 715827883, 2],"float32"), ) 

[paddle error] paddle.flatten(Tensor([3, 715827883, 2],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 715827883, 2], X's size = 4294967298, 'shape' is [2], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967298.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:25.731069 test begin: paddle.flatten(Tensor([3, 715827883, 2],"int32"), )

[paddle error] paddle.flatten(Tensor([3, 715827883, 2],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 715827883, 2], X's size = 4294967298, 'shape' is [2], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967298.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:15:43.065758 test begin: paddle.flatten(Tensor([3, 715827883, 2],"int32"), ) 

[paddle error] paddle.flatten(Tensor([3, 715827883, 2],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [3, 715827883, 2], X's size = 4294967298, 'shape' is [2], the capacity of 'shape' is 2.
  [Hint: Expected capacity == in_size, but received capacity:2 != in_size:4294967298.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:16:02.646021 test begin: paddle.flatten(Tensor([3, 715827883],"float64"), )

[paddle error] paddle.flatten(Tensor([3, 715827883],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483647], shape[0] = -2147483647.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483647 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:30.261017 test begin: paddle.flatten(Tensor([3, 715827883],"float64"), ) 

[paddle error] paddle.flatten(Tensor([3, 715827883],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483647], shape[0] = -2147483647.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483647 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:16:53.577926 test begin: paddle.flatten(Tensor([4, 7, 76695845],"float64"), )

[paddle error] paddle.flatten(Tensor([4, 7, 76695845],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:17:13.835291 test begin: paddle.flatten(Tensor([4, 7, 76695845],"float64"), ) 

[paddle error] paddle.flatten(Tensor([4, 7, 76695845],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483636], shape[0] = -2147483636.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483636 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:17:32.476966 test begin: paddle.flatten(Tensor([4, 89478486, 6],"float64"), )

[paddle error] paddle.flatten(Tensor([4, 89478486, 6],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483632], shape[0] = -2147483632.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483632 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:17:53.088600 test begin: paddle.flatten(Tensor([4, 89478486, 6],"float64"), ) 

[paddle error] paddle.flatten(Tensor([4, 89478486, 6],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483632], shape[0] = -2147483632.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483632 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:18:15.194358 test begin: paddle.flatten(Tensor([5, 429496730],"float64"), )

[paddle error] paddle.flatten(Tensor([5, 429496730],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:18:33.742460 test begin: paddle.flatten(Tensor([5, 429496730],"float64"), ) 

[paddle error] paddle.flatten(Tensor([5, 429496730],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483646], shape[0] = -2147483646.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483646 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:18:58.510277 test begin: paddle.flatten(Tensor([51130564, 7, 6],"float64"), )

[paddle error] paddle.flatten(Tensor([51130564, 7, 6],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483608], shape[0] = -2147483608.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483608 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:19:21.349923 test begin: paddle.flatten(Tensor([51130564, 7, 6],"float64"), ) 

[paddle error] paddle.flatten(Tensor([51130564, 7, 6],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483608], shape[0] = -2147483608.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483608 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:19:41.171603 test begin: paddle.flatten(Tensor([536870912, 4, 2],"float32"), )

[paddle error] paddle.flatten(Tensor([536870912, 4, 2],"float32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [536870912, 4, 2], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 536870912.
  [Hint: Expected capacity == in_size, but received capacity:536870912 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:20:05.637354 test begin: paddle.flatten(Tensor([536870912, 4, 2],"float32"), ) 

[paddle error] paddle.flatten(Tensor([536870912, 4, 2],"float32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [536870912, 4, 2], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 536870912.
  [Hint: Expected capacity == in_size, but received capacity:536870912 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:20:28.197053 test begin: paddle.flatten(Tensor([536870912, 4, 2],"int32"), )

[paddle error] paddle.flatten(Tensor([536870912, 4, 2],"int32"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [536870912, 4, 2], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 536870912.
  [Hint: Expected capacity == in_size, but received capacity:536870912 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:20:51.041913 test begin: paddle.flatten(Tensor([536870912, 4, 2],"int32"), ) 

[paddle error] paddle.flatten(Tensor([536870912, 4, 2],"int32"), )  
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [536870912, 4, 2], X's size = 4294967296, 'shape' is [0], the capacity of 'shape' is 536870912.
  [Hint: Expected capacity == in_size, but received capacity:536870912 != in_size:4294967296.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-03 11:21:13.613186 test begin: paddle.flatten(Tensor([536870913, 4],"float64"), )

[paddle error] paddle.flatten(Tensor([536870913, 4],"float64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:21:44.199247 test begin: paddle.flatten(Tensor([536870913, 4],"float64"), ) 

[paddle error] paddle.flatten(Tensor([536870913, 4],"float64"), )  
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2147483644], shape[0] = -2147483644.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2147483644 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-03 11:22:05.429426 test begin: paddle.fmin(Tensor([2147483649],"int64"), Tensor([1],"int64"), )

[paddle error] paddle.fmin(Tensor([2147483649],"int64"), Tensor([1],"int64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:22:30.531867 test begin: paddle.fmin(Tensor([2147483649],"int64"), Tensor([1],"int64"), ) 

[paddle error] paddle.fmin(Tensor([2147483649],"int64"), Tensor([1],"int64"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:03:35.400790 test begin: paddle.logical_or(Tensor([1],"bool"), Tensor([4294967295],"bool"), )

W0303 11:04:44.593679 58204 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:04:44.594627 58204 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.logical_or(Tensor([1],"bool"), Tensor([4294967295],"bool"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:04:44.609715 test begin: paddle.logical_or(Tensor([1],"bool"), Tensor([4294967295],"bool"), ) 

[paddle error] paddle.logical_or(Tensor([1],"bool"), Tensor([4294967295],"bool"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:04:46.335783 test begin: paddle.logical_or(Tensor([4294967295],"bool"), Tensor([1],"bool"), )

[paddle error] paddle.logical_or(Tensor([4294967295],"bool"), Tensor([1],"bool"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:04:48.999623 test begin: paddle.logical_or(Tensor([4294967295],"bool"), Tensor([1],"bool"), ) 

[paddle error] paddle.logical_or(Tensor([4294967295],"bool"), Tensor([1],"bool"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:04:50.684888 test begin: paddle.logsumexp(Tensor([4294967295],"float32"), axis=0, )

[paddle error] paddle.logsumexp(Tensor([4294967295],"float32"), axis=0, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:06:10.377575 test begin: paddle.logsumexp(Tensor([4294967295],"float32"), axis=0, ) 

[paddle error] paddle.logsumexp(Tensor([4294967295],"float32"), axis=0, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:06:18.635778 test begin: paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), -0.7255859375, )

[paddle error] paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), -0.7255859375, ) 
 (InvalidArgument) The expanded size (-1) for non-existing dimensions must be positive for expand_v2 op.
  [Hint: Expected expand_shape[i] >= 0, but received expand_shape[i]:-1 < 0:0.] (at ../paddle/phi/kernels/gpu/expand_kernel.cu:45)

2025-03-03 11:07:55.489709 test begin: paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), -0.7255859375, ) 

[paddle error] paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), -0.7255859375, )  
 (InvalidArgument) The expanded size (-1) for non-existing dimensions must be positive for expand_v2 op.
  [Hint: Expected expand_shape[i] >= 0, but received expand_shape[i]:-1 < 0:0.] (at ../paddle/phi/kernels/gpu/expand_kernel.cu:45)

2025-03-03 11:08:12.597788 test begin: paddle.maximum(Tensor([1],"float32"), Tensor([4294967295],"float32"), )

[paddle error] paddle.maximum(Tensor([1],"float32"), Tensor([4294967295],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:08:30.889760 test begin: paddle.maximum(Tensor([1],"float32"), Tensor([4294967295],"float32"), ) 

[paddle error] paddle.maximum(Tensor([1],"float32"), Tensor([4294967295],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:08:43.987851 test begin: paddle.maximum(Tensor([1],"float64"), Tensor([2147483649],"float64"), )

[paddle error] paddle.maximum(Tensor([1],"float64"), Tensor([2147483649],"float64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:10:20.996099 test begin: paddle.maximum(Tensor([2147483649],"float64"), Tensor([1],"float64"), )

[paddle error] paddle.maximum(Tensor([2147483649],"float64"), Tensor([1],"float64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:10:41.580043 test begin: paddle.maximum(Tensor([2147483649],"float64"), Tensor([1],"float64"), ) 

[paddle error] paddle.maximum(Tensor([2147483649],"float64"), Tensor([1],"float64"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:10:57.987128 test begin: paddle.maximum(Tensor([4294967295],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.maximum(Tensor([4294967295],"float32"), Tensor([1],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:11:14.255770 test begin: paddle.maximum(Tensor([4294967295],"float32"), Tensor([1],"float32"), ) 

[paddle error] paddle.maximum(Tensor([4294967295],"float32"), Tensor([1],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:11:36.386880 test begin: paddle.minimum(Tensor([1],"float32"), Tensor([4294967295],"float32"), )

[paddle error] paddle.minimum(Tensor([1],"float32"), Tensor([4294967295],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:11:48.924123 test begin: paddle.minimum(Tensor([1],"float32"), Tensor([4294967295],"float32"), ) 

[paddle error] paddle.minimum(Tensor([1],"float32"), Tensor([4294967295],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:12:01.479309 test begin: paddle.minimum(Tensor([4294967295],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.minimum(Tensor([4294967295],"float32"), Tensor([1],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:12:28.626697 test begin: paddle.minimum(Tensor([4294967295],"float32"), Tensor([1],"float32"), ) 

[paddle error] paddle.minimum(Tensor([4294967295],"float32"), Tensor([1],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:13:07.187778 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), 0, True, )

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), 0, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:17.948707 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), 0, True, ) 

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), 0, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:39.521675 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:51.872458 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:59.677463 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:13.619241 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:22.936875 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), tuple(0,1,), False, )

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), tuple(0,1,), False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:33.634322 test begin: paddle.nanmean(Tensor([1431655765, 3],"float32"), tuple(0,1,), False, ) 

[paddle error] paddle.nanmean(Tensor([1431655765, 3],"float32"), tuple(0,1,), False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:45.863618 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:02.595974 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:15.701105 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:30.128777 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:43.778302 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[0,1,2,3,], False, )

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[0,1,2,3,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:53.463927 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[0,1,2,3,], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[0,1,2,3,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:17:26.697764 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[], False, )

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:17:38.789926 test begin: paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 107374183, 4, 5],"float32"), list[], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:18:07.499675 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), -1, False, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), -1, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:18:17.158257 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), -1, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), -1, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:18:43.390175 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), 1, False, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), 1, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:18:51.746756 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), 1, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), 1, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:06.288168 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:14.297306 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:21.279426 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:35.190751 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:47.778536 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), tuple(0,1,), False, )

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), tuple(0,1,), False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:19:59.354231 test begin: paddle.nanmean(Tensor([2, 2147483648],"float32"), tuple(0,1,), False, ) 

[paddle error] paddle.nanmean(Tensor([2, 2147483648],"float32"), tuple(0,1,), False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:20:34.512575 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), 2, True, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), 2, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:20:48.767280 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), 2, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), 2, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:01.702290 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:13.583871 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:22.420871 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:28.962521 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:40.803982 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,1,2,3,], False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,1,2,3,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:21:53.666790 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,1,2,3,], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,1,2,3,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:00.192429 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,2,], False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,2,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:08.957612 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,2,], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[0,2,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:16.210984 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[], False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:25.342213 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), list[], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:33.328835 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), tuple(0,2,), False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), tuple(0,2,), False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:40.364609 test begin: paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), tuple(0,2,), False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 143165577, 5],"float32"), tuple(0,2,), False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:22:47.370335 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), -1, False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), -1, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:00.849549 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), -1, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), -1, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:03:40.059407 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, False, )

W0303 11:04:55.074301 58332 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:04:55.075467 58332 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:04:55.148537 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:08.039487 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:17.466022 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:26.874002 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[0,1,2,3,], False, )

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[0,1,2,3,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:37.395225 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[0,1,2,3,], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[0,1,2,3,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:22.268853 test begin: paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[], False, ) 

[paddle error] paddle.nanmean(Tensor([2, 3, 4, 178956971],"float32"), list[], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:57.045907 test begin: paddle.nanmean(Tensor([3, 1431655765],"float32"), axis=None, )

[paddle error] paddle.nanmean(Tensor([3, 1431655765],"float32"), axis=None, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:05.932199 test begin: paddle.nanmean(Tensor([3, 1431655765],"float32"), axis=None, ) 

[paddle error] paddle.nanmean(Tensor([3, 1431655765],"float32"), axis=None, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:16.251030 test begin: paddle.nanmean(Tensor([3, 1431655765],"float32"), keepdim=True, )

[paddle error] paddle.nanmean(Tensor([3, 1431655765],"float32"), keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:26.594375 test begin: paddle.nanmean(Tensor([3, 1431655765],"float32"), keepdim=True, ) 

[paddle error] paddle.nanmean(Tensor([3, 1431655765],"float32"), keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:39.161851 test begin: paddle.nanmean(Tensor([4294967295],"float32"), axis=0, )

[paddle error] paddle.nanmean(Tensor([4294967295],"float32"), axis=0, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:49.542528 test begin: paddle.nanmean(Tensor([4294967295],"float32"), axis=0, ) 

[paddle error] paddle.nanmean(Tensor([4294967295],"float32"), axis=0, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:01.084921 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:15.571599 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:30.625343 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, True, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:41.355186 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, True, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), None, True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:56.509883 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,1,2,3,], False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,1,2,3,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:08.310296 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,1,2,3,], False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,1,2,3,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:18.381518 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,2,], False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,2,], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:29.213150 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,2,], False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[0,2,], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:40.845112 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[], False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[], False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:53.213588 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[], False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), list[], False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:06.192986 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), tuple(0,2,), False, )

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), tuple(0,2,), False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:19.646780 test begin: paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), tuple(0,2,), False, ) 

[paddle error] paddle.nanmean(Tensor([71582789, 3, 4, 5],"float32"), tuple(0,2,), False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:31.114570 test begin: paddle.nanmean(Tensor([858993459, 5],"float32"), axis=None, )

[paddle error] paddle.nanmean(Tensor([858993459, 5],"float32"), axis=None, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:42.377141 test begin: paddle.nanmean(Tensor([858993459, 5],"float32"), axis=None, ) 

[paddle error] paddle.nanmean(Tensor([858993459, 5],"float32"), axis=None, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:55.429125 test begin: paddle.nanmean(Tensor([858993459, 5],"float32"), keepdim=True, )

[paddle error] paddle.nanmean(Tensor([858993459, 5],"float32"), keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:08.863087 test begin: paddle.nanmean(Tensor([858993459, 5],"float32"), keepdim=True, ) 

[paddle error] paddle.nanmean(Tensor([858993459, 5],"float32"), keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:17:51.142941 test begin: paddle.nn.functional.normalize(Tensor([2, 2147483648],"float32"), axis=1, )

[paddle error] paddle.nn.functional.normalize(Tensor([2, 2147483648],"float32"), axis=1, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:18:27.849822 test begin: paddle.nn.functional.normalize(Tensor([2, 2147483648],"float32"), axis=1, ) 

[paddle error] paddle.nn.functional.normalize(Tensor([2, 2147483648],"float32"), axis=1, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:18:46.959464 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, )

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:19:06.338135 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, ) 

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:19:27.739211 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-10, )

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-10, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:19:47.838418 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-10, ) 

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-10, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:20:10.318609 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-12, )

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-12, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:20:27.445349 test begin: paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-12, ) 

[paddle error] paddle.nn.functional.normalize(Tensor([4294967295],"float32"), axis=0, epsilon=1e-12, )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:20:48.850111 test begin: paddle.std(Tensor([4294967295],"float32"), )

[paddle error] paddle.std(Tensor([4294967295],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:21:01.766672 test begin: paddle.std(Tensor([4294967295],"float32"), ) 

[paddle error] paddle.std(Tensor([4294967295],"float32"), )  
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-03 11:21:11.500124 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:07.151048 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:14.316106 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:18.319540 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:21.326135 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=1, keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:23:32.191113 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:04:32.962078 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=False, ) 

W0303 11:06:44.576926 59906 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:06:44.578033 59906 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:44.690981 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:48.316384 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:51.506095 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:08.350464 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:17.809469 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[0,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[0,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:21.082288 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:31.487165 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=list[1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:41.129331 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=tuple(0,1,), keepdim=False, )

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=tuple(0,1,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:44.398799 test begin: paddle.sum(Tensor([1431655765, 3],"bool"), axis=tuple(0,1,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([1431655765, 3],"bool"), axis=tuple(0,1,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:47.408220 test begin: paddle.sum(Tensor([178956971, 3, 4, 1, 1, 1],"int64"), )

[paddle error] paddle.sum(Tensor([178956971, 3, 4, 1, 1, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:04.616099 test begin: paddle.sum(Tensor([178956971, 3, 4, 1, 1, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([178956971, 3, 4, 1, 1, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:18.033306 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:30.569334 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:41.322713 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:50.955726 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:58.888869 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:02.347639 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:06.567988 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:09.733433 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:13.382162 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:19.333997 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:28.991288 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:32.144435 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:36.262879 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,2,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:41.944020 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,2,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:47.999340 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[2,], keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[2,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:58.074251 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[2,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[2,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:06.750550 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:10.151469 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=list[], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:13.268742 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:18.071857 test begin: paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 107374183, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:23.359634 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:26.467815 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:29.323577 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:33.582196 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:37.521854 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:39.994032 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:42.956510 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:45.891939 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:48.879285 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:51.931236 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:54.842897 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:57.973724 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:00.958085 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[0,], keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[0,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:05.646138 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[0,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[0,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:09.285175 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:12.050235 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=list[1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:14.944989 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=tuple(0,1,), keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=tuple(0,1,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:18.302038 test begin: paddle.sum(Tensor([2, 2147483648],"bool"), axis=tuple(0,1,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 2147483648],"bool"), axis=tuple(0,1,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:31.110332 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:40.294569 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:50.296305 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:54.836356 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:58.323418 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:02.332419 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:07.128833 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:09.669023 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:12.921557 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:19.302369 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:27.457836 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:30.659416 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:33.863324 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,2,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,2,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:37.381556 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,2,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[0,2,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:41.059879 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[2,], keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[2,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:45.470134 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[2,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[2,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:48.637498 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:53.403782 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=list[], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:56.517353 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=tuple(0,2,), keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:01.612339 test begin: paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 143165577, 5],"bool"), axis=tuple(0,2,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:06.103535 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:09.498853 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:13.687510 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:24.760146 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:33.732997 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,1,2,3,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:37.798238 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:03:48.773735 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=False, )

W0303 11:05:48.095377 58796 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:05:48.096498 58796 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:48.130840 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:51.113664 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:53.975986 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:57.032267 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:00.317925 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:03.309897 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,1,2,3,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:07.514398 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,2,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,2,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:12.402146 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,2,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[0,2,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:18.552303 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[2,], keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[2,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:26.559469 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[2,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=list[2,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:35.312149 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=tuple(0,2,), keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=tuple(0,2,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:40.755433 test begin: paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=tuple(0,2,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 178956971],"bool"), axis=tuple(0,2,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:46.573188 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 621379],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 621379],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:01.071348 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 621379],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 621379],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:10.011060 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 466034, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 466034, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:19.319908 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 466034, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 466034, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:30.688076 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 310690, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 310690, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:43.515412 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 310690, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 310690, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:08:54.227301 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 621379, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 621379, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:03.553519 test begin: paddle.sum(Tensor([2, 3, 4, 2, 3, 621379, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 3, 621379, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:14.108329 test begin: paddle.sum(Tensor([2, 3, 4, 2, 466034, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 466034, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:21.837876 test begin: paddle.sum(Tensor([2, 3, 4, 2, 466034, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 2, 466034, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:31.379244 test begin: paddle.sum(Tensor([2, 3, 4, 310690, 3, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 4, 310690, 3, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:40.946973 test begin: paddle.sum(Tensor([2, 3, 4, 310690, 3, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 4, 310690, 3, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:09:50.601936 test begin: paddle.sum(Tensor([2, 3, 621379, 2, 3, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 3, 621379, 2, 3, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:10:01.439425 test begin: paddle.sum(Tensor([2, 3, 621379, 2, 3, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 621379, 2, 3, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:10:09.708804 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), )

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:10:58.321912 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), ) 

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:18.078364 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,), )

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:36.256116 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,), ) 

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:48.144693 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,2,), )

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,2,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:57.258250 test begin: paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,2,), ) 

[paddle error] paddle.sum(Tensor([2, 3, 715827883],"int32"), axis=tuple(0,1,2,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:07.629999 test begin: paddle.sum(Tensor([2, 466034, 4, 2, 3, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([2, 466034, 4, 2, 3, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:12:21.138511 test begin: paddle.sum(Tensor([2, 466034, 4, 2, 3, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([2, 466034, 4, 2, 3, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:12:30.353638 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), )

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:39.764429 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), ) 

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:01.107385 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,), )

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:11.656161 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,), ) 

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:22.560423 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,2,), )

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,2,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:32.913496 test begin: paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,2,), ) 

[paddle error] paddle.sum(Tensor([2, 536870912, 4],"int32"), axis=tuple(0,1,2,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:43.236185 test begin: paddle.sum(Tensor([2982617, 3, 4, 4, 5, 3],"int64"), )

[paddle error] paddle.sum(Tensor([2982617, 3, 4, 4, 5, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:13:54.386041 test begin: paddle.sum(Tensor([2982617, 3, 4, 4, 5, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([2982617, 3, 4, 4, 5, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:05.671565 test begin: paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:09.495228 test begin: paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:13.691252 test begin: paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:17.532167 test begin: paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 1431655765],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:20.802882 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:14:44.198608 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:06.700943 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=1, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=1, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:26.143426 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=1, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=1, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:42.275159 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:15:52.215205 test begin: paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 4, 357913942],"int32"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:03.528950 test begin: paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:23.190788 test begin: paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:40.500542 test begin: paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=1, keepdim=True, )

[paddle error] paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=1, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:50.405619 test begin: paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=1, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([3, 715827883, 2],"int32"), axis=1, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:17:13.728377 test begin: paddle.sum(Tensor([310690, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), )

[paddle error] paddle.sum(Tensor([310690, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:17:26.712188 test begin: paddle.sum(Tensor([310690, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), ) 

[paddle error] paddle.sum(Tensor([310690, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:03:57.322331 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), ) 

W0303 11:05:48.480216 59158 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0303 11:05:48.481348 59158 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:48.526244 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=0, )

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=0, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:05:58.375956 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=0, ) 

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=0, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:09.782608 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,), )

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:19.641887 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,), ) 

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:30.244763 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,2,), )

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,2,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:40.546406 test begin: paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,2,), ) 

[paddle error] paddle.sum(Tensor([357913942, 3, 4],"int32"), axis=tuple(0,1,2,), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:06:49.285864 test begin: paddle.sum(Tensor([4294967295],"bool"), axis=list[0,], keepdim=False, )

[paddle error] paddle.sum(Tensor([4294967295],"bool"), axis=list[0,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:07:50.004256 test begin: paddle.sum(Tensor([4294967295],"int32"), )

[paddle error] paddle.sum(Tensor([4294967295],"int32"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:00.263283 test begin: paddle.sum(Tensor([4294967295],"int32"), ) 

[paddle error] paddle.sum(Tensor([4294967295],"int32"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:10.356416 test begin: paddle.sum(Tensor([4294967295],"int32"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([4294967295],"int32"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:27.769734 test begin: paddle.sum(Tensor([4294967295],"int32"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([4294967295],"int32"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:41.049564 test begin: paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:08:53.137524 test begin: paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=0, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=0, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:06.242732 test begin: paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=1, keepdim=True, )

[paddle error] paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=1, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:09:34.359277 test begin: paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=1, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([536870912, 4, 2],"int32"), axis=1, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:16.275443 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:26.399811 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=-1, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=-1, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:34.855441 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=2, keepdim=True, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=2, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:44.066302 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=2, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=2, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:52.791734 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:11:58.112330 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:01.442769 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:05.304868 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=True, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=None, keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:08.767189 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:15.758459 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:22.469686 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:26.060377 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:28.582922 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:31.939940 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:35.619064 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:44.079928 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:53.419635 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[], keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:12:57.085423 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[], keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=list[], keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:00.924795 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:04.056530 test begin: paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, ) 

[paddle error] paddle.sum(Tensor([71582789, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:13:07.097912 test begin: paddle.sum(Tensor([8, 1118482, 4, 4, 5, 3],"int64"), )

[paddle error] paddle.sum(Tensor([8, 1118482, 4, 4, 5, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:13:31.613546 test begin: paddle.sum(Tensor([8, 1118482, 4, 4, 5, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 1118482, 4, 4, 5, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:13:44.177417 test begin: paddle.sum(Tensor([8, 3, 1491309, 4, 5, 3],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 1491309, 4, 5, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:13:57.540757 test begin: paddle.sum(Tensor([8, 3, 1491309, 4, 5, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 1491309, 4, 5, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:10.285335 test begin: paddle.sum(Tensor([8, 3, 4, 1, 1, 22369622],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 1, 1, 22369622],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:17.759028 test begin: paddle.sum(Tensor([8, 3, 4, 1, 1, 22369622],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 1, 1, 22369622],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:28.880300 test begin: paddle.sum(Tensor([8, 3, 4, 1, 22369622, 1],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 1, 22369622, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:39.605138 test begin: paddle.sum(Tensor([8, 3, 4, 1, 22369622, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 1, 22369622, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:50.592247 test begin: paddle.sum(Tensor([8, 3, 4, 1491309, 5, 3],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 1491309, 5, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:14:58.935916 test begin: paddle.sum(Tensor([8, 3, 4, 1491309, 5, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 1491309, 5, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:12.624183 test begin: paddle.sum(Tensor([8, 3, 4, 22369622, 1, 1],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 22369622, 1, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:22.178674 test begin: paddle.sum(Tensor([8, 3, 4, 22369622, 1, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 22369622, 1, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:31.913755 test begin: paddle.sum(Tensor([8, 3, 4, 4, 1864136, 3],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 4, 1864136, 3],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:45.890050 test begin: paddle.sum(Tensor([8, 3, 4, 4, 1864136, 3],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 4, 1864136, 3],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:15:54.564379 test begin: paddle.sum(Tensor([8, 3, 4, 4, 5, 1118482],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 4, 4, 5, 1118482],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:03.432890 test begin: paddle.sum(Tensor([8, 3, 4, 4, 5, 1118482],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 4, 4, 5, 1118482],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:10.208719 test begin: paddle.sum(Tensor([8, 3, 89478486, 1, 1, 1],"int64"), )

[paddle error] paddle.sum(Tensor([8, 3, 89478486, 1, 1, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:19.668350 test begin: paddle.sum(Tensor([8, 3, 89478486, 1, 1, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 3, 89478486, 1, 1, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:26.367370 test begin: paddle.sum(Tensor([8, 67108865, 4, 1, 1, 1],"int64"), )

[paddle error] paddle.sum(Tensor([8, 67108865, 4, 1, 1, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:34.803005 test begin: paddle.sum(Tensor([8, 67108865, 4, 1, 1, 1],"int64"), ) 

[paddle error] paddle.sum(Tensor([8, 67108865, 4, 1, 1, 1],"int64"), )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-03 11:16:47.153766 test begin: paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:51.789324 test begin: paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=False, ) 

[paddle error] paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=False, )  
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-03 11:16:55.373954 test begin: paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([858993459, 5],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-12 04:02:15.235591 test begin: paddle.argsort(Tensor([2, 1140850690],"int64"), axis=1, stable=True, )

[paddle error] paddle.argsort(Tensor([2, 1140850690],"int64"), axis=1, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-12 04:06:01.223436 test begin: paddle.argsort(Tensor([22817014, 100],"int64"), axis=1, stable=True, )

[paddle error] paddle.argsort(Tensor([22817014, 100],"int64"), axis=1, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-12 04:06:25.527649 test begin: paddle.argsort(Tensor([26, 87757746],"int64"), axis=-1, )

[paddle error] paddle.argsort(Tensor([26, 87757746],"int64"), axis=-1, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-12 04:07:26.901759 test begin: paddle.argsort(Tensor([285212673, 4, 2],"int64"), axis=2, stable=True, )

[paddle error] paddle.argsort(Tensor([285212673, 4, 2],"int64"), axis=2, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-12 04:08:38.484595 test begin: paddle.argsort(Tensor([3, 380283564, 2],"int64"), axis=2, stable=True, )

[paddle error] paddle.argsort(Tensor([3, 380283564, 2],"int64"), axis=2, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-12 04:10:16.954662 test begin: paddle.argsort(Tensor([3, 4, 190141782],"int64"), axis=2, stable=True, )

[paddle error] paddle.argsort(Tensor([3, 4, 190141782],"int64"), axis=2, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-12 04:12:45.252349 test begin: paddle.argsort(Tensor([35651585, 64],"int64"), axis=-1, )

[paddle error] paddle.argsort(Tensor([35651585, 64],"int64"), axis=-1, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-12 04:25:06.458825 test begin: paddle.argsort(Tensor([285212673, 4, 2],"int64"), axis=2, stable=True, )

[paddle error] paddle.argsort(Tensor([285212673, 4, 2],"int64"), axis=2, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-13 13:42:23.839819 test begin: paddle.argsort(Tensor([228170138, 10],"int64"), axis=1, stable=True, )

[paddle error] paddle.argsort(Tensor([228170138, 10],"int64"), axis=1, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-13 13:43:59.178843 test begin: paddle.argsort(Tensor([3, 760567127],"int64"), axis=1, stable=True, )

[paddle error] paddle.argsort(Tensor([3, 760567127],"int64"), axis=1, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-13 13:45:52.873846 test begin: paddle.argsort(Tensor([5, 456340276],"int64"), axis=1, stable=True, )

[paddle error] paddle.argsort(Tensor([5, 456340276],"int64"), axis=1, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-13 13:46:56.798613 test begin: paddle.argsort(Tensor([570425345, 4],"int64"), axis=1, stable=True, )

[paddle error] paddle.argsort(Tensor([570425345, 4],"int64"), axis=1, stable=True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-14 18:37:16.201517 test begin: paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([4294967297],"int16"), )

[paddle error] paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([4294967297],"int16"), ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-14 18:37:34.013464 test begin: paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([4294967297],"uint8"), )

[paddle error] paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([4294967297],"uint8"), ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-14 19:12:14.140471 test begin: paddle.bitwise_left_shift(Tensor([4294967297],"int16"), Tensor([1],"int16"), )

[paddle error] paddle.bitwise_left_shift(Tensor([4294967297],"int16"), Tensor([1],"int16"), ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-14 19:16:08.106456 test begin: paddle.bitwise_left_shift(Tensor([4294967297],"uint8"), Tensor([1],"uint8"), )

[paddle error] paddle.bitwise_left_shift(Tensor([4294967297],"uint8"), Tensor([1],"uint8"), ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-15 00:26:58.432847 test begin: paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([4294967297],"int8"), )

[paddle error] paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([4294967297],"int8"), ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-15 00:27:05.135745 test begin: paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([4294967297],"uint8"), )

[paddle error] paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([4294967297],"uint8"), ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-15 00:59:57.122740 test begin: paddle.bitwise_right_shift(Tensor([4294967297],"int8"), Tensor([1],"int8"), )

[paddle error] paddle.bitwise_right_shift(Tensor([4294967297],"int8"), Tensor([1],"int8"), ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-15 01:03:26.632500 test begin: paddle.bitwise_right_shift(Tensor([4294967297],"uint8"), Tensor([1],"uint8"), )

[paddle error] paddle.bitwise_right_shift(Tensor([4294967297],"uint8"), Tensor([1],"uint8"), ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-15 16:34:53.862094 test begin: paddle.chunk(Tensor([1, 1, 1, 4294967297],"float16"), 2, axis=-1, )

[paddle error] paddle.chunk(Tensor([1, 1, 1, 4294967297],"float16"), 2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [1, 1, 1, 4294967297], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 16:35:13.665339 test begin: paddle.chunk(Tensor([1, 1, 64, 67108865],"float16"), 2, axis=-1, )

[paddle error] paddle.chunk(Tensor([1, 1, 64, 67108865],"float16"), 2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [1, 1, 64, 67108865], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 17:09:03.638635 test begin: paddle.chunk(Tensor([1, 11, 207427399],"float32"), chunks=2, axis=-1, )

[paddle error] paddle.chunk(Tensor([1, 11, 207427399],"float32"), chunks=2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [1, 11, 207427399], Attr(dim) = 2.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 17:12:32.525844 test begin: paddle.chunk(Tensor([1, 4, 20, 28521268],"float32"), 3, axis=-1, )

[paddle error] paddle.chunk(Tensor([1, 4, 20, 28521268],"float32"), 3, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [1, 4, 20, 28521268], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 19:12:30.486187 test begin: paddle.chunk(Tensor([13, 16, 10969719],"float32"), chunks=2, axis=-1, )

[paddle error] paddle.chunk(Tensor([13, 16, 10969719],"float32"), chunks=2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [13, 16, 10969719], Attr(dim) = 2.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 19:12:54.943683 test begin: paddle.chunk(Tensor([13, 175515491, 1],"float32"), 4, axis=1, )

[paddle error] paddle.chunk(Tensor([13, 175515491, 1],"float32"), 4, axis=1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 4, input(X)'s shape = [13, 175515491, 1], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:3 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 19:31:30.871155 test begin: paddle.chunk(Tensor([13, 4, 7, 6268411],"float32"), 3, axis=-1, )

[paddle error] paddle.chunk(Tensor([13, 4, 7, 6268411],"float32"), 3, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [13, 4, 7, 6268411], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 19:31:59.977557 test begin: paddle.chunk(Tensor([13, 5484860, 32],"float32"), 3, axis=1, )

[paddle error] paddle.chunk(Tensor([13, 5484860, 32],"float32"), 3, axis=1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [13, 5484860, 32], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 19:32:20.409390 test begin: paddle.chunk(Tensor([13, 56, 3134206],"float32"), 3, axis=-1, )

[paddle error] paddle.chunk(Tensor([13, 56, 3134206],"float32"), 3, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [13, 56, 3134206], Attr(dim) = 2.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 19:39:41.421281 test begin: paddle.chunk(Tensor([16, 5593, 25500],"float32"), 2, axis=1, )

[paddle error] paddle.chunk(Tensor([16, 5593, 25500],"float32"), 2, axis=1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [16, 5593, 25500], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 19:46:31.764098 test begin: paddle.chunk(Tensor([2048, 1114113],"float32"), 2, axis=-1, )

[paddle error] paddle.chunk(Tensor([2048, 1114113],"float32"), 2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [2048, 1114113], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 20:56:29.730908 test begin: paddle.chunk(Tensor([4, 139265, 64, 64],"float32"), 3, axis=1, )

[paddle error] paddle.chunk(Tensor([4, 139265, 64, 64],"float32"), 3, axis=1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [4, 139265, 64, 64], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 21:34:29.849161 test begin: paddle.chunk(Tensor([4, 262145, 64, 64],"float16"), 3, axis=1, )

[paddle error] paddle.chunk(Tensor([4, 262145, 64, 64],"float16"), 3, axis=1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [4, 262145, 64, 64], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 22:12:20.792680 test begin: paddle.chunk(Tensor([52, 4, 7, 1567103],"float32"), 3, axis=-1, )

[paddle error] paddle.chunk(Tensor([52, 4, 7, 1567103],"float32"), 3, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [52, 4, 7, 1567103], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 22:12:45.071887 test begin: paddle.chunk(Tensor([52, 5484860, 8],"float32"), 3, axis=1, )

[paddle error] paddle.chunk(Tensor([52, 5484860, 8],"float32"), 3, axis=1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [52, 5484860, 8], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 22:46:39.713504 test begin: paddle.chunk(Tensor([8192, 278529],"float32"), 2, axis=-1, )

[paddle error] paddle.chunk(Tensor([8192, 278529],"float32"), 2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [8192, 278529], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 23:19:53.135691 test begin: paddle.chunk(x=Tensor([1431655766, 3],"float16"), chunks=3, axis=0, )

[paddle error] paddle.chunk(x=Tensor([1431655766, 3],"float16"), chunks=3, axis=0, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [1431655766, 3], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 23:20:20.476932 test begin: paddle.chunk(x=Tensor([2281701379],"bool"), chunks=3, axis=0, )

element 0 of tensors does not require grad and does not have a grad_fn
[paddle error] paddle.chunk(x=Tensor([2281701379],"bool"), chunks=3, axis=0, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 23:20:25.230884 test begin: paddle.chunk(x=Tensor([3, 1431655766],"float16"), chunks=3, axis=-1, )

[paddle error] paddle.chunk(x=Tensor([3, 1431655766],"float16"), chunks=3, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [3, 1431655766], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 23:37:03.642772 test begin: paddle.chunk(x=Tensor([3, 760567127],"float32"), chunks=3, axis=-1, )

[paddle error] paddle.chunk(x=Tensor([3, 760567127],"float32"), chunks=3, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [3, 760567127], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 23:40:24.634339 test begin: paddle.chunk(x=Tensor([3, 760567127],"int32"), chunks=3, axis=-1, )

element 0 of tensors does not require grad and does not have a grad_fn
[paddle error] paddle.chunk(x=Tensor([3, 760567127],"int32"), chunks=3, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [3, 760567127], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 23:42:37.698904 test begin: paddle.chunk(x=Tensor([3, 760567127],"int64"), chunks=3, axis=-1, )

element 0 of tensors does not require grad and does not have a grad_fn
[paddle error] paddle.chunk(x=Tensor([3, 760567127],"int64"), chunks=3, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [3, 760567127], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 23:49:53.174279 test begin: paddle.chunk(x=Tensor([760567127, 3],"float32"), chunks=3, axis=0, )

[paddle error] paddle.chunk(x=Tensor([760567127, 3],"float32"), chunks=3, axis=0, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [760567127, 3], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 23:52:29.697822 test begin: paddle.chunk(x=Tensor([760567127, 3],"int32"), chunks=3, axis=0, )

element 0 of tensors does not require grad and does not have a grad_fn
[paddle error] paddle.chunk(x=Tensor([760567127, 3],"int32"), chunks=3, axis=0, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [760567127, 3], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 23:56:10.940702 test begin: paddle.chunk(x=Tensor([760567127, 3],"int64"), chunks=3, axis=0, )

element 0 of tensors does not require grad and does not have a grad_fn
[paddle error] paddle.chunk(x=Tensor([760567127, 3],"int64"), chunks=3, axis=0, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 3, input(X)'s shape = [760567127, 3], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-16 18:31:45.583944 test begin: paddle.equal(Tensor([1],"float32"), Tensor([2281701379],"float32"), )

[paddle error] paddle.equal(Tensor([1],"float32"), Tensor([2281701379],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:31:52.257449 test begin: paddle.equal(Tensor([1],"int32"), Tensor([2281701379],"int32"), )

[paddle error] paddle.equal(Tensor([1],"int32"), Tensor([2281701379],"int32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:32:01.171261 test begin: paddle.equal(Tensor([1],"int64"), Tensor([2281701379],"int64"), )

[paddle error] paddle.equal(Tensor([1],"int64"), Tensor([2281701379],"int64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:44:29.195150 test begin: paddle.equal(Tensor([2, 1],"int64"), Tensor([2281701379],"int64"), )

[paddle error] paddle.equal(Tensor([2, 1],"int64"), Tensor([2281701379],"int64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:44:45.663717 test begin: paddle.equal(Tensor([2, 2147483649],"float16"), 0, )

[paddle error] paddle.equal(Tensor([2, 2147483649],"float16"), 0, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:46:05.545834 test begin: paddle.equal(Tensor([2281701379, 1],"int64"), Tensor([1],"int64"), )

[paddle error] paddle.equal(Tensor([2281701379, 1],"int64"), Tensor([1],"int64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:46:17.022020 test begin: paddle.equal(Tensor([2281701379],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.equal(Tensor([2281701379],"float32"), Tensor([1],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:47:06.833173 test begin: paddle.equal(Tensor([2281701379],"int32"), 0, )

[paddle error] paddle.equal(Tensor([2281701379],"int32"), 0, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:47:14.994866 test begin: paddle.equal(Tensor([2281701379],"int32"), Tensor([1],"int32"), )

[paddle error] paddle.equal(Tensor([2281701379],"int32"), Tensor([1],"int32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:48:02.876219 test begin: paddle.equal(Tensor([2281701379],"int64"), 0, )

[paddle error] paddle.equal(Tensor([2281701379],"int64"), 0, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:48:17.471872 test begin: paddle.equal(Tensor([2281701379],"int64"), 1, )

[paddle error] paddle.equal(Tensor([2281701379],"int64"), 1, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:48:28.217834 test begin: paddle.equal(Tensor([2281701379],"int64"), 1.0, )

[paddle error] paddle.equal(Tensor([2281701379],"int64"), 1.0, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:48:37.663019 test begin: paddle.equal(Tensor([2281701379],"int64"), 10, )

[paddle error] paddle.equal(Tensor([2281701379],"int64"), 10, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:48:48.726463 test begin: paddle.equal(Tensor([2281701379],"int64"), 2, )

[paddle error] paddle.equal(Tensor([2281701379],"int64"), 2, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:48:59.320307 test begin: paddle.equal(Tensor([2281701379],"int64"), Tensor([1],"int64"), )

[paddle error] paddle.equal(Tensor([2281701379],"int64"), Tensor([1],"int64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:49:57.668073 test begin: paddle.equal(Tensor([2281701379],"int64"), True, )

[paddle error] paddle.equal(Tensor([2281701379],"int64"), True, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-19 23:13:46.046400 test begin: paddle.var(Tensor([2281701379],"float32"), )                        

W0319 23:15:07.951284 112273 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0319 23:15:07.952374 112273 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.var(Tensor([2281701379],"float32"), )                         
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-19 23:45:26.718769 test begin: paddle.var(x=Tensor([2, 2147483649],"float16"), )                        

[paddle error] paddle.var(x=Tensor([2, 2147483649],"float16"), )                         
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-11 18:50:24.150909 test begin: paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), "fro", )

one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [2, 126761188, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), "fro", ) 
 (PreconditionNotMet) For batch [228319665]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 18:50:50.300633 test begin: paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), "nuc", )

[paddle error] paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), "nuc", ) 
 (PreconditionNotMet) For batch [228319665]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 18:52:52.483928 test begin: paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), -1, )

one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [2, 126761188, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), -1, ) 
 (PreconditionNotMet) For batch [228319665]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:04:04.401857 test begin: paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), -math.inf, )

W0311 19:05:28.314529 135708 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 19:05:28.316038 135708 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [2, 126761188, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), -math.inf, ) 
 (PreconditionNotMet) For batch [28986439]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:05:43.711083 test begin: paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), 1, )

one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [2, 126761188, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), 1, ) 
 (PreconditionNotMet) For batch [28986439]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:10:26.105103 test begin: paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), math.inf, )

W0311 19:11:39.906383 143890 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 19:11:39.907594 143890 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [2, 126761188, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([2, 126761188, 3, 3],"float32"), math.inf, ) 
 (PreconditionNotMet) For batch [73694293]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:25:37.870010 test begin: paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), "fro", )

one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [63380594, 4, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), "fro", ) 
 (PreconditionNotMet) For batch [10397233]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:27:41.386020 test begin: paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), -1, )

W0311 19:28:59.799141 153776 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 19:28:59.800411 153776 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [63380594, 4, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), -1, ) 
 (PreconditionNotMet) For batch [180325560]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:30:52.422185 test begin: paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), -math.inf, )

W0311 19:32:04.985879 155626 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 19:32:04.986995 155626 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [63380594, 4, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), -math.inf, ) 
 (PreconditionNotMet) For batch [19076826]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:32:19.885044 test begin: paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), 1, )

one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [63380594, 4, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), 1, ) 
 (PreconditionNotMet) For batch [19076826]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:36:57.234468 test begin: paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), math.inf, )

W0311 19:38:09.766438 158627 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0311 19:38:09.767673 158627 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [63380594, 4, 3, 3]], which is output 0 of LinalgInvExBackward0, is at version 1; expected version 0 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
[paddle error] paddle.linalg.cond(Tensor([63380594, 4, 3, 3],"float32"), math.inf, ) 
 (PreconditionNotMet) For batch [18355313]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:45:26.073036 test begin: paddle.linalg.det(Tensor([253522376, 3, 3],"float32"), )

W0311 19:47:32.795486 163009 backward.cc:437] While running Node (DetGradNode) raises an EnforceNotMet exception
[paddle error] paddle.linalg.det(Tensor([253522376, 3, 3],"float32"), ) 
 (PreconditionNotMet) For batch [18355313]: U(3, 3) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:3 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:47:43.839123 test begin: paddle.linalg.det(Tensor([3, 30422686, 5, 5],"float32"), )

W0311 19:49:02.713855   707 backward.cc:437] While running Node (DetGradNode) raises an EnforceNotMet exception
[paddle error] paddle.linalg.det(Tensor([3, 30422686, 5, 5],"float32"), ) 
 (PreconditionNotMet) For batch [31751346]: U(5, 5) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:5 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-11 19:49:07.127726 test begin: paddle.linalg.det(Tensor([30422686, 3, 5, 5],"float32"), )

W0311 19:50:22.768607  1605 backward.cc:437] While running Node (DetGradNode) raises an EnforceNotMet exception
[paddle error] paddle.linalg.det(Tensor([30422686, 3, 5, 5],"float32"), ) 
 (PreconditionNotMet) For batch [31751346]: U(5, 5) is zero, singular U. Please check the matrix value and change it to a non-singular matrix
  [Hint: Expected info[i] == 0, but received info[i]:5 != 0:0.] (at ../paddle/phi/kernels/funcs/matrix_inverse.cu:125)

2025-03-14 23:37:12.933431 test begin: paddle.fmin(Tensor([1],"int64"), Tensor([2281701379],"int64"), )

[paddle error] paddle.fmin(Tensor([1],"int64"), Tensor([2281701379],"int64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-14 23:37:41.319562 test begin: paddle.fmin(Tensor([2281701379],"int64"), Tensor([1],"int64"), )

[paddle error] paddle.fmin(Tensor([2281701379],"int64"), Tensor([1],"int64"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-15 01:08:29.239715 test begin: paddle.frac(Tensor([1431655766, 3],"float16"), )

W0315 01:10:08.441741 146999 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0315 01:10:08.442973 146999 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.frac(Tensor([1431655766, 3],"float16"), ) 
 The data type of input must be one of ['int32', 'int64', 'float32', 'float64'], but got paddle.float16
2025-03-15 01:13:45.814202 test begin: paddle.frac(Tensor([2, 2147483649],"float16"), )

W0315 01:15:23.954999 147187 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0315 01:15:23.956151 147187 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.frac(Tensor([2, 2147483649],"float16"), ) 
 The data type of input must be one of ['int32', 'int64', 'float32', 'float64'], but got paddle.float16
2025-03-16 01:38:45.459673 test begin: paddle.gcd(Tensor([2281701379],"int32"), Tensor([1],"int32"), )

[paddle error] paddle.gcd(Tensor([2281701379],"int32"), Tensor([1],"int32"), ) 
 (InvalidArgument) The [0] th of Inputs(X) and Inputs(Y) should be same. But received X's shape is [1], Y's shape is [2281701379]
  [Hint: Expected x_dims[i] == y_dims[i], but received x_dims[i]:1 != y_dims[i]:2281701379.] (at ../paddle/phi/infermeta/multiary.cc:5628)

2025-03-16 01:39:12.997768 test begin: paddle.gcd(Tensor([2281701379],"int64"), Tensor([1],"int64"), )

[paddle error] paddle.gcd(Tensor([2281701379],"int64"), Tensor([1],"int64"), ) 
 (InvalidArgument) The [0] th of Inputs(X) and Inputs(Y) should be same. But received X's shape is [1], Y's shape is [2281701379]
  [Hint: Expected x_dims[i] == y_dims[i], but received x_dims[i]:1 != y_dims[i]:2281701379.] (at ../paddle/phi/infermeta/multiary.cc:5628)

2025-03-16 01:42:27.100476 test begin: paddle.gcd(x=Tensor([2281701379],"int32"), y=Tensor([1],"int32"), )

element 0 of tensors does not require grad and does not have a grad_fn
[paddle error] paddle.gcd(x=Tensor([2281701379],"int32"), y=Tensor([1],"int32"), ) 
 (InvalidArgument) The [0] th of Inputs(X) and Inputs(Y) should be same. But received X's shape is [1], Y's shape is [2281701379]
  [Hint: Expected x_dims[i] == y_dims[i], but received x_dims[i]:1 != y_dims[i]:2281701379.] (at ../paddle/phi/infermeta/multiary.cc:5628)

2025-03-16 16:51:13.033467 test begin: paddle.hypot(Tensor([1],"float32"), Tensor([2281701379],"float32"), )

[paddle error] paddle.hypot(Tensor([1],"float32"), Tensor([2281701379],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 16:51:40.299612 test begin: paddle.hypot(Tensor([2281701379],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.hypot(Tensor([2281701379],"float32"), Tensor([1],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-17 01:12:07.746509 test begin: paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([253522376, 3, 3],"float32"), )

W0317 01:13:55.551931  4502 backward.cc:437] While running Node (LerpGradNode) raises an EnforceNotMet exception
[paddle error] paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([253522376, 3, 3],"float32"), ) 
 (InvalidArgument) numel is expected to be greater than or equal 0, but received -2013265912.
  [Hint: Expected numel >= 0, but received numel:-2013265912 < 0:0.] (at ../paddle/phi/backends/gpu/gpu_launch_config.h:115)

2025-03-17 01:14:01.195887 test begin: paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([253522376, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )

W0317 01:15:55.390022  6609 backward.cc:437] While running Node (LerpGradNode) raises an EnforceNotMet exception
[paddle error] paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([253522376, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), ) 
 (InvalidArgument) numel is expected to be greater than or equal 0, but received -2013265912.
  [Hint: Expected numel >= 0, but received numel:-2013265912 < 0:0.] (at ../paddle/phi/backends/gpu/gpu_launch_config.h:115)

2025-03-17 02:33:50.690585 test begin: paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([2281701379],"float32"), )

W0317 02:36:35.215456 97382 backward.cc:437] While running Node (LerpGradNode) raises an EnforceNotMet exception
[paddle error] paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([2281701379],"float32"), ) 
 (InvalidArgument) numel is expected to be greater than or equal 0, but received -2013265917.
  [Hint: Expected numel >= 0, but received numel:-2013265917 < 0:0.] (at ../paddle/phi/backends/gpu/gpu_launch_config.h:115)

2025-03-17 02:58:02.310493 test begin: paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1140850690],"float32"), Tensor([2, 1],"float32"), )

W0317 02:59:44.075698 124444 backward.cc:437] While running Node (LerpGradNode) raises an EnforceNotMet exception
[paddle error] paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1140850690],"float32"), Tensor([2, 1],"float32"), ) 
 (InvalidArgument) numel is expected to be greater than or equal 0, but received -2013265916.
  [Hint: Expected numel >= 0, but received numel:-2013265916 < 0:0.] (at ../paddle/phi/backends/gpu/gpu_launch_config.h:115)

2025-03-17 02:59:45.013802 test begin: paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1140850690],"float32"), )

W0317 03:01:30.050539 126394 backward.cc:437] While running Node (LerpGradNode) raises an EnforceNotMet exception
[paddle error] paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1140850690],"float32"), ) 
 (InvalidArgument) numel is expected to be greater than or equal 0, but received -2013265916.
  [Hint: Expected numel >= 0, but received numel:-2013265916 < 0:0.] (at ../paddle/phi/backends/gpu/gpu_launch_config.h:115)

2025-03-16 13:09:12.177859 test begin: paddle.nn.functional.normalize(Tensor([1, 2281701379],"float32"), axis=1, )

W0316 13:10:51.316584 160162 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0316 13:10:51.317767 160162 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nn.functional.normalize(Tensor([1, 2281701379],"float32"), axis=1, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 14:51:21.083283 test begin: paddle.nn.functional.normalize(Tensor([2, 2147483649],"float16"), p=2, axis=-1, )

W0316 14:53:09.389818 161635 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0316 14:53:09.391039 161635 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nn.functional.normalize(Tensor([2, 2147483649],"float16"), p=2, axis=-1, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 15:04:05.049731 test begin: paddle.nn.functional.normalize(Tensor([2281701379],"float32"), axis=0, )

W0316 15:05:31.274627 161925 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0316 15:05:31.275844 161925 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nn.functional.normalize(Tensor([2281701379],"float32"), axis=0, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 15:05:32.437120 test begin: paddle.nn.functional.normalize(Tensor([2281701379],"float32"), axis=0, epsilon=1e-10, )

[paddle error] paddle.nn.functional.normalize(Tensor([2281701379],"float32"), axis=0, epsilon=1e-10, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 15:05:53.180441 test begin: paddle.nn.functional.normalize(Tensor([2281701379],"float32"), axis=0, epsilon=1e-12, )

[paddle error] paddle.nn.functional.normalize(Tensor([2281701379],"float32"), axis=0, epsilon=1e-12, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 17:01:17.781188 test begin: paddle.nn.functional.normalize(x=Tensor([1, 2281701379],"float32"), axis=-1, )

W0316 17:02:50.193709   573 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0316 17:02:50.194880   573 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nn.functional.normalize(x=Tensor([1, 2281701379],"float32"), axis=-1, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 17:34:31.412487 test begin: paddle.nn.functional.normalize(x=Tensor([2, 2147483649],"float16"), )

W0316 17:36:10.664855  1035 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0316 17:36:10.666067  1035 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nn.functional.normalize(x=Tensor([2, 2147483649],"float16"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 18:08:32.040428 test begin: paddle.nn.functional.normalize(x=Tensor([2147483649, 2],"float16"), p=1.2, )

W0316 18:10:17.405480 13164 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0316 18:10:17.406916 13164 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nn.functional.normalize(x=Tensor([2147483649, 2],"float16"), p=1.2, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 21:46:50.149002 test begin: paddle.nn.functional.normalize(x=Tensor([4294967297],"float16"), axis=0, )

[paddle error] paddle.nn.functional.normalize(x=Tensor([4294967297],"float16"), axis=0, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-16 23:30:12.267959 test begin: paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), -math.inf, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), -math.inf, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:32:16.896415 test begin: paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 0, 1e-06, False, None, )

One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 0, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:32:24.607821 test begin: paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 1, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 1, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:32:47.725150 test begin: paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 2, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), 2, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:33:09.804761 test begin: paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), math.inf, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), math.inf, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:34:20.642926 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:34:41.161212 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -1, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -1, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:35:04.913616 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -1, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -1, 1e-06, True, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:35:29.422423 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -math.inf, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -math.inf, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:35:53.352999 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -math.inf, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), -math.inf, 1e-06, True, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:36:16.076439 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 0, 1e-06, False, None, )

One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 0, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:36:24.669016 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 0, 1e-06, True, None, )

One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 0, 1e-06, True, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:36:36.293838 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 1, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 1, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:37:00.731508 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 1, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 1, 1e-06, True, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:37:22.138807 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 2, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 2, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:37:46.482594 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 2, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), 2, 1e-06, True, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:38:08.647589 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), math.inf, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), math.inf, 1e-06, False, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-16 23:38:32.159787 test begin: paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), math.inf, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), math.inf, 1e-06, True, None, ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-17 00:08:24.324955 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -1, 1e-06, False, None, )

W0317 00:10:18.956300 96221 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0317 00:10:18.957494 96221 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -1, 1e-06, False, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:10:20.348324 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -1, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -1, 1e-06, True, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:10:45.446811 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -math.inf, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -math.inf, 1e-06, False, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:11:12.064859 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -math.inf, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), -math.inf, 1e-06, True, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:11:37.048431 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 0, 1e-06, False, None, )

One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 0, 1e-06, False, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:11:47.083023 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 0, 1e-06, True, None, )

One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 0, 1e-06, True, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:11:58.228589 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 1, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 1, 1e-06, False, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:12:21.545901 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 1, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 1, 1e-06, True, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:12:44.652795 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 2, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 2, 1e-06, False, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:13:08.466495 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 2, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), 2, 1e-06, True, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:13:35.631308 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), math.inf, 1e-06, False, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), math.inf, 1e-06, False, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-17 00:14:02.475245 test begin: paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), math.inf, 1e-06, True, None, )

[paddle error] paddle.nn.functional.pairwise_distance(Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), math.inf, 1e-06, True, None, ) 
 (InvalidArgument) The 0-th dimension of input tensor is expected to be equal with the 0-th dimension of output tensor 1 or 1, but received 4294967297.
  [Hint: Expected in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1 == true, but received in_dim[in_idx] == out_dims[in_idx] || in_dim[in_idx] == 1:0 != true:1.] (at ../paddle/phi/kernels/funcs/dims_simplifier.h:144)

2025-03-18 12:10:13.775293 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 15],"float32"),Tensor([15],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 15],"float32"),Tensor([15],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [150, 15], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:165 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 12:10:19.380821 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 3],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 3],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [30, 0], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:30 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 12:10:25.172263 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [128, 256, 16, 16, 256, 256, 16, 16], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:960 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 12:10:29.536608 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [4, 2], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:6 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 12:10:33.510879 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [384, 3], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:387 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 12:10:38.897564 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [96, 3], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:99 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 12:10:43.964042 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [24, 3], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:27 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 12:10:48.672641 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [384, 768, 48, 48, 768, 768, 48, 48], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:2880 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 12:10:53.418676 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [512, 1024, 64, 64, 1024, 1024, 64, 64], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:3840 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 14:08:37.781346 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=False, reduction="mean", name=None, )

[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=False, reduction="mean", name=None, ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 14:20:58.126819 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=False, reduction="none", name=None, )

[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=False, reduction="none", name=None, ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 14:33:18.504646 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=False, reduction="sum", name=None, )

[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=False, reduction="sum", name=None, ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 14:45:38.186101 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=True, reduction="mean", name=None, )

[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), margin=0.3, swap=True, reduction="mean", name=None, ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 15:06:51.490764 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), margin=0.3, swap=False, reduction="sum", name=None, )

W0318 15:09:38.000716 39833 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0318 15:09:38.002909 39833 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), Tensor([858993460, 5],"float16"), margin=0.3, swap=False, reduction="sum", name=None, ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 15:13:34.010268 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=False, reduction="mean", )

[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=False, reduction="mean", ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 15:26:00.569926 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=False, reduction="none", )

[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=False, reduction="none", ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 15:38:25.261927 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=False, reduction="sum", )

[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=False, reduction="sum", ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 15:50:47.107958 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=True, reduction="mean", )

[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 858993460],"float16"), positive=Tensor([5, 858993460],"float16"), negative=Tensor([5, 858993460],"float16"), distance_function=None, margin=0.3, swap=True, reduction="mean", ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 16:10:55.422532 test begin: paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([858993460, 5],"float16"), positive=Tensor([858993460, 5],"float16"), negative=Tensor([858993460, 5],"float16"), distance_function=None, margin=0.3, swap=False, reduction="sum", )

W0318 16:12:54.888128 143623 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0318 16:12:54.890297 143623 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([858993460, 5],"float16"), positive=Tensor([858993460, 5],"float16"), negative=Tensor([858993460, 5],"float16"), distance_function=None, margin=0.3, swap=False, reduction="sum", ) 
 The positive distance or negative distance should be greater than 0, The distance functions should be checked.
2025-03-18 18:19:23.040659 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 15],"float32"),Tensor([15],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 15],"float32"),Tensor([15],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [150, 15], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:165 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 18:19:27.195544 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 3],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([10, 3],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [30, 0], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:30 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 18:19:31.720901 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([16, 8],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),Tensor([16, 16],"float32"),Tensor([16, 16],"float32"),Tensor([16],"float32"),Tensor([16],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [128, 256, 16, 16, 256, 256, 16, 16], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:960 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 18:19:36.411003 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [4, 2], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:6 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 18:19:41.074097 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [384, 3], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:387 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 18:19:45.398877 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [96, 3], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:99 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 18:19:50.037395 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [24, 3], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:27 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 18:19:54.402803 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 16],"float32"),Tensor([48, 16],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [384, 768, 48, 48, 768, 768, 48, 48], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:2880 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 18:19:59.056618 test begin: paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )

[paddle error] paddle.nn.utils.vector_to_parameters(Tensor([2281701379],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 16],"float32"),Tensor([64, 16],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], ) 
 (InvalidArgument) Sum of Attr(num_or_sections) must be equal to the input's size along the split dimension. But received Attr(num_or_sections) = [512, 1024, 64, 64, 1024, 1024, 64, 64], input(X)'s shape = [2281701379], Attr(dim) = 0.
  [Hint: Expected sum_of_section == input_axis_dim, but received sum_of_section:3840 != input_axis_dim:2281701379.] (at ../paddle/phi/infermeta/unary.cc:4438)

2025-03-18 21:33:53.582118 test begin: paddle.outer(Tensor([2281701379],"float32"), Tensor([1],"float32"), )

[paddle error] paddle.outer(Tensor([2281701379],"float32"), Tensor([1],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-11 20:07:35.234880 test begin: paddle.Tensor.chunk(Tensor([1, 1, 1, 2281701379],"float32"), 4, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 1, 1, 2281701379],"float32"), 4, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 4, input(X)'s shape = [1, 1, 1, 2281701379], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:3 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 20:07:55.422552 test begin: paddle.Tensor.chunk(Tensor([1, 1, 10164, 224489],"float32"), 2, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 1, 10164, 224489],"float32"), 2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [1, 1, 10164, 224489], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 20:14:00.746844 test begin: paddle.Tensor.chunk(Tensor([1, 1, 2281701379],"float32"), 2, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 1, 2281701379],"float32"), 2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [1, 1, 2281701379], Attr(dim) = 2.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 20:17:13.533764 test begin: paddle.Tensor.chunk(Tensor([1, 10, 1, 228170138],"float32"), 4, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 10, 1, 228170138],"float32"), 4, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 4, input(X)'s shape = [1, 10, 1, 228170138], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 20:36:10.987546 test begin: paddle.Tensor.chunk(Tensor([1, 2281701379],"float32"), 2, axis=1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 2281701379],"float32"), 2, axis=1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [1, 2281701379], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 21:23:00.516633 test begin: paddle.Tensor.chunk(Tensor([13, 5484860, 32],"float32"), 8, axis=1, )

[paddle error] paddle.Tensor.chunk(Tensor([13, 5484860, 32],"float32"), 8, axis=1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 8, input(X)'s shape = [13, 5484860, 32], Attr(dim) = 1.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:4 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 22:02:50.026891 test begin: paddle.Tensor.chunk(Tensor([1901418, 300, 4],"float32"), 4, )

[paddle error] paddle.Tensor.chunk(Tensor([1901418, 300, 4],"float32"), 4, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 4, input(X)'s shape = [1901418, 300, 4], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 22:34:38.434768 test begin: paddle.Tensor.chunk(Tensor([475355, 300, 16],"float32"), 2, )

[paddle error] paddle.Tensor.chunk(Tensor([475355, 300, 16],"float32"), 2, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [475355, 300, 16], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 22:46:50.334096 test begin: paddle.Tensor.chunk(Tensor([5704254, 100, 4],"float32"), 4, )

[paddle error] paddle.Tensor.chunk(Tensor([5704254, 100, 4],"float32"), 4, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 4, input(X)'s shape = [5704254, 100, 4], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 22:50:45.600100 test begin: paddle.Tensor.chunk(Tensor([75304, 300, 101],"float32"), 16, )

[paddle error] paddle.Tensor.chunk(Tensor([75304, 300, 101],"float32"), 16, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 16, input(X)'s shape = [75304, 300, 101], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:8 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-11 23:06:14.641250 test begin: paddle.Tensor.chunk(Tensor([950709, 300, 8],"float32"), 8, )

[paddle error] paddle.Tensor.chunk(Tensor([950709, 300, 8],"float32"), 8, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 8, input(X)'s shape = [950709, 300, 8], Attr(dim) = 0.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:5 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-13 10:56:25.535340 test begin: paddle.std(Tensor([2281701379],"float32"), )

[paddle error] paddle.std(Tensor([2281701379],"float32"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-13 11:18:50.035567 test begin: paddle.std(x=Tensor([2, 2147483649],"float16"), )

[paddle error] paddle.std(x=Tensor([2, 2147483649],"float16"), ) 
 (PreconditionNotMet) The meta data must be valid when call the mutable data function.
  [Hint: Expected valid() == true, but received valid():0 != true:1.] (at ../paddle/phi/core/dense_tensor.cc:117)

2025-03-13 13:54:07.441507 test begin: paddle.sum(Tensor([1, 2281701379],"int32"), )

[paddle error] paddle.sum(Tensor([1, 2281701379],"int32"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 16:38:27.958832 test begin: paddle.sum(Tensor([190141782, 3, 4, 1, 1, 1],"int64"), )

[paddle error] paddle.sum(Tensor([190141782, 3, 4, 1, 1, 1],"int64"), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, its dim should be <= 5. (at ../paddle/phi/kernels/kps/reduce_kernel.cu:301)

2025-03-14 16:38:44.256750 test begin: paddle.sum(Tensor([190141782, 3, 4],"int32"), axis=0, )

[paddle error] paddle.sum(Tensor([190141782, 3, 4],"int32"), axis=0, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 16:39:38.376635 test begin: paddle.sum(Tensor([190141782, 3, 4],"int32"), axis=tuple(0,1,), )

[paddle error] paddle.sum(Tensor([190141782, 3, 4],"int32"), axis=tuple(0,1,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 16:39:44.794894 test begin: paddle.sum(Tensor([190141782, 3, 4],"int32"), axis=tuple(0,1,2,), )

[paddle error] paddle.sum(Tensor([190141782, 3, 4],"int32"), axis=tuple(0,1,2,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:01:22.568086 test begin: paddle.sum(Tensor([2, 1140850690],"bool"), axis=-1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 1140850690],"bool"), axis=-1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:02:31.628500 test begin: paddle.sum(Tensor([2, 1140850690],"bool"), axis=0, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 1140850690],"bool"), axis=0, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:02:44.712252 test begin: paddle.sum(Tensor([2, 1140850690],"bool"), axis=1, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 1140850690],"bool"), axis=1, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:02:47.314161 test begin: paddle.sum(Tensor([2, 1140850690],"bool"), axis=None, keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 1140850690],"bool"), axis=None, keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:02:50.417951 test begin: paddle.sum(Tensor([2, 1140850690],"bool"), axis=None, keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 1140850690],"bool"), axis=None, keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:02:53.384724 test begin: paddle.sum(Tensor([2, 1140850690],"bool"), axis=list[-1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 1140850690],"bool"), axis=list[-1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:02:56.658547 test begin: paddle.sum(Tensor([2, 1140850690],"bool"), axis=list[0,], keepdim=True, )

[paddle error] paddle.sum(Tensor([2, 1140850690],"bool"), axis=list[0,], keepdim=True, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:03:06.322059 test begin: paddle.sum(Tensor([2, 1140850690],"bool"), axis=list[1,], keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 1140850690],"bool"), axis=list[1,], keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:03:08.845408 test begin: paddle.sum(Tensor([2, 1140850690],"bool"), axis=tuple(0,1,), keepdim=False, )

[paddle error] paddle.sum(Tensor([2, 1140850690],"bool"), axis=tuple(0,1,), keepdim=False, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:56:38.493662 test begin: paddle.sum(Tensor([2, 285212673, 4],"int32"), axis=0, )

W0314 17:57:51.613270 139276 gpu_resources.cc:119] Please NOTE: device: 0, GPU Compute Capability: 8.0, Driver API Version: 12.0, Runtime API Version: 11.8
W0314 17:57:51.614264 139276 gpu_resources.cc:164] device: 0, cuDNN Version: 8.6.
[paddle error] paddle.sum(Tensor([2, 285212673, 4],"int32"), axis=0, ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:57:52.415423 test begin: paddle.sum(Tensor([2, 285212673, 4],"int32"), axis=tuple(0,1,), )

[paddle error] paddle.sum(Tensor([2, 285212673, 4],"int32"), axis=tuple(0,1,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-14 17:57:57.911541 test begin: paddle.sum(Tensor([2, 285212673, 4],"int32"), axis=tuple(0,1,2,), )

[paddle error] paddle.sum(Tensor([2, 285212673, 4],"int32"), axis=tuple(0,1,2,), ) 
 (Fatal) If Input.numel() > INT32_MAX, reduce_sum kernel uses EigenTensor sum for reduce_sum function. As a result, input dtype should be the same as out dtype (at ../paddle/phi/kernels/kps/reduce_kernel.cu:263)

2025-03-12 11:34:26.543003 test begin: paddle.Tensor.chunk(Tensor([1, 1, 11109, 205393],"float32"), 2, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 1, 11109, 205393],"float32"), 2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [1, 1, 11109, 205393], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-12 11:34:52.608482 test begin: paddle.Tensor.chunk(Tensor([1, 1, 12096, 188633],"float32"), 2, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 1, 12096, 188633],"float32"), 2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [1, 1, 12096, 188633], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-12 11:41:47.491582 test begin: paddle.Tensor.chunk(Tensor([1, 101, 1, 22591103],"float32"), 4, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 101, 1, 22591103],"float32"), 4, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 4, input(X)'s shape = [1, 101, 1, 22591103], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:3 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-12 11:42:11.758828 test begin: paddle.Tensor.chunk(Tensor([1, 101, 22591103],"float32"), 2, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 101, 22591103],"float32"), 2, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 2, input(X)'s shape = [1, 101, 22591103], Attr(dim) = 2.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-12 11:46:06.740943 test begin: paddle.Tensor.chunk(Tensor([1, 102, 1, 22369622],"float32"), 4, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 102, 1, 22369622],"float32"), 4, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 4, input(X)'s shape = [1, 102, 1, 22369622], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:2 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-12 11:55:47.034128 test begin: paddle.Tensor.chunk(Tensor([1, 103, 1, 22152441],"float32"), 4, axis=-1, )

[paddle error] paddle.Tensor.chunk(Tensor([1, 103, 1, 22152441],"float32"), 4, axis=-1, ) 
 (InvalidArgument) The input's size along the split dimension must be evenly divisible by Attr(num_or_sections). But received Attr(num_or_sections) = 4, input(X)'s shape = [1, 103, 1, 22152441], Attr(dim) = 3.
  [Hint: Expected input_axis_dim % num == 0, but received input_axis_dim % num:1 != 0:0.] (at ../paddle/phi/infermeta/unary.cc:4490)

2025-03-15 04:50:19.936796 test begin: paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([2281701379, 1],"int64"), )

[paddle error] paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([2281701379, 1],"int64"), ) 
 (InvalidArgument) When the value in shape is negative for expand_as_v2 op, only -1 is supported, but the value received is -2013265917.
  [Hint: Expected target_shape[i] == -1, but received target_shape[i]:-2013265917 != -1:-1.] (at ../paddle/phi/kernels/gpu/expand_as_kernel.cu:76)

2025-03-15 05:05:44.262183 test begin: paddle.Tensor.expand_as(Tensor([2281701379, 1],"int32"), Tensor([2281701379, 1],"int64"), )

[paddle error] paddle.Tensor.expand_as(Tensor([2281701379, 1],"int32"), Tensor([2281701379, 1],"int64"), ) 
 (InvalidArgument) When the value in shape is negative for expand_as_v2 op, only -1 is supported, but the value received is -2013265917.
  [Hint: Expected target_shape[i] == -1, but received target_shape[i]:-2013265917 != -1:-1.] (at ../paddle/phi/kernels/gpu/expand_as_kernel.cu:76)

2025-03-15 09:30:11.345312 test begin: paddle.Tensor.flatten(Tensor([1, 1, 12, 190141782],"float32"), start_axis=2, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 1, 12, 190141782],"float32"), start_axis=2, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, 1, -2013265912], shape[2] = -2013265912.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265912 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 09:30:34.439735 test begin: paddle.Tensor.flatten(Tensor([1, 1, 16, 142606337],"float32"), start_axis=2, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 1, 16, 142606337],"float32"), start_axis=2, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, 1, -2013265904], shape[2] = -2013265904.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265904 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 09:36:22.879379 test begin: paddle.Tensor.flatten(Tensor([1, 1, 20, 114085069],"float32"), start_axis=2, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 1, 20, 114085069],"float32"), start_axis=2, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, 1, -2013265916], shape[2] = -2013265916.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265916 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 09:36:45.905572 test begin: paddle.Tensor.flatten(Tensor([1, 1, 2281701379],"float32"), stop_axis=-2, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 1, 2281701379],"float32"), stop_axis=-2, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265917], shape[1] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 09:37:06.565193 test begin: paddle.Tensor.flatten(Tensor([1, 1, 2281701379],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([1, 1, 2281701379],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265917], shape[0] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 09:37:20.005088 test begin: paddle.Tensor.flatten(Tensor([1, 1, 2281701379],"int64"), stop_axis=-2, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 1, 2281701379],"int64"), stop_axis=-2, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265917], shape[1] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 09:37:45.303744 test begin: paddle.Tensor.flatten(Tensor([1, 1, 35651585, 64],"float32"), start_axis=2, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 1, 35651585, 64],"float32"), start_axis=2, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, 1, -2013265856], shape[2] = -2013265856.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265856 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 09:55:22.176103 test begin: paddle.Tensor.flatten(Tensor([1, 1, 6, 380283564],"float32"), start_axis=2, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 1, 6, 380283564],"float32"), start_axis=2, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, 1, -2013265912], shape[2] = -2013265912.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265912 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 09:55:48.737703 test begin: paddle.Tensor.flatten(Tensor([1, 1, 8, 285212673],"float32"), start_axis=2, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 1, 8, 285212673],"float32"), start_axis=2, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, 1, -2013265912], shape[2] = -2013265912.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265912 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 10:27:44.230989 test begin: paddle.Tensor.flatten(Tensor([1, 10, 228170138],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 10, 228170138],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265916], shape[1] = -2013265916.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265916 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 10:28:10.996862 test begin: paddle.Tensor.flatten(Tensor([1, 10, 228170138],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([1, 10, 228170138],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265916], shape[0] = -2013265916.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265916 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 10:37:50.296366 test begin: paddle.Tensor.flatten(Tensor([1, 101, 22591103],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([1, 101, 22591103],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265893], shape[0] = -2013265893.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265893 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 10:38:04.645550 test begin: paddle.Tensor.flatten(Tensor([1, 102, 22369622],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([1, 102, 22369622],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265852], shape[0] = -2013265852.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265852 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 10:38:15.864608 test begin: paddle.Tensor.flatten(Tensor([1, 103, 22152441],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([1, 103, 22152441],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265873], shape[0] = -2013265873.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265873 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 10:50:55.071632 test begin: paddle.Tensor.flatten(Tensor([1, 11408507, 200],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 11408507, 200],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265896], shape[1] = -2013265896.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265896 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 10:54:59.524068 test begin: paddle.Tensor.flatten(Tensor([1, 12, 190141782],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 12, 190141782],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265912], shape[1] = -2013265912.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265912 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 11:15:56.511990 test begin: paddle.Tensor.flatten(Tensor([1, 142606337, 4, 4],"float32"), start_axis=1, stop_axis=3, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 142606337, 4, 4],"float32"), start_axis=1, stop_axis=3, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265904], shape[1] = -2013265904.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265904 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 11:19:55.125776 test begin: paddle.Tensor.flatten(Tensor([1, 144, 15845149],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 144, 15845149],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265840], shape[1] = -2013265840.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265840 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 11:26:43.425403 test begin: paddle.Tensor.flatten(Tensor([1, 15845149, 144],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 15845149, 144],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265840], shape[1] = -2013265840.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265840 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 11:35:51.824237 test begin: paddle.Tensor.flatten(Tensor([1, 18, 126761188],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 18, 126761188],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265912], shape[1] = -2013265912.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265912 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 11:53:40.115829 test begin: paddle.Tensor.flatten(Tensor([1, 192, 11883862],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 192, 11883862],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265792], shape[1] = -2013265792.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265792 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 12:37:13.242684 test begin: paddle.Tensor.flatten(Tensor([1, 2281701379, 1],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([1, 2281701379, 1],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265917], shape[0] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 12:37:27.027064 test begin: paddle.Tensor.flatten(Tensor([1, 2281701379],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 2281701379],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265917], shape[1] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 12:37:48.147223 test begin: paddle.Tensor.flatten(Tensor([1, 2281701379],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([1, 2281701379],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265917], shape[0] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 12:38:01.046887 test begin: paddle.Tensor.flatten(Tensor([1, 2281701379],"int64"), )

[paddle error] paddle.Tensor.flatten(Tensor([1, 2281701379],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265917], shape[0] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 12:48:07.311645 test begin: paddle.Tensor.flatten(Tensor([1, 253522376, 9],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 253522376, 9],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265912], shape[1] = -2013265912.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265912 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 12:55:13.476047 test begin: paddle.Tensor.flatten(Tensor([1, 268435457, 4, 4],"float16"), start_axis=1, stop_axis=3, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 268435457, 4, 4],"float16"), start_axis=1, stop_axis=3, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 268435457, 4, 4], X's size = 4294967312, 'shape' is [1, 16], the capacity of 'shape' is 16.
  [Hint: Expected capacity == in_size, but received capacity:16 != in_size:4294967312.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-15 12:59:33.655903 test begin: paddle.Tensor.flatten(Tensor([1, 285212673, 8],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 285212673, 8],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265912], shape[1] = -2013265912.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265912 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 14:01:15.039291 test begin: paddle.Tensor.flatten(Tensor([1, 6, 178956971, 4],"float16"), start_axis=1, stop_axis=3, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 6, 178956971, 4],"float16"), start_axis=1, stop_axis=3, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 6, 178956971, 4], X's size = 4294967304, 'shape' is [1, 8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-15 14:01:37.312353 test begin: paddle.Tensor.flatten(Tensor([1, 6, 4, 178956971],"float16"), start_axis=1, stop_axis=3, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 6, 4, 178956971],"float16"), start_axis=1, stop_axis=3, ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [1, 6, 4, 178956971], X's size = 4294967304, 'shape' is [1, 8], the capacity of 'shape' is 8.
  [Hint: Expected capacity == in_size, but received capacity:8 != in_size:4294967304.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-15 14:01:56.387524 test begin: paddle.Tensor.flatten(Tensor([1, 6, 4, 95070891],"float32"), start_axis=1, stop_axis=3, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 6, 4, 95070891],"float32"), start_axis=1, stop_axis=3, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265912], shape[1] = -2013265912.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265912 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 14:02:19.332807 test begin: paddle.Tensor.flatten(Tensor([1, 6, 95070891, 4],"float32"), start_axis=1, stop_axis=3, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 6, 95070891, 4],"float32"), start_axis=1, stop_axis=3, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265912], shape[1] = -2013265912.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265912 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:01:10.504646 test begin: paddle.Tensor.flatten(Tensor([1, 91268056, 25],"float32"), 1, )

[paddle error] paddle.Tensor.flatten(Tensor([1, 91268056, 25],"float32"), 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [1, -2013265896], shape[1] = -2013265896.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265896 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:01:38.288986 test begin: paddle.Tensor.flatten(Tensor([10, 228170138],"float32"), 0, 1, )

[paddle error] paddle.Tensor.flatten(Tensor([10, 228170138],"float32"), 0, 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265916], shape[0] = -2013265916.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265916 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:01:59.956696 test begin: paddle.Tensor.flatten(Tensor([100, 22817014],"float32"), 0, 1, )

[paddle error] paddle.Tensor.flatten(Tensor([100, 22817014],"float32"), 0, 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265896], shape[0] = -2013265896.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265896 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:19:18.601841 test begin: paddle.Tensor.flatten(Tensor([12, 18397, 76, 136],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 18397, 76, 136],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013150592], shape[0] = -2013150592.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013150592 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:19:41.291262 test begin: paddle.Tensor.flatten(Tensor([12, 19, 10007463, 1],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 19, 10007463, 1],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265732], shape[0] = -2013265732.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265732 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:20:00.538358 test begin: paddle.Tensor.flatten(Tensor([12, 19, 34, 294338],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 19, 34, 294338],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013259120], shape[0] = -2013259120.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013259120 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:20:21.204183 test begin: paddle.Tensor.flatten(Tensor([12, 2796203, 68, 1],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 2796203, 68, 1],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265648], shape[0] = -2013265648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:20:38.534742 test begin: paddle.Tensor.flatten(Tensor([12, 294338, 19, 34],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 294338, 19, 34],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013259120], shape[0] = -2013259120.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013259120 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:20:57.906953 test begin: paddle.Tensor.flatten(Tensor([12, 38, 5003732, 1],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 38, 5003732, 1],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265504], shape[0] = -2013265504.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265504 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:21:17.061325 test begin: paddle.Tensor.flatten(Tensor([12, 38, 68, 73585],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 38, 68, 73585],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013243616], shape[0] = -2013243616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013243616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:21:38.555694 test begin: paddle.Tensor.flatten(Tensor([12, 4, 1398102, 34],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 4, 1398102, 34],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013264832], shape[0] = -2013264832.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013264832 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:21:59.696179 test begin: paddle.Tensor.flatten(Tensor([12, 4, 19, 2501866],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 4, 19, 2501866],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265504], shape[0] = -2013265504.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265504 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:22:17.819655 test begin: paddle.Tensor.flatten(Tensor([12, 4, 349526, 136],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 4, 349526, 136],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013261568], shape[0] = -2013261568.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013261568 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:22:36.549078 test begin: paddle.Tensor.flatten(Tensor([12, 4, 38, 1250933],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 4, 38, 1250933],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265504], shape[0] = -2013265504.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265504 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:22:57.829000 test begin: paddle.Tensor.flatten(Tensor([12, 4, 699051, 68],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 4, 699051, 68],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013264832], shape[0] = -2013264832.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013264832 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:23:18.642383 test begin: paddle.Tensor.flatten(Tensor([12, 4, 76, 625467],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 4, 76, 625467],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013263680], shape[0] = -2013263680.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013263680 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:23:45.168669 test begin: paddle.Tensor.flatten(Tensor([12, 5592406, 34, 1],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 5592406, 34, 1],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265648], shape[0] = -2013265648.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265648 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 15:24:10.869809 test begin: paddle.Tensor.flatten(Tensor([12, 73585, 38, 68],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([12, 73585, 38, 68],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013243616], shape[0] = -2013243616.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013243616 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 19:08:49.691604 test begin: paddle.Tensor.flatten(Tensor([2, 3, 15845149, 6, 4],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([2, 3, 15845149, 6, 4],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265840], shape[0] = -2013265840.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265840 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 19:09:15.063837 test begin: paddle.Tensor.flatten(Tensor([2, 3, 6, 15845149, 4],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([2, 3, 6, 15845149, 4],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265840], shape[0] = -2013265840.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265840 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 19:09:36.329522 test begin: paddle.Tensor.flatten(Tensor([2, 3, 6, 6, 10563433],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([2, 3, 6, 6, 10563433],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265768], shape[0] = -2013265768.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265768 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 20:13:02.545696 test begin: paddle.Tensor.flatten(Tensor([2, 7922575, 6, 6, 4],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([2, 7922575, 6, 6, 4],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265696], shape[0] = -2013265696.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265696 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 20:42:52.116495 test begin: paddle.Tensor.flatten(Tensor([220753, 4, 38, 68],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([220753, 4, 38, 68],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013264288], shape[0] = -2013264288.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013264288 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 20:43:14.661487 test begin: paddle.Tensor.flatten(Tensor([22152441, 103, 1],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([22152441, 103, 1],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265873], shape[0] = -2013265873.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265873 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 20:56:38.066936 test begin: paddle.Tensor.flatten(Tensor([22369622, 102, 1],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([22369622, 102, 1],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265852], shape[0] = -2013265852.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265852 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:00:14.709173 test begin: paddle.Tensor.flatten(Tensor([22591103, 101, 1],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([22591103, 101, 1],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265893], shape[0] = -2013265893.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265893 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:00:27.672775 test begin: paddle.Tensor.flatten(Tensor([2277148, 1002],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([2277148, 1002],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265000], shape[0] = -2013265000.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265000 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:00:38.703459 test begin: paddle.Tensor.flatten(Tensor([2277148, 1002],"int64"), )

[paddle error] paddle.Tensor.flatten(Tensor([2277148, 1002],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265000], shape[0] = -2013265000.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265000 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:01:04.659140 test begin: paddle.Tensor.flatten(Tensor([2279422, 1001],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([2279422, 1001],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265874], shape[0] = -2013265874.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265874 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:01:17.524541 test begin: paddle.Tensor.flatten(Tensor([2279422, 1001],"int64"), )

[paddle error] paddle.Tensor.flatten(Tensor([2279422, 1001],"int64"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265874], shape[0] = -2013265874.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265874 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:01:38.533370 test begin: paddle.Tensor.flatten(Tensor([2281701379, 1, 1],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([2281701379, 1, 1],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265917], shape[0] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:01:49.091778 test begin: paddle.Tensor.flatten(Tensor([2281701379],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([2281701379],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265917], shape[0] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:02:12.612635 test begin: paddle.Tensor.flatten(Tensor([2281701379],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([2281701379],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265917], shape[0] = -2013265917.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265917 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:02:29.333978 test begin: paddle.Tensor.flatten(Tensor([228170138, 10, 1],"int32"), )

[paddle error] paddle.Tensor.flatten(Tensor([228170138, 10, 1],"int32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265916], shape[0] = -2013265916.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265916 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:02:40.494855 test begin: paddle.Tensor.flatten(Tensor([228170138, 10],"float32"), 0, 1, )

[paddle error] paddle.Tensor.flatten(Tensor([228170138, 10],"float32"), 0, 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265916], shape[0] = -2013265916.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265916 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 21:03:06.651680 test begin: paddle.Tensor.flatten(Tensor([22817014, 100],"float32"), 0, 1, )

[paddle error] paddle.Tensor.flatten(Tensor([22817014, 100],"float32"), 0, 1, ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265896], shape[0] = -2013265896.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265896 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 22:12:13.601542 test begin: paddle.Tensor.flatten(Tensor([3532046, 19, 34, 1],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([3532046, 19, 34, 1],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265580], shape[0] = -2013265580.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265580 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-15 23:02:54.331415 test begin: paddle.Tensor.flatten(Tensor([4294967297],"bfloat16"), )

[paddle error] paddle.Tensor.flatten(Tensor([4294967297],"bfloat16"), ) 
 (InvalidArgument) The 'shape' in ReshapeOp is invalid. The input tensor X'size must be equal to the capacity of 'shape'. But received X's shape = [4294967297], X's size = 4294967297, 'shape' is [1], the capacity of 'shape' is 1.
  [Hint: Expected capacity == in_size, but received capacity:1 != in_size:4294967297.] (at ../paddle/phi/infermeta/unary.cc:2258)

2025-03-16 00:01:40.547625 test begin: paddle.Tensor.flatten(Tensor([5281717, 3, 6, 6, 4],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([5281717, 3, 6, 6, 4],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013265552], shape[0] = -2013265552.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013265552 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-16 00:02:04.083583 test begin: paddle.Tensor.flatten(Tensor([55189, 4, 76, 136],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([55189, 4, 76, 136],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013233280], shape[0] = -2013233280.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013233280 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-16 01:34:06.174404 test begin: paddle.Tensor.flatten(Tensor([883012, 38, 68, 1],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([883012, 38, 68, 1],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013264288], shape[0] = -2013264288.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013264288 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-16 01:34:29.679454 test begin: paddle.Tensor.flatten(Tensor([883012, 4, 19, 34],"float32"), )

[paddle error] paddle.Tensor.flatten(Tensor([883012, 4, 19, 34],"float32"), ) 
 (InvalidArgument) Each dimension value of 'shape' in ReshapeOp must not be negative except one unknown dimension. But received  shape = [-2013264288], shape[0] = -2013264288.
  [Hint: Expected shape[i] > 0, but received shape[i]:-2013264288 <= 0:0.] (at ../paddle/phi/infermeta/unary.cc:2199)

2025-03-16 02:58:06.601704 test begin: paddle.Tensor.gcd(x=Tensor([2281701379],"int32"), y=Tensor([1],"int32"), )

element 0 of tensors does not require grad and does not have a grad_fn
[paddle error] paddle.Tensor.gcd(x=Tensor([2281701379],"int32"), y=Tensor([1],"int32"), ) 
 (InvalidArgument) The [0] th of Inputs(X) and Inputs(Y) should be same. But received X's shape is [1], Y's shape is [2281701379]
  [Hint: Expected x_dims[i] == y_dims[i], but received x_dims[i]:1 != y_dims[i]:2281701379.] (at ../paddle/phi/infermeta/multiary.cc:5628)

2025-03-16 16:19:10.730530 test begin: paddle.Tensor.lu(Tensor([3, 760567127],"float32"), )

=========================================================================================
   WARNING batched routines are designed for small sizes. It might be better to use the
   Native/Hybrid classical routines if you want good performance.
=========================================================================================
element 1 of tensors does not require grad and does not have a grad_fn
[paddle error] paddle.Tensor.lu(Tensor([3, 760567127],"float32"), ) 
 (External) CUSOLVER error(3). 
  [Hint: 'CUSOLVER_STATUS_INVALID_VALUE'. An unsupported value or parameter was passed to the function (a negative vector size, for example).To correct: ensure that all the parameters being passed have valid values.] (at ../paddle/phi/kernels/gpu/lu_kernel.cu:53)

2025-03-16 16:20:32.551335 test begin: paddle.Tensor.lu(Tensor([760567127, 3],"float32"), )

=========================================================================================
   WARNING batched routines are designed for small sizes. It might be better to use the
   Native/Hybrid classical routines if you want good performance.
=========================================================================================
element 1 of tensors does not require grad and does not have a grad_fn
[paddle error] paddle.Tensor.lu(Tensor([760567127, 3],"float32"), ) 
 (External) CUSOLVER error(3). 
  [Hint: 'CUSOLVER_STATUS_INVALID_VALUE'. An unsupported value or parameter was passed to the function (a negative vector size, for example).To correct: ensure that all the parameters being passed have valid values.] (at ../paddle/phi/kernels/gpu/lu_kernel.cu:77)

