paddle.multiply(Tensor([0, 2],"float64"), Tensor([2, 2],"float64"), name=None, )
paddle.multiply(Tensor([0, 3, 1, 4],"float32"), Tensor([3, 3, 4],"float32"), )
paddle.multiply(Tensor([0, 3, 3, 40, 40],"float32"), Tensor([0, 3, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([0, 3, 3, 40, 40],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([0, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.multiply(Tensor([0, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.multiply(Tensor([0, 3, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.multiply(Tensor([0, 3, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.multiply(Tensor([0, 3, 40, 40, 3],"float32"), Tensor([0, 3, 40, 40, 3],"float32"), )
paddle.multiply(Tensor([0, 3, 40, 40, 3],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), )
paddle.multiply(Tensor([0, 32],"float64"), Tensor([0, 1],"float64"), )
paddle.multiply(Tensor([0, 32],"float64"), Tensor([1, 1],"float64"), )
paddle.multiply(Tensor([0, 4, 8, 8],"float32"), Tensor([0, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([0, 4, 8, 8],"float32"), Tensor([1, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([0, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), )
paddle.multiply(Tensor([0, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), )
paddle.multiply(Tensor([0, 8, 4, 32],"float32"), Tensor([0, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([0, 8, 4, 32],"float32"), Tensor([13, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.multiply(Tensor([0],"float32"), Tensor([0],"float32"), name=None, )
paddle.multiply(Tensor([0],"float32"), Tensor([100],"float32"), )
paddle.multiply(Tensor([0],"float32"), Tensor([104],"float32"), )
paddle.multiply(Tensor([0],"float32"), Tensor([5],"float32"), name=None, )
paddle.multiply(Tensor([0],"float64"), Tensor([0],"float64"), name=None, )
paddle.multiply(Tensor([0],"float64"), Tensor([5],"float64"), name=None, )
paddle.multiply(Tensor([1, 0, 2],"float64"), Tensor([1, 0, 2],"float64"), )
paddle.multiply(Tensor([1, 0, 2],"float64"), Tensor([1, 5, 2],"float64"), )
paddle.multiply(Tensor([1, 0, 256],"float32"), Tensor([1, 0, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 0, 256],"float32"), Tensor([1, 1, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 0, 256],"float32"), Tensor([1, 10, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 0, 512],"complex128"), Tensor([512],"complex128"), )
paddle.multiply(Tensor([1, 0, 512],"float64"), Tensor([512],"float64"), )
paddle.multiply(Tensor([1, 0, 8, 8],"float32"), Tensor([1, 0, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 0, 8, 8],"float32"), Tensor([1, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.multiply(Tensor([1, 0],"float32"), Tensor([1, 2],"float32"), )
paddle.multiply(Tensor([1, 0],"float32"), Tensor([1],"float32"), )
paddle.multiply(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.multiply(Tensor([1, 0],"float64"), Tensor([1, 1],"float64"), )
paddle.multiply(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 1, 256],"float32"), Tensor([0, 1, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 1, 256],"float32"), Tensor([1, 0, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 1, 256],"float32"), Tensor([1, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([1, 1],"float32"), Tensor([0],"float32"), )
paddle.multiply(Tensor([1, 10, 0],"float32"), Tensor([1, 10, 0],"float32"), name=None, )
paddle.multiply(Tensor([1, 10, 0],"float32"), Tensor([1, 10, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 10, 256],"float32"), Tensor([0, 10, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 10, 256],"float32"), Tensor([1, 0, 256],"float32"), name=None, )
paddle.multiply(Tensor([1, 10, 256],"float32"), Tensor([1, 10, 0],"float32"), name=None, )
paddle.multiply(Tensor([1, 122, 0],"complex128"), Tensor([512],"complex128"), )
paddle.multiply(Tensor([1, 122, 512],"complex128"), Tensor([0],"complex128"), )
paddle.multiply(Tensor([1, 1247, 0],"float64"), Tensor([512],"float64"), )
paddle.multiply(Tensor([1, 1247, 512],"float64"), Tensor([0],"float64"), )
paddle.multiply(Tensor([1, 2, 0, 8],"float32"), Tensor([1, 1, 0, 8],"float32"), )
paddle.multiply(Tensor([1, 2, 0, 8],"float32"), Tensor([1, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 2, 8, 0],"float32"), Tensor([1, 1, 8, 0],"float32"), )
paddle.multiply(Tensor([1, 2, 8, 0],"float32"), Tensor([1, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 2, 8, 8],"float32"), Tensor([0, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 2, 8, 8],"float32"), Tensor([1, 0, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 2, 8, 8],"float32"), Tensor([1, 1, 0, 8],"float32"), )
paddle.multiply(Tensor([1, 2, 8, 8],"float32"), Tensor([1, 1, 8, 0],"float32"), )
paddle.multiply(Tensor([1, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.multiply(Tensor([1, 2],"float32"), Tensor([1, 0],"float32"), )
paddle.multiply(Tensor([1, 32],"float64"), Tensor([0, 1],"float64"), )
paddle.multiply(Tensor([1, 32],"float64"), Tensor([1, 0],"float64"), )
paddle.multiply(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 1, 0, 8],"float32"), )
paddle.multiply(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 4, 8, 0],"float32"), Tensor([1, 1, 8, 0],"float32"), )
paddle.multiply(Tensor([1, 4, 8, 0],"float32"), Tensor([1, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 4, 8, 8],"float32"), Tensor([0, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 0, 8, 8],"float32"), )
paddle.multiply(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 1, 0, 8],"float32"), )
paddle.multiply(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 1, 8, 0],"float32"), )
paddle.multiply(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 0],"float64"), )
paddle.multiply(Tensor([1, 5, 0],"float64"), Tensor([1, 5, 2],"float64"), )
paddle.multiply(Tensor([1, 5, 2],"float64"), Tensor([0, 5, 2],"float64"), )
paddle.multiply(Tensor([1, 5, 2],"float64"), Tensor([1, 0, 2],"float64"), )
paddle.multiply(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 0],"float64"), )
paddle.multiply(Tensor([10, 0, 10],"float32"), Tensor([10, 0, 10],"float32"), )
paddle.multiply(Tensor([10, 0, 10],"float32"), Tensor([10, 1, 10],"float32"), )
paddle.multiply(Tensor([10, 1, 0],"float32"), Tensor([10, 1, 0],"float32"), )
paddle.multiply(Tensor([10, 1, 0],"float32"), Tensor([10, 1, 10],"float32"), )
paddle.multiply(Tensor([10, 1, 10],"float32"), Tensor([0, 1, 10],"float32"), )
paddle.multiply(Tensor([10, 1, 10],"float32"), Tensor([10, 0, 10],"float32"), )
paddle.multiply(Tensor([10, 1, 10],"float32"), Tensor([10, 1, 0],"float32"), )
paddle.multiply(Tensor([100],"float32"), Tensor([0],"float32"), )
paddle.multiply(Tensor([1024, 0],"float16"), Tensor([128],"float16"), )
paddle.multiply(Tensor([1024, 128],"float16"), Tensor([0],"float16"), )
paddle.multiply(Tensor([104],"float32"), Tensor([0],"float32"), )
paddle.multiply(Tensor([13, 0, 4, 32],"float32"), Tensor([13, 0, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 0, 4, 32],"float32"), Tensor([13, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 0, 32],"float32"), Tensor([13, 8, 0, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 0, 32],"float32"), Tensor([13, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 4, 0],"float32"), Tensor([13, 8, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 4, 0],"float32"), Tensor([13, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 4, 32],"float32"), Tensor([0, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 4, 32],"float32"), Tensor([13, 0, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 4, 32],"float32"), Tensor([13, 8, 0, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 8, 4, 32],"float32"), Tensor([13, 8, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([2, 0, 1, 2, 3],"float32"), Tensor([2, 0, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 0, 1, 2, 3],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 0, 1, 2, 3],"float64"), Tensor([2, 0, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 0, 1, 2, 3],"float64"), Tensor([2, 1, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 0, 1, 4],"float32"), Tensor([3, 3, 4],"float32"), )
paddle.multiply(Tensor([2, 0, 2, 3],"float32"), Tensor([2, 0, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 0, 2, 3],"float32"), Tensor([2, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 0, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.multiply(Tensor([2, 0, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.multiply(Tensor([2, 0, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.multiply(Tensor([2, 0, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.multiply(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), name=None, )
paddle.multiply(Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), name=None, )
paddle.multiply(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), name=None, )
paddle.multiply(Tensor([2, 0],"float64"), Tensor([2, 2],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 0, 2, 3],"float32"), Tensor([2, 1, 0, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 0, 2, 3],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 0, 2, 3],"float64"), Tensor([2, 1, 0, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 0, 2, 3],"float64"), Tensor([2, 1, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 0, 3],"float32"), Tensor([2, 1, 0, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 0, 3],"float32"), Tensor([2, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 0, 3],"float32"), Tensor([2, 1, 1, 0, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 0, 3],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 0, 3],"float64"), Tensor([2, 1, 1, 0, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 0, 3],"float64"), Tensor([2, 1, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 0],"float32"), Tensor([2, 1, 1, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 0],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 0],"float64"), Tensor([2, 1, 1, 1, 0],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 0],"float64"), Tensor([2, 1, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float32"), Tensor([0, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float32"), Tensor([2, 0, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float32"), Tensor([2, 1, 0, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float32"), Tensor([2, 1, 1, 0, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float32"), Tensor([2, 1, 1, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float64"), Tensor([0, 1, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float64"), Tensor([2, 0, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float64"), Tensor([2, 1, 0, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float64"), Tensor([2, 1, 1, 0, 1],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 1, 2, 3],"float64"), Tensor([2, 1, 1, 1, 0],"float64"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 0],"float32"), Tensor([2, 1, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 0],"float32"), Tensor([2, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 3],"float32"), Tensor([0, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 3],"float32"), Tensor([2, 0, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 3],"float32"), Tensor([2, 1, 0, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 1, 2, 3],"float32"), Tensor([2, 1, 1, 0],"float32"), name=None, )
paddle.multiply(Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), name=None, )
paddle.multiply(Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), name=None, )
paddle.multiply(Tensor([2, 2],"float64"), Tensor([0, 2],"float64"), name=None, )
paddle.multiply(Tensor([2, 2],"float64"), Tensor([2, 0],"float64"), name=None, )
paddle.multiply(Tensor([2, 3, 0, 4],"float32"), Tensor([3, 3, 4],"float32"), )
paddle.multiply(Tensor([2, 3, 0, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.multiply(Tensor([2, 3, 0, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.multiply(Tensor([2, 3, 0, 5],"float32"), Tensor([5],"complex64"), )
paddle.multiply(Tensor([2, 3, 0, 5],"float64"), Tensor([5],"complex128"), )
paddle.multiply(Tensor([2, 3, 1, 0],"float32"), Tensor([3, 3, 4],"float32"), )
paddle.multiply(Tensor([2, 3, 1, 4],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.multiply(Tensor([2, 3, 1, 4],"float32"), Tensor([3, 0, 4],"float32"), )
paddle.multiply(Tensor([2, 3, 1, 4],"float32"), Tensor([3, 3, 0],"float32"), )
paddle.multiply(Tensor([2, 3, 4, 0],"complex128"), Tensor([4, 5],"float64"), )
paddle.multiply(Tensor([2, 3, 4, 0],"complex64"), Tensor([4, 5],"float32"), )
paddle.multiply(Tensor([2, 3, 4, 0],"float32"), Tensor([5],"complex64"), )
paddle.multiply(Tensor([2, 3, 4, 0],"float64"), Tensor([5],"complex128"), )
paddle.multiply(Tensor([2, 3, 4, 5],"complex128"), Tensor([0, 5],"float64"), )
paddle.multiply(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 0],"float64"), )
paddle.multiply(Tensor([2, 3, 4, 5],"complex64"), Tensor([0, 5],"float32"), )
paddle.multiply(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 0],"float32"), )
paddle.multiply(Tensor([2, 3, 4, 5],"float32"), Tensor([0],"complex64"), )
paddle.multiply(Tensor([2, 3, 4, 5],"float64"), Tensor([0],"complex128"), )
paddle.multiply(Tensor([3, 0, 3, 40, 40],"float32"), Tensor([3, 0, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 0, 3, 40, 40],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 0, 40, 40, 3],"float32"), Tensor([3, 0, 40, 40, 3],"float32"), )
paddle.multiply(Tensor([3, 0, 40, 40, 3],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 0, 40, 3],"float32"), Tensor([3, 3, 0, 40, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 0, 40, 3],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 0, 40, 40],"float32"), Tensor([3, 3, 0, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 0, 40, 40],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 0, 40],"float32"), Tensor([3, 3, 3, 0, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 0, 40],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 40, 0],"float32"), Tensor([3, 3, 3, 40, 0],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 40, 0],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([0, 3, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([3, 0, 3, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([3, 3, 0, 40, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([3, 3, 3, 0, 40],"float32"), )
paddle.multiply(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([3, 3, 3, 40, 0],"float32"), )
paddle.multiply(Tensor([3, 3, 40, 0, 3],"float32"), Tensor([3, 3, 40, 0, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 40, 0, 3],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 40, 40, 0],"float32"), Tensor([3, 3, 40, 40, 0],"float32"), )
paddle.multiply(Tensor([3, 3, 40, 40, 0],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([0, 3, 40, 40, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([3, 0, 40, 40, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([3, 3, 0, 40, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([3, 3, 40, 0, 3],"float32"), )
paddle.multiply(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([3, 3, 40, 40, 0],"float32"), )
paddle.multiply(Tensor([5, 0, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), )
paddle.multiply(Tensor([5, 0, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.multiply(Tensor([5, 0, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.multiply(Tensor([5, 1, 0],"float64"), Tensor([1, 3],"float64"), )
paddle.multiply(Tensor([5, 1, 0],"float64"), Tensor([2, 3],"float64"), )
paddle.multiply(Tensor([5, 1, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.multiply(Tensor([5, 1, 3],"float64"), Tensor([1, 0],"float64"), )
paddle.multiply(Tensor([5, 1, 3],"float64"), Tensor([2, 0],"float64"), )
paddle.multiply(Tensor([5, 2, 0, 4],"float64"), Tensor([2, 3, 4],"float64"), )
paddle.multiply(Tensor([5, 2, 3, 0],"float64"), Tensor([2, 3, 4],"float64"), )
paddle.multiply(Tensor([5, 2, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), )
paddle.multiply(Tensor([5, 2, 3, 4],"float64"), Tensor([2, 0, 4],"float64"), )
paddle.multiply(Tensor([5, 2, 3, 4],"float64"), Tensor([2, 3, 0],"float64"), )
paddle.multiply(Tensor([5],"float32"), Tensor([0],"float32"), name=None, )
paddle.multiply(Tensor([5],"float64"), Tensor([0],"float64"), name=None, )
paddle.multiply(x=Tensor([0, 1024, 18, 18],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 1024, 18, 18],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 1024, 19, 19],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 1024, 19, 19],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([0, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.multiply(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.multiply(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.multiply(x=Tensor([0],"float32"), y=Tensor([0],"float32"), )
paddle.multiply(x=Tensor([0],"float32"), y=Tensor([4],"float32"), )
paddle.multiply(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.multiply(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.multiply(x=Tensor([1, 0, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.multiply(x=Tensor([1, 0, 18, 18],"float32"), y=Tensor([1, 0, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 0, 18, 18],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 0, 19, 19],"float32"), y=Tensor([1, 0, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 0, 19, 19],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.multiply(x=Tensor([1, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.multiply(x=Tensor([1, 1024, 0, 18],"float32"), y=Tensor([1, 1024, 0, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 0, 18],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 0, 19],"float32"), y=Tensor([1, 1024, 0, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 0, 19],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 18, 0],"float32"), y=Tensor([1, 1024, 1, 0],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 18, 0],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 18, 18],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 18, 18],"float32"), y=Tensor([1, 0, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 18, 18],"float32"), y=Tensor([1, 1024, 0, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 18, 18],"float32"), y=Tensor([1, 1024, 1, 0],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 19, 0],"float32"), y=Tensor([1, 1024, 1, 0],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 19, 0],"float32"), y=Tensor([1, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 19, 19],"float32"), y=Tensor([0, 1024, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 19, 19],"float32"), y=Tensor([1, 0, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 19, 19],"float32"), y=Tensor([1, 1024, 0, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1024, 19, 19],"float32"), y=Tensor([1, 1024, 1, 0],"float32"), )
paddle.multiply(x=Tensor([1, 2, 0, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.multiply(x=Tensor([1, 2, 1, 0],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.multiply(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.multiply(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.multiply(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 0],"float64"), )
paddle.multiply(x=Tensor([1, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.multiply(x=Tensor([1, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.multiply(x=Tensor([1],"float32"), y=Tensor([0],"float32"), )
paddle.multiply(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.nanmedian(Tensor([0, 100],"float32"), axis=1, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=0, keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=list[0,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=list[0,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float64"), keepdim=False, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float64"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([0, 3, 4, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([0, 3],"float64"), axis=1, keepdim=False, )
paddle.nanmedian(Tensor([0, 3],"float64"), axis=1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0, 5],"float32"), axis=None, )
paddle.nanmedian(Tensor([0, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([0, 5],"float64"), axis=1, )
paddle.nanmedian(Tensor([0, 5],"float64"), axis=1, mode="min", )
paddle.nanmedian(Tensor([0, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([0, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([0],"float32"), axis=0, )
paddle.nanmedian(Tensor([0],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([0],"float32"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([0],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([0],"float64"), keepdim=False, )
paddle.nanmedian(Tensor([0],"float64"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([0],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([0],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=0, keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=list[0,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=list[0,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float64"), keepdim=False, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float64"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([2, 0, 4, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 0],"float32"), axis=1, mode="min", )
paddle.nanmedian(Tensor([2, 0],"float64"), axis=1, keepdim=False, )
paddle.nanmedian(Tensor([2, 0],"float64"), axis=1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=0, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=-1, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=list[0,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=list[0,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float64"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float64"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 0, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=0, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=-1, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=list[0,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=list[0,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=list[0,2,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=list[0,2,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=tuple(1,2,3,), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), axis=tuple(1,2,3,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float64"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float64"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 0],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([3, 0],"float32"), axis=None, )
paddle.nanmedian(Tensor([3, 0],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([4, 0],"float64"), axis=1, )
paddle.nanmedian(Tensor([4, 0],"float64"), axis=1, mode="min", )
paddle.nanmedian(Tensor([4, 0],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([4, 0],"float64"), keepdim=True, mode="min", )
paddle.nanquantile(Tensor([0, 3],"float32"), list[0.3,0.7,], 1, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.nanquantile(Tensor([0],"float32"), list[0.55,0.7,], 0, )
paddle.nanquantile(Tensor([2, 0],"float32"), list[0.3,0.7,], 1, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.75, axis=list[0,2,], )
paddle.negative(Tensor([0, 3, 4, 5],"float16"), )
paddle.negative(Tensor([0, 3, 4, 5],"float32"), )
paddle.negative(Tensor([2, 0, 4, 5],"float16"), )
paddle.negative(Tensor([2, 0, 4, 5],"float32"), )
paddle.negative(Tensor([2, 3, 0, 5],"float16"), )
paddle.negative(Tensor([2, 3, 0, 5],"float32"), )
paddle.negative(Tensor([2, 3, 4, 0],"float16"), )
paddle.negative(Tensor([2, 3, 4, 0],"float32"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 1024, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 128, 28, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 128, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 128, 32, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 128, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 128, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 128, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 160, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 160, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 160, 16, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 160, 16, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 160, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 160, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 62, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 2048, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 256, 2, 25],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 256, 2, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 256, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 4, 4],"float64"), output_size=list[1,1,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 4, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 4, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 4, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 4, 4, 3],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 4, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 4, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 2, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 512, 7, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([0, 7, 7, 2048],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 2, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 32, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 0, 62, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 0, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 0, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 14, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 18, 0],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 0, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 0, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 0, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 0, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 0],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 0],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 0],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 0, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 0, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 0, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 0, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 10, 0],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 11, 0],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 0],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 0],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 0, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 62, 0],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 0, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 0, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 0, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 0, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 0],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 0],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 0],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 2, 0],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 0, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 2048, 0, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 2048, 7, 0],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 0, 28, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 0, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 0, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 0, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 0, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 0, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 0],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 0],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 0, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 0, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 0],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 0],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 0, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 0, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 56, 0],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1914, 0, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1914, 2048, 0, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1914, 2048, 7, 0],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 4, 3],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 4, 4],"float64"), output_size=list[1,1,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 4, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 4, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 4, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 4],"float64"), output_size=list[1,1,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 0],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 0],"float64"), output_size=list[1,1,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 0],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 0],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 0],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 0, 3],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 0, 3],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 0, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 0],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 0],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 0],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 0, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 0],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 0, 7, 2048],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 7, 0, 2048],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 7, 7, 0],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 16, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 0, 16, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 0, 32],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 0, 32],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 0],"float16"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([4, 160, 16, 0],"float16"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 0, 2, 25],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 0, 2, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 0, 25],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 0, 25],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 0],"float16"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([512, 256, 2, 0],"float32"), output_size=list[1,25,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), output_size=list[1,1,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 4, 4, 3],"float64"), output_size=3, data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 4, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([0, 4, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 4, 3],"float64"), output_size=3, data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 4, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), output_size=list[1,1,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 4],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), output_size=list[1,1,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 0],"float32"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), output_size=list[1,1,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), output_size=list[1,4,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), output_size=list[2,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), output_size=list[3,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 0, 3],"float64"), output_size=3, data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 0, 3],"float64"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 0, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 0],"float64"), output_size=3, data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 0],"float64"), output_size=list[3,3,], data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool2d(x=Tensor([2, 4, 4, 0],"float64"), output_size=tuple(3,3,), data_format="NHWC", )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 768, 16, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([0, 768, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 0, 16, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 0, 16, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 0, 7, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 0, 7, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 0, 10],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 0, 10],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 0],"float16"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([1, 768, 16, 7, 0],"float32"), output_size=tuple(1,1,1,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 8, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 8, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 8, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 8, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 8, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 8, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 0, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 32, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 32, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 32, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 32, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 32, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=5, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[2,3,5,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[None,3,None,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 0, 32],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 0, 32],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 0, 32],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 0, 32],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 0, 32],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 0, 32],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 0, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 0, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 0],"float32"), output_size=list[3,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 0],"float64"), output_size=3, data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 0],"float64"), output_size=list[1,1,1,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 0],"float64"), output_size=list[1,3,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 0],"float64"), output_size=list[2,2,2,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 0],"float64"), output_size=list[2,3,3,], data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 0],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 3, 8, 32, 0],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([0, 3, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 8, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 8, 32, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 8, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 8, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 8, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 8, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 0, 8, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 32, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 32, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 32, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 32, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 32, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 32, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 32, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 32, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=5, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 0, 32],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 0, 32],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 0, 32],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 0, 32],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 0, 32],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 0, 32],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 0, 32],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 0, 32],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 0, 32],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 0],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 0],"float64"), output_size=3, )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 0],"float64"), output_size=list[1,1,1,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 0],"float64"), output_size=list[1,3,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 0],"float64"), output_size=list[2,2,2,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 0],"float64"), output_size=list[2,3,3,], )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 0],"float64"), output_size=tuple(3,3,3,), )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 0],"float64"), output_size=tuple(3,3,3,), data_format="NCDHW", )
paddle.nn.functional.adaptive_avg_pool3d(x=Tensor([2, 3, 8, 32, 0],"float64"), output_size=tuple(3,3,3,), data_format="NDHWC", )
paddle.nn.functional.avg_pool1d(Tensor([0, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([0, 3, 32],"float32"), 2, None, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([0, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool1d(Tensor([0, 3, 32],"float32"), kernel_size=2, stride=2, padding=list[0,], )
paddle.nn.functional.avg_pool1d(Tensor([0, 3, 8],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([0, 3, 8],"float64"), 1, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([0, 3, 8],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([0, 3, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([0, 3, 8],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([0, 3, 8],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([13, 0, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([13, 1, 0],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 0, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([16, 1, 0],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 0, 32],"float32"), 2, None, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 0, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool1d(Tensor([2, 0, 32],"float32"), kernel_size=2, stride=2, padding=list[0,], )
paddle.nn.functional.avg_pool1d(Tensor([2, 0, 8],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 0, 8],"float64"), 1, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 0, 8],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 0, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 0, 8],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 0, 8],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 0],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 0],"float32"), 2, None, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 0],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 0],"float32"), kernel_size=2, stride=2, padding=list[0,], )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 0],"float64"), 1, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 0],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 0],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 0],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 0],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(x=Tensor([0, 3, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([0, 3, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([0, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([0, 3, 8],"float64"), kernel_size=2, stride=1, padding=1, exclusive=False, )
paddle.nn.functional.avg_pool1d(x=Tensor([0, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([0, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 0, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 0, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 0, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 0, 8],"float64"), kernel_size=2, stride=1, padding=1, exclusive=False, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 0, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 0, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 0],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 0],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 0],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 0],"float64"), kernel_size=2, stride=1, padding=1, exclusive=False, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 0],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 0],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1, 4, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1, 40, 44],"float32"), kernel_size=tuple(1,5,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1, 44, 40],"float32"), kernel_size=tuple(5,1,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1, 7, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 17, 17],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 17, 17],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 4, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 40, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 40, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1024, 8, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 104, 28, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 104, 28, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 64, 64],"float16"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 64, 64],"float32"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 8, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 128, 8, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1280, 5, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1536, 7, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 1536, 7, 7],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 192, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 2, 4, 4],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 256, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 16, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 384, 4, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([0, 4, 3, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 512, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 512, 3, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 512, 3, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 512, 3, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([0, 528, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 0, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 0, 3, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 0, 4, 4],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 0, 40, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 0, 40, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 0, 54],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 0, 60],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 1024, 40, 0],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 128, 0, 20],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 128, 20, 0],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 2, 0, 4],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 2, 4, 0],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 256, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 4, 0, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 4, 3, 0],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([13, 0, 4, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([13, 0, 7, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([13, 1, 0, 32],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([13, 1, 4, 0],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([13, 1, 7, 0],"float32"), tuple(2,1,), stride=tuple(2,1,), ceil_mode=True, )
paddle.nn.functional.avg_pool2d(Tensor([16, 0, 4, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 0, 8, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 0, 4],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 0, 8],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 4, 0],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([16, 1024, 8, 0],"float32"), kernel_size=tuple(2,2,), stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 13, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 25, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 32, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 32, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 0, 5, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1280, 0, 5],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 1280, 5, 0],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 192, 0, 25],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 192, 25, 0],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 32],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 32],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], divisor_override=4, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=None, padding="SAME", )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 0],"float64"), kernel_size=list[2,2,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 32, 0],"float64"), kernel_size=list[3,3,], stride=None, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 0, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 512, 13, 0],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 528, 0, 13],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 528, 13, 0],"float32"), kernel_size=5, stride=3, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 0, 8, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 0, 8, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 0, 50],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 0, 50],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 8, 0],"float16"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([256, 128, 8, 0],"float32"), kernel_size=tuple(2,1,), stride=tuple(2,1,), padding=0, ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([3, 0, 40, 44],"float32"), kernel_size=tuple(1,5,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 0, 44, 40],"float32"), kernel_size=tuple(5,1,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 0, 40],"float32"), kernel_size=tuple(5,1,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 0, 44],"float32"), kernel_size=tuple(1,5,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 40, 0],"float32"), kernel_size=tuple(1,5,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([3, 1, 44, 0],"float32"), kernel_size=tuple(5,1,), stride=1, )
paddle.nn.functional.avg_pool2d(Tensor([32, 0, 14, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 0, 56, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 1024, 0, 14],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 1024, 14, 0],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 256, 0, 56],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([32, 256, 56, 0],"float32"), kernel_size=2, stride=2, padding="SAME", ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([4, 0, 4, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([4, 384, 0, 80],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([4, 384, 4, 0],"float32"), list[4,2,], )
paddle.nn.functional.avg_pool2d(Tensor([56, 0, 16, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 0, 32, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 0, 16],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 0, 32],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 16, 0],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([56, 3, 32, 0],"float32"), kernel_size=2, stride=2, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 17, 17],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 17, 17],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 28, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 28, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 3, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 3, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 64, 64],"float16"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 64, 64],"float32"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 7, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 0, 7, 7],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 0, 17],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 0, 17],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 17, 0],"float16"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1024, 17, 0],"float32"), kernel_size=3, stride=1, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 0, 28],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 0, 28],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 28, 0],"float16"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 104, 28, 0],"float32"), kernel_size=3, stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 0, 64],"float16"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 0, 64],"float32"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 0],"float16"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 128, 64, 0],"float32"), kernel_size=1, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 0, 7],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 0, 7],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 7, 0],"float16"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 1536, 7, 0],"float32"), kernel_size=7, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 0, 80],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 0, 80],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 3, 0],"float16"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([64, 512, 3, 0],"float32"), kernel_size=list[3,2,], stride=list[3,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 0, 3, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 0, 80],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([8, 512, 3, 0],"float32"), kernel_size=list[2,2,], stride=list[2,2,], padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(x=Tensor([0, 3, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([0, 3, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([0, 3, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([0, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 0, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 0, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 0, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 0, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 0, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 0, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 0, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 0, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 0],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 0],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 32, 0],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 0],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool3d(Tensor([0, 1, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([0, 1, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([0, 1, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([0, 1, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([0, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], divisor_override=8, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=None, padding="SAME", ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCDHW", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 0, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 0, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([2, 8, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NDHWC", name=None, )
paddle.nn.functional.avg_pool3d(Tensor([3, 0, 3, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 0, 40, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 0, 7, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 0, 7, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 0, 1600, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 0, 3, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 0, 40, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 0, 40, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 3, 0, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 3, 1600, 0],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 40, 0, 7],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 40, 40, 0],"float32"), kernel_size=tuple(1,1,5,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 0, 1600],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 0, 40],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 3, 0],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(Tensor([3, 1, 7, 40, 0],"float32"), kernel_size=tuple(5,1,1,), stride=1, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 2048, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 256, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([0, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), exclusive=True, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 0, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 0, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([2, 8, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NDHWC", exclusive=False, )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 0, 32, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 0, 4, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 0, 7, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 0, 7],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 2048, 4, 7, 0],"float32"), kernel_size=list[4,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 0, 7, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 0, 7],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.avg_pool3d(x=Tensor([8, 256, 32, 7, 0],"float32"), kernel_size=list[32,7,7,], stride=1, data_format="NCDHW", )
paddle.nn.functional.batch_norm(Tensor([0, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 1024, 256],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([0, 1024, 512],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([0, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([0, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([0, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([0, 40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([0, 8, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([1, 0, 256],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 0, 512],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 1024, 0],"float32"), Tensor([1024],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 1024, 256],"float32"), Tensor([0],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 1024, 256],"float32"), Tensor([1024],"float32"), Tensor([0],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 1024, 512],"float32"), Tensor([0],"float32"), Tensor([1024],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 1024, 512],"float32"), Tensor([1024],"float32"), Tensor([0],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 0, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 0, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 0, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 0, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 0, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 0, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 0, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 0],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 0],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float16"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), training=True, momentum=0.1, epsilon=1e-06, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([16, 16, 16, 8],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 0, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 0, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 0, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 0, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 0, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 0, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 0],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 0],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([0],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([0],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([0],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([0],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([0],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([0],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([0],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([0],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 0, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 0, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 0, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 0, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 0, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 0, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([0],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 0, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 0, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 0, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 0, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 0, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 0, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 0, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 0, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([0],"float32"), Tensor([60],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([0],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([60],"float32"), Tensor([0],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), Tensor([40],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([40],"float32"), Tensor([0],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 0, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 0],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 256],"float32"), Tensor([0],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 256],"float32"), Tensor([256],"float32"), Tensor([0],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([0],"float32"), Tensor([256],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), Tensor([0],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 0, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([6],"float32"), Tensor([0],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 6, 12, 24],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([6],"float64"), Tensor([0],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 32],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 32],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 8, 32],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 0, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 0, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), Tensor([16],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([16],"float32"), Tensor([0],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), Tensor([16],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([16],"float64"), Tensor([0],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([0],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([0],"float64"), Tensor([8],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([0],"float64"), Tensor([8],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([0],"float64"), training=False, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([8, 8, 16, 16],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([8],"float64"), Tensor([0],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(x=Tensor([0, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([0, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([0, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([0, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([0, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([0, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([0, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([0, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([0, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 0, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 0, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 0, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 0, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 0, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 0, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 0, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 0, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 0, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 0, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 0, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 0, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 0, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 0, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 0, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 0],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 0],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 0],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 0],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 0],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 0],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 0],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 0],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 0],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float32"), running_mean=Tensor([0],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([0],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([0],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([0],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([0],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([0],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([0],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([0],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([0],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([0],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([0],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([0],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([0],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([0],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([0],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([0],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([0],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([0],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([0],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([0],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([0],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([0],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.bilinear(Tensor([0, 1],"float32"), Tensor([3, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([0, 3],"float32"), Tensor([1, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 0],"float32"), Tensor([1, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([0, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 0],"float32"), Tensor([6, 3, 3],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([6, 0, 3],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([6, 3, 0],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([0, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([1, 0],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 0],"float32"), Tensor([3, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([0, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 0],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([0, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([4, 0, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([4, 1, 0],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([0, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 0],"float32"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0, 1],"float32"), label=Tensor([0, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0, 1],"float32"), label=Tensor([2, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0, 19],"float32"), label=Tensor([0, 19],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0, 19],"float32"), label=Tensor([64, 19],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0, 26],"float32"), label=Tensor([0, 26],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0, 26],"float32"), label=Tensor([64, 26],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0],"float32"), label=Tensor([0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0],"float32"), label=Tensor([1024],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([0],"float32"), label=Tensor([2048],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([1024],"float32"), label=Tensor([0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([2, 0],"float32"), label=Tensor([2, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([2, 0],"float32"), label=Tensor([2, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([2, 1],"float32"), label=Tensor([0, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([2, 1],"float32"), label=Tensor([2, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([2048],"float32"), label=Tensor([0],"float32"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([64, 0],"float32"), label=Tensor([64, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([64, 0],"float32"), label=Tensor([64, 19],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([64, 0],"float32"), label=Tensor([64, 26],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([64, 19],"float32"), label=Tensor([0, 19],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([64, 19],"float32"), label=Tensor([64, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([64, 26],"float32"), label=Tensor([0, 26],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(logit=Tensor([64, 26],"float32"), label=Tensor([64, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1, 2],"float64"), label=Tensor([0, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1, 2],"float64"), label=Tensor([1, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1, 30, 30],"float32"), Tensor([0, 1, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1, 30, 30],"float32"), Tensor([1, 1, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1],"float32"), Tensor([459, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 10],"float32"), Tensor([1, 10],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 100, 2],"float32"), Tensor([0, 100, 2],"float32"), weight=Tensor([0, 100, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 100, 2],"float32"), Tensor([1, 100, 2],"float32"), weight=Tensor([1, 100, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1000],"float32"), Tensor([0, 1000],"float32"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1000],"float32"), Tensor([0, 1000],"float32"), weight=Tensor([0, 1000],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1000],"float32"), Tensor([300, 1000],"float32"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1000],"float32"), Tensor([300, 1000],"float32"), weight=None, reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1000],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 1000],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 12544],"float32"), Tensor([0, 12544],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 12544],"float32"), Tensor([1, 12544],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 12544],"float32"), Tensor([100, 12544],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 160, 160],"float32"), Tensor([0, 160, 160],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 160, 160],"float32"), Tensor([13, 160, 160],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 192, 11],"float32"), Tensor([0, 192, 11],"float32"), weight=Tensor([0, 192, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 192, 11],"float32"), Tensor([1, 192, 11],"float32"), weight=Tensor([1, 192, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 200, 80],"float32"), Tensor([0, 200, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 200, 80],"float32"), Tensor([2, 200, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), weight=Tensor([0, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 28, 28],"float32"), Tensor([1, 28, 28],"float32"), weight=Tensor([1, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 28, 28],"float32"), Tensor([10, 28, 28],"float32"), weight=Tensor([10, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 10, 10, 80],"float32"), Tensor([0, 3, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 10, 10, 80],"float32"), Tensor([12, 3, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), weight=Tensor([0, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), weight=Tensor([0, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), weight=Tensor([0, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 3],"float32"), Tensor([13, 3],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), None, "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), weight=None, reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([0, 30],"float64"), weight=None, reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([20, 30],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([20, 30],"float64"), None, "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([20, 30],"float64"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([20, 30],"float64"), weight=None, reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([20, 30],"float64"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0, 30],"float64"), Tensor([20, 30],"float64"), weight=None, reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0],"float32"), Tensor([0],"float32"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0],"float32"), Tensor([0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0],"float32"), Tensor([110484],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0],"float32"), Tensor([122760],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([0],"float32"), Tensor([9],"float32"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 11],"float32"), Tensor([1, 0, 11],"float32"), weight=Tensor([1, 0, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 11],"float32"), Tensor([1, 192, 11],"float32"), weight=Tensor([1, 192, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 2],"float32"), Tensor([1, 0, 2],"float32"), weight=Tensor([1, 0, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 2],"float32"), Tensor([1, 100, 2],"float32"), weight=Tensor([1, 100, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 2],"float64"), label=Tensor([1, 0, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 2],"float64"), label=Tensor([1, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 28],"float32"), Tensor([1, 0, 28],"float32"), weight=Tensor([1, 0, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 28],"float32"), Tensor([1, 28, 28],"float32"), weight=Tensor([1, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 30, 30],"float32"), Tensor([1, 0, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0, 30, 30],"float32"), Tensor([1, 1, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0],"float32"), Tensor([1, 10],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 0],"float32"), Tensor([1, 12544],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 0, 30],"float32"), Tensor([1, 1, 0, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 0, 30],"float32"), Tensor([1, 1, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 0],"float64"), label=Tensor([1, 1, 0],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 0],"float64"), label=Tensor([1, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 2],"float64"), label=Tensor([0, 1, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 2],"float64"), label=Tensor([1, 0, 2],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 2],"float64"), label=Tensor([1, 1, 0],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 30, 0],"float32"), Tensor([1, 1, 30, 0],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 30, 0],"float32"), Tensor([1, 1, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 30, 30],"float32"), Tensor([0, 1, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 30, 30],"float32"), Tensor([1, 0, 30, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 30, 30],"float32"), Tensor([1, 1, 0, 30],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 1, 30, 30],"float32"), Tensor([1, 1, 30, 0],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 10],"float32"), Tensor([1, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 100, 0],"float32"), Tensor([1, 100, 0],"float32"), weight=Tensor([1, 100, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 100, 0],"float32"), Tensor([1, 100, 2],"float32"), weight=Tensor([1, 100, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 100, 2],"float32"), Tensor([0, 100, 2],"float32"), weight=Tensor([1, 100, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 100, 2],"float32"), Tensor([1, 0, 2],"float32"), weight=Tensor([1, 100, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 100, 2],"float32"), Tensor([1, 100, 0],"float32"), weight=Tensor([1, 100, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 100, 2],"float32"), Tensor([1, 100, 2],"float32"), weight=Tensor([0, 100, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 100, 2],"float32"), Tensor([1, 100, 2],"float32"), weight=Tensor([1, 0, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 100, 2],"float32"), Tensor([1, 100, 2],"float32"), weight=Tensor([1, 100, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 12544],"float32"), Tensor([0, 12544],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 12544],"float32"), Tensor([1, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 192, 0],"float32"), Tensor([1, 192, 0],"float32"), weight=Tensor([1, 192, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 192, 0],"float32"), Tensor([1, 192, 11],"float32"), weight=Tensor([1, 192, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 192, 11],"float32"), Tensor([0, 192, 11],"float32"), weight=Tensor([1, 192, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 192, 11],"float32"), Tensor([1, 0, 11],"float32"), weight=Tensor([1, 192, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 192, 11],"float32"), Tensor([1, 192, 0],"float32"), weight=Tensor([1, 192, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 192, 11],"float32"), Tensor([1, 192, 11],"float32"), weight=Tensor([0, 192, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 192, 11],"float32"), Tensor([1, 192, 11],"float32"), weight=Tensor([1, 0, 11],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 192, 11],"float32"), Tensor([1, 192, 11],"float32"), weight=Tensor([1, 192, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 28, 0],"float32"), Tensor([1, 28, 0],"float32"), weight=Tensor([1, 1, 0],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 28, 0],"float32"), Tensor([1, 28, 28],"float32"), weight=Tensor([1, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), weight=Tensor([1, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 28, 28],"float32"), Tensor([1, 0, 28],"float32"), weight=Tensor([1, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 28, 28],"float32"), Tensor([1, 28, 0],"float32"), weight=Tensor([1, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 28, 28],"float32"), Tensor([1, 28, 28],"float32"), weight=Tensor([0, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 28, 28],"float32"), Tensor([1, 28, 28],"float32"), weight=Tensor([1, 0, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 28, 28],"float32"), Tensor([1, 28, 28],"float32"), weight=Tensor([1, 1, 0],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 0, 28],"float32"), Tensor([10, 0, 28],"float32"), weight=Tensor([10, 0, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 0, 28],"float32"), Tensor([10, 28, 28],"float32"), weight=Tensor([10, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 28, 0],"float32"), Tensor([10, 28, 0],"float32"), weight=Tensor([10, 1, 0],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 28, 0],"float32"), Tensor([10, 28, 28],"float32"), weight=Tensor([10, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), weight=Tensor([10, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 28, 28],"float32"), Tensor([10, 0, 28],"float32"), weight=Tensor([10, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 28, 28],"float32"), Tensor([10, 28, 0],"float32"), weight=Tensor([10, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 28, 28],"float32"), Tensor([10, 28, 28],"float32"), weight=Tensor([0, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 28, 28],"float32"), Tensor([10, 28, 28],"float32"), weight=Tensor([10, 0, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([10, 28, 28],"float32"), Tensor([10, 28, 28],"float32"), weight=Tensor([10, 1, 0],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([100, 0],"float32"), Tensor([100, 12544],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([100, 12544],"float32"), Tensor([0, 12544],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([100, 12544],"float32"), Tensor([100, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([110484],"float32"), Tensor([0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 0, 10, 10, 1],"float32"), Tensor([12, 0, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 0, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 0, 10, 10, 80],"float32"), Tensor([12, 0, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 0, 10, 10, 80],"float32"), Tensor([12, 3, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 0, 10, 1],"float32"), Tensor([12, 3, 0, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 0, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 0, 10, 80],"float32"), Tensor([12, 3, 0, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 0, 10, 80],"float32"), Tensor([12, 3, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 0, 1],"float32"), Tensor([12, 3, 10, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 0, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 0, 80],"float32"), Tensor([12, 3, 10, 0, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 0, 80],"float32"), Tensor([12, 3, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 0, 10, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 0, 10, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 0, 1],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 80],"float32"), Tensor([0, 3, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 80],"float32"), Tensor([12, 0, 10, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 80],"float32"), Tensor([12, 3, 0, 10, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 80],"float32"), Tensor([12, 3, 10, 0, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([12, 3, 10, 10, 80],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([122760],"float32"), Tensor([0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 0, 160],"float32"), Tensor([13, 0, 160],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 0, 160],"float32"), Tensor([13, 160, 160],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 0],"float32"), Tensor([13, 0],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 0],"float32"), Tensor([13, 3],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 160, 0],"float32"), Tensor([13, 160, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 160, 0],"float32"), Tensor([13, 160, 160],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 160, 160],"float32"), Tensor([0, 160, 160],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 160, 160],"float32"), Tensor([13, 0, 160],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 160, 160],"float32"), Tensor([13, 160, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 3],"float32"), Tensor([0, 3],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([13, 3],"float32"), Tensor([13, 0],"float32"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), weight=Tensor([2, 0, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), weight=Tensor([2, 0, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), weight=Tensor([2, 0, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 80],"float32"), Tensor([2, 0, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 0, 80],"float32"), Tensor([2, 200, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 200, 0],"float32"), Tensor([2, 200, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 200, 0],"float32"), Tensor([2, 200, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 200, 80],"float32"), Tensor([0, 200, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 200, 80],"float32"), Tensor([2, 0, 80],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 200, 80],"float32"), Tensor([2, 200, 0],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), weight=Tensor([2, 3, 0, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), weight=Tensor([2, 3, 0, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), weight=Tensor([2, 3, 0, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), weight=Tensor([2, 3, 4, 0],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), weight=Tensor([2, 3, 4, 0],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), weight=Tensor([2, 3, 4, 0],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), "mean", Tensor([3, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([0, 4, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 0, 10],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", Tensor([3, 4, 0],"float64"), None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([0, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([0, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([0, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([0, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 0, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 0, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 0, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 0, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 0, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 0, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 0, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 0, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 0],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 0],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 0],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 0],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([0, 4, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 0, 10],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=Tensor([3, 4, 0],"float64"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), None, "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), weight=None, reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), weight=None, reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 30],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 30],"float64"), None, "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 30],"float64"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 30],"float64"), weight=None, reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 30],"float64"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 0],"float64"), Tensor([20, 30],"float64"), weight=None, reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([0, 30],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([0, 30],"float64"), None, "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([0, 30],"float64"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([0, 30],"float64"), weight=None, reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([0, 30],"float64"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([0, 30],"float64"), weight=None, reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([20, 0],"float64"), None, "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([20, 0],"float64"), None, "none", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([20, 0],"float64"), None, "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([20, 0],"float64"), weight=None, reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([20, 0],"float64"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([20, 30],"float64"), Tensor([20, 0],"float64"), weight=None, reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 0],"float32"), Tensor([300, 0],"float32"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 0],"float32"), Tensor([300, 0],"float32"), weight=Tensor([300, 0],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 0],"float32"), Tensor([300, 1000],"float32"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 0],"float32"), Tensor([300, 1000],"float32"), weight=None, reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 0],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 0],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([0, 1000],"float32"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([0, 1000],"float32"), weight=None, reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([0, 1000],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([0, 1000],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 0],"float32"), weight=None, reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 0],"float32"), weight=None, reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 0],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 0],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 1000],"float32"), weight=None, reduction="none", pos_weight=Tensor([0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([0, 1000],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([0, 1000],"float32"), reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([300, 0],"float32"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([300, 0],"float32"), reduction="none", pos_weight=Tensor([1000],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([300, 1000],"float32"), Tensor([300, 1000],"float32"), weight=Tensor([300, 1000],"float32"), reduction="none", pos_weight=Tensor([0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([459, 0],"float32"), Tensor([459, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([459, 0],"float32"), Tensor([459, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([459, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([459, 1],"float32"), Tensor([459, 0],"float32"), )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([9],"float32"), Tensor([0],"float32"), None, "sum", None, None, )
paddle.nn.functional.channel_shuffle(Tensor([0, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([0, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([0, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([0, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 0, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 0, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 0, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 0, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 0, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 0, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 0],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 0],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 0, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 0, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 0],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 0],"float64"), 3, "NCHW", None, )
paddle.nn.functional.class_center_sample(Tensor([0],"int32"), 10, 8, )
paddle.nn.functional.class_center_sample(Tensor([0],"int32"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([0],"int32"), 20, 8, )
paddle.nn.functional.class_center_sample(Tensor([0],"int32"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.class_center_sample(Tensor([0],"int64"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([0],"int64"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.conv1d(Tensor([0, 1, 1024],"float32"), Tensor([0, 1, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 1, 1024],"float32"), Tensor([32, 1, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 1024, 3000],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 1280, 3000],"float32"), Tensor([1280, 1280, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 16, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 20, 2048],"float32"), Tensor([0, 20, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 20, 2048],"float32"), Tensor([256, 20, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 20, 7],"float32"), Tensor([512, 20, 7],"float32"), bias=Tensor([512],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 24, 14],"float32"), Tensor([24, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 100],"float16"), Tensor([256, 64, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 100],"float32"), Tensor([256, 64, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 2048],"float32"), Tensor([0, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 2048],"float32"), Tensor([20, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 4],"float64"), Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 3, 5],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 255],"float32"), Tensor([0, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 255],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 7],"float32"), Tensor([32, 16, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 32, 7],"float32"), Tensor([64, 8, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 4, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 4, 3],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 10],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 1007],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 64, 7],"float32"), Tensor([32, 64, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 7, 32],"float32"), Tensor([0, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 7, 32],"float32"), Tensor([0, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 7, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 7, 32],"float32"), Tensor([32, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 80, 25500],"float32"), Tensor([0, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 80, 25500],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 80, 89],"float32"), Tensor([0, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 80, 89],"float32"), Tensor([80, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 3000],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 3000],"float32"), Tensor([1280, 1280, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 5],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 0, 7],"float32"), Tensor([512, 20, 7],"float32"), bias=Tensor([512],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1024, 0],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1024, 3000],"float32"), Tensor([0, 1024, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1024, 3000],"float32"), Tensor([1024, 0, 3],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1024, 3000],"float32"), Tensor([1024, 1024, 0],"float32"), bias=Tensor([1024],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1024, 3000],"float32"), Tensor([1024, 1024, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 0],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 0],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 0],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 0],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 0],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 0],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 0],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 0],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 0],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([0, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([0, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([0, 128, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([0, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([0, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([0, 128, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([0, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([0, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([0, 128, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 11],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 11],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 11],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 7],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 7],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 7],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 0],"float32"), bias=Tensor([128],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 0],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 0],"float32"), bias=Tensor([128],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 0],"float32"), bias=Tensor([128],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 0],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 0],"float32"), bias=Tensor([128],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 0],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 0],"float32"), bias=Tensor([128],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 0],"float32"), bias=Tensor([128],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([0],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([0],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 11],"float32"), bias=Tensor([0],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([0],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 3],"float32"), bias=Tensor([0],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([0],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([0],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 128, 112],"float32"), Tensor([128, 128, 7],"float32"), bias=Tensor([0],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 0],"float32"), Tensor([1280, 1280, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3000],"float32"), Tensor([0, 1280, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3000],"float32"), Tensor([1280, 0, 3],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3000],"float32"), Tensor([1280, 1280, 0],"float32"), bias=Tensor([1280],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 1280, 3000],"float32"), Tensor([1280, 1280, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 20, 0],"float32"), Tensor([512, 20, 7],"float32"), bias=Tensor([512],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 20, 7],"float32"), Tensor([0, 20, 7],"float32"), bias=Tensor([512],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 20, 7],"float32"), Tensor([512, 0, 7],"float32"), bias=Tensor([512],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 20, 7],"float32"), Tensor([512, 20, 0],"float32"), bias=Tensor([512],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 20, 7],"float32"), Tensor([512, 20, 7],"float32"), bias=Tensor([0],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 0],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 0],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 0],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 0],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 0],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 0],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 0],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 0],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([0, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([0, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([0, 256, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([0, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([0, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([0, 256, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([0, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([0, 256, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 0, 11],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 0, 11],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 0, 11],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 0, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 0, 3],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 0, 3],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 0, 7],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 0, 7],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 0],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 0],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 0],"float32"), bias=Tensor([256],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 0],"float32"), bias=Tensor([256],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 0],"float32"), bias=Tensor([256],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 0],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 0],"float32"), bias=Tensor([256],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 0],"float32"), bias=Tensor([256],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([0],"float32"), padding=15, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([0],"float32"), padding=25, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 11],"float32"), bias=Tensor([0],"float32"), padding=5, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([0],"float32"), padding=3, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 3],"float32"), bias=Tensor([0],"float32"), padding=5, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([0],"float32"), padding=15, stride=list[1,], dilation=list[5,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 256, 28],"float32"), Tensor([256, 256, 7],"float32"), bias=Tensor([0],"float32"), padding=9, stride=list[1,], dilation=list[3,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 0],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([0, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([4, 0, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([4, 3, 0],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 10],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 1007],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 1024],"float32"), Tensor([32, 0, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 1024],"float32"), Tensor([32, 1, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 14],"float32"), Tensor([24, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 2048],"float32"), Tensor([20, 0, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 2048],"float32"), Tensor([20, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 2048],"float32"), Tensor([256, 0, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 2048],"float32"), Tensor([256, 20, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 255],"float32"), Tensor([32, 0, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 255],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 32],"float32"), Tensor([16, 0, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 0, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 0, 32],"float32"), Tensor([32, 0, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 0, 32],"float32"), Tensor([32, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 0, 7],"float32"), Tensor([32, 16, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 7],"float32"), Tensor([32, 64, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 0, 7],"float32"), Tensor([64, 8, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 1, 0],"float32"), Tensor([32, 1, 0],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 1, 0],"float32"), Tensor([32, 1, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 1, 1024],"float32"), Tensor([0, 1, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 1, 1024],"float32"), Tensor([32, 0, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 1, 1024],"float32"), Tensor([32, 1, 0],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 20, 0],"float32"), Tensor([256, 20, 0],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 20, 0],"float32"), Tensor([256, 20, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 20, 2048],"float32"), Tensor([0, 20, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 20, 2048],"float32"), Tensor([256, 0, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 20, 2048],"float32"), Tensor([256, 20, 0],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 0],"float32"), Tensor([24, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 14],"float32"), Tensor([0, 12, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 14],"float32"), Tensor([24, 0, 16],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 14],"float32"), Tensor([24, 12, 0],"float32"), bias=Tensor([24],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 24, 14],"float32"), Tensor([24, 12, 16],"float32"), bias=Tensor([0],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 0],"float32"), Tensor([20, 256, 0],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 0],"float32"), Tensor([20, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 2048],"float32"), Tensor([0, 256, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 2048],"float32"), Tensor([20, 0, 5],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 256, 2048],"float32"), Tensor([20, 256, 0],"float32"), bias=None, padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 0],"float32"), Tensor([32, 16, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 0],"float32"), Tensor([32, 32, 0],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 0],"float32"), Tensor([32, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 0],"float32"), Tensor([64, 8, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 255],"float32"), Tensor([0, 32, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 255],"float32"), Tensor([32, 0, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 255],"float32"), Tensor([32, 32, 0],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([0, 16, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([0, 8, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([32, 0, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([32, 16, 0],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([32, 16, 1],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([64, 0, 1],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([64, 8, 0],"float32"), bias=Tensor([64],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([64, 8, 1],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 0],"float32"), Tensor([32, 64, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 0],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 10],"float32"), Tensor([0, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 10],"float32"), Tensor([64, 0, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 10],"float32"), Tensor([64, 1, 0],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 10],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([0],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 1007],"float32"), Tensor([0, 1, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 1007],"float32"), Tensor([64, 0, 4],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 1007],"float32"), Tensor([64, 1, 0],"float32"), bias=Tensor([64],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 1007],"float32"), Tensor([64, 1, 4],"float32"), bias=Tensor([0],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 7],"float32"), Tensor([0, 64, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 7],"float32"), Tensor([32, 0, 1],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 7],"float32"), Tensor([32, 64, 0],"float32"), bias=Tensor([32],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 64, 7],"float32"), Tensor([32, 64, 1],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 7, 0],"float32"), Tensor([16, 32, 0],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 0],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 0],"float32"), Tensor([32, 1, 0],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 0],"float32"), Tensor([32, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 32],"float32"), Tensor([0, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 32],"float32"), Tensor([0, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 32],"float32"), Tensor([16, 0, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 32],"float32"), Tensor([16, 32, 0],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 32],"float32"), Tensor([32, 0, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 32],"float32"), Tensor([32, 1, 0],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 0, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 25500],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 89],"float32"), Tensor([80, 0, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 0, 89],"float32"), Tensor([80, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 0],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 0],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 0],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 0],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 0],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 0],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 0],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 0],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 0],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([128],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([128],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([128],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([128],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([128],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([128],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([128],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([128],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([128],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=128, stride=list[1,], dilation=list[128,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=16, stride=list[1,], dilation=list[16,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=2, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=256, stride=list[1,], dilation=list[256,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=32, stride=list[1,], dilation=list[32,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=4, stride=list[1,], dilation=list[4,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=512, stride=list[1,], dilation=list[512,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=64, stride=list[1,], dilation=list[64,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 64, 25500],"float32"), Tensor([128, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=8, stride=list[1,], dilation=list[8,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 0],"float32"), Tensor([128, 80, 0],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 0],"float32"), Tensor([128, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 0],"float32"), Tensor([80, 80, 0],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 0],"float32"), Tensor([80, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 25500],"float32"), Tensor([0, 80, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 25500],"float32"), Tensor([128, 0, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 25500],"float32"), Tensor([128, 80, 0],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 89],"float32"), Tensor([0, 80, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 89],"float32"), Tensor([80, 0, 5],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([16, 80, 89],"float32"), Tensor([80, 80, 0],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 0, 3],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 0, 4],"float64"), Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 0],"float64"), Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([0, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([6, 1, 0],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([0, 1, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([6, 0, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([6, 1, 0],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([6, 1, 3],"float64"), bias=Tensor([0],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 4, 0],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 0],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float32"), Tensor([0, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float32"), Tensor([2, 0, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float32"), Tensor([2, 3, 0],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float64"), Tensor([0, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float64"), Tensor([2, 0, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float64"), Tensor([2, 3, 0],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 0, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 0, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 0],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([0, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 1, 0],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 0, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 0, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 0],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 0],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([52, 0, 32],"float32"), Tensor([16, 0, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 0, 32],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 0, 32],"float32"), Tensor([32, 0, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 0, 32],"float32"), Tensor([32, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 0],"float32"), Tensor([16, 32, 0],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 0],"float32"), Tensor([16, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 0],"float32"), Tensor([32, 1, 0],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 0],"float32"), Tensor([32, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 32],"float32"), Tensor([0, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 32],"float32"), Tensor([0, 32, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 32],"float32"), Tensor([16, 0, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 32],"float32"), Tensor([16, 32, 0],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 32],"float32"), Tensor([32, 0, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([52, 7, 32],"float32"), Tensor([32, 1, 0],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([8, 0, 100],"float16"), Tensor([256, 64, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 0, 100],"float32"), Tensor([256, 64, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 0],"float16"), Tensor([256, 64, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 0],"float32"), Tensor([256, 64, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float16"), Tensor([0, 64, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float16"), Tensor([256, 0, 3],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float16"), Tensor([256, 64, 0],"float16"), bias=Tensor([256],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float16"), Tensor([256, 64, 3],"float16"), bias=Tensor([0],"float16"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float32"), Tensor([0, 64, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float32"), Tensor([256, 0, 3],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float32"), Tensor([256, 64, 0],"float32"), bias=Tensor([256],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 256, 100],"float32"), Tensor([256, 64, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float32"), weight=Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([0, 3, 4],"float64"), weight=Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([0, 4, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([0, 4, 3],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 3],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float32"), weight=Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 0, 4],"float64"), weight=Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float32"), weight=Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 0],"float64"), weight=Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([0, 1, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([0, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 0, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([6, 0, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([6, 1, 0],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([6, 1, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([6, 0, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([6, 1, 0],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([6, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 0],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 0],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float32"), weight=Tensor([0, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float32"), weight=Tensor([2, 0, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float32"), weight=Tensor([2, 3, 0],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float64"), weight=Tensor([0, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float64"), weight=Tensor([2, 0, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float64"), weight=Tensor([2, 3, 0],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 128, 112],"float32"), Tensor([128, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 256, 28],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 2],"float64"), Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 0, 112],"float32"), Tensor([128, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 0, 28],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 0],"float32"), Tensor([128, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 112],"float32"), Tensor([0, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 112],"float32"), Tensor([128, 0, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 112],"float32"), Tensor([128, 64, 0],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 112],"float32"), Tensor([128, 64, 8],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 0],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 28],"float32"), Tensor([0, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 28],"float32"), Tensor([256, 0, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 28],"float32"), Tensor([256, 128, 0],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 28],"float32"), Tensor([256, 128, 8],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 2],"float64"), Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 0, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 0],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 0],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 0],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 0],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([0, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([0, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 0, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 0, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 0],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 0],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([0, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([0, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 0, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 0, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 0],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 0],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 0],"float64"), Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([0, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([0, 2, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 0, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 0, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 0],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 2, 0],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([0, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([0, 2, 3],"float64"), bias=Tensor([2],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 0, 3],"float64"), bias=Tensor([2],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 0, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 0],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 2, 0],"float64"), bias=Tensor([2],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 2, 3],"float64"), bias=Tensor([0],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 0],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([0, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 0, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 2, 0],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 4, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float32"), weight=Tensor([3, 2, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([0, 8, 3],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float32"), weight=Tensor([3, 2, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 3],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 0, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 0],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 0],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float32"), weight=Tensor([3, 2, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 0],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([0, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([0, 2, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 0],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 2, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([0, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 0],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 0],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([0, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([0, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 0],"float64"), bias=Tensor([2],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 0],"float64"), bias=Tensor([2],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([0, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([0, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 0],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 0],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 8, 0],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 8, 3],"float64"), weight=Tensor([0, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 8, 3],"float64"), weight=Tensor([3, 0, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 8, 3],"float64"), weight=Tensor([3, 2, 0],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 8, 3],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 165],"float32"), Tensor([0, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 261],"float32"), Tensor([0, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 101, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1, 131, 131],"float32"), Tensor([0, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 131, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 258, 258],"float32"), Tensor([0, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([0, 1, 28, 28],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 1, 32, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 1024, 10, 26],"float32"), Tensor([0, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 10, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 12, 32],"float32"), Tensor([0, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 12, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 128, 128],"float32"), Tensor([0, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 128, 128],"float32"), Tensor([0, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 128, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 128, 128],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 256, 256],"float32"), Tensor([0, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 256, 256],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 256, 256],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 1024, 256, 256],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 20],"float32"), Tensor([0, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 32],"float32"), Tensor([0, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 12, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 255, 255],"float32"), Tensor([0, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 128, 255, 255],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 128, 256, 256],"float32"), Tensor([0, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 256, 256],"float32"), Tensor([0, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 256, 256],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 256, 256],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 128, 257, 257],"float32"), Tensor([0, 128, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 128, 257, 257],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 16, 2, 2],"float32"), Tensor([0, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 16, 2, 2],"float32"), Tensor([16, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 192, 4, 4],"float32"), Tensor([0, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 192, 4, 4],"float32"), Tensor([0, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 192, 4, 4],"float32"), Tensor([384, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 192, 4, 4],"float32"), Tensor([48, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 192, 4, 4],"float32"), Tensor([96, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 2048, 128, 128],"float32"), Tensor([0, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 128, 128],"float32"), Tensor([0, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 128, 128],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 16, 16],"float32"), Tensor([0, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 16, 16],"float32"), Tensor([0, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 16, 16],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 2048, 16, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([0, 24, 8, 8],"float32"), Tensor([0, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 24, 8, 8],"float32"), Tensor([24, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 256, 128, 128],"float32"), Tensor([0, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 256, 128, 128],"float32"), Tensor([0, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 256, 128, 128],"float32"), Tensor([0, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([0, 256, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 256, 128, 128],"float32"), Tensor([3, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([0, 3, 16, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 256, 256],"float32"), Tensor([0, 3, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 3, 256, 256],"float32"), Tensor([128, 3, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([0, 3, 260, 260],"float32"), weight=Tensor([0, 1, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([0, 3, 260, 260],"float32"), weight=Tensor([3, 1, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([0, 3, 268, 268],"float32"), weight=Tensor([0, 1, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([0, 3, 268, 268],"float32"), weight=Tensor([3, 1, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([0, 3, 32, 32],"float32"), Tensor([0, 3, 7, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 32, 32],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 37, 37],"float32"), Tensor([0, 3, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 37, 37],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 48, 4, 4],"float32"), Tensor([0, 48, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 48, 4, 4],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 6, 16, 16],"float32"), Tensor([0, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 6, 16, 16],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 6, 16, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 8, 4, 4],"float32"), Tensor([0, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 8, 4, 4],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 10, 26],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 10, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 165],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 261],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 101, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 20],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 32],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 32],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 12, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([1024, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([256, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 128, 128],"float32"), Tensor([3, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 0, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([1024, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([128, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 256, 256],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 0, 165],"float32"), Tensor([64, 1, 0, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 0, 165],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 0, 261],"float32"), Tensor([64, 1, 0, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 0, 261],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 0, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 0],"float32"), Tensor([64, 1, 7, 0],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 0],"float32"), Tensor([64, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 165],"float32"), Tensor([0, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 165],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 165],"float32"), Tensor([64, 1, 0, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 165],"float32"), Tensor([64, 1, 7, 0],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 261],"float32"), Tensor([0, 1, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 261],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 261],"float32"), Tensor([64, 1, 0, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 101, 261],"float32"), Tensor([64, 1, 7, 0],"float32"), None, list[2,2,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 128],"float32"), Tensor([1024, 256, 0, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 128],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 128],"float32"), Tensor([12, 256, 0, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 128],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 256],"float32"), Tensor([1024, 128, 0, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 256],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 256],"float32"), Tensor([24, 128, 0, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 256],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 26],"float32"), Tensor([256, 1024, 0, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 26],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 32],"float32"), Tensor([256, 1024, 0, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 0, 32],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 0],"float32"), Tensor([256, 1024, 1, 0],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 0],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 26],"float32"), Tensor([0, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 26],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 26],"float32"), Tensor([256, 1024, 0, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 10, 26],"float32"), Tensor([256, 1024, 1, 0],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 0],"float32"), Tensor([256, 1024, 1, 0],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 0],"float32"), Tensor([256, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 32],"float32"), Tensor([0, 1024, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 32],"float32"), Tensor([256, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 32],"float32"), Tensor([256, 1024, 0, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 12, 32],"float32"), Tensor([256, 1024, 1, 0],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 0],"float32"), Tensor([1024, 256, 3, 0],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 0],"float32"), Tensor([1024, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 0],"float32"), Tensor([12, 256, 1, 0],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 0],"float32"), Tensor([12, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([0, 256, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([0, 256, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 256, 0, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 256, 3, 0],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([12, 256, 0, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 128, 128],"float32"), Tensor([12, 256, 1, 0],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 0],"float32"), Tensor([1024, 128, 3, 0],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 0],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 0],"float32"), Tensor([24, 128, 1, 0],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 0],"float32"), Tensor([24, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([0, 128, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([1024, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([1024, 128, 0, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([1024, 128, 3, 0],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([24, 128, 0, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 1024, 256, 256],"float32"), Tensor([24, 128, 1, 0],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 20],"float32"), Tensor([128, 128, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 20],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 256],"float32"), Tensor([128, 128, 0, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 256],"float32"), Tensor([3, 128, 0, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 256],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 32],"float32"), Tensor([128, 128, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 0, 32],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 0],"float32"), Tensor([128, 128, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 0],"float32"), Tensor([128, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([0, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([128, 128, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 20],"float32"), Tensor([128, 128, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([0, 128, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([128, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([128, 128, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 12, 32],"float32"), Tensor([128, 128, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 0],"float32"), Tensor([128, 128, 3, 0],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 0],"float32"), Tensor([128, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 0],"float32"), Tensor([3, 128, 1, 0],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 0],"float32"), Tensor([3, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([0, 128, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([128, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([128, 128, 0, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([128, 128, 3, 0],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([3, 128, 0, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 128, 256, 256],"float32"), Tensor([3, 128, 1, 0],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 128],"float32"), Tensor([2048, 256, 0, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 128],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 128],"float32"), Tensor([24, 256, 0, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 128],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 16],"float32"), Tensor([12, 512, 0, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 16],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 16],"float32"), Tensor([2048, 512, 0, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 0, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 0],"float32"), Tensor([2048, 256, 3, 0],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 0],"float32"), Tensor([2048, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 0],"float32"), Tensor([24, 256, 1, 0],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 0],"float32"), Tensor([24, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([0, 256, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([0, 256, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 256, 0, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 256, 3, 0],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([24, 0, 1, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([24, 256, 0, 1],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 128, 128],"float32"), Tensor([24, 256, 1, 0],"float32"), padding=0, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 0],"float32"), Tensor([12, 512, 1, 0],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 0],"float32"), Tensor([12, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 0],"float32"), Tensor([2048, 512, 3, 0],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 0],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([0, 512, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([0, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([12, 0, 1, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([12, 512, 0, 1],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([12, 512, 1, 0],"float32"), padding=0, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 512, 0, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 512, 3, 0],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 256, 0, 128],"float32"), Tensor([256, 256, 0, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 0, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 0, 128],"float32"), Tensor([3, 256, 0, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 0, 128],"float32"), Tensor([3, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 0],"float32"), Tensor([256, 256, 3, 0],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 0],"float32"), Tensor([256, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 0],"float32"), Tensor([3, 256, 1, 0],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 0],"float32"), Tensor([3, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([0, 256, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([0, 256, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 0, 3, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 256, 0, 3],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 256, 3, 0],"float32"), padding=1, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([3, 0, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([3, 256, 0, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 256, 128, 128],"float32"), Tensor([3, 256, 1, 0],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 3, 0, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 0, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 0],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 0],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 0, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 0, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 0, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 0, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 0],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 0],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([0],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([0],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 0, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 0],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 0, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 6, 0, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 6, 5, 0],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1024, 0, 131, 131],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 0, 131, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 0, 258, 258],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 0, 258, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 0, 131],"float32"), Tensor([1, 1, 0, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 0, 131],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 0, 258],"float32"), Tensor([1, 1, 0, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 0, 258],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 0],"float32"), Tensor([1, 1, 4, 0],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 0],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 131],"float32"), Tensor([0, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 131],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 131],"float32"), Tensor([1, 1, 0, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 131, 131],"float32"), Tensor([1, 1, 4, 0],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 0],"float32"), Tensor([1, 1, 4, 0],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 0],"float32"), Tensor([1, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 258],"float32"), Tensor([0, 1, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 258],"float32"), Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 258],"float32"), Tensor([1, 1, 0, 4],"float32"), )
paddle.nn.functional.conv2d(Tensor([1024, 1, 258, 258],"float32"), Tensor([1, 1, 4, 0],"float32"), )
paddle.nn.functional.conv2d(Tensor([16, 0, 260, 260],"float32"), weight=Tensor([3, 0, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 0, 260, 260],"float32"), weight=Tensor([3, 1, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 0, 268, 268],"float32"), weight=Tensor([3, 0, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 0, 268, 268],"float32"), weight=Tensor([3, 1, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 0, 260],"float32"), weight=Tensor([3, 1, 0, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 0, 260],"float32"), weight=Tensor([3, 1, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 0, 268],"float32"), weight=Tensor([3, 1, 0, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 0, 268],"float32"), weight=Tensor([3, 1, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 260, 0],"float32"), weight=Tensor([3, 1, 5, 0],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 260, 0],"float32"), weight=Tensor([3, 1, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 260, 260],"float32"), weight=Tensor([0, 1, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 260, 260],"float32"), weight=Tensor([3, 0, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 260, 260],"float32"), weight=Tensor([3, 1, 0, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 260, 260],"float32"), weight=Tensor([3, 1, 5, 0],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 0],"float32"), weight=Tensor([3, 1, 13, 0],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 0],"float32"), weight=Tensor([3, 1, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 268],"float32"), weight=Tensor([0, 1, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 268],"float32"), weight=Tensor([3, 0, 13, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 268],"float32"), weight=Tensor([3, 1, 0, 13],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 3, 268, 268],"float32"), weight=Tensor([3, 1, 13, 0],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([2, 0, 37, 37],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 37, 37],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([384, 0, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([384, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([48, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([48, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([48, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([96, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 4, 4],"float32"), Tensor([96, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 8, 8],"float32"), Tensor([24, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 0, 8, 8],"float32"), Tensor([24, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 0, 4],"float32"), Tensor([384, 192, 0, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 0, 4],"float32"), Tensor([384, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 0, 4],"float32"), Tensor([48, 192, 0, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 0, 4],"float32"), Tensor([48, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 0, 4],"float32"), Tensor([96, 192, 0, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 0, 4],"float32"), Tensor([96, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 0],"float32"), Tensor([384, 192, 1, 0],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 0],"float32"), Tensor([384, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 0],"float32"), Tensor([48, 192, 1, 0],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 0],"float32"), Tensor([48, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 0],"float32"), Tensor([96, 192, 1, 0],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 0],"float32"), Tensor([96, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([0, 192, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([0, 192, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([384, 0, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([384, 192, 0, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([384, 192, 1, 0],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([48, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([48, 192, 0, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([48, 192, 1, 0],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([96, 0, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([96, 192, 0, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 192, 4, 4],"float32"), Tensor([96, 192, 1, 0],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 0, 8],"float32"), Tensor([24, 24, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 0, 8],"float32"), Tensor([24, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 0],"float32"), Tensor([24, 24, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 0],"float32"), Tensor([24, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 8],"float32"), Tensor([0, 24, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 8],"float32"), Tensor([24, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 8],"float32"), Tensor([24, 24, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 24, 8, 8],"float32"), Tensor([24, 24, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 3, 0, 37],"float32"), Tensor([64, 3, 0, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 3, 0, 37],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 3, 37, 0],"float32"), Tensor([64, 3, 7, 0],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 3, 37, 0],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 3, 37, 37],"float32"), Tensor([0, 3, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 3, 37, 37],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 3, 37, 37],"float32"), Tensor([64, 3, 0, 7],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 3, 37, 37],"float32"), Tensor([64, 3, 7, 0],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 0, 4],"float32"), Tensor([48, 48, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 0, 4],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 0],"float32"), Tensor([48, 48, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 0],"float32"), Tensor([48, 48, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 4],"float32"), Tensor([0, 48, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 4],"float32"), Tensor([48, 0, 3, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 4],"float32"), Tensor([48, 48, 0, 3],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 48, 4, 4],"float32"), Tensor([48, 48, 3, 0],"float32"), None, list[1,1,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 2, 2],"float32"), Tensor([16, 0, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 2, 2],"float32"), Tensor([16, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 32, 32],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 32, 32],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 4, 4],"float32"), Tensor([8, 0, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 0, 4, 4],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 0, 2],"float32"), Tensor([16, 16, 0, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 0, 2],"float32"), Tensor([16, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 2, 0],"float32"), Tensor([16, 16, 3, 0],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 2, 0],"float32"), Tensor([16, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 2, 2],"float32"), Tensor([0, 16, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 2, 2],"float32"), Tensor([16, 0, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 2, 2],"float32"), Tensor([16, 16, 0, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 16, 2, 2],"float32"), Tensor([16, 16, 3, 0],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 3, 0, 32],"float32"), Tensor([64, 3, 0, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 3, 0, 32],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 3, 32, 0],"float32"), Tensor([64, 3, 7, 0],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 3, 32, 0],"float32"), Tensor([64, 3, 7, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 3, 32, 32],"float32"), Tensor([0, 3, 7, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 3, 32, 32],"float32"), Tensor([64, 0, 7, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 3, 32, 32],"float32"), Tensor([64, 3, 0, 7],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 3, 32, 32],"float32"), Tensor([64, 3, 7, 0],"float32"), None, list[2,2,], 3, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 0, 4],"float32"), Tensor([8, 8, 0, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 0, 4],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 4, 0],"float32"), Tensor([8, 8, 3, 0],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 4, 0],"float32"), Tensor([8, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 4, 4],"float32"), Tensor([0, 8, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 4, 4],"float32"), Tensor([8, 0, 3, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 4, 4],"float32"), Tensor([8, 8, 0, 3],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([3, 8, 4, 4],"float32"), Tensor([8, 8, 3, 0],"float32"), None, list[2,2,], 1, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 16],"float32"), Tensor([12, 0, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 16],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 3, 0, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 0, 16],"float32"), Tensor([12, 1, 0, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 0, 16],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 0, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 0],"float32"), Tensor([12, 1, 3, 0],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 0],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 0],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([12, 0, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([12, 1, 0, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([12, 1, 3, 0],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 0, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 3, 0, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 3, 3, 0],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([0],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 0, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 0, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 0, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 0, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 0],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([8, 0, 128, 128],"float32"), Tensor([256, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 128, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 255, 255],"float32"), Tensor([256, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 255, 255],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 256, 256],"float32"), Tensor([128, 0, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 256, 256],"float32"), Tensor([128, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 256, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 0, 256, 256],"float32"), Tensor([128, 3, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 257, 257],"float32"), Tensor([256, 0, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 0, 257, 257],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 0, 255],"float32"), Tensor([256, 128, 0, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 0, 255],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 0, 256],"float32"), Tensor([128, 128, 0, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 0, 256],"float32"), Tensor([128, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 0, 257],"float32"), Tensor([256, 128, 0, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 0, 257],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 0],"float32"), Tensor([256, 128, 1, 0],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 0],"float32"), Tensor([256, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 255],"float32"), Tensor([0, 128, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 255],"float32"), Tensor([256, 0, 1, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 255],"float32"), Tensor([256, 128, 0, 1],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 255, 255],"float32"), Tensor([256, 128, 1, 0],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 0],"float32"), Tensor([128, 128, 3, 0],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 0],"float32"), Tensor([128, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 256],"float32"), Tensor([0, 128, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 256],"float32"), Tensor([128, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 256],"float32"), Tensor([128, 128, 0, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 256, 256],"float32"), Tensor([128, 128, 3, 0],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 128, 257, 0],"float32"), Tensor([256, 128, 3, 0],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 257, 0],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 257, 257],"float32"), Tensor([0, 128, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 257, 257],"float32"), Tensor([256, 0, 3, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 257, 257],"float32"), Tensor([256, 128, 0, 3],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 128, 257, 257],"float32"), Tensor([256, 128, 3, 0],"float32"), bias=None, stride=2, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 256, 0, 128],"float32"), Tensor([256, 256, 0, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 0, 128],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 0],"float32"), Tensor([256, 256, 3, 0],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 0],"float32"), Tensor([256, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 128],"float32"), Tensor([0, 256, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 128],"float32"), Tensor([256, 0, 3, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 128],"float32"), Tensor([256, 256, 0, 3],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 256, 128, 128],"float32"), Tensor([256, 256, 3, 0],"float32"), bias=None, stride=1, padding=1, )
paddle.nn.functional.conv2d(Tensor([8, 3, 0, 256],"float32"), Tensor([128, 3, 0, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 3, 0, 256],"float32"), Tensor([128, 3, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 3, 256, 0],"float32"), Tensor([128, 3, 1, 0],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 3, 256, 0],"float32"), Tensor([128, 3, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 3, 256, 256],"float32"), Tensor([0, 3, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 3, 256, 256],"float32"), Tensor([128, 0, 1, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 3, 256, 256],"float32"), Tensor([128, 3, 0, 1],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(Tensor([8, 3, 256, 256],"float32"), Tensor([128, 3, 1, 0],"float32"), bias=None, stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([0, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([0, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 0, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 0, 4],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 0],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 3, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 0, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 0, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 2, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([6, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([6, 1, 0, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([6, 1, 3, 0],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([6, 0, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([6, 1, 0, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([6, 1, 3, 0],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 0, 3],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 0, 3],"float64"), weight=Tensor([2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 0],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 0],"float64"), weight=Tensor([2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float32"), weight=Tensor([0, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float32"), weight=Tensor([2, 0, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float32"), weight=Tensor([2, 3, 0, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 0],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float64"), weight=Tensor([0, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float64"), weight=Tensor([2, 0, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float64"), weight=Tensor([2, 3, 0, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 0],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 128, 128],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 128, 128],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 16, 16],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 16, 16],"float32"), Tensor([0, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 16, 16],"float32"), Tensor([1024, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 16, 16],"float32"), Tensor([1024, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 2, 2],"float32"), Tensor([0, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 1024, 2, 2],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 124, 108],"float32"), Tensor([0, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 124, 108],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 128, 128],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 128, 128],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 32, 32],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 32, 32],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 38, 68],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 38, 68],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 80, 80],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 94, 70],"float32"), Tensor([0, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 94, 70],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 2, 6],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 2, 6],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2048, 128, 128],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2048, 128, 128],"float32"), Tensor([2048, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2048, 16, 16],"float32"), Tensor([0, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2048, 16, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 128, 128],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 128, 128],"float32"), Tensor([256, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 16, 16],"float32"), Tensor([0, 1, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 16, 16],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 16, 16],"float32"), Tensor([256, 1, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 16, 16],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 19, 34],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 19, 34],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 32, 32],"float32"), Tensor([0, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 32, 32],"float32"), Tensor([256, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 47, 35],"float32"), Tensor([0, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 47, 35],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 62, 54],"float32"), Tensor([0, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 62, 54],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 64, 64],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 16, 16],"float32"), Tensor([0, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 16, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 16, 16],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 3, 2],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 7, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 16, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 3, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4096, 16, 16],"float32"), Tensor([0, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4096, 16, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 512, 16, 16],"float32"), Tensor([0, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 512, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 512, 32, 32],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 512, 32, 32],"float32"), Tensor([512, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 2, 2],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 248, 216],"float32"), Tensor([0, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 248, 216],"float32"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 32, 32],"float32"), Tensor([0, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 32, 32],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 38, 68],"float32"), Tensor([0, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 38, 68],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 64, 64],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 64, 64],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 76, 136],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 64, 76, 136],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 96, 2, 2],"float32"), Tensor([96, 96, 4, 4],"float32"), bias=Tensor([96],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([1024, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([2048, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([256, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([256, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([1024, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 2, 2],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 2, 2],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 64, 64],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 80, 80],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 0, 128],"float32"), Tensor([1024, 128, 0, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 0, 128],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 0, 16],"float32"), Tensor([1024, 256, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 0, 16],"float32"), Tensor([1024, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 0, 2],"float32"), Tensor([1024, 512, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 0, 2],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 0],"float32"), Tensor([1024, 128, 3, 0],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 0],"float32"), Tensor([1024, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 128],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 128, 0, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 128, 128],"float32"), Tensor([1024, 128, 3, 0],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 0],"float32"), Tensor([1024, 256, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 0],"float32"), Tensor([1024, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([0, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 256, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 16, 16],"float32"), Tensor([1024, 256, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 0],"float32"), Tensor([1024, 512, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 0],"float32"), Tensor([1024, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([0, 512, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 512, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1024, 2, 2],"float32"), Tensor([1024, 512, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 0, 128],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 0, 128],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 0, 80],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 0],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 0],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([0, 3, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([0, 64, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 0, 3, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 0, 4, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 3, 0, 4],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 3, 4, 0],"float32"), bias=Tensor([3],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 3, 4, 4],"float32"), bias=Tensor([0],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 0, 3],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 3, 0],"float32"), bias=Tensor([64],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 80, 0],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 80, 80],"float32"), Tensor([0, 128, 2, 2],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 80, 80],"float32"), Tensor([128, 0, 2, 2],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 80, 80],"float32"), Tensor([128, 128, 0, 2],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 80, 80],"float32"), Tensor([128, 128, 2, 0],"float32"), bias=Tensor([128],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 80, 80],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 0, 128],"float32"), Tensor([2048, 128, 0, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 0, 128],"float32"), Tensor([2048, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 0, 16],"float32"), Tensor([2048, 512, 0, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 0, 16],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 0],"float32"), Tensor([2048, 128, 3, 0],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 0],"float32"), Tensor([2048, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 128],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 128, 0, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 128, 128],"float32"), Tensor([2048, 128, 3, 0],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 16, 0],"float32"), Tensor([2048, 512, 3, 0],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 16, 0],"float32"), Tensor([2048, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 16, 16],"float32"), Tensor([0, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 0, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 512, 0, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2048, 16, 16],"float32"), Tensor([2048, 512, 3, 0],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 0, 128],"float32"), Tensor([256, 128, 0, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 0, 128],"float32"), Tensor([256, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 0, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 0, 64],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 0],"float32"), Tensor([256, 128, 3, 0],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 0],"float32"), Tensor([256, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 128],"float32"), Tensor([0, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 128, 0, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 128, 128],"float32"), Tensor([256, 128, 3, 0],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 0],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([0, 256, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 0, 2, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 256, 0, 2],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 256, 2, 0],"float32"), bias=Tensor([256],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 14, 14],"float32"), Tensor([256, 256, 2, 2],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 0],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([0, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 0, 3, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 0, 3],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 3, 0],"float32"), bias=Tensor([128],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 0, 16],"float32"), Tensor([4096, 512, 0, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 0, 16],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 16, 0],"float32"), Tensor([4096, 512, 3, 0],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 16, 0],"float32"), Tensor([4096, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 16, 16],"float32"), Tensor([0, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 16, 16],"float32"), Tensor([4096, 0, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 16, 16],"float32"), Tensor([4096, 512, 0, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4096, 16, 16],"float32"), Tensor([4096, 512, 3, 0],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 0, 16],"float32"), Tensor([512, 512, 0, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 0, 16],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 0],"float32"), Tensor([512, 512, 3, 0],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 0],"float32"), Tensor([512, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([0, 512, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 0, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 512, 0, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 512, 16, 16],"float32"), Tensor([512, 512, 3, 0],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 124, 108],"float32"), Tensor([128, 0, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 124, 108],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([96, 96, 4, 4],"float32"), bias=Tensor([96],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 248, 216],"float32"), Tensor([64, 0, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 248, 216],"float32"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 2],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([4, 0, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 62, 54],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 62, 54],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 0, 108],"float32"), Tensor([128, 128, 0, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 0, 108],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 0],"float32"), Tensor([128, 128, 2, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 0],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float32"), Tensor([0, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float32"), Tensor([128, 0, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float32"), Tensor([128, 128, 0, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 128, 124, 108],"float32"), Tensor([128, 128, 2, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 6],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 6],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 0],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 0],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 0],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 0],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 0, 54],"float32"), Tensor([256, 128, 0, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 0, 54],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 62, 0],"float32"), Tensor([256, 128, 4, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 62, 0],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 62, 54],"float32"), Tensor([0, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 62, 54],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 62, 54],"float32"), Tensor([256, 128, 0, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 256, 62, 54],"float32"), Tensor([256, 128, 4, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 10, 0, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 10, 27, 0],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 0],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 0],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 0, 3],"float64"), Tensor([4, 2, 0, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 0, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 0],"float64"), Tensor([4, 2, 1, 0],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 0],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 0, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 2, 0, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 2, 1, 0],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 0, 2],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 0, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 0, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 0, 2],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 0],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 0],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float64"), Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float64"), Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float64"), Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float64"), Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 0, 216],"float32"), Tensor([64, 128, 0, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 0, 216],"float32"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 0],"float32"), Tensor([64, 128, 1, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 0],"float32"), Tensor([64, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 216],"float32"), Tensor([0, 128, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 216],"float32"), Tensor([64, 0, 1, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 216],"float32"), Tensor([64, 128, 0, 1],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 64, 248, 216],"float32"), Tensor([64, 128, 1, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 96, 0, 2],"float32"), Tensor([96, 96, 4, 4],"float32"), bias=Tensor([96],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 96, 2, 0],"float32"), Tensor([96, 96, 4, 4],"float32"), bias=Tensor([96],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 96, 2, 2],"float32"), Tensor([0, 96, 4, 4],"float32"), bias=Tensor([96],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 96, 2, 2],"float32"), Tensor([96, 0, 4, 4],"float32"), bias=Tensor([96],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 96, 2, 2],"float32"), Tensor([96, 96, 0, 4],"float32"), bias=Tensor([96],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 96, 2, 2],"float32"), Tensor([96, 96, 4, 0],"float32"), bias=Tensor([96],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 96, 2, 2],"float32"), Tensor([96, 96, 4, 4],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 0, 19, 34],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 0, 19, 34],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 0, 38, 68],"float32"), Tensor([128, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 0, 38, 68],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 0, 38, 68],"float32"), Tensor([64, 0, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 0, 38, 68],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 0, 76, 136],"float32"), Tensor([64, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 0, 76, 136],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 0, 68],"float32"), Tensor([128, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 0, 68],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 38, 0],"float32"), Tensor([128, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 38, 0],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 38, 68],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 38, 68],"float32"), Tensor([128, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 38, 68],"float32"), Tensor([128, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 128, 38, 68],"float32"), Tensor([128, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 0, 34],"float32"), Tensor([256, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 0, 34],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 19, 0],"float32"), Tensor([256, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 19, 0],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 19, 34],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 19, 34],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 19, 34],"float32"), Tensor([256, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 256, 19, 34],"float32"), Tensor([256, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 0, 136],"float32"), Tensor([64, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 0, 136],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 0, 68],"float32"), Tensor([64, 1, 0, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 0, 68],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 38, 0],"float32"), Tensor([64, 1, 8, 0],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 38, 0],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 38, 68],"float32"), Tensor([0, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 38, 68],"float32"), Tensor([64, 0, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 38, 68],"float32"), Tensor([64, 1, 0, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 38, 68],"float32"), Tensor([64, 1, 8, 0],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 76, 0],"float32"), Tensor([64, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 76, 0],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 76, 136],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 76, 136],"float32"), Tensor([64, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 76, 136],"float32"), Tensor([64, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 64, 76, 136],"float32"), Tensor([64, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([1024, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([256, 0, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([256, 1, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([3, 0, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 32, 32],"float32"), Tensor([128, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 32, 32],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 32, 32],"float32"), Tensor([256, 0, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 32, 32],"float32"), Tensor([256, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 32, 32],"float32"), Tensor([512, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 32, 32],"float32"), Tensor([512, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 32, 32],"float32"), Tensor([64, 0, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 32, 32],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 47, 35],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 47, 35],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 64, 64],"float32"), Tensor([64, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 64, 64],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 7, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 94, 70],"float32"), Tensor([128, 0, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 94, 70],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 1024, 0, 16],"float32"), Tensor([1024, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 1024, 0, 16],"float32"), Tensor([1024, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 1024, 16, 0],"float32"), Tensor([1024, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 1024, 16, 0],"float32"), Tensor([1024, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 1024, 16, 16],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 1024, 16, 16],"float32"), Tensor([1024, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 1024, 16, 16],"float32"), Tensor([1024, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 1024, 16, 16],"float32"), Tensor([1024, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 0, 32],"float32"), Tensor([128, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 0, 32],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 0, 70],"float32"), Tensor([128, 128, 0, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 0, 70],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 32, 0],"float32"), Tensor([128, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 32, 0],"float32"), Tensor([128, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 32, 32],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 32, 32],"float32"), Tensor([128, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 32, 32],"float32"), Tensor([128, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 32, 32],"float32"), Tensor([128, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 94, 0],"float32"), Tensor([128, 128, 2, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 94, 0],"float32"), Tensor([128, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 94, 70],"float32"), Tensor([0, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 94, 70],"float32"), Tensor([128, 0, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 94, 70],"float32"), Tensor([128, 128, 0, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 128, 94, 70],"float32"), Tensor([128, 128, 2, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 0, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 5, 0, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 5, 3, 0],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 1, 0, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 1, 3, 0],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 0, 16],"float32"), Tensor([256, 1, 0, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 0, 16],"float32"), Tensor([256, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 0, 16],"float32"), Tensor([256, 1, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 0, 16],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 0, 32],"float32"), Tensor([256, 1, 0, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 0, 32],"float32"), Tensor([256, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 0, 35],"float32"), Tensor([256, 128, 0, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 0, 35],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 0],"float32"), Tensor([256, 1, 16, 0],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 0],"float32"), Tensor([256, 1, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 0],"float32"), Tensor([256, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 0],"float32"), Tensor([256, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([0, 1, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([256, 0, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([256, 1, 0, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([256, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([256, 1, 16, 0],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 16, 16],"float32"), Tensor([256, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 32, 0],"float32"), Tensor([256, 1, 8, 0],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 32, 0],"float32"), Tensor([256, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 32, 32],"float32"), Tensor([0, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 32, 32],"float32"), Tensor([256, 0, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 32, 32],"float32"), Tensor([256, 1, 0, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 32, 32],"float32"), Tensor([256, 1, 8, 0],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 47, 0],"float32"), Tensor([256, 128, 4, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 47, 0],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 47, 35],"float32"), Tensor([0, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 47, 35],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 47, 35],"float32"), Tensor([256, 128, 0, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 256, 47, 35],"float32"), Tensor([256, 128, 4, 0],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 0, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 0, 16],"float32"), Tensor([3, 5, 0, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 0, 16],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 0, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 0],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 0],"float32"), Tensor([3, 5, 3, 0],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 0],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([0, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([0, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 0, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 2, 0, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 2, 3, 0],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 5, 0, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 5, 3, 0],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 0],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 0, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 6, 0, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 6, 5, 0],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 0, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 0, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 0, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 0, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 0],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([0, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 4, 0, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 4, 3, 0],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([0],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 512, 0, 32],"float32"), Tensor([512, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 512, 0, 32],"float32"), Tensor([512, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 512, 32, 0],"float32"), Tensor([512, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 512, 32, 0],"float32"), Tensor([512, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 512, 32, 32],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 512, 32, 32],"float32"), Tensor([512, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 512, 32, 32],"float32"), Tensor([512, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 512, 32, 32],"float32"), Tensor([512, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 4, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 4, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 1, 0],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([0],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 0, 32],"float32"), Tensor([64, 1, 0, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 0, 32],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 0, 64],"float32"), Tensor([64, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 0, 64],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 32, 0],"float32"), Tensor([64, 1, 8, 0],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 32, 0],"float32"), Tensor([64, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 32, 32],"float32"), Tensor([0, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 32, 32],"float32"), Tensor([64, 0, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 32, 32],"float32"), Tensor([64, 1, 0, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 32, 32],"float32"), Tensor([64, 1, 8, 0],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 64, 0],"float32"), Tensor([64, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 64, 0],"float32"), Tensor([64, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 64, 64],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 64, 64],"float32"), Tensor([64, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 64, 64],"float32"), Tensor([64, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 64, 64, 64],"float32"), Tensor([64, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 4, 4],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 6, 2, 2],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([0, 8, 8, 3],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 4, 4],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 8, 3],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 0, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 0, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 0, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 0, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 0, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 0, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 0, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 0, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 0, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 0],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 0, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 0, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 0, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 0],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 0],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 0],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 4],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 0, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 0],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([3, 1, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([3, 1, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 0],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 0],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 0],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([0, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([0, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([0, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 0, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 0, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 0, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 0, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 0, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 0, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([0],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 0, 2],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 0, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 0, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 0],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 0],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 0],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float32"), weight=Tensor([6, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float32"), weight=Tensor([6, 1, 0, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float32"), weight=Tensor([6, 1, 3, 0],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 0],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 0, 3],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 0],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float64"), weight=Tensor([0, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float64"), weight=Tensor([3, 0, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float64"), weight=Tensor([3, 1, 0, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float64"), weight=Tensor([3, 1, 5, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv3d(Tensor([0, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([12, 0, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 0, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 0, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 0, 8, 8],"float32"), Tensor([12, 1, 0, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 0, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 0, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 0, 8],"float32"), Tensor([12, 1, 3, 0, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 0, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 0, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 0],"float32"), Tensor([12, 1, 3, 3, 0],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 0],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 0],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 0, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 0, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 0, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 0],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 0, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 0, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 0, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 0],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([0, 3, 4, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([0, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([0, 4, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 0, 4, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 0, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 0, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 0],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([0, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 0, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 0, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 0, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([6, 1, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([6, 1, 3, 0, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 0],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([0, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([6, 0, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([6, 1, 0, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([6, 1, 3, 0, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 0],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 0, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 0, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 0, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 0, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 0],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 0],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([0, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([2, 0, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 0, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 0, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 0],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float64"), weight=Tensor([0, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float64"), weight=Tensor([2, 0, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float64"), weight=Tensor([2, 3, 0, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 0, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 0],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 0, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 0, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 0, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 0, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 0, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 0, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 0, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 0, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 0],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 0],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 0],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 0],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([0, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([0, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 0, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 0, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 0, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 0],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 0, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 3, 0, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 3, 3, 0],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 0, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 0],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([0, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 0, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 0],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 0, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 0],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([0],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 0, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 0, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 0, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 0, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 0, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 0, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 0],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([0, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 0, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 0, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 0],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 0, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 0, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 0, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 0, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 0, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 0, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 0, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 0, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 0],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([0, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 0, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 0, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 0],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 0, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 0, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 0],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 0, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 0, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 0],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([0, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 0, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 0, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 0, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 0, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 0, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 0, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 0, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 0, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 0, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 0, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 0, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 0, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 0, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 0, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 0, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 0],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([0, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([0, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 0, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 0, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 0],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 0, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 0, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 0],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([0, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([0, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 0, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 0, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 0, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 0],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 0, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 0, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 0],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([0],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.cosine_embedding_loss(Tensor([0, 3],"float32"), Tensor([10, 3],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([0, 3],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([0, 3],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([0, 3],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_embedding_loss(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([0],"float32"), Tensor([10],"float32"), Tensor([1],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([10, 0],"float32"), Tensor([10, 3],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([10, 3],"float32"), Tensor([0, 3],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([10, 3],"float32"), Tensor([10, 0],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([10, 3],"float32"), Tensor([10, 3],"float32"), Tensor([0],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([10],"float32"), Tensor([0],"float32"), Tensor([1],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([10],"float32"), Tensor([10],"float32"), Tensor([0],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 0],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 0],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 0],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([0, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([0, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([0, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 0],"float64"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 0],"float64"), Tensor([5],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 0],"float64"), Tensor([5],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 3],"float64"), Tensor([0],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 3],"float64"), Tensor([0],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 3],"float64"), Tensor([0],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.ctc_loss(Tensor([0, 128, 6625],"float32"), Tensor([128, 25],"int32"), Tensor([128],"int64"), Tensor([128],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([40, 0, 6625],"float32"), Tensor([128, 25],"int32"), Tensor([128],"int64"), Tensor([128],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([40, 128, 0],"float32"), Tensor([128, 25],"int32"), Tensor([128],"int64"), Tensor([128],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([40, 128, 6625],"float32"), Tensor([0, 25],"int32"), Tensor([128],"int64"), Tensor([128],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([40, 128, 6625],"float32"), Tensor([128, 0],"int32"), Tensor([128],"int64"), Tensor([128],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([40, 128, 6625],"float32"), Tensor([128, 25],"int32"), Tensor([0],"int64"), Tensor([128],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.ctc_loss(Tensor([40, 128, 6625],"float32"), Tensor([128, 25],"int32"), Tensor([128],"int64"), Tensor([0],"int64"), 0, "none", norm_by_times=False, )
paddle.nn.functional.flashmask_attention(Tensor([0, 2048, 8, 96],"float16"), Tensor([0, 2048, 8, 96],"float16"), Tensor([0, 2048, 8, 96],"float16"), startend_row_indices=Tensor([0, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([0, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 0, 8, 96],"float16"), Tensor([1, 0, 8, 96],"float16"), Tensor([1, 0, 8, 96],"float16"), startend_row_indices=Tensor([1, 0, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 0, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 0, 96],"float16"), Tensor([1, 2048, 0, 96],"float16"), Tensor([1, 2048, 0, 96],"float16"), startend_row_indices=Tensor([1, 1, 0, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 0, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 0],"float16"), Tensor([1, 2048, 8, 0],"float16"), Tensor([1, 2048, 8, 0],"float16"), startend_row_indices=Tensor([1, 1, 2048, 0],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 0],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([0, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 0, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 0, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 0],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([0, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 0, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 0, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 0],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([0, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 0, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 0, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 0],"int32"), causal=True, )
paddle.nn.functional.fold(Tensor([0, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
paddle.nn.functional.fold(Tensor([3, 0, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
paddle.nn.functional.fold(Tensor([3, 12, 0],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float16"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), kernel_size=list[2,2,], output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([0, 3, 7, 7],"float64"), output_size=list[3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float16"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), kernel_size=list[2,2,], output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 0, 7, 7],"float64"), output_size=list[3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float16"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), kernel_size=2, output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), kernel_size=list[2,2,], output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), return_mask=False, output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 0, 7],"float64"), output_size=list[3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float16"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), kernel_size=2, output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), kernel_size=list[2,2,], output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), return_mask=False, output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 0],"float64"), output_size=list[3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([0, 3, 7, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([0, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([0, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([0, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([0, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 0, 7, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 0, 7, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 0, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 0, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 0, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 0, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 0, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 0, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 0, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 0, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 0],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 0],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 0],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 0],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 0],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([0, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 0, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 0, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 0],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.gelu(Tensor([0, 1, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([0, 1, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([0, 1, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([0, 1, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([0, 1, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([0, 1, 4096],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([0, 1, 8],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([0, 1024, 7, 7],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([0, 12, 12, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([0, 13, 4096],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([0, 16, 14, 14, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([0, 16, 14, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([0, 16, 64, 64],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([0, 16, 64, 64],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([0, 16, 64, 64],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([0, 16, 64, 64],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([0, 17],"float32"), False, )
paddle.nn.functional.gelu(Tensor([0, 17],"float32"), True, )
paddle.nn.functional.gelu(Tensor([0, 20],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([0, 3, 4],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([0, 3, 4],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([0, 3],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([0, 3],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([0, 3],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([0, 3],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([0, 32],"float32"), )
paddle.nn.functional.gelu(Tensor([0, 37],"float32"), )
paddle.nn.functional.gelu(Tensor([0],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 0, 1024],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 0, 128],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 0, 14, 14, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 0, 14, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 0, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 0, 2048],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 0, 37],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 0, 4096],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([1, 0, 8],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 0],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1, 0],"float32"), )
paddle.nn.functional.gelu(Tensor([1, 1, 0],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([1, 1, 0],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 1, 0],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([1, 13, 0],"float32"), True, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 0, 14, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 0, 14, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 0, 1536],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 0, 1536],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 14, 0],"float16"), False, None, )
paddle.nn.functional.gelu(Tensor([1, 16, 14, 14, 0],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([10, 0],"float32"), )
paddle.nn.functional.gelu(Tensor([11, 0],"float32"), False, )
paddle.nn.functional.gelu(Tensor([11, 0],"float32"), True, )
paddle.nn.functional.gelu(Tensor([124, 0, 12, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 0, 7, 7],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 1024, 0, 7],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 1024, 7, 0],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 12, 0, 4096],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([124, 12, 12, 0],"float32"), False, None, )
paddle.nn.functional.gelu(Tensor([16, 0, 64, 64],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([16, 0, 64, 64],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([16, 0, 64, 64],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([16, 0, 64, 64],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([16, 16, 0, 64],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([16, 16, 0, 64],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([16, 16, 0, 64],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([16, 16, 0, 64],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 0],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 0],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 0],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([16, 16, 64, 0],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 0, 4],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 0, 4],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 0],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 0],"float16"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 0],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 0],"float32"), approximate=True, )
paddle.nn.functional.gelu(Tensor([2, 3, 0],"float16"), approximate=False, )
paddle.nn.functional.gelu(Tensor([2, 3, 0],"float32"), approximate=False, )
paddle.nn.functional.gelu(Tensor([3, 0],"float32"), False, None, )
paddle.nn.functional.gelu(x=Tensor([0, 3, 3],"float32"), )
paddle.nn.functional.gelu(x=Tensor([0, 3, 3],"float64"), )
paddle.nn.functional.gelu(x=Tensor([0, 3, 3],"float64"), approximate=True, )
paddle.nn.functional.gelu(x=Tensor([3, 0, 3],"float32"), )
paddle.nn.functional.gelu(x=Tensor([3, 0, 3],"float64"), )
paddle.nn.functional.gelu(x=Tensor([3, 0, 3],"float64"), approximate=True, )
paddle.nn.functional.gelu(x=Tensor([3, 3, 0],"float32"), )
paddle.nn.functional.gelu(x=Tensor([3, 3, 0],"float64"), )
paddle.nn.functional.gelu(x=Tensor([3, 3, 0],"float64"), approximate=True, )
paddle.nn.functional.group_norm(Tensor([0, 1024, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([0, 1024, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([0, 3, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([0, 3, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([0, 3, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([0, 4, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([0, 4, 3, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([0, 4, 3],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([1, 0, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 0, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 0, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 0, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 10, 0],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([0],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([0],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 12, 0],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([0],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([0],"float32"), )
paddle.nn.functional.group_norm(Tensor([2, 0, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 0, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 0, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 0, 3, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 0, 3],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 0, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 0, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 0, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 0, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 4],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 4],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 4, 0, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 0, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 0, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NCL", )
paddle.nn.functional.hardsigmoid(Tensor([0, 120, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([0, 480, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1, 0, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1, 120, 0, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1, 120, 1, 0],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1, 480, 0, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1, 480, 1, 0],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardtanh(Tensor([0, 3, 3],"float64"), 3.3, -3.3, None, )
paddle.nn.functional.hardtanh(Tensor([3, 0, 3],"float64"), 3.3, -3.3, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 0],"float64"), 3.3, -3.3, None, )
paddle.nn.functional.hardtanh(x=Tensor([0, 3, 3],"float64"), max=-3.3, min=3.3, )
paddle.nn.functional.hardtanh(x=Tensor([3, 0, 3],"float64"), max=-3.3, min=3.3, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 0],"float64"), max=-3.3, min=3.3, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="sum", )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="sum", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([10, 10, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="sum", )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 10, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="sum", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3, 3, 4],"float64"), Tensor([0, 3, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3, 3, 4],"float64"), Tensor([0, 3, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3, 3, 4],"float64"), Tensor([0, 3, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3, 3],"float64"), Tensor([4, 3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), reduction="mean", margin=4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([0, 3],"float64"), Tensor([3, 3],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 0, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="sum", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="sum", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 10, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="sum", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 0, 5],"float64"), Tensor([10, 10, 5],"float64"), reduction="sum", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 0],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 0],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 0],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 0],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 0],"float64"), reduction="sum", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 0],"float64"), reduction="sum", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 5],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 5],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 5],"float64"), reduction="sum", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 0],"float64"), Tensor([10, 10, 5],"float64"), reduction="sum", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="sum", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([0, 10, 5],"float64"), reduction="sum", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 0, 5],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="sum", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 0, 5],"float64"), reduction="sum", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 10, 0],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 10, 0],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 10, 0],"float64"), reduction="none", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 10, 0],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 10, 0],"float64"), reduction="sum", )
paddle.nn.functional.hinge_embedding_loss(Tensor([10, 10, 5],"float64"), Tensor([10, 10, 0],"float64"), reduction="sum", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float32"), Tensor([3, 3],"float32"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), reduction="mean", margin=4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 0],"float64"), Tensor([3, 3],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float32"), Tensor([3, 0],"float32"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([0, 3],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([0, 3],"float64"), reduction="mean", margin=4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([0, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([0, 3],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 0],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 0],"float64"), reduction="mean", margin=4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 0],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 0],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 0, 3, 4],"float64"), Tensor([4, 0, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 0, 3, 4],"float64"), Tensor([4, 0, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 0, 3, 4],"float64"), Tensor([4, 0, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 0, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 0, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 0, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 0, 3],"float64"), Tensor([4, 0, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 0, 3],"float64"), Tensor([4, 3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 0],"float64"), Tensor([4, 3, 3, 0],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 0],"float64"), Tensor([4, 3, 3, 0],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 0],"float64"), Tensor([4, 3, 3, 0],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 0],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 0],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 0],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([0, 3, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([0, 3, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([0, 3, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 0, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 0, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 0, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 0],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 0],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 0],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3],"float64"), Tensor([4, 0, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3],"float64"), Tensor([4, 3, 0],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.instance_norm(Tensor([0, 100, 16],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([0, 100, 3, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([0, 100, 3, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([0, 100, 4, 4],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([0, 100, 4, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([0, 100, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([0, 100],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([0, 100],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([0, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([0, 32, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 0, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 0, 3, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 0, 3, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 0, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 0],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 0],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 0, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 0, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 0],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 0],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 0],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 5],"float32"), None, None, Tensor([0],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([0],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 5],"float64"), None, None, Tensor([0],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([0],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4],"float32"), None, None, Tensor([0],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([0],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100],"float32"), None, None, Tensor([0],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100],"float32"), None, None, Tensor([100],"float32"), Tensor([0],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 32, 0],"float32"), )
paddle.nn.functional.instance_norm(Tensor([4, 0, 16],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 0, 4, 4],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 0, 4, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 0],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 0, 4],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 0, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 0],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 16],"float32"), None, None, Tensor([0],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 16],"float32"), None, None, Tensor([100],"float32"), Tensor([0],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 0],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 0],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 4],"float16"), None, None, Tensor([0],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 4],"float16"), None, None, Tensor([100],"float32"), Tensor([0],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 4],"float32"), None, None, Tensor([0],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([0],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100],"float32"), None, None, Tensor([0],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100],"float32"), None, None, Tensor([100],"float32"), Tensor([0],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([0, 1, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([0, 2, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([0, 2, 2, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([0, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([0, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 0, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 0, 2, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 0, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 0, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 0, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 1, 0],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 0, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 0, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 0, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 0, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 0],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 0],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 0],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 0],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.interpolate(Tensor([0, 1, 16, 16],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 176, 176],"float32"), scale_factor=2, mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 184, 184],"float32"), scale_factor=2, mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 256, 256],"float32"), tuple(1024,1024,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 32, 32],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 576, 798],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 576, 798],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 576, 798],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 576, 798],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 576, 798],"float32"), size=list[9,13,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 640, 480],"float32"), size=list[10,8,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 640, 480],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 640, 480],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 640, 480],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 640, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 686, 1024],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 704, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 707, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 707, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 707, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 707, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 736, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 768, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 768, 576],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 768, 576],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 768, 576],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 768, 576],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([0, 1, 768, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1, 80, 1700],"float32"), scale_factor=tuple(1,3,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 80, 340],"float32"), scale_factor=tuple(1,5,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 80, 5100],"float32"), scale_factor=tuple(1,5,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 1, 80, 85],"float32"), scale_factor=tuple(1,4,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=False, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=list[4,2,3,], scale_factor=None, mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=False, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=False, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=True, align_mode=0, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 10, 4],"float64"), size=None, scale_factor=list[0.6,1.6,1.7,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[14,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[2,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,12,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=list[26,22,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[0.6,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7000000000000002,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[2.8000000000000003,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,1.7000000000000002,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,2.8000000000000003,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=False, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 10, 2],"float64"), size=None, scale_factor=list[3.9000000000000004,3.9000000000000004,], mode="bilinear", align_corners=True, align_mode=1, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float32"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[11,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[14,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[17,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[2,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[20,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[23,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[26,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[29,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[5,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=list[8,], scale_factor=None, mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.6000000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[0.9999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4000000000000004,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6000000000000005,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.7999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.8000000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[1.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0000000000000004,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.2000000000000006,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.400000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.5999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6000000000000005,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.6999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8000000000000007,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[2.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.000000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.0999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2000000000000006,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.2999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.3999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.400000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.4999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.600000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.6999999999999993,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.7999999999999994,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.800000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.8999999999999995,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[3.9999999999999996,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.199999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.200000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.400000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.499999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.600000000000001,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.800000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[4.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.200000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.400000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.599999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.600000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.799999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.8000000000000025,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[5.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.099999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.200000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.400000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.600000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.8000000000000025,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[6.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.000000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.200000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.299999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.400000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.600000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.799999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.8000000000000025,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.899999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[7.999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.000000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.099999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.199999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.200000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.299999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.399999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.400000000000004,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.499999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.599999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.600000000000003,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.699999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.799999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.800000000000002,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 10, 4],"float64"), size=None, scale_factor=list[8.899999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 100, 704, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 100, 736, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 100, 768, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 1024, 2, 2],"float32"), scale_factor=2, )
paddle.nn.functional.interpolate(Tensor([0, 1024, 4, 4],"float32"), scale_factor=2, )
paddle.nn.functional.interpolate(Tensor([0, 128, 1, 1],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 1, 1],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 128, 100, 136],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 100, 152],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 128, 128],"float16"), list[256,256,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 128, 128],"float32"), list[256,256,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 16, 16],"float16"), size=tuple(32,32,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 128, 16, 16],"float32"), size=None, scale_factor=2, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 128, 16, 16],"float32"), size=tuple(32,32,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 128, 16, 32],"float16"), list[16,32,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 128, 16, 32],"float16"), list[32,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 128, 16, 32],"float32"), list[16,32,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 128, 16, 32],"float32"), list[32,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 128, 16],"float16"), size=tuple(16,), mode="linear", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([0, 128, 16],"float32"), size=tuple(16,), mode="linear", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([0, 128, 2, 2],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 128, 2, 2],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 128, 32, 32],"float16"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 128, 32, 32],"float16"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 128, 32, 32],"float32"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 128, 32, 32],"float32"), size=list[64,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 128, 92, 92],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 150, 64, 64],"float16"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 160, 18, 18],"float32"), size=None, scale_factor=2, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 160, 19, 19],"float32"), size=None, scale_factor=2, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 160, 4, 3],"float16"), size=list[8,6,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 160, 4, 3],"float32"), size=list[8,6,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 160, 8, 6],"float32"), size=list[16,12,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([0, 19, 128, 128],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 128, 256],"float32"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 19, 256, 256],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 256, 256],"float32"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 19, 64, 128],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 192, 100, 100],"float32"), scale_factor=2.0, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 192, 104, 104],"float32"), scale_factor=2.0, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 192, 16, 16],"float32"), size=tuple(24,24,), mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 192, 16],"float16"), size=tuple(8,), mode="linear", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([0, 192, 16],"float32"), size=tuple(8,), mode="linear", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([0, 192, 8, 8],"float16"), size=tuple(16,16,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 192, 8, 8],"float32"), size=tuple(16,16,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[0.6,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,0.6,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,1.7999999999999998,], mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[1.7999999999999998,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,0.6,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,1.7999999999999998,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,2.9999999999999996,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,4.199999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float32"), size=None, scale_factor=list[2.9999999999999996,5.399999999999999,], mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[13,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,13,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bicubic", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,2,], scale_factor=None, mode="nearest", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[2,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,13,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,2,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=False, align_mode=1, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 2, 10, 10],"float64"), size=list[24,24,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
