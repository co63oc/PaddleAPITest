paddle.nn.functional.max_pool2d(Tensor([64, 512, 0, 40],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 1, 0],"float16"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([64, 512, 1, 0],"float32"), kernel_size=tuple(1,1,), stride=1, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([0, 2, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([0, 3, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([0, 3, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([0, 3, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([0, 3, 32, 32],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([0, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([0, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([0, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([0, 3, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool2d(x=Tensor([0, 4, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 32, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 32, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 32, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 32, 32],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 32, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 32, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 2, 0, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 2, 24, 0],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 0, 32],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 0, 32],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 0, 32],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 0, 32],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 0, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 0, 32],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 0, 32],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 0, 32],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 0],"float32"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 0],"float64"), kernel_size=list[2,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 0],"float64"), kernel_size=list[3,3,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 0],"float64"), kernel_size=list[3,3,], padding=list[1,1,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 0],"float64"), kernel_size=list[3,3,], stride=list[1,1,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 0],"float64"), kernel_size=list[3,3,], stride=list[1,1,], ceil_mode=True, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 0],"float64"), kernel_size=list[3,3,], stride=list[1,2,], )
paddle.nn.functional.max_pool2d(x=Tensor([2, 3, 32, 0],"float64"), kernel_size=list[3,3,], stride=tuple(1,2,), )
paddle.nn.functional.max_pool2d(x=Tensor([2, 4, 0, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 4, 8, 0],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([0, 2, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 4, 4, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 6, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 32, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([0, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 5, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 6, 7, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 6, 9, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 64, 16, 112, 112],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 9, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 0, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 0, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 33, 0],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 0, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 0, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 0, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 0, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 0, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 0, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 0],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 0],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 0],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 0, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 0, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 0, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 0, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 0],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 0],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 0, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 0, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 8, 0],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 0, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 0, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 6, 0],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 4, 4, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 6, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 7, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 4, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 4, 0, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 4, 4, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 0, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 6, 0],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 0, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 32, 0, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 0, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 7, 0, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 7, 9, 0],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 8, 0, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 8, 8, 0, 3],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 8, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], return_mask=False, ceil_mode=False, data_format="NDHWC", name=None, )
paddle.nn.functional.max_pool3d(Tensor([8, 0, 16, 112, 112],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([8, 64, 0, 112, 112],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([8, 64, 16, 0, 112],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([8, 64, 16, 112, 0],"float32"), kernel_size=tuple(3,3,3,), stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([0, 3, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([0, 32, 32, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([0, 320, 4, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([0, 64, 4, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([0, 8, 32, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([0, 8, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 0, 8, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 0, 8, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 0, 8],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float32"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=2, padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], ceil_mode=True, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,2,3,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[2,2,2,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=1, )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[0,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,1,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[3,2,1,], padding=list[1,2,1,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=list[1,0,0,], )
paddle.nn.functional.max_pool3d(x=Tensor([2, 3, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=tuple(3,2,1,), padding=tuple(1,0,0,), )
paddle.nn.functional.max_pool3d(x=Tensor([2, 8, 0, 8, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([2, 8, 8, 0, 3],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([2, 8, 8, 8, 0],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 0, 32, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 0, 32, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 0, 4, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 0, 4, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 32, 0, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 32, 32, 0, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 32, 32, 56, 0],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 320, 0, 56, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 320, 4, 0, 56],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 320, 4, 56, 0],"float32"), kernel_size=list[1,1,1,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 64, 0, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 64, 4, 0, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 64, 4, 112, 0],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 8, 0, 112, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 8, 32, 0, 112],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_pool3d(x=Tensor([8, 8, 32, 112, 0],"float32"), kernel_size=list[1,3,3,], stride=list[1,2,2,], padding=list[0,1,1,], data_format="NCDHW", )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"int64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"int64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"int64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"int64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"int64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"int64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"int64"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 7, 8],"float64"), Tensor([0, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"int64"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 3, 3],"float32"), Tensor([1, 0, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 3, 3],"float32"), Tensor([1, 0, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"int64"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 0],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"int64"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 0, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 0],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 0, 3],"float32"), Tensor([1, 3, 0, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 0, 3],"float32"), Tensor([1, 3, 0, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 0, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 0, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 0],"float32"), Tensor([1, 3, 3, 0],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 0],"float32"), Tensor([1, 3, 3, 0],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 0],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 0],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 0, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 0, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 0, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 0, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 0],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 0],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 7, 8],"float64"), Tensor([2, 0, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 8],"float64"), Tensor([2, 4, 0, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 0],"float64"), Tensor([2, 4, 7, 0],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 0],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([0, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 0, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 0, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 0],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 1, 4, 5, 6],"float64"), Tensor([0, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float32"), Tensor([0, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"int64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float32"), Tensor([1, 0, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"int64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 0, 5, 6],"float64"), Tensor([1, 1, 0, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 0, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 0, 6],"float64"), Tensor([1, 1, 4, 0, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 0, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 0],"float64"), Tensor([1, 1, 4, 5, 0],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 0],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([0, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 0, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 0, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 0],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float32"), Tensor([1, 3, 0, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"int64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float32"), Tensor([1, 3, 2, 0, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"int64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float32"), Tensor([1, 3, 2, 2, 0],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"int64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([0, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 0, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 3, 0, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 3, 2, 0, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 3, 2, 2, 0],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.maxout(Tensor([0, 2, 2, 6],"float64"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([0, 4, 3, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([0, 4, 3, 3],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([0, 6, 5, 4],"float64"), 2, 1, )
paddle.nn.functional.maxout(Tensor([0, 6, 5, 4],"float64"), 2, -1, )
paddle.nn.functional.maxout(Tensor([0, 9, 3, 3],"float64"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([10, 0, 3, 3],"float64"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([10, 9, 0, 3],"float64"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([10, 9, 3, 0],"float64"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 0, 3, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 0, 3, 3],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 0, 3],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 0, 3],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 0],"float32"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([100, 4, 3, 0],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 0, 5, 4],"float64"), 2, 1, )
paddle.nn.functional.maxout(Tensor([2, 0, 5, 4],"float64"), 2, -1, )
paddle.nn.functional.maxout(Tensor([2, 6, 0, 4],"float64"), 2, 1, )
paddle.nn.functional.maxout(Tensor([2, 6, 0, 4],"float64"), 2, -1, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 0],"float64"), 2, 1, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 0],"float64"), 2, -1, )
paddle.nn.functional.maxout(Tensor([9, 0, 2, 6],"float64"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([9, 2, 0, 6],"float64"), 2, 3, None, )
paddle.nn.functional.maxout(Tensor([9, 2, 2, 0],"float64"), 2, 3, None, )
paddle.nn.functional.maxout(x=Tensor([0, 2, 2, 6],"float64"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([0, 4, 3, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([0, 4, 3, 3],"float64"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([0, 9, 3, 3],"float64"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([10, 0, 3, 3],"float64"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([10, 9, 0, 3],"float64"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([10, 9, 3, 0],"float64"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([100, 0, 3, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 0, 3, 3],"float64"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 0, 3],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 0, 3],"float64"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 0],"float32"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([100, 4, 3, 0],"float64"), groups=2, )
paddle.nn.functional.maxout(x=Tensor([9, 0, 2, 6],"float64"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([9, 2, 0, 6],"float64"), groups=2, axis=3, )
paddle.nn.functional.maxout(x=Tensor([9, 2, 2, 0],"float64"), groups=2, axis=3, )
paddle.nn.functional.mse_loss(input=Tensor([0, 1],"float32"), label=Tensor([0, 1],"float32"), )
paddle.nn.functional.mse_loss(input=Tensor([0, 1],"float32"), label=Tensor([2, 1],"float32"), )
paddle.nn.functional.mse_loss(input=Tensor([2, 0],"float32"), label=Tensor([2, 0],"float32"), )
paddle.nn.functional.mse_loss(input=Tensor([2, 0],"float32"), label=Tensor([2, 1],"float32"), )
paddle.nn.functional.mse_loss(input=Tensor([2, 1],"float32"), label=Tensor([0, 1],"float32"), )
paddle.nn.functional.mse_loss(input=Tensor([2, 1],"float32"), label=Tensor([2, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 1],"float32"), Tensor([4, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 10, 10],"float32"), Tensor([0, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([0, 10, 10],"float32"), Tensor([0, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 10, 10],"float32"), Tensor([0, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([0, 10, 10],"float32"), Tensor([2, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([0, 10, 10],"float32"), Tensor([2, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 10, 10],"float32"), Tensor([2, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([0, 10],"float32"), Tensor([10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([0, 10],"float32"), Tensor([10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 10],"float32"), Tensor([10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([0, 2],"float64"), label=Tensor([0, 2],"float64"), reduction="mean", name=None, )
paddle.nn.functional.mse_loss(Tensor([0, 2],"float64"), label=Tensor([5, 2],"float64"), reduction="mean", name=None, )
paddle.nn.functional.mse_loss(Tensor([0, 3, 10, 10],"float32"), Tensor([0, 3, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([0, 3, 10, 10],"float32"), Tensor([0, 3, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 3, 10, 10],"float32"), Tensor([0, 3, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([0, 3, 10, 10],"float32"), Tensor([3, 3, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([0, 3, 10, 10],"float32"), Tensor([3, 3, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([0, 3, 10, 10],"float32"), Tensor([3, 3, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([0, 96, 1],"float32"), Tensor([0, 96, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0, 96, 1],"float32"), Tensor([16, 96, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0, 96, 2],"float32"), Tensor([0, 96, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0, 96, 2],"float32"), Tensor([0, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([0, 96, 2],"float32"), Tensor([16, 96, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0, 96, 2],"float32"), Tensor([16, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([0, 96, 2],"float32"), Tensor([2, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0],"float32"), Tensor([1, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([0],"float32"), Tensor([8],"float32"), )
paddle.nn.functional.mse_loss(Tensor([1, 0],"float32"), Tensor([4, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 0],"float32"), Tensor([4, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 1],"float32"), Tensor([0, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 1],"float32"), Tensor([4, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1],"float32"), Tensor([0, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([1],"float32"), Tensor([1, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([10, 0],"float32"), Tensor([10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([10, 0],"float32"), Tensor([10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([10, 0],"float32"), Tensor([10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([16, 0, 1],"float32"), Tensor([16, 0, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 0, 1],"float32"), Tensor([16, 96, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 0, 2],"float32"), Tensor([16, 0, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 0, 2],"float32"), Tensor([16, 0, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([16, 0, 2],"float32"), Tensor([16, 96, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 0, 2],"float32"), Tensor([16, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([16, 96, 0],"float32"), Tensor([16, 96, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 0],"float32"), Tensor([16, 96, 0],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([16, 96, 0],"float32"), Tensor([16, 96, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 0],"float32"), Tensor([16, 96, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 0],"float32"), Tensor([16, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([16, 96, 1],"float32"), Tensor([0, 96, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 1],"float32"), Tensor([16, 0, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 1],"float32"), Tensor([16, 96, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 2],"float32"), Tensor([0, 96, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 2],"float32"), Tensor([0, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([16, 96, 2],"float32"), Tensor([16, 0, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 2],"float32"), Tensor([16, 0, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([16, 96, 2],"float32"), Tensor([16, 96, 0],"float32"), )
paddle.nn.functional.mse_loss(Tensor([16, 96, 2],"float32"), Tensor([16, 96, 0],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2, 0, 10],"float32"), Tensor([2, 0, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([2, 0, 10],"float32"), Tensor([2, 0, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 0, 10],"float32"), Tensor([2, 0, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 0, 10],"float32"), Tensor([2, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([2, 0, 10],"float32"), Tensor([2, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 0, 10],"float32"), Tensor([2, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 0, 2],"float32"), Tensor([2, 0, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2, 0, 2],"float32"), Tensor([2, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 0],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([0, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([0, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([0, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([2, 0, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([2, 0, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([2, 0, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([2, 10, 0],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([2, 10, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([2, 10, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 96, 0],"float32"), Tensor([2, 96, 0],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2, 96, 0],"float32"), Tensor([2, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2, 96, 2],"float32"), Tensor([0, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2, 96, 2],"float32"), Tensor([2, 0, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2, 96, 2],"float32"), Tensor([2, 96, 0],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([3, 0, 10, 10],"float32"), Tensor([3, 0, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 0, 10, 10],"float32"), Tensor([3, 0, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 0, 10, 10],"float32"), Tensor([3, 0, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 0, 10, 10],"float32"), Tensor([3, 3, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 0, 10, 10],"float32"), Tensor([3, 3, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 0, 10, 10],"float32"), Tensor([3, 3, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 0, 10],"float32"), Tensor([3, 3, 0, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 0, 10],"float32"), Tensor([3, 3, 0, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 0, 10],"float32"), Tensor([3, 3, 0, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 0, 10],"float32"), Tensor([3, 3, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 0, 10],"float32"), Tensor([3, 3, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 0, 10],"float32"), Tensor([3, 3, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 0],"float32"), Tensor([3, 3, 10, 0],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 0],"float32"), Tensor([3, 3, 10, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 0],"float32"), Tensor([3, 3, 10, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 0],"float32"), Tensor([3, 3, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 0],"float32"), Tensor([3, 3, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 0],"float32"), Tensor([3, 3, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([0, 3, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([0, 3, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([0, 3, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([3, 0, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([3, 0, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([3, 0, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([3, 3, 0, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([3, 3, 0, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([3, 3, 0, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([3, 3, 10, 0],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([3, 3, 10, 0],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 3, 10, 10],"float32"), Tensor([3, 3, 10, 0],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([5, 0],"float64"), label=Tensor([5, 0],"float64"), reduction="mean", name=None, )
paddle.nn.functional.mse_loss(Tensor([5, 0],"float64"), label=Tensor([5, 2],"float64"), reduction="mean", name=None, )
paddle.nn.functional.mse_loss(Tensor([5, 2],"float64"), label=Tensor([0, 2],"float64"), reduction="mean", name=None, )
paddle.nn.functional.mse_loss(Tensor([5, 2],"float64"), label=Tensor([5, 0],"float64"), reduction="mean", name=None, )
paddle.nn.functional.mse_loss(Tensor([8],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), reduction="mean", weight=Tensor([0, 5],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), reduction="none", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), reduction="sum", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), weight=Tensor([0, 5],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=Tensor([5, 5],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), reduction="none", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), reduction="sum", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), weight=Tensor([5, 5],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), reduction="mean", weight=Tensor([5, 0],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), reduction="none", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), reduction="sum", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), weight=Tensor([5, 0],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=Tensor([5, 5],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), reduction="none", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), reduction="sum", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), weight=Tensor([5, 5],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), reduction="mean", weight=Tensor([5, 5],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), reduction="none", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), reduction="sum", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), weight=Tensor([5, 5],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), reduction="mean", weight=Tensor([5, 5],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), reduction="none", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), reduction="sum", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), weight=Tensor([5, 5],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=Tensor([0, 5],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=Tensor([5, 0],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), weight=Tensor([0, 5],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), weight=Tensor([5, 0],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(input=Tensor([0, 2],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.multi_margin_loss(input=Tensor([0, 2],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", )
paddle.nn.functional.multi_margin_loss(input=Tensor([0, 2],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 0],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 0],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 0],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 2],"float64"), label=Tensor([0],"int64"), p=1, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 2],"float64"), label=Tensor([0],"int64"), p=1, margin=1.0, weight=None, reduction="none", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 2],"float64"), label=Tensor([0],"int64"), p=1, margin=1.0, weight=None, reduction="sum", )
paddle.nn.functional.multi_margin_loss(Tensor([0, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([0, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([0, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 0],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 0],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 0],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([0],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([0],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([0],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.npair_loss(Tensor([0, 6],"float32"), positive=Tensor([18, 6],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.npair_loss(Tensor([18, 0],"float32"), positive=Tensor([18, 6],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.npair_loss(Tensor([18, 6],"float32"), positive=Tensor([0, 6],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.npair_loss(Tensor([18, 6],"float32"), positive=Tensor([18, 0],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.npair_loss(Tensor([18, 6],"float32"), positive=Tensor([18, 6],"float32"), labels=Tensor([0],"float32"), l2_reg=0.002, )
paddle.nn.functional.pad(Tensor([0, 1, 1, 1],"float16"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 1, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([0, 1, 1, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 1, 1],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([0, 1, 1, 13],"float32"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 10, 21],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 100, 111],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 128, 128],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 129, 129],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 16, 16],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 2, 1],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 2, 2],"float32"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 2, 2],"float64"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 2, 3],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 2],"float32"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 2],"float64"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 3, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 3, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 3, 2],"float64"), pad=list[1,0,1,2,1,0,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 2, 3],"float64"), pad=list[1,0,1,2,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 256, 256],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([0, 1, 256, 256],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([0, 1, 3, 1600, 3],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 1, 3, 2],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 1, 3, 3, 1600],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 1, 3, 40, 40],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 1, 32, 128],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([0, 1, 40, 40, 3],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 1, 40, 40],"float32"), pad=list[0,0,2,2,], )
paddle.nn.functional.pad(Tensor([0, 1, 40, 40],"float32"), pad=list[2,2,0,0,], )
paddle.nn.functional.pad(Tensor([0, 1, 96],"float32"), pad=tuple(0,8,), mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 10, 32],"float64"), pad=list[0,0,0,1,0,0,], )
paddle.nn.functional.pad(Tensor([0, 12, 42, 512],"float32"), tuple(0,0,0,3,0,3,0,0,), )
paddle.nn.functional.pad(Tensor([0, 128, 16, 104],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 128, 16, 128],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([0, 128, 94, 70],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 14701, 3],"float32"), list[1,0,], value=4, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 14, 384],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 14, 384],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 15, 384],"float16"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 15, 384],"float16"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 15, 384],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 15, 384],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 16, 384],"float16"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 16, 384],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 17, 384],"float16"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 17, 384],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 18, 384],"float16"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 18, 384],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 19, 384],"float16"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 14, 19, 384],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 15, 14, 384],"float16"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 15, 14, 384],"float16"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 15, 14, 384],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 15, 14, 384],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 16, 14, 384],"float16"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 16, 14, 384],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 16, 64],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 18, 14, 384],"float16"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 18, 14, 384],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 31, 28, 192],"float16"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 31, 28, 192],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 16, 61, 56, 96],"float32"), tuple(0,0,0,2,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 160, 120, 96],"float32"), list[0,0,0,1,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 160000, 1],"float64"), pad=list[256,256,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 17980, 3],"float32"), list[1,0,], value=3, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 192, 144, 192],"float32"), list[0,0,0,0,0,0,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 19780, 3],"float32"), list[1,0,], value=2, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 2, 1],"float32"), pad=list[0,0,0,0,1,0,], mode="constant", value=1.0, )
paddle.nn.functional.pad(Tensor([0, 2, 2, 2, 2],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3, 1],"float64"), pad=list[1,1,1,0,], mode="reflect", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3, 4],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float32"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float32"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float32"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float32"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float64"), pad=list[1,1,], mode="reflect", value=0.0, data_format="NLC", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float64"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NLC", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float64"), pad=list[2,1,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 2, 3],"float64"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 20, 15, 768],"float32"), list[0,0,0,1,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 20524, 3],"float32"), list[1,0,], value=1, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 21955, 3],"float32"), list[1,0,], value=0, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 22071, 3],"float32"), list[1,0,], value=7, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 24, 18, 1536],"float32"), list[0,0,0,0,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 24, 84, 256],"float32"), tuple(0,0,0,1,0,1,0,0,), )
paddle.nn.functional.pad(Tensor([0, 25, 3],"float32"), list[0,1,], "constant", 1.0, data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 25500, 1],"float32"), pad=list[1024,1024,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 25500, 1],"float32"), pad=list[256,256,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 25500, 1],"float32"), pad=list[512,512,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 256, 64, 64],"float32"), pad=list[1,1,1,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 25757, 3],"float32"), list[1,0,], value=5, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 27860, 3],"float32"), list[1,0,], value=6, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 3, 100, 100],"float32"), pad=list[1,2,3,4,], mode="reflect", value=0.0, data_format="NCHW", name="shape", )
paddle.nn.functional.pad(Tensor([0, 3, 140, 160],"float64"), pad=list[40,40,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 140, 240],"float64"), pad=list[0,0,40,40,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 180, 200],"float64"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 184, 204],"float64"), pad=list[52,52,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 184, 308],"float64"), pad=list[0,0,40,40,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 200, 150],"float64"), pad=list[1,1,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 200, 150],"float64"), pad=list[10,10,10,10,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 204, 152],"float64"), pad=list[1,3,2,4,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 210, 156],"float64"), pad=list[1,1,1,1,], mode="replicate", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 224, 224],"float32"), list[0,1,0,0,], )
paddle.nn.functional.pad(Tensor([0, 3, 256, 256],"float32"), list[14,14,14,14,], )
paddle.nn.functional.pad(Tensor([0, 3, 256, 256],"float32"), list[6,6,6,6,], )
paddle.nn.functional.pad(Tensor([0, 3, 256, 256],"float32"), pad=list[3,3,3,3,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 3, 28, 24],"float32"), pad=list[1,1,1,1,], mode="reflect", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 28, 24],"float32"), pad=list[1,1,2,2,], mode="reflect", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 280, 350],"float32"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 32, 224, 231],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 32, 224, 238],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 32, 224, 258],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 32, 224, 271],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 32, 224, 297],"float32"), tuple(0,3,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 32, 239, 224],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 32, 242, 224],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 32, 245, 224],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 32, 32],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4],"float32"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4],"float32"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4],"float32"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4],"float64"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4],"float64"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 4],"float64"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,5,6,], mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,5,6,], mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([0, 3, 4],"float32"), list[1,1,], mode="circular", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 3, 4],"float32"), list[1,1,], mode="reflect", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 3, 4],"float32"), list[1,1,], mode="replicate", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 3, 4],"float64"), list[1,1,], mode="circular", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 3, 4],"float64"), list[1,1,], mode="reflect", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 3, 4],"float64"), list[1,1,], mode="replicate", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 3, 6, 6, 6],"float32"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 3, 6, 6, 6],"float64"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 3, 686, 1024],"float32"), tuple(0,0,0,338,), )
paddle.nn.functional.pad(Tensor([0, 32, 32, 32],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 32, 32, 768],"float32"), tuple(0,0,0,10,0,10,0,0,), )
paddle.nn.functional.pad(Tensor([0, 4, 32],"float32"), list[0,0,0,3,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex128"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex64"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex128"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex128"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex128"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex128"), pad=list[1,2,2,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex128"), pad=list[1,2,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex64"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex64"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex64"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex64"), pad=list[1,2,2,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5, 6],"complex64"), pad=list[1,2,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=list[1,1,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=list[1,2,], mode="circular", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=list[1,2,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex128"), pad=list[3,4,5,6,7,8,], mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=list[1,1,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=list[1,2,], mode="circular", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=list[1,2,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 4, 5],"complex64"), pad=list[3,4,5,6,7,8,], mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 40, 30, 384],"float32"), list[0,0,0,2,0,5,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 4410, 1],"float32"), pad=list[200,200,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 48, 168, 128],"float32"), tuple(0,0,0,2,0,2,0,0,), )
paddle.nn.functional.pad(Tensor([0, 48, 36, 768],"float32"), list[0,0,0,0,0,0,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 48, 48, 768],"float32"), tuple(0,0,0,8,0,8,0,0,), )
paddle.nn.functional.pad(Tensor([0, 48, 8, 8],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([0, 5551, 3],"float32"), list[1,0,], value=3, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 6, 21, 1024],"float32"), tuple(0,0,0,4,0,4,0,0,), )
paddle.nn.functional.pad(Tensor([0, 6, 32],"float32"), list[0,0,0,1,0,0,], value=0, )
paddle.nn.functional.pad(Tensor([0, 6, 32],"float32"), list[0,0,1,0,0,0,], value=0, )
paddle.nn.functional.pad(Tensor([0, 6, 6],"float32"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 6, 6],"float64"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([0, 6],"float32"), list[1,0,1,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 112],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 112],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 128],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 128],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 16],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([0, 64, 16, 16],"float32"), pad=tuple(1,1,1,1,), mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 64, 188, 140],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 64, 256, 256],"float32"), pad=list[3,3,3,3,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 64, 3],"float32"), tuple(1,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 64, 7],"float32"), tuple(-3,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 7, 16],"float32"), pad=list[1,1,], data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 7485, 3],"float32"), list[1,0,], value=2, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 7974, 3],"float32"), list[1,0,], value=1, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0, 79949, 1],"float32"), pad=list[200,200,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 8, 14, 12],"float32"), pad=list[1,0,1,2,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([0, 80, 60, 192],"float32"), list[0,0,0,4,0,3,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([0, 80],"float32"), list[0,2501,0,0,], data_format="NLC", )
paddle.nn.functional.pad(Tensor([0, 8141, 3],"float32"), list[1,0,], value=0, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([0],"float32"), list[0,1,], value=1, )
paddle.nn.functional.pad(Tensor([0],"float32"), list[1,0,], value=1, )
paddle.nn.functional.pad(Tensor([0],"float32"), pad=list[136,136,], mode="constant", )
paddle.nn.functional.pad(Tensor([0],"float32"), pad=list[212,212,], mode="constant", )
paddle.nn.functional.pad(Tensor([0],"float32"), pad=list[424,424,], mode="constant", )
paddle.nn.functional.pad(Tensor([0],"float64"), list[0,1,], value=1, )
paddle.nn.functional.pad(Tensor([0],"float64"), list[1,0,], value=1, )
paddle.nn.functional.pad(Tensor([0],"float64"), pad=list[106,107,], mode="constant", )
paddle.nn.functional.pad(Tensor([0],"float64"), pad=list[6,7,], mode="constant", )
paddle.nn.functional.pad(Tensor([1, 0, 1, 1],"float16"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 1, 13],"float32"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 1],"float32"), pad=list[0,0,0,0,1,0,], mode="constant", value=1.0, )
paddle.nn.functional.pad(Tensor([1, 0, 1],"float32"), pad=list[200,200,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([1, 0, 1],"float64"), pad=list[256,256,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([1, 0, 10, 21],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 100, 111],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 120, 96],"float32"), list[0,0,0,1,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 12],"float32"), pad=list[1,0,1,2,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 14, 14, 384],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 14, 384],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 15, 384],"float16"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 15, 384],"float16"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 15, 384],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 15, 384],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 16, 384],"float16"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 16, 384],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 17, 384],"float16"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 17, 384],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 18, 384],"float16"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 18, 384],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 19, 384],"float16"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 14, 19, 384],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 140, 160],"float64"), pad=list[40,40,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 140, 240],"float64"), pad=list[0,0,40,40,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 144, 192],"float32"), list[0,0,0,0,0,0,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 15, 14, 384],"float16"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 15, 14, 384],"float16"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 15, 14, 384],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 15, 14, 384],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 15, 768],"float32"), list[0,0,0,1,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 16, 14, 384],"float16"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 16, 14, 384],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 18, 14, 384],"float16"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 18, 14, 384],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 18, 1536],"float32"), list[0,0,0,0,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 180, 200],"float64"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 184, 204],"float64"), pad=list[52,52,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 184, 308],"float64"), pad=list[0,0,40,40,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 2, 1],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 2, 2],"float32"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 2, 2],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 2, 2],"float64"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 2, 3],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 2],"float32"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 2],"float64"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 3, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 3, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 3, 2],"float64"), pad=list[1,0,1,2,1,0,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 2, 3],"float64"), pad=list[1,0,1,2,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 200, 150],"float64"), pad=list[1,1,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 200, 150],"float64"), pad=list[10,10,10,10,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 204, 152],"float64"), pad=list[1,3,2,4,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 210, 156],"float64"), pad=list[1,1,1,1,], mode="replicate", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 224, 224],"float32"), list[0,1,0,0,], )
paddle.nn.functional.pad(Tensor([1, 0, 256, 256],"float32"), pad=list[3,3,3,3,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 28, 24],"float32"), pad=list[1,1,1,1,], mode="reflect", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 28, 24],"float32"), pad=list[1,1,2,2,], mode="reflect", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 280, 350],"float32"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 0, 3, 1],"float64"), pad=list[1,1,1,0,], mode="reflect", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3, 2],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3, 4],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), list[1,0,], value=0, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), list[1,0,], value=1, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), list[1,0,], value=2, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), list[1,0,], value=3, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), list[1,0,], value=4, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), list[1,0,], value=5, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), list[1,0,], value=6, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), list[1,0,], value=7, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float32"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float64"), pad=list[1,1,], mode="reflect", value=0.0, data_format="NLC", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float64"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NLC", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float64"), pad=list[2,1,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 3],"float64"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 30, 384],"float32"), list[0,0,0,2,0,5,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 31, 28, 192],"float16"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 31, 28, 192],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 224, 231],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 224, 238],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 224, 258],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 224, 271],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 224, 297],"float32"), tuple(0,3,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 239, 224],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 242, 224],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 32, 245, 224],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 0, 32],"float64"), pad=list[0,0,0,1,0,0,], )
paddle.nn.functional.pad(Tensor([1, 0, 36, 768],"float32"), list[0,0,0,0,0,0,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 60, 192],"float32"), list[0,0,0,4,0,3,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 61, 56, 96],"float32"), tuple(0,0,0,2,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 0, 64, 64],"float32"), pad=list[1,1,1,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 0, 686, 1024],"float32"), tuple(0,0,0,338,), )
paddle.nn.functional.pad(Tensor([1, 1, 0, 1],"float16"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 1],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 111],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 13],"float32"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 2, 2],"float32"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 2, 2],"float64"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 2, 3],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 2],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 2],"float32"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 2],"float64"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 21],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 3, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 3, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 3, 2],"float64"), pad=list[1,0,1,2,1,0,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 0, 3],"float64"), pad=list[1,0,1,2,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 1, 0],"float16"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 1, 0],"float32"), pad=list[0,0,0,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 10, 0],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 100, 0],"float32"), pad=list[0,1,0,0,], mode="constant", value=-10000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0, 2],"float32"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0, 2],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0, 2],"float64"), pad=list[1,0,1,2,1,0,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0, 2],"float64"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0, 3],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0],"float32"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0],"float64"), pad=list[1,0,1,2,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 0],"float64"), pad=list[2,2,2,2,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2, 0],"float32"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2, 0],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 2, 0],"float64"), pad=list[2,2,2,2,2,2,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 3, 0],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 3, 0],"float64"), pad=list[1,0,1,0,0,1,], mode="replicate", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 2, 3, 0],"float64"), pad=list[1,0,1,2,1,0,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 1, 3, 0],"float32"), pad=list[0,1,0,0,], mode="constant", value=-1000000.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 10, 0],"float64"), pad=list[0,0,0,1,0,0,], )
paddle.nn.functional.pad(Tensor([1, 14701, 0],"float32"), list[1,0,], value=4, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float16"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float16"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float16"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float16"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 14, 384],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 15, 384],"float16"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 15, 384],"float16"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 15, 384],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 15, 384],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 16, 384],"float16"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 16, 384],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 17, 384],"float16"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 17, 384],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 18, 384],"float16"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 18, 384],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 19, 384],"float16"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 19, 384],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 28, 192],"float16"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 28, 192],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 0, 56, 96],"float32"), tuple(0,0,0,2,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float16"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float16"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float16"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float16"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float16"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float16"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 0, 384],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 14, 0],"float16"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 14, 0],"float32"), tuple(0,0,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 15, 0],"float16"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 15, 0],"float16"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 15, 0],"float32"), tuple(0,1,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 15, 0],"float32"), tuple(0,6,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 16, 0],"float16"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 16, 0],"float32"), tuple(0,5,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 17, 0],"float16"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 17, 0],"float32"), tuple(0,4,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 18, 0],"float16"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 18, 0],"float32"), tuple(0,3,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 19, 0],"float16"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 14, 19, 0],"float32"), tuple(0,2,0,0,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 0, 384],"float16"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 0, 384],"float16"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 0, 384],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 0, 384],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 14, 0],"float16"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 14, 0],"float16"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 14, 0],"float32"), tuple(0,0,0,1,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 15, 14, 0],"float32"), tuple(0,0,0,6,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 16, 0, 384],"float16"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 16, 0, 384],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 16, 14, 0],"float16"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 16, 14, 0],"float32"), tuple(0,0,0,5,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 18, 0, 384],"float16"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 18, 0, 384],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 18, 14, 0],"float16"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 18, 14, 0],"float32"), tuple(0,0,0,3,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 31, 0, 192],"float16"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 31, 0, 192],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 31, 28, 0],"float16"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 31, 28, 0],"float32"), tuple(0,0,0,4,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 61, 0, 96],"float32"), tuple(0,0,0,2,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 16, 61, 56, 0],"float32"), tuple(0,0,0,2,0,0,), data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 160, 0, 96],"float32"), list[0,0,0,1,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 160, 120, 0],"float32"), list[0,0,0,1,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 160000, 0],"float64"), pad=list[256,256,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([1, 17980, 0],"float32"), list[1,0,], value=3, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 192, 0, 192],"float32"), list[0,0,0,0,0,0,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 192, 144, 0],"float32"), list[0,0,0,0,0,0,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 19780, 0],"float32"), list[1,0,], value=2, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 2, 0, 1],"float64"), pad=list[1,1,1,0,], mode="reflect", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0, 2, 2],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0, 4],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float32"), pad=list[0,0,0,0,1,0,], mode="constant", value=1.0, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float32"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float32"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float32"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float32"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float64"), pad=list[1,1,], mode="reflect", value=0.0, data_format="NLC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float64"), pad=list[1,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float64"), pad=list[1,2,], mode="reflect", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float64"), pad=list[1,2,], mode="replicate", value=0.0, data_format="NLC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float64"), pad=list[2,1,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 0],"float64"), pad=list[2,2,], mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 2, 0, 2],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 2, 2, 0],"float64"), pad=list[1,1,1,0,1,0,], mode="reflect", value=0.0, data_format="NDHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"complex128"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0, 5],"complex64"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0],"float64"), pad=list[1,1,1,0,], mode="reflect", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 0],"float64"), pad=list[2,1,2,1,], mode="replicate", value=0.0, data_format="NHWC", name=None, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"complex128"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"complex128"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"complex64"), pad=list[1,2,1,1,3,4,], mode="constant", value=100, data_format="NDHWC", )
paddle.nn.functional.pad(Tensor([1, 2, 3, 4, 0],"complex64"), pad=list[1,2,1,1,3,4,5,6,7,8,], mode="constant", value=100, data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 20, 0, 768],"float32"), list[0,0,0,1,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 20, 15, 0],"float32"), list[0,0,0,1,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 20524, 0],"float32"), list[1,0,], value=1, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 21955, 0],"float32"), list[1,0,], value=0, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 22071, 0],"float32"), list[1,0,], value=7, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 24, 0, 1536],"float32"), list[0,0,0,0,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 24, 18, 0],"float32"), list[0,0,0,0,0,6,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 256, 0, 64],"float32"), pad=list[1,1,1,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 256, 64, 0],"float32"), pad=list[1,1,1,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 25757, 0],"float32"), list[1,0,], value=5, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 27860, 0],"float32"), list[1,0,], value=6, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 1024],"float32"), tuple(0,0,0,338,), )
paddle.nn.functional.pad(Tensor([1, 3, 0, 150],"float64"), pad=list[1,1,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 150],"float64"), pad=list[10,10,10,10,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 152],"float64"), pad=list[1,3,2,4,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 156],"float64"), pad=list[1,1,1,1,], mode="replicate", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 160],"float64"), pad=list[40,40,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 200],"float64"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 204],"float64"), pad=list[52,52,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 224, 231],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 224, 238],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 224, 258],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 224, 271],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 224, 297],"float32"), tuple(0,3,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 224],"float32"), list[0,1,0,0,], )
paddle.nn.functional.pad(Tensor([1, 3, 0, 239, 224],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 24],"float32"), pad=list[1,1,1,1,], mode="reflect", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 24],"float32"), pad=list[1,1,2,2,], mode="reflect", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 240],"float64"), pad=list[0,0,40,40,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 242, 224],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 245, 224],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 256],"float32"), pad=list[3,3,3,3,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 3, 0, 308],"float64"), pad=list[0,0,40,40,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 0, 350],"float32"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 140, 0],"float64"), pad=list[0,0,40,40,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 140, 0],"float64"), pad=list[40,40,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 180, 0],"float64"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 184, 0],"float64"), pad=list[0,0,40,40,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 184, 0],"float64"), pad=list[52,52,0,0,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 200, 0],"float64"), pad=list[1,1,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 200, 0],"float64"), pad=list[10,10,10,10,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 204, 0],"float64"), pad=list[1,3,2,4,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 210, 0],"float64"), pad=list[1,1,1,1,], mode="replicate", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 224, 0],"float32"), list[0,1,0,0,], )
paddle.nn.functional.pad(Tensor([1, 3, 256, 0],"float32"), pad=list[3,3,3,3,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 3, 28, 0],"float32"), pad=list[1,1,1,1,], mode="reflect", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 28, 0],"float32"), pad=list[1,1,2,2,], mode="reflect", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 280, 0],"float32"), pad=list[2,2,2,2,], mode="constant", value=0.0, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 0, 224],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 0, 224],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 0, 224],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 0, 231],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 0, 238],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 0, 258],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 0, 271],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 0, 297],"float32"), tuple(0,3,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 224, 0],"float32"), tuple(0,1,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 224, 0],"float32"), tuple(0,2,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 224, 0],"float32"), tuple(0,3,0,0,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 239, 0],"float32"), tuple(0,0,0,1,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 242, 0],"float32"), tuple(0,0,0,2,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 32, 245, 0],"float32"), tuple(0,0,0,3,0,0,), data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([1, 3, 686, 0],"float32"), tuple(0,0,0,338,), )
paddle.nn.functional.pad(Tensor([1, 40, 0, 384],"float32"), list[0,0,0,2,0,5,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 40, 30, 0],"float32"), list[0,0,0,2,0,5,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 4410, 0],"float32"), pad=list[200,200,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([1, 48, 0, 768],"float32"), list[0,0,0,0,0,0,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 48, 36, 0],"float32"), list[0,0,0,0,0,0,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 5551, 0],"float32"), list[1,0,], value=3, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 64, 0, 256],"float32"), pad=list[3,3,3,3,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 64, 256, 0],"float32"), pad=list[3,3,3,3,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 7485, 0],"float32"), list[1,0,], value=2, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 7974, 0],"float32"), list[1,0,], value=1, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([1, 79949, 0],"float32"), pad=list[200,200,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([1, 8, 0, 12],"float32"), pad=list[1,0,1,2,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 8, 14, 0],"float32"), pad=list[1,0,1,2,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([1, 80, 0, 192],"float32"), list[0,0,0,4,0,3,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 80, 60, 0],"float32"), list[0,0,0,4,0,3,0,0,], data_format="NHWC", )
paddle.nn.functional.pad(Tensor([1, 8141, 0],"float32"), list[1,0,], value=0, mode="constant", data_format="NCL", )
paddle.nn.functional.pad(Tensor([10, 0, 16, 104],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([10, 0, 16, 112],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([10, 0, 16, 128],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([10, 0, 16, 128],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([10, 128, 0, 104],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([10, 128, 0, 128],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([10, 128, 16, 0],"float32"), Tensor([4],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([10, 128, 16, 104],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([10, 128, 16, 128],"float32"), Tensor([0],"int32"), value=0, )
paddle.nn.functional.pad(Tensor([10, 64, 0, 112],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([10, 64, 0, 128],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([10, 64, 16, 0],"float32"), Tensor([4],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([10, 64, 16, 112],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([10, 64, 16, 128],"float32"), Tensor([0],"int32"), value=-math.inf, )
paddle.nn.functional.pad(Tensor([1024, 0, 1, 1],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([1024, 0, 129, 129],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 0, 256, 256],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 0, 256, 256],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([1024, 1, 0, 1],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([1024, 1, 0, 129],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 1, 0, 256],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 1, 0, 256],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([1024, 1, 1, 0],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([1024, 1, 129, 0],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 1, 256, 0],"float32"), list[1,1,1,1,], )
paddle.nn.functional.pad(Tensor([1024, 1, 256, 0],"float32"), list[2,2,2,2,], )
paddle.nn.functional.pad(Tensor([1048576, 0, 1, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([1048576, 1, 0, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([1048576, 1, 1, 0],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([1183744, 0, 1, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([1183744, 1, 0, 1],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([1183744, 1, 1, 0],"float32"), list[0,0,0,0,], )
paddle.nn.functional.pad(Tensor([12, 0, 128, 128],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 0, 16, 16],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 0, 16, 64],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 0, 32, 32],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 1, 0, 128],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 1, 0, 16],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 1, 128, 0],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 1, 16, 0],"float32"), list[2,1,2,1,], )
paddle.nn.functional.pad(Tensor([12, 16, 0, 64],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 16, 16, 0],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 32, 0, 32],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12, 32, 32, 0],"float32"), tuple(0,0,0,0,), data_format="NHWC", )
paddle.nn.functional.pad(Tensor([12288, 0, 1, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([12288, 1, 0, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([12288, 1, 1, 0],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([13, 0, 16],"float32"), pad=list[1,1,], data_format="NLC", )
paddle.nn.functional.pad(Tensor([13, 0, 3],"float32"), tuple(1,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([13, 0, 32],"float32"), list[0,0,0,1,0,0,], value=0, )
paddle.nn.functional.pad(Tensor([13, 0, 32],"float32"), list[0,0,0,3,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([13, 0, 32],"float32"), list[0,0,1,0,0,0,], value=0, )
paddle.nn.functional.pad(Tensor([13, 0, 7],"float32"), tuple(-3,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([13, 0, 96],"float32"), pad=tuple(0,8,), mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([13, 1, 0],"float32"), pad=tuple(0,8,), mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([13, 4, 0],"float32"), list[0,0,0,3,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([13, 6, 0],"float32"), list[0,0,0,1,0,0,], value=0, )
paddle.nn.functional.pad(Tensor([13, 6, 0],"float32"), list[0,0,1,0,0,0,], value=0, )
paddle.nn.functional.pad(Tensor([13, 64, 0],"float32"), tuple(1,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([13, 64, 0],"float32"), tuple(-3,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([13, 7, 0],"float32"), pad=list[1,1,], data_format="NLC", )
paddle.nn.functional.pad(Tensor([14, 0, 7],"float32"), tuple(-3,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([14, 64, 0],"float32"), tuple(-3,0,), data_format="NCL", )
paddle.nn.functional.pad(Tensor([1536, 0, 1, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([1536, 1, 0, 1],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([1536, 1, 1, 0],"float32"), list[0,1,0,1,], )
paddle.nn.functional.pad(Tensor([16, 0, 1],"float32"), pad=list[1024,1024,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([16, 0, 1],"float32"), pad=list[256,256,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([16, 0, 1],"float32"), pad=list[512,512,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([16, 0, 256, 256],"float32"), list[14,14,14,14,], )
paddle.nn.functional.pad(Tensor([16, 0, 256, 256],"float32"), list[6,6,6,6,], )
paddle.nn.functional.pad(Tensor([16, 0, 96],"float32"), pad=tuple(0,8,), mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([16, 1, 0],"float32"), pad=tuple(0,8,), mode="replicate", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([16, 25500, 0],"float32"), pad=list[1024,1024,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([16, 25500, 0],"float32"), pad=list[256,256,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([16, 25500, 0],"float32"), pad=list[512,512,], mode="reflect", data_format="NLC", )
paddle.nn.functional.pad(Tensor([16, 3, 0, 256],"float32"), list[14,14,14,14,], )
paddle.nn.functional.pad(Tensor([16, 3, 0, 256],"float32"), list[6,6,6,6,], )
paddle.nn.functional.pad(Tensor([16, 3, 256, 0],"float32"), list[14,14,14,14,], )
paddle.nn.functional.pad(Tensor([16, 3, 256, 0],"float32"), list[6,6,6,6,], )
paddle.nn.functional.pad(Tensor([2, 0, 1],"float32"), pad=list[0,0,0,0,1,0,], mode="constant", value=1.0, )
paddle.nn.functional.pad(Tensor([2, 0, 100, 100],"float32"), pad=list[1,2,3,4,], mode="reflect", value=0.0, data_format="NCHW", name="shape", )
paddle.nn.functional.pad(Tensor([2, 0, 16, 16],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([2, 0, 32, 32],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4],"float32"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4],"float32"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4],"float32"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4],"float64"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4],"float64"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 4],"float64"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex128"), pad=list[1,2,1,1,3,4,5,6,], mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4, 5],"complex64"), pad=list[1,2,1,1,3,4,5,6,], mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 0, 4],"float32"), list[1,1,], mode="circular", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 0, 4],"float32"), list[1,1,], mode="reflect", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 0, 4],"float32"), list[1,1,], mode="replicate", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 0, 4],"float64"), list[1,1,], mode="circular", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 0, 4],"float64"), list[1,1,], mode="reflect", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 0, 4],"float64"), list[1,1,], mode="replicate", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 0, 8, 8],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([2, 2, 0],"float32"), pad=list[0,0,0,0,1,0,], mode="constant", value=1.0, )
paddle.nn.functional.pad(Tensor([2, 3, 0, 100],"float32"), pad=list[1,2,3,4,], mode="reflect", value=0.0, data_format="NCHW", name="shape", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 32],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4, 4],"float32"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4, 4],"float64"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4],"float32"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4],"float32"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4],"float32"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4],"float64"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4],"float64"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 4],"float64"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex128"), pad=list[1,2,1,1,3,4,5,6,], mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0, 5],"complex64"), pad=list[1,2,1,1,3,4,5,6,], mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 0],"float32"), list[1,1,], mode="circular", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 0],"float32"), list[1,1,], mode="reflect", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 0],"float32"), list[1,1,], mode="replicate", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 0],"float64"), list[1,1,], mode="circular", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 0],"float64"), list[1,1,], mode="reflect", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 0],"float64"), list[1,1,], mode="replicate", data_format="NCL", )
paddle.nn.functional.pad(Tensor([2, 3, 100, 0],"float32"), pad=list[1,2,3,4,], mode="reflect", value=0.0, data_format="NCHW", name="shape", )
paddle.nn.functional.pad(Tensor([2, 3, 32, 0],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0, 4],"float32"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0, 4],"float32"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0, 4],"float32"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0, 4],"float64"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0, 4],"float64"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0, 4],"float64"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex128"), pad=list[1,2,1,1,3,4,5,6,], mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"complex64"), pad=list[1,2,1,1,3,4,5,6,], mode="constant", value=100, data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float32"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float32"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float32"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float64"), list[1,1,1,1,], mode="circular", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float64"), list[1,1,1,1,], mode="reflect", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 0],"float64"), list[1,1,1,1,], mode="replicate", data_format="NCHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 0],"float32"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 0],"float32"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 0],"float32"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 0],"float64"), list[1,1,1,1,1,1,], mode="circular", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 0],"float64"), list[1,1,1,1,1,1,], mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 3, 4, 4, 0],"float64"), list[1,1,1,1,1,1,], mode="replicate", data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([2, 48, 0, 8],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([2, 48, 8, 0],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([2, 64, 0, 16],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([2, 64, 16, 0],"float32"), list[0,1,0,1,], value=0, )
paddle.nn.functional.pad(Tensor([3, 0, 16, 16],"float32"), pad=tuple(1,1,1,1,), mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 3, 1600, 3],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 0, 3, 3, 1600],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 0, 3, 40, 40],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 0, 40, 40, 3],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 0, 40, 40],"float32"), pad=list[0,0,2,2,], )
paddle.nn.functional.pad(Tensor([3, 0, 40, 40],"float32"), pad=list[2,2,0,0,], )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex128"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex64"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex128"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex128"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex128"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex128"), pad=list[1,2,2,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex128"), pad=list[1,2,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex64"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex64"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex64"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex64"), pad=list[1,2,2,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5, 6],"complex64"), pad=list[1,2,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=list[1,1,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=list[1,2,], mode="circular", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=list[1,2,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex128"), pad=list[3,4,5,6,7,8,], mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=list[1,1,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=list[1,2,], mode="circular", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=list[1,2,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 0, 5],"complex64"), pad=list[3,4,5,6,7,8,], mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 1, 0, 1600, 3],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 0, 3, 1600],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 0, 40, 3],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 0, 40, 40],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 0, 40],"float32"), pad=list[0,0,2,2,], )
paddle.nn.functional.pad(Tensor([3, 1, 0, 40],"float32"), pad=list[2,2,0,0,], )
paddle.nn.functional.pad(Tensor([3, 1, 3, 0, 1600],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 3, 0, 3],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 3, 0, 40],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 3, 1600, 0],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 3, 3, 0],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 3, 40, 0],"float32"), pad=list[0,0,0,0,2,2,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 40, 0, 3],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 1, 40, 0],"float32"), pad=list[0,0,2,2,], )
paddle.nn.functional.pad(Tensor([3, 1, 40, 0],"float32"), pad=list[2,2,0,0,], )
paddle.nn.functional.pad(Tensor([3, 1, 40, 40, 0],"float32"), pad=list[2,2,0,0,0,0,], data_format="NCDHW", )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex128"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex64"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex128"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex128"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex128"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex128"), pad=list[1,2,2,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex128"), pad=list[1,2,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex64"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex64"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex64"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex64"), pad=list[1,2,2,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0, 6],"complex64"), pad=list[1,2,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=list[1,1,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=list[1,2,], mode="circular", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=list[1,2,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex128"), pad=list[3,4,5,6,7,8,], mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=list[1,1,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=list[1,2,], mode="circular", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=list[1,2,], mode="constant", value=100, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 0],"complex64"), pad=list[3,4,5,6,7,8,], mode="constant", value=100, data_format="NCL", )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex128"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex128"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex64"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0, 7],"complex64"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex128"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex128"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex128"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex128"), pad=list[1,2,2,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex128"), pad=list[1,2,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex64"), pad=list[1,1,1,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex64"), pad=list[1,2,2,1,], mode="circular", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex64"), pad=list[1,2,2,1,], mode="constant", value=100, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex64"), pad=list[1,2,2,1,], mode="reflect", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 0],"complex64"), pad=list[1,2,2,1,], mode="replicate", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex128"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex128"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex128"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex128"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex128"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex64"), pad=list[1,1,1,1,1,1,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex64"), pad=list[1,2,2,1,1,0,], mode="circular", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex64"), pad=list[1,2,2,1,1,0,], mode="constant", value=100, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex64"), pad=list[1,2,2,1,1,0,], mode="reflect", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 4, 5, 6, 0],"complex64"), pad=list[1,2,2,1,1,0,], mode="replicate", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 64, 0, 16],"float32"), pad=tuple(1,1,1,1,), mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([3, 64, 16, 0],"float32"), pad=tuple(1,1,1,1,), mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([30, 0, 16, 112],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([30, 0, 16, 128],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([30, 0, 32, 128],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([30, 1, 0, 128],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([30, 1, 32, 0],"float32"), list[2,3,2,3,], value=0, )
paddle.nn.functional.pad(Tensor([30, 64, 0, 112],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([30, 64, 0, 128],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([30, 64, 16, 0],"float32"), list[0,1,0,1,], value=-math.inf, )
paddle.nn.functional.pad(Tensor([4, 0, 188, 140],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 32, 768],"float32"), tuple(0,0,0,10,0,10,0,0,), )
paddle.nn.functional.pad(Tensor([4, 0, 6, 6, 6],"float32"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6, 6, 6],"float64"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6],"float32"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 6],"float64"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 0, 94, 70],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 128, 0, 70],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 128, 94, 0],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 0, 6, 6],"float32"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 0, 6, 6],"float64"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 0, 6],"float32"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 0, 6],"float64"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 0],"float32"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 3, 6, 6, 0],"float64"), pad=list[2,2,2,2,2,2,], mode="constant", value=0.0, data_format="NCDHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 32, 0, 768],"float32"), tuple(0,0,0,10,0,10,0,0,), )
paddle.nn.functional.pad(Tensor([4, 32, 32, 0],"float32"), tuple(0,0,0,10,0,10,0,0,), )
paddle.nn.functional.pad(Tensor([4, 6, 0],"float32"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 6, 0],"float64"), pad=list[2,2,], mode="constant", value=0.0, data_format="NCL", name=None, )
paddle.nn.functional.pad(Tensor([4, 64, 0, 140],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([4, 64, 188, 0],"float32"), pad=list[1,1,1,1,], mode="constant", value=0.0, data_format="NCHW", name=None, )
paddle.nn.functional.pad(Tensor([421120, 0, 3],"float32"), list[0,1,], "constant", 1.0, data_format="NCL", )
paddle.nn.functional.pad(Tensor([421120, 25, 0],"float32"), list[0,1,], "constant", 1.0, data_format="NCL", )
paddle.nn.functional.pad(Tensor([499, 0],"float32"), list[0,2501,0,0,], data_format="NLC", )
paddle.nn.functional.pad(Tensor([5, 0, 48, 768],"float32"), tuple(0,0,0,8,0,8,0,0,), )
paddle.nn.functional.pad(Tensor([5, 48, 0, 768],"float32"), tuple(0,0,0,8,0,8,0,0,), )
paddle.nn.functional.pad(Tensor([5, 48, 48, 0],"float32"), tuple(0,0,0,8,0,8,0,0,), )
paddle.nn.functional.pad(Tensor([52, 0, 16],"float32"), pad=list[1,1,], data_format="NLC", )
paddle.nn.functional.pad(Tensor([52, 7, 0],"float32"), pad=list[1,1,], data_format="NLC", )
paddle.nn.functional.pad(Tensor([6, 0],"float32"), list[1,0,1,0,], mode="constant", value=0, )
paddle.nn.functional.pad(Tensor([7, 0, 168, 128],"float32"), tuple(0,0,0,2,0,2,0,0,), )
paddle.nn.functional.pad(Tensor([7, 0, 21, 1024],"float32"), tuple(0,0,0,4,0,4,0,0,), )
paddle.nn.functional.pad(Tensor([7, 0, 42, 512],"float32"), tuple(0,0,0,3,0,3,0,0,), )
paddle.nn.functional.pad(Tensor([7, 0, 84, 256],"float32"), tuple(0,0,0,1,0,1,0,0,), )
paddle.nn.functional.pad(Tensor([7, 12, 0, 512],"float32"), tuple(0,0,0,3,0,3,0,0,), )
paddle.nn.functional.pad(Tensor([7, 12, 42, 0],"float32"), tuple(0,0,0,3,0,3,0,0,), )
paddle.nn.functional.pad(Tensor([7, 24, 0, 256],"float32"), tuple(0,0,0,1,0,1,0,0,), )
paddle.nn.functional.pad(Tensor([7, 24, 84, 0],"float32"), tuple(0,0,0,1,0,1,0,0,), )
paddle.nn.functional.pad(Tensor([7, 48, 0, 128],"float32"), tuple(0,0,0,2,0,2,0,0,), )
paddle.nn.functional.pad(Tensor([7, 48, 168, 0],"float32"), tuple(0,0,0,2,0,2,0,0,), )
paddle.nn.functional.pad(Tensor([7, 6, 0, 1024],"float32"), tuple(0,0,0,4,0,4,0,0,), )
paddle.nn.functional.pad(Tensor([7, 6, 21, 0],"float32"), tuple(0,0,0,4,0,4,0,0,), )
paddle.nn.functional.pad(Tensor([8, 0, 32, 768],"float32"), tuple(0,0,0,10,0,10,0,0,), )
paddle.nn.functional.pad(Tensor([8, 32, 0, 768],"float32"), tuple(0,0,0,10,0,10,0,0,), )
paddle.nn.functional.pad(Tensor([8, 32, 32, 0],"float32"), tuple(0,0,0,10,0,10,0,0,), )
paddle.nn.functional.pad(x=Tensor([0, 1, 1, 2, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(x=Tensor([0, 1, 1, 2, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=Tensor([1],"float64"), )
paddle.nn.functional.pad(x=Tensor([0, 1, 1, 2, 3],"float64"), pad=list[0,0,1,1,0,0,], mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([0, 1, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([0, 1, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([0, 1, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([0, 1, 1, 2, 3],"float64"), pad=tuple(2,1,3,0,2,0,), mode="replicate", data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([0, 1, 1, 2, 3],"float64"), pad=tuple(2,2,1,1,0,0,), mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([0, 2, 1, 2],"float64"), pad=list[1,1,2,3,], mode="constant", value=2.0, data_format="NCHW", )
paddle.nn.functional.pad(x=Tensor([0, 3, 3],"float32"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pad(x=Tensor([0, 3, 3],"float64"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pad(x=Tensor([1, 0, 1, 2, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(x=Tensor([1, 0, 1, 2, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=Tensor([1],"float64"), )
paddle.nn.functional.pad(x=Tensor([1, 0, 1, 2, 3],"float64"), pad=list[0,0,1,1,0,0,], mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 0, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 0, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 0, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 0, 1, 2, 3],"float64"), pad=tuple(2,1,3,0,2,0,), mode="replicate", data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 0, 1, 2, 3],"float64"), pad=tuple(2,2,1,1,0,0,), mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 0, 2, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(x=Tensor([1, 1, 0, 2, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=Tensor([1],"float64"), )
paddle.nn.functional.pad(x=Tensor([1, 1, 0, 2, 3],"float64"), pad=list[0,0,1,1,0,0,], mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 0, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 0, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 1, 0, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 0, 2, 3],"float64"), pad=tuple(2,1,3,0,2,0,), mode="replicate", data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 1, 0, 2, 3],"float64"), pad=tuple(2,2,1,1,0,0,), mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 0, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 0, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=Tensor([1],"float64"), )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 0, 3],"float64"), pad=list[0,0,1,1,0,0,], mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 0, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 0, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 0, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 0, 3],"float64"), pad=tuple(2,1,3,0,2,0,), mode="replicate", data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 0, 3],"float64"), pad=tuple(2,2,1,1,0,0,), mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 0],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=0, )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 0],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=Tensor([1],"float64"), )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 0],"float64"), pad=list[0,0,1,1,0,0,], mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 0],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 0],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 0],"float64"), pad=tuple(0,1,1,1,2,0,), mode="constant", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 0],"float64"), pad=tuple(2,1,3,0,2,0,), mode="replicate", data_format="NDHWC", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 0],"float64"), pad=tuple(2,2,1,1,0,0,), mode="reflect", data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=list[0,0,0,0,0,0,1,1,0,0,], mode="constant", value=Tensor([0],"float64"), )
paddle.nn.functional.pad(x=Tensor([3, 0, 1, 2],"float64"), pad=list[1,1,2,3,], mode="constant", value=2.0, data_format="NCHW", )
paddle.nn.functional.pad(x=Tensor([3, 0, 3],"float32"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pad(x=Tensor([3, 0, 3],"float64"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pad(x=Tensor([3, 2, 0, 2],"float64"), pad=list[1,1,2,3,], mode="constant", value=2.0, data_format="NCHW", )
paddle.nn.functional.pad(x=Tensor([3, 2, 1, 0],"float64"), pad=list[1,1,2,3,], mode="constant", value=2.0, data_format="NCHW", )
paddle.nn.functional.pad(x=Tensor([3, 3, 0],"float32"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pad(x=Tensor([3, 3, 0],"float64"), pad=list[1,1,], mode="constant", value=0.0, data_format="NCL", )
paddle.nn.functional.pixel_shuffle(Tensor([0, 128, 128, 128],"float16"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([0, 128, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([0, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([0, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([0, 81, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([0, 9, 4, 4],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([0, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([0, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 4],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 0, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 0, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 0],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 0],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 0, 4],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 0, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 0, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 0],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 0],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 0],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 0, 128, 128],"float16"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 0, 128, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 0, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 128, 0, 128],"float16"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 128, 0, 128],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 128, 128, 0],"float16"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 128, 128, 0],"float32"), 2, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 81, 0, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([4, 81, 4, 0],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(x=Tensor([0, 4, 4, 9],"float64"), upscale_factor=3, data_format="NHWC", )
paddle.nn.functional.pixel_shuffle(x=Tensor([0, 81, 4, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([0, 9, 4, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 0, 4, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 0, 4, 9],"float64"), upscale_factor=3, data_format="NHWC", )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 4, 0, 9],"float64"), upscale_factor=3, data_format="NHWC", )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 4, 4, 0],"float64"), upscale_factor=3, data_format="NHWC", )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 9, 0, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 9, 4, 0],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 0, 4, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 81, 0, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 81, 4, 0],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 1, 12, 12],"float16"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 1, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 1, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 12, 12, 1],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 12, 12, 1],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 1],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 1],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 12],"float16"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 0, 12],"float16"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 0, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 0, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 0],"float16"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 0],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 0],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 0, 1],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 0, 1],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 0],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 0],"float64"), 3, "NHWC", None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float16"), Tensor([0, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float16"), Tensor([0, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float16"), Tensor([10, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float16"), Tensor([10, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([0, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float16"), Tensor([10, 0],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float16"), Tensor([10, 0],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float16"), Tensor([10, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float16"), Tensor([10, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float16"), Tensor([0, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float16"), Tensor([0, 2],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float16"), Tensor([10, 0],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float16"), Tensor([10, 0],"float16"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 0, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 0, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 0],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 0],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 0, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 0, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 0],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 0],"float32"), )
paddle.nn.functional.prelu(Tensor([0, 2, 3, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([0, 2, 3, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([0, 2, 3, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([0, 2, 3, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 0, 3, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 0, 3, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 0, 3, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 0, 3, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 0, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 0, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 0, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 0, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 0],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 0],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 0],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 0],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([0],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(x=Tensor([0, 2, 3, 4],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.prelu(x=Tensor([0, 2, 3, 4],"float64"), weight=Tensor([1],"float64"), )
paddle.nn.functional.prelu(x=Tensor([0, 3, 3],"float64"), weight=Tensor([3],"float64"), )
paddle.nn.functional.prelu(x=Tensor([1, 0, 3, 4],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.prelu(x=Tensor([1, 0, 3, 4],"float64"), weight=Tensor([1],"float64"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 0, 4],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 0, 4],"float64"), weight=Tensor([1],"float64"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 0],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 0],"float64"), weight=Tensor([1],"float64"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 4],"float32"), weight=Tensor([0],"float32"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 4],"float64"), weight=Tensor([0],"float64"), )
paddle.nn.functional.prelu(x=Tensor([3, 0, 3],"float64"), weight=Tensor([3],"float64"), )
paddle.nn.functional.prelu(x=Tensor([3, 3, 0],"float64"), weight=Tensor([3],"float64"), )
paddle.nn.functional.prelu(x=Tensor([3, 3, 3],"float64"), weight=Tensor([0],"float64"), )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([0, 64, 12, 64],"float16"), key=Tensor([0, 64, 12, 64],"float16"), value=Tensor([0, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([0, 64, 12, 64],"float16"), key=Tensor([2, 64, 12, 64],"float16"), value=Tensor([2, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 0, 12, 64],"float16"), key=Tensor([2, 0, 12, 64],"float16"), value=Tensor([2, 0, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 0, 12, 64],"float16"), key=Tensor([2, 64, 12, 64],"float16"), value=Tensor([2, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 0, 64],"float16"), key=Tensor([2, 64, 0, 64],"float16"), value=Tensor([2, 64, 0, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 0, 64],"float16"), key=Tensor([2, 64, 12, 64],"float16"), value=Tensor([2, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 0],"float16"), key=Tensor([2, 64, 12, 0],"float16"), value=Tensor([2, 64, 12, 0],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 0],"float16"), key=Tensor([2, 64, 12, 64],"float16"), value=Tensor([2, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 64],"float16"), key=Tensor([0, 64, 12, 64],"float16"), value=Tensor([2, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 64],"float16"), key=Tensor([2, 0, 12, 64],"float16"), value=Tensor([2, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 64],"float16"), key=Tensor([2, 64, 0, 64],"float16"), value=Tensor([2, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 64],"float16"), key=Tensor([2, 64, 12, 0],"float16"), value=Tensor([2, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 64],"float16"), key=Tensor([2, 64, 12, 64],"float16"), value=Tensor([0, 64, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 64],"float16"), key=Tensor([2, 64, 12, 64],"float16"), value=Tensor([2, 0, 12, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 64],"float16"), key=Tensor([2, 64, 12, 64],"float16"), value=Tensor([2, 64, 0, 64],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(query=Tensor([2, 64, 12, 64],"float16"), key=Tensor([2, 64, 12, 64],"float16"), value=Tensor([2, 64, 12, 0],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 1, 64],"float16"), Tensor([0, 100, 1, 64],"float16"), Tensor([0, 100, 1, 64],"float16"), attn_mask=Tensor([0, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 1, 64],"float16"), Tensor([0, 100, 1, 64],"float16"), Tensor([0, 100, 1, 64],"float16"), attn_mask=Tensor([0, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 2, 40],"float16"), Tensor([0, 1, 2, 40],"float16"), Tensor([0, 1, 2, 40],"float16"), attn_mask=Tensor([0, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 8, 96],"float16"), Tensor([0, 100, 8, 96],"float16"), Tensor([0, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 8, 96],"float16"), Tensor([0, 101, 8, 96],"float16"), Tensor([0, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1024, 32, 128],"bfloat16"), Tensor([0, 1024, 32, 128],"bfloat16"), Tensor([0, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1024, 8, 16],"bfloat16"), Tensor([0, 1024, 2, 16],"bfloat16"), Tensor([0, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 1024, 8, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 134, 4, 128],"float16"), Tensor([0, 134, 4, 128],"float16"), Tensor([0, 134, 4, 128],"float16"), attn_mask=Tensor([0, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 1, 64],"float16"), Tensor([0, 2048, 1, 64],"float16"), Tensor([0, 2048, 1, 64],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 1, 64],"float16"), Tensor([0, 2048, 1, 64],"float16"), Tensor([0, 2048, 1, 64],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 4, 128],"float16"), Tensor([0, 2048, 4, 128],"float16"), Tensor([0, 2048, 4, 128],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 4, 128],"float16"), Tensor([0, 2048, 4, 128],"float16"), Tensor([0, 2048, 4, 128],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 8, 16],"float16"), Tensor([0, 2048, 2, 16],"float16"), Tensor([0, 2048, 2, 16],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([0, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 1, 64],"float16"), Tensor([1, 0, 1, 64],"float16"), Tensor([1, 0, 1, 64],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 1, 64],"float16"), Tensor([1, 0, 1, 64],"float16"), Tensor([1, 0, 1, 64],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 2, 40],"float16"), Tensor([1, 0, 2, 40],"float16"), Tensor([1, 0, 2, 40],"float16"), attn_mask=Tensor([1, 0, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 32, 128],"bfloat16"), Tensor([1, 0, 32, 128],"bfloat16"), Tensor([1, 0, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 4, 128],"float16"), Tensor([1, 0, 4, 128],"float16"), Tensor([1, 0, 4, 128],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 4, 128],"float16"), Tensor([1, 0, 4, 128],"float16"), Tensor([1, 0, 4, 128],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 8, 16],"bfloat16"), Tensor([1, 0, 2, 16],"bfloat16"), Tensor([1, 0, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 8, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 8, 16],"float16"), Tensor([1, 0, 2, 16],"float16"), Tensor([1, 0, 2, 16],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 0, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 0, 40],"float16"), Tensor([1, 1, 0, 40],"float16"), Tensor([1, 1, 0, 40],"float16"), attn_mask=Tensor([1, 2, 0, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 0, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 0],"float16"), Tensor([1, 1, 2, 0],"float16"), Tensor([1, 1, 2, 0],"float16"), attn_mask=Tensor([1, 2, 1, 0],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 0],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([0, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 0, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 0, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 0],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([0, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 0, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 0, 40],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 0],"float16"), attn_mask=Tensor([1, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([0, 2, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 0, 1, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 0, 1],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), Tensor([1, 1, 2, 40],"float16"), attn_mask=Tensor([1, 2, 1, 0],"float16"), )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 0, 128],"bfloat16"), Tensor([1, 1024, 0, 128],"bfloat16"), Tensor([1, 1024, 0, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 0, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 0, 16],"bfloat16"), Tensor([1, 1024, 0, 16],"bfloat16"), Tensor([1, 1024, 0, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 0, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 0],"bfloat16"), Tensor([1, 1024, 32, 0],"bfloat16"), Tensor([1, 1024, 32, 0],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 0],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([0, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 0, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 0, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 0],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([0, 1024, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 0, 32, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 0, 128],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 128],"bfloat16"), Tensor([1, 1024, 32, 0],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 0],"bfloat16"), Tensor([1, 1024, 2, 0],"bfloat16"), Tensor([1, 1024, 2, 0],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 0],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 16],"bfloat16"), Tensor([0, 1024, 2, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 16],"bfloat16"), Tensor([1, 0, 2, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 16],"bfloat16"), Tensor([1, 1024, 0, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 16],"bfloat16"), Tensor([1, 1024, 2, 0],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), Tensor([0, 1024, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), Tensor([1, 0, 2, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), Tensor([1, 1024, 0, 16],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 1024, 8, 16],"bfloat16"), Tensor([1, 1024, 2, 16],"bfloat16"), Tensor([1, 1024, 2, 0],"bfloat16"), attn_mask=None, is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 128],"float16"), Tensor([1, 2048, 0, 128],"float16"), Tensor([1, 2048, 0, 128],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 128],"float16"), Tensor([1, 2048, 0, 128],"float16"), Tensor([1, 2048, 0, 128],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 16],"float16"), Tensor([1, 2048, 0, 16],"float16"), Tensor([1, 2048, 0, 16],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 64],"float16"), Tensor([1, 2048, 0, 64],"float16"), Tensor([1, 2048, 0, 64],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 64],"float16"), Tensor([1, 2048, 0, 64],"float16"), Tensor([1, 2048, 0, 64],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 0, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 0],"float16"), Tensor([1, 2048, 1, 0],"float16"), Tensor([1, 2048, 1, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 0],"float16"), Tensor([1, 2048, 1, 0],"float16"), Tensor([1, 2048, 1, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 0],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 0],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([0, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([0, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 0, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 0, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 0, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 0, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 0],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 0],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([0, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([0, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 0, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 0, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 0, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 0, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), Tensor([1, 2048, 1, 64],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 0],"float16"), Tensor([1, 2048, 4, 0],"float16"), Tensor([1, 2048, 4, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 0],"float16"), Tensor([1, 2048, 4, 0],"float16"), Tensor([1, 2048, 4, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 0],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 0],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([0, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([0, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 0, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 0, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 0, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 0, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 0],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 0],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([0, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([0, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 0, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 0, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 0, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 0, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), Tensor([1, 2048, 4, 128],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 0],"float16"), Tensor([1, 2048, 2, 0],"float16"), Tensor([1, 2048, 2, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 0],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([0, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 0, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 0, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 0],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([0, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 0, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 0, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 0],"float16"), attn_mask=Tensor([1, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([0, 1, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 0, 2048, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 0, 2048],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([1, 2048, 8, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), Tensor([1, 2048, 2, 16],"float16"), attn_mask=Tensor([1, 1, 2048, 0],"float16"), is_causal=True, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 0, 1, 64],"float16"), Tensor([2, 0, 1, 64],"float16"), Tensor([2, 0, 1, 64],"float16"), attn_mask=Tensor([2, 0, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 0, 1, 64],"float16"), Tensor([2, 0, 1, 64],"float16"), Tensor([2, 0, 1, 64],"float16"), attn_mask=Tensor([2, 0, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 0, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 0, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 0, 8, 96],"float16"), Tensor([2, 0, 8, 96],"float16"), Tensor([2, 0, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 0, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 0, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 100, 0, 64],"float16"), Tensor([2, 100, 0, 64],"float16"), attn_mask=Tensor([2, 1, 0, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 100, 0, 64],"float16"), Tensor([2, 100, 0, 64],"float16"), attn_mask=Tensor([2, 1, 0, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 0, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 0, 96],"float16"), Tensor([2, 100, 0, 96],"float16"), Tensor([2, 100, 0, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 0, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 0, 96],"float16"), Tensor([2, 101, 0, 96],"float16"), Tensor([2, 101, 0, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 0, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 0],"float16"), Tensor([2, 100, 1, 0],"float16"), Tensor([2, 100, 1, 0],"float16"), attn_mask=Tensor([2, 1, 1, 0],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 0],"float16"), Tensor([2, 100, 1, 0],"float16"), Tensor([2, 100, 1, 0],"float16"), attn_mask=Tensor([2, 1, 1, 0],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 0],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 0],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([0, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([0, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 0, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 0, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 0, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 0, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 0],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 0],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([0, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([0, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 0, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 0, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 0, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 0, 64],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 0],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 0],"float16"), attn_mask=Tensor([2, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([0, 1, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([0, 1, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 0, 1, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 0, 1, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 0, 100],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 0, 100],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 0],"float16"), dropout_p=0.0, training=False, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), Tensor([2, 100, 1, 64],"float16"), attn_mask=Tensor([2, 1, 1, 0],"float16"), is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 0],"float16"), Tensor([2, 100, 8, 0],"float16"), Tensor([2, 100, 8, 0],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 0],"float16"), Tensor([2, 100, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 0],"float16"), Tensor([2, 101, 8, 0],"float16"), Tensor([2, 101, 8, 0],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 0],"float16"), Tensor([2, 101, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([0, 100, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([0, 101, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 0, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 0, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 100, 0, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 100, 8, 0],"float16"), Tensor([2, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), Tensor([0, 100, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), Tensor([2, 0, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), Tensor([2, 100, 0, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 100, 8, 96],"float16"), Tensor([2, 100, 8, 0],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 101, 0, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 101, 8, 0],"float16"), Tensor([2, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), Tensor([0, 101, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), Tensor([2, 0, 8, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), Tensor([2, 101, 0, 96],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([2, 1, 8, 96],"float16"), Tensor([2, 101, 8, 96],"float16"), Tensor([2, 101, 8, 0],"float16"), attn_mask=None, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 0, 4, 128],"float16"), Tensor([4, 0, 4, 128],"float16"), Tensor([4, 0, 4, 128],"float16"), attn_mask=Tensor([4, 0, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 0, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 0, 128],"float16"), Tensor([4, 134, 0, 128],"float16"), Tensor([4, 134, 0, 128],"float16"), attn_mask=Tensor([4, 1, 0, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 0, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 0],"float16"), Tensor([4, 134, 4, 0],"float16"), Tensor([4, 134, 4, 0],"float16"), attn_mask=Tensor([4, 1, 134, 0],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 0],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([0, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 0, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 0, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 0],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([0, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 0, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 0, 128],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 0],"float16"), attn_mask=Tensor([4, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([0, 1, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 0, 134, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 0, 134],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.scaled_dot_product_attention(Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), Tensor([4, 134, 4, 128],"float16"), attn_mask=Tensor([4, 1, 134, 0],"float16"), dropout_p=0.0, training=True, is_causal=False, )
paddle.nn.functional.selu(Tensor([0, 2],"float32"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([0, 2],"float64"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([0, 3, 3],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.selu(Tensor([0, 3, 3],"float64"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([0, 5, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([0, 5, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([2, 0],"float32"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([2, 0],"float64"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([3, 0, 3],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.selu(Tensor([3, 0, 3],"float64"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([3, 0, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 0, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 3, 0],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.selu(Tensor([3, 3, 0],"float64"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([3, 5, 0, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 5, 0, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 0],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 0],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(x=Tensor([0, 2],"float32"), )
paddle.nn.functional.selu(x=Tensor([0, 2],"float64"), )
paddle.nn.functional.selu(x=Tensor([0, 3, 3],"float64"), )
paddle.nn.functional.selu(x=Tensor([0, 3, 3],"float64"), alpha=0, scale=1.0507009873554805, )
paddle.nn.functional.selu(x=Tensor([2, 0],"float32"), )
paddle.nn.functional.selu(x=Tensor([2, 0],"float64"), )
paddle.nn.functional.selu(x=Tensor([3, 0, 3],"float64"), )
paddle.nn.functional.selu(x=Tensor([3, 0, 3],"float64"), alpha=0, scale=1.0507009873554805, )
paddle.nn.functional.selu(x=Tensor([3, 3, 0],"float64"), )
paddle.nn.functional.selu(x=Tensor([3, 3, 0],"float64"), alpha=0, scale=1.0507009873554805, )
paddle.nn.functional.sequence_mask(Tensor([0, 2, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=-1, dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=10, dtype=VarType(bool), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=10, dtype=VarType(float32), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=10, dtype=VarType(float64), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=10, dtype=VarType(int32), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=10, dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=10, dtype=VarType(uint8), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=30, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(bool), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(float32), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(float64), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(int32), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([0, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(uint8), )
paddle.nn.functional.sequence_mask(Tensor([0],"float64"), maxlen=20, )
paddle.nn.functional.sequence_mask(Tensor([0],"int32"), )
paddle.nn.functional.sequence_mask(Tensor([0],"int32"), maxlen=4, dtype="float32", )
paddle.nn.functional.sequence_mask(Tensor([0],"int64"), 10, Dtype(float64), None, )
paddle.nn.functional.sequence_mask(Tensor([0],"int64"), 12, Dtype(float64), None, )
paddle.nn.functional.sequence_mask(Tensor([0],"int64"), 12, VarType(float64), None, )
paddle.nn.functional.sequence_mask(Tensor([2, 0, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=-1, dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=10, dtype=VarType(bool), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=10, dtype=VarType(float32), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=10, dtype=VarType(float64), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=10, dtype=VarType(int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=10, dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=10, dtype=VarType(uint8), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=30, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(bool), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(float32), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(float64), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([2, 0],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(uint8), )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 0, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 0, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 3, 0],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([0],"int32"), dtype=VarType(bool), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([0],"int32"), dtype=VarType(float32), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([0],"int32"), dtype=VarType(float64), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([0],"int32"), dtype=VarType(int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([0],"int32"), dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([0],"int32"), dtype=VarType(uint8), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 2],"float32"), label=Tensor([5, 2],"float32"), normalizer=Tensor([1],"float32"), alpha=0.25, gamma=2.0, reduction="sum", name=None, )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), normalizer=Tensor([1],"float32"), reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 4],"float32"), Tensor([108, 4],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 4],"float32"), Tensor([11, 4],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 4],"float32"), Tensor([110484, 4],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([0, 4],"float32"), Tensor([122760, 4],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([108, 0],"float32"), Tensor([108, 0],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([108, 0],"float32"), Tensor([108, 4],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([108, 4],"float32"), Tensor([0, 4],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([108, 4],"float32"), Tensor([108, 0],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([11, 0],"float32"), Tensor([11, 0],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([11, 0],"float32"), Tensor([11, 4],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([11, 4],"float32"), Tensor([0, 4],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([11, 4],"float32"), Tensor([11, 0],"float32"), alpha=0.25, gamma=2.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([110484, 0],"float32"), Tensor([110484, 0],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([110484, 0],"float32"), Tensor([110484, 4],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([110484, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([110484, 4],"float32"), Tensor([110484, 0],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([122760, 0],"float32"), Tensor([122760, 0],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([122760, 0],"float32"), Tensor([122760, 4],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([122760, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([122760, 4],"float32"), Tensor([122760, 0],"float32"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), normalizer=Tensor([1],"float32"), reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 0, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([0, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 0, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 0, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), None, alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 0],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.25, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.25, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.25, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.25, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.5, gamma=0.0, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.5, gamma=0.0, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.5, gamma=3, reduction="none", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([0],"float64"), alpha=0.5, gamma=3, reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), normalizer=Tensor([1],"float32"), reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), normalizer=Tensor([1],"float32"), reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), normalizer=Tensor([0],"float32"), reduction="sum", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([5, 0],"float32"), label=Tensor([5, 2],"float32"), normalizer=Tensor([1],"float32"), alpha=0.25, gamma=2.0, reduction="sum", name=None, )
paddle.nn.functional.sigmoid_focal_loss(Tensor([5, 2],"float32"), label=Tensor([0, 2],"float32"), normalizer=Tensor([1],"float32"), alpha=0.25, gamma=2.0, reduction="sum", name=None, )
paddle.nn.functional.sigmoid_focal_loss(Tensor([5, 2],"float32"), label=Tensor([5, 0],"float32"), normalizer=Tensor([1],"float32"), alpha=0.25, gamma=2.0, reduction="sum", name=None, )
paddle.nn.functional.sigmoid_focal_loss(Tensor([5, 2],"float32"), label=Tensor([5, 2],"float32"), normalizer=Tensor([0],"float32"), alpha=0.25, gamma=2.0, reduction="sum", name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 158, 8],"float32"), Tensor([0, 158, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 158, 8],"float32"), Tensor([24, 158, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 187, 8],"float32"), Tensor([0, 187, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 187, 8],"float32"), Tensor([64, 187, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 2],"float64"), label=Tensor([0, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 2],"float64"), label=Tensor([5, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 2],"float64"), Tensor([5, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 200],"float32"), Tensor([0, 200],"float32"), reduction="mean", delta=0.03007869737980573, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 200],"float32"), Tensor([0, 200],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 200],"float32"), Tensor([0, 200],"float32"), reduction="none", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 200],"float32"), Tensor([0, 200],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 200],"float32"), Tensor([100, 200],"float32"), reduction="mean", delta=0.03007869737980573, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 200],"float32"), Tensor([100, 200],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 200],"float32"), Tensor([100, 200],"float32"), reduction="none", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 200],"float32"), Tensor([100, 200],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 4],"float16"), Tensor([0, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 4],"float16"), Tensor([10, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 4],"float32"), Tensor([10, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 5, 7, 7],"float32"), Tensor([0, 5, 7, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 5, 7, 7],"float32"), Tensor([8, 5, 7, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 50],"float32"), Tensor([0, 50],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 50],"float32"), Tensor([1914, 50],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([0, 50],"float32"), Tensor([200, 50],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([0],"float32"), Tensor([0],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([0],"float32"), Tensor([0],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([0],"float32"), Tensor([1556],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([0],"float32"), Tensor([2160],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([0],"float32"), Tensor([4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([10, 0],"float16"), Tensor([10, 0],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([10, 0],"float16"), Tensor([10, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([10, 0],"float32"), Tensor([10, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([10, 4],"float16"), Tensor([0, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([10, 4],"float16"), Tensor([10, 0],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([10, 4],"float32"), Tensor([0, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([10, 4],"float32"), Tensor([10, 0],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), reduction="mean", delta=0.03007869737980573, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), reduction="none", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 0],"float32"), Tensor([100, 200],"float32"), reduction="mean", delta=0.03007869737980573, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 0],"float32"), Tensor([100, 200],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 0],"float32"), Tensor([100, 200],"float32"), reduction="none", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 0],"float32"), Tensor([100, 200],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([0, 200],"float32"), reduction="mean", delta=0.03007869737980573, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([0, 200],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([0, 200],"float32"), reduction="none", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([0, 200],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([100, 0],"float32"), reduction="mean", delta=0.03007869737980573, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([100, 0],"float32"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([100, 0],"float32"), reduction="none", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 200],"float32"), Tensor([100, 0],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([1556],"float32"), Tensor([0],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([1914, 0],"float32"), Tensor([1914, 0],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([1914, 0],"float32"), Tensor([1914, 50],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([1914, 50],"float32"), Tensor([0, 50],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([1914, 50],"float32"), Tensor([1914, 0],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([200, 0],"float32"), Tensor([200, 0],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([200, 0],"float32"), Tensor([200, 50],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([200, 50],"float32"), Tensor([0, 50],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([200, 50],"float32"), Tensor([200, 0],"float32"), reduction="none", )
paddle.nn.functional.smooth_l1_loss(Tensor([2160],"float32"), Tensor([0],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([24, 0, 8],"float32"), Tensor([24, 0, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([24, 0, 8],"float32"), Tensor([24, 158, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([24, 158, 0],"float32"), Tensor([24, 158, 0],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([24, 158, 0],"float32"), Tensor([24, 158, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([24, 158, 8],"float32"), Tensor([0, 158, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([24, 158, 8],"float32"), Tensor([24, 0, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([24, 158, 8],"float32"), Tensor([24, 158, 0],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 0, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 0, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 0],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 0],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 0, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 0, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 0],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 0],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4],"float32"), Tensor([0],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 0],"float64"), label=Tensor([5, 0],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 0],"float64"), label=Tensor([5, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 0],"float64"), Tensor([5, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 2],"float64"), label=Tensor([0, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 2],"float64"), label=Tensor([5, 0],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 2],"float64"), Tensor([0, 2],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([5, 2],"float64"), Tensor([5, 0],"float64"), reduction="mean", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 0, 8],"float32"), Tensor([64, 0, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 0, 8],"float32"), Tensor([64, 187, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 0],"float32"), Tensor([64, 187, 0],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 0],"float32"), Tensor([64, 187, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 8],"float32"), Tensor([0, 187, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 8],"float32"), Tensor([64, 0, 8],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([64, 187, 8],"float32"), Tensor([64, 187, 0],"float32"), reduction="sum", )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 0, 7, 7],"float32"), Tensor([8, 0, 7, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 0, 7, 7],"float32"), Tensor([8, 5, 7, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 5, 0, 7],"float32"), Tensor([8, 5, 0, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 5, 0, 7],"float32"), Tensor([8, 5, 7, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 5, 7, 0],"float32"), Tensor([8, 5, 7, 0],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 5, 7, 0],"float32"), Tensor([8, 5, 7, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 5, 7, 7],"float32"), Tensor([0, 5, 7, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 5, 7, 7],"float32"), Tensor([8, 0, 7, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 5, 7, 7],"float32"), Tensor([8, 5, 0, 7],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.smooth_l1_loss(Tensor([8, 5, 7, 7],"float32"), Tensor([8, 5, 7, 0],"float32"), reduction="sum", delta=1.0, name=None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float32"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float32"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float32"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float32"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float32"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float32"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float32"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float32"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float32"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float32"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float32"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float32"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float32"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float32"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float32"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float32"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float32"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float32"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), reduction="sum", )
paddle.nn.functional.softmax(Tensor([0, 1, 100],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 1, 101],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 1, 16, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 1, 16, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 1, 81, 94, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([0, 10, 3364],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([0, 10],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 10],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 100],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 11, 64, 64],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 128],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([0, 128],"float64"), 1, )
paddle.nn.functional.softmax(Tensor([0, 128],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 16, 1, 6],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 16, 128],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([0, 16, 128],"float64"), 1, )
paddle.nn.functional.softmax(Tensor([0, 16, 128],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 16, 128],"float64"), 2, )
paddle.nn.functional.softmax(Tensor([0, 16, 128],"float64"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([0, 16, 18, 18],"float16"), )
paddle.nn.functional.softmax(Tensor([0, 16, 18, 18],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 16],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 165, 126],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 17, 1600, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 17],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 256, 1],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 3, 1],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 3, 2, 5, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([0, 3, 4, 5],"float32"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([0, 3, 4, 5],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([0, 3, 4, 5],"float32"), dtype=type(numpy.float64), )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float32"), axis=0, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float32"), axis=0, dtype="float64", )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float32"), axis=1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float32"), axis=-1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float32"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float64"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 3, 4],"float64"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([0, 3],"float32"), axis=0, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 3],"float32"), axis=0, dtype="float64", )
paddle.nn.functional.softmax(Tensor([0, 3],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 3],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 3],"float32"), axis=1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([0, 3],"float32"), axis=-1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([0, 300, 2048],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([0, 4, 10, 10],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 4, 1007, 1007],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([0, 4, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 4, 5, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 4, 7, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([0, 4, 7, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([0, 51865],"float32"), axis=-1, dtype=VarType(float32), )
paddle.nn.functional.softmax(Tensor([0, 6, 4],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([0, 6, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0, 6, 5, 4],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([0, 7, 7],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 7, 99],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 8, 1, 129],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([0, 8, 1, 65],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([0, 8, 153, 153],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 8, 153, 89],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 8, 8],"float32"), )
paddle.nn.functional.softmax(Tensor([0, 8],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([0, 8000],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0, 81, 7332],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([0],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([0],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([0],"float64"), axis=-1, )
paddle.nn.functional.softmax(Tensor([1, 0],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([10, 0, 153, 153],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 0, 153, 89],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([10, 0],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 0, 153],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 0, 89],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([10, 8, 153, 0],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([100, 0],"float16"), axis=1, )
paddle.nn.functional.softmax(Tensor([1008, 0, 7],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([1008, 7, 0],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([1024, 0, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 4, 0, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 4, 49, 0],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 6, 0, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([1024, 6, 49, 0],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([104, 0, 18, 18],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 0, 18, 18],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 0, 18],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 16, 0, 18],"float32"), )
paddle.nn.functional.softmax(Tensor([104, 16, 18, 0],"float16"), )
paddle.nn.functional.softmax(Tensor([104, 16, 18, 0],"float32"), )
paddle.nn.functional.softmax(Tensor([11, 0, 7, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([11, 4, 0, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([11, 4, 7, 0],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([112, 0, 126],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([112, 165, 0],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([128, 0, 16, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 0, 16, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 0],"float32"), )
paddle.nn.functional.softmax(Tensor([128, 1, 0, 49, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1, 0, 49, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1, 16, 0, 49],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1, 16, 0, 49],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1, 16, 49, 0],"float16"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([128, 1, 16, 49, 0],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([13, 0, 10, 10],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 0, 1007, 1007],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 0, 5, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 0, 7, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([13, 0, 99],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 4, 0, 1, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 4, 0, 10],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 0, 1007],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 0, 7],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([13, 4, 10, 0],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 1007, 0],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([13, 4, 5, 0, 7],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 4, 5, 1, 0],"float32"), )
paddle.nn.functional.softmax(Tensor([13, 4, 7, 0],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([13, 7, 0],"float32"), )
paddle.nn.functional.softmax(Tensor([14, 0, 7, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([14, 4, 0, 7],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([14, 4, 7, 0],"float32"), axis=3, )
paddle.nn.functional.softmax(Tensor([16, 0, 128],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([16, 0, 128],"float64"), 1, )
paddle.nn.functional.softmax(Tensor([16, 0, 128],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([16, 0, 128],"float64"), 2, )
paddle.nn.functional.softmax(Tensor([16, 0, 128],"float64"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([16, 0, 3364],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([16, 0, 64, 64],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([16, 0],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([16, 0],"float64"), 1, )
paddle.nn.functional.softmax(Tensor([16, 0],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([16, 10, 0],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([16, 11, 0, 64],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([16, 11, 64, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([16, 16, 0],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 0],"float64"), 1, )
paddle.nn.functional.softmax(Tensor([16, 16, 0],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([16, 16, 0],"float64"), 2, )
paddle.nn.functional.softmax(Tensor([16, 16, 0],"float64"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([182, 0, 1],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([182, 0],"float32"), axis=-1, )
paddle.nn.functional.softmax(Tensor([182, 3, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 0, 1, 129],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 0, 1, 6],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0, 1, 65],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 0, 100],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([2, 0, 101],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([2, 0, 1600, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 0, 2, 5, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 0, 2048],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([2, 0, 4, 5],"float32"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 4, 5],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([2, 0, 4, 5],"float32"), dtype=type(numpy.float64), )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float32"), axis=0, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float32"), axis=0, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float32"), axis=1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float32"), axis=-1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float32"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float64"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float64"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 4],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 5, 4],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0, 8],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 0],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 0],"float32"), axis=0, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0],"float32"), axis=0, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 0],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 0],"float32"), axis=1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 0],"float32"), axis=-1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 1, 0],"float32"), axis=-1, dtype=Dtype(float32), )
paddle.nn.functional.softmax(Tensor([2, 16, 0, 6],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 16, 1, 0],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 17, 0, 4],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 17, 1600, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([2, 3, 0, 5, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 3, 0, 5],"float32"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 0, 5],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([2, 3, 0, 5],"float32"), dtype=type(numpy.float64), )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float32"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float32"), axis=0, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float32"), axis=0, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float32"), axis=1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float32"), axis=-1, dtype="float32", )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float32"), axis=1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float32"), axis=-1, dtype="float64", )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float32"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float64"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float64"), 1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float64"), -1, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 0],"float64"), 2, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 2, 0, 5],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 3, 2, 5, 0],"float16"), )
paddle.nn.functional.softmax(Tensor([2, 3, 4, 0],"float32"), 0, name=None, )
paddle.nn.functional.softmax(Tensor([2, 3, 4, 0],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([2, 3, 4, 0],"float32"), dtype=type(numpy.float64), )
paddle.nn.functional.softmax(Tensor([2, 300, 0],"float32"), axis=0, )
paddle.nn.functional.softmax(Tensor([2, 6, 0, 4],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 6, 0],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 6, 5, 0],"float64"), axis=-3, dtype=None, name=None, )
paddle.nn.functional.softmax(Tensor([2, 8, 0, 129],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 8, 0, 65],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([2, 8, 0],"float32"), )
paddle.nn.functional.softmax(Tensor([2, 8, 1, 0],"float16"), -1, )
paddle.nn.functional.softmax(Tensor([24, 0, 1],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([24, 256, 0],"float32"), axis=1, )
paddle.nn.functional.softmax(Tensor([256, 0],"float64"), 1, )
paddle.nn.functional.softmax(Tensor([4, 0, 7332],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 0, 81, 94, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 1, 0, 94, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 1, 81, 0, 311],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 1, 81, 94, 0],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([4, 81, 0],"float32"), axis=2, )
paddle.nn.functional.softmax(Tensor([5, 0],"float32"), axis=-1, dtype=VarType(float32), )
paddle.nn.functional.softmax(x=Tensor([0, 3, 4],"float32"), )
paddle.nn.functional.softmax(x=Tensor([0, 3, 4],"float64"), )
paddle.nn.functional.softmax(x=Tensor([0, 3, 4],"float64"), axis=0, )
paddle.nn.functional.softmax(x=Tensor([0, 3, 4],"float64"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([0, 3, 4],"float64"), axis=2, )
paddle.nn.functional.softmax(x=Tensor([0, 4, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([13, 0, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([13, 4, 0, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([13, 4, 12, 0],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([16, 0, 12, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([16, 4, 0, 12],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([16, 4, 12, 0],"float32"), axis=-1, )
paddle.nn.functional.softmax(x=Tensor([2, 0, 4],"float32"), )
paddle.nn.functional.softmax(x=Tensor([2, 0, 4],"float64"), )
paddle.nn.functional.softmax(x=Tensor([2, 0, 4],"float64"), axis=0, )
paddle.nn.functional.softmax(x=Tensor([2, 0, 4],"float64"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([2, 0, 4],"float64"), axis=2, )
paddle.nn.functional.softmax(x=Tensor([2, 3, 0],"float32"), )
paddle.nn.functional.softmax(x=Tensor([2, 3, 0],"float64"), )
paddle.nn.functional.softmax(x=Tensor([2, 3, 0],"float64"), axis=0, )
paddle.nn.functional.softmax(x=Tensor([2, 3, 0],"float64"), axis=1, )
paddle.nn.functional.softmax(x=Tensor([2, 3, 0],"float64"), axis=2, )
paddle.nn.functional.square_error_cost(input=Tensor([0, 1],"float32"), label=Tensor([0, 1],"float32"), )
paddle.nn.functional.square_error_cost(input=Tensor([0, 1],"float32"), label=Tensor([2, 1],"float32"), )
paddle.nn.functional.square_error_cost(input=Tensor([2, 0],"float32"), label=Tensor([2, 0],"float32"), )
paddle.nn.functional.square_error_cost(input=Tensor([2, 0],"float32"), label=Tensor([2, 1],"float32"), )
paddle.nn.functional.square_error_cost(input=Tensor([2, 1],"float32"), label=Tensor([0, 1],"float32"), )
paddle.nn.functional.square_error_cost(input=Tensor([2, 1],"float32"), label=Tensor([2, 0],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([0, 100, 100],"float16"), Tensor([0, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([0, 100, 100],"float16"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([0, 100, 100],"float32"), Tensor([0, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([0, 100, 100],"float32"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([0, 2, 1, 2],"float64"), label=Tensor([0, 2, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([0, 2, 1, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([3, 0, 1, 2],"float64"), label=Tensor([3, 0, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 0, 1, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 0, 2],"float64"), label=Tensor([3, 2, 0, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 0, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 0],"float64"), label=Tensor([3, 2, 1, 0],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 0],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([0, 2, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 0, 1, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 2, 0, 2],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 2, 1, 0],"float64"), )
paddle.nn.functional.square_error_cost(Tensor([8, 0, 100],"float16"), Tensor([8, 0, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 0, 100],"float16"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 0, 100],"float32"), Tensor([8, 0, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 0, 100],"float32"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 0],"float16"), Tensor([8, 100, 0],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 0],"float16"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 0],"float32"), Tensor([8, 100, 0],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 0],"float32"), Tensor([8, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float16"), Tensor([0, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float16"), Tensor([8, 0, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float16"), Tensor([8, 100, 0],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float32"), Tensor([0, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float32"), Tensor([8, 0, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([8, 100, 100],"float32"), Tensor([8, 100, 0],"float32"), )
paddle.nn.functional.swish(Tensor([0, 1024, 1, 40],"float16"), None, )
paddle.nn.functional.swish(Tensor([0, 1024, 1, 40],"float32"), None, )
paddle.nn.functional.swish(Tensor([0, 1024, 32, 32],"float32"), )
paddle.nn.functional.swish(Tensor([0, 1024, 34, 34],"float32"), )
paddle.nn.functional.swish(Tensor([0, 300, 2048],"float32"), )
paddle.nn.functional.swish(Tensor([0, 40, 240],"float16"), None, )
paddle.nn.functional.swish(Tensor([0, 40, 240],"float32"), None, )
paddle.nn.functional.swish(Tensor([1, 0, 32, 32],"float32"), )
paddle.nn.functional.swish(Tensor([1, 0, 34, 34],"float32"), )
paddle.nn.functional.swish(Tensor([1, 1024, 0, 32],"float32"), )
paddle.nn.functional.swish(Tensor([1, 1024, 0, 34],"float32"), )
paddle.nn.functional.swish(Tensor([1, 1024, 32, 0],"float32"), )
paddle.nn.functional.swish(Tensor([1, 1024, 34, 0],"float32"), )
paddle.nn.functional.swish(Tensor([128, 0, 1, 40],"float16"), None, )
paddle.nn.functional.swish(Tensor([128, 0, 1, 40],"float32"), None, )
paddle.nn.functional.swish(Tensor([128, 0, 240],"float16"), None, )
paddle.nn.functional.swish(Tensor([128, 0, 240],"float32"), None, )
paddle.nn.functional.swish(Tensor([128, 1024, 0, 40],"float16"), None, )
paddle.nn.functional.swish(Tensor([128, 1024, 0, 40],"float32"), None, )
paddle.nn.functional.swish(Tensor([128, 1024, 1, 0],"float16"), None, )
paddle.nn.functional.swish(Tensor([128, 1024, 1, 0],"float32"), None, )
paddle.nn.functional.swish(Tensor([128, 40, 0],"float16"), None, )
paddle.nn.functional.swish(Tensor([128, 40, 0],"float32"), None, )
paddle.nn.functional.swish(Tensor([2, 0, 2048],"float32"), )
paddle.nn.functional.swish(Tensor([2, 300, 0],"float32"), )
paddle.nn.functional.swish(x=Tensor([0, 10, 3, 3],"float32"), )
paddle.nn.functional.swish(x=Tensor([0, 10, 3, 3],"float64"), )
paddle.nn.functional.swish(x=Tensor([3, 0, 3, 3],"float32"), )
paddle.nn.functional.swish(x=Tensor([3, 0, 3, 3],"float64"), )
paddle.nn.functional.swish(x=Tensor([3, 10, 0, 3],"float32"), )
paddle.nn.functional.swish(x=Tensor([3, 10, 0, 3],"float64"), )
paddle.nn.functional.swish(x=Tensor([3, 10, 3, 0],"float32"), )
paddle.nn.functional.swish(x=Tensor([3, 10, 3, 0],"float64"), )
paddle.nn.functional.temporal_shift(Tensor([0, 1024, 14, 14],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([0, 1024, 14, 14],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([0, 1024, 14, 14],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([0, 1024, 14, 14],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([0, 256, 28, 28],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([128, 0, 14, 14],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 0, 14, 14],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 0, 28, 28],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([128, 1024, 0, 14],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 1024, 0, 14],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 1024, 14, 0],"float16"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 1024, 14, 0],"float32"), 8, 0.125, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 0, 28],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([128, 256, 28, 0],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([240, 0, 14, 14],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 0, 14, 14],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 1024, 0, 14],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 1024, 0, 14],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 1024, 14, 0],"float16"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([240, 1024, 14, 0],"float32"), 8, 0.125, data_format="NCHW", )
paddle.nn.functional.temporal_shift(Tensor([32, 0, 28, 28],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([32, 256, 0, 28],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(Tensor([32, 256, 28, 0],"float32"), 16, 0.0625, )
paddle.nn.functional.temporal_shift(x=Tensor([0, 2, 4, 3],"float32"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([0, 2, 4, 3],"float64"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([0, 4, 2, 2],"float32"), seg_num=2, shift_ratio=0.2, )
paddle.nn.functional.temporal_shift(x=Tensor([0, 4, 3, 3],"float64"), seg_num=2, shift_ratio=0.4, )
paddle.nn.functional.temporal_shift(x=Tensor([0, 4, 3, 3],"float64"), seg_num=2, shift_ratio=0.4, data_format="NHWC", )
paddle.nn.functional.temporal_shift(x=Tensor([0, 4, 3, 3],"float64"), seg_num=4, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 0, 3, 3],"float64"), seg_num=2, shift_ratio=0.4, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 0, 3, 3],"float64"), seg_num=2, shift_ratio=0.4, data_format="NHWC", )
paddle.nn.functional.temporal_shift(x=Tensor([2, 0, 4, 3],"float32"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 0, 4, 3],"float64"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 2, 0, 3],"float32"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 2, 0, 3],"float64"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 2, 4, 0],"float32"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 2, 4, 0],"float64"), seg_num=2, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 4, 0, 3],"float64"), seg_num=2, shift_ratio=0.4, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 4, 0, 3],"float64"), seg_num=2, shift_ratio=0.4, data_format="NHWC", )
paddle.nn.functional.temporal_shift(x=Tensor([2, 4, 3, 0],"float64"), seg_num=2, shift_ratio=0.4, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 4, 3, 0],"float64"), seg_num=2, shift_ratio=0.4, data_format="NHWC", )
paddle.nn.functional.temporal_shift(x=Tensor([4, 0, 3, 3],"float64"), seg_num=4, )
paddle.nn.functional.temporal_shift(x=Tensor([4, 4, 0, 3],"float64"), seg_num=4, )
paddle.nn.functional.temporal_shift(x=Tensor([4, 4, 3, 0],"float64"), seg_num=4, )
paddle.nn.functional.temporal_shift(x=Tensor([6, 0, 2, 2],"float32"), seg_num=2, shift_ratio=0.2, )
paddle.nn.functional.temporal_shift(x=Tensor([6, 4, 0, 2],"float32"), seg_num=2, shift_ratio=0.2, )
paddle.nn.functional.temporal_shift(x=Tensor([6, 4, 2, 0],"float32"), seg_num=2, shift_ratio=0.2, )
paddle.nn.functional.thresholded_relu(Tensor([0, 20, 1],"float32"), 1.0, )
paddle.nn.functional.thresholded_relu(Tensor([10, 0, 1],"float32"), 1.0, )
paddle.nn.functional.thresholded_relu(Tensor([10, 20, 0],"float32"), 1.0, )
paddle.nn.functional.thresholded_relu(x=Tensor([0, 1, 4, 3],"float64"), threshold=0, )
paddle.nn.functional.thresholded_relu(x=Tensor([0, 1, 4, 3],"float64"), threshold=-1, )
paddle.nn.functional.thresholded_relu(x=Tensor([0, 4, 3, 3],"float32"), )
paddle.nn.functional.thresholded_relu(x=Tensor([0, 4, 3, 3],"float64"), )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 0, 4, 3],"float64"), threshold=0, )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 0, 4, 3],"float64"), threshold=-1, )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 1, 0, 3],"float64"), threshold=0, )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 1, 0, 3],"float64"), threshold=-1, )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 1, 4, 0],"float64"), threshold=0, )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 1, 4, 0],"float64"), threshold=-1, )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 0, 3, 3],"float32"), )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 0, 3, 3],"float64"), )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 0, 3],"float32"), )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 0, 3],"float64"), )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 3, 0],"float32"), )
paddle.nn.functional.thresholded_relu(x=Tensor([100, 4, 3, 0],"float64"), )
paddle.nn.functional.unfold(Tensor([0, 3, 20, 20],"float64"), kernel_sizes=list[3,3,], strides=list[1,1,], paddings=list[1,1,1,1,], dilations=list[1,1,], name=None, )
paddle.nn.functional.unfold(Tensor([3, 0, 20, 20],"float64"), kernel_sizes=list[3,3,], strides=list[1,1,], paddings=list[1,1,1,1,], dilations=list[1,1,], name=None, )
paddle.nn.functional.unfold(Tensor([3, 3, 0, 20],"float64"), kernel_sizes=list[3,3,], strides=list[1,1,], paddings=list[1,1,1,1,], dilations=list[1,1,], name=None, )
paddle.nn.functional.unfold(Tensor([3, 3, 20, 0],"float64"), kernel_sizes=list[3,3,], strides=list[1,1,], paddings=list[1,1,1,1,], dilations=list[1,1,], name=None, )
paddle.nn.functional.zeropad2d(Tensor([0, 3, 224, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([0, 3, 224, 224],"float64"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 0, 224, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 0, 224, 224],"float64"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 0, 224],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 0, 224],"float64"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 0],"float32"), list[2,2,2,2,], )
paddle.nn.functional.zeropad2d(Tensor([4, 3, 224, 0],"float64"), list[2,2,2,2,], )
paddle.nn.quant.weight_only_linear(Tensor([0, 1, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([0, 1, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([0, 32, 128],"float16"), Tensor([288, 128],"int8"), bias=Tensor([288],"float16"), weight_scale=Tensor([288],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([0, 32, 64],"float16"), Tensor([128, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([0, 32, 64],"float16"), Tensor([256, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([0, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([0, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([0, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([0, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([0, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([1, 0, 128],"float16"), Tensor([288, 128],"int8"), bias=Tensor([288],"float16"), weight_scale=Tensor([288],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 0, 64],"float16"), Tensor([128, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 0, 64],"float16"), Tensor([256, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 0],"float16"), Tensor([128, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 0],"float16"), Tensor([256, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 0],"float16"), Tensor([288, 128],"int8"), bias=Tensor([288],"float16"), weight_scale=Tensor([288],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 128],"float16"), Tensor([0, 128],"int8"), bias=Tensor([288],"float16"), weight_scale=Tensor([288],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 128],"float16"), Tensor([288, 0],"int8"), bias=Tensor([288],"float16"), weight_scale=Tensor([288],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 128],"float16"), Tensor([288, 128],"int8"), bias=Tensor([0],"float16"), weight_scale=Tensor([288],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 128],"float16"), Tensor([288, 128],"int8"), bias=Tensor([288],"float16"), weight_scale=Tensor([0],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([0, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([0, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([128, 0],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([128, 64],"int8"), bias=Tensor([0],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([128, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([0],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([256, 0],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([256, 64],"int8"), bias=Tensor([0],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([256, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([0],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([100, 0],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 0],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 0],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 320],"float16"), weight=Tensor([0, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 320],"float16"), weight=Tensor([512, 0],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([0],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([0, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([0, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([1024, 0],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([0],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([0],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([512, 0],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([0],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 0],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 64],"float16"), weight=Tensor([0, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 64],"float16"), weight=Tensor([192, 0],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([0],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([0],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([123, 0],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([123, 768],"float16"), weight=Tensor([0, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([123, 768],"float16"), weight=Tensor([2304, 0],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([123, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([0],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([131, 0],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([131, 768],"float16"), weight=Tensor([0, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([131, 768],"float16"), weight=Tensor([2304, 0],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([131, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([0],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 0, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 0, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 0],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 0],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 512],"float16"), weight=Tensor([0, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 512],"float16"), weight=Tensor([1024, 0],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([0],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([0],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 64],"float16"), weight=Tensor([0, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 64],"float16"), weight=Tensor([192, 0],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([0],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([0],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int4", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int4", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int4", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int4", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int4", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 256],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 288],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 288],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 288],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 288],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 288],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([0, 64],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([0, 768],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([11008, 0],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([128, 0],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 0],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 0],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 0],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 0],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int4", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int4", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int4", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int4", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int4", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 0],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nonzero(Tensor([0, 10],"float32"), as_tuple=False, )
paddle.nonzero(Tensor([0, 100],"float32"), )
paddle.nonzero(Tensor([0, 192],"float32"), )
paddle.nonzero(Tensor([0, 2, 2, 2],"float64"), True, )
paddle.nonzero(Tensor([0, 2, 28, 28],"float32"), )
paddle.nonzero(Tensor([0, 3],"float32"), True, )
paddle.nonzero(Tensor([0],"bool"), )
paddle.nonzero(Tensor([0],"bool"), as_tuple=False, )
paddle.nonzero(Tensor([0],"int32"), True, )
paddle.nonzero(Tensor([1, 0, 28, 28],"float32"), )
paddle.nonzero(Tensor([1, 0],"float32"), )
paddle.nonzero(Tensor([1, 2, 0, 28],"float32"), )
paddle.nonzero(Tensor([1, 2, 28, 0],"float32"), )
paddle.nonzero(Tensor([10, 0, 28, 28],"float32"), )
paddle.nonzero(Tensor([10, 0],"float32"), as_tuple=False, )
paddle.nonzero(Tensor([10, 2, 0, 28],"float32"), )
paddle.nonzero(Tensor([10, 2, 28, 0],"float32"), )
paddle.nonzero(Tensor([3, 0, 2, 2],"float64"), True, )
paddle.nonzero(Tensor([3, 0],"float32"), True, )
paddle.nonzero(Tensor([3, 2, 0, 2],"float64"), True, )
paddle.nonzero(Tensor([3, 2, 2, 0],"float64"), True, )
paddle.nonzero(x=Tensor([0, 10, 2],"float32"), )
paddle.nonzero(x=Tensor([0, 2, 2, 2],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([0, 3],"float32"), as_tuple=False, )
paddle.nonzero(x=Tensor([0, 3],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([0, 4, 7],"float16"), )
paddle.nonzero(x=Tensor([0, 8],"float64"), )
paddle.nonzero(x=Tensor([0, 9],"bfloat16"), )
paddle.nonzero(x=Tensor([0],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([12, 0],"bfloat16"), )
paddle.nonzero(x=Tensor([2, 0, 2],"float32"), )
paddle.nonzero(x=Tensor([2, 10, 0],"float32"), )
paddle.nonzero(x=Tensor([3, 0, 2, 2],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 0, 7],"float16"), )
paddle.nonzero(x=Tensor([3, 0],"float32"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 0],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 2, 0, 2],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 2, 2, 0],"float64"), as_tuple=False, )
paddle.nonzero(x=Tensor([3, 4, 0],"float16"), )
paddle.nonzero(x=Tensor([8, 0],"float64"), )
paddle.not_equal(Tensor([0, 2, 16, 4, 1],"int64"), Tensor([0, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([0, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.not_equal(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.not_equal(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.not_equal(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.not_equal(Tensor([0, 7],"int32"), Tensor([0, 7],"int32"), )
paddle.not_equal(Tensor([0, 7],"int32"), Tensor([14, 7],"int32"), )
paddle.not_equal(Tensor([0, 7],"int64"), Tensor([0, 7],"int64"), )
paddle.not_equal(Tensor([0, 7],"int64"), Tensor([13, 7],"int64"), )
paddle.not_equal(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.not_equal(Tensor([0],"int64"), Tensor([20],"int64"), )
paddle.not_equal(Tensor([0],"int64"), Tensor([2112],"int64"), )
paddle.not_equal(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.not_equal(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.not_equal(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.not_equal(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.not_equal(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.not_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.not_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.not_equal(Tensor([13, 0, 16, 4, 1],"int64"), Tensor([13, 0, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 0, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 0],"int64"), Tensor([13, 0],"int64"), )
paddle.not_equal(Tensor([13, 0],"int64"), Tensor([13, 7],"int64"), )
paddle.not_equal(Tensor([13, 2, 0, 4, 1],"int64"), Tensor([13, 2, 0, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 0, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 0, 1],"int64"), Tensor([13, 2, 16, 0, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 0, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 0],"int64"), Tensor([13, 2, 16, 1, 0],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 0],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([0, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 0, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 0, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 0, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 0],"int64"), )
paddle.not_equal(Tensor([13, 7],"int64"), Tensor([0, 7],"int64"), )
paddle.not_equal(Tensor([13, 7],"int64"), Tensor([13, 0],"int64"), )
paddle.not_equal(Tensor([14, 0],"int32"), Tensor([14, 0],"int32"), )
paddle.not_equal(Tensor([14, 0],"int32"), Tensor([14, 7],"int32"), )
paddle.not_equal(Tensor([14, 7],"int32"), Tensor([0, 7],"int32"), )
paddle.not_equal(Tensor([14, 7],"int32"), Tensor([14, 0],"int32"), )
paddle.not_equal(Tensor([20],"int64"), Tensor([0],"int64"), )
paddle.not_equal(Tensor([2112],"int64"), Tensor([0],"int64"), )
paddle.not_equal(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.not_equal(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.not_equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.not_equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.not_equal(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.not_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.not_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.not_equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([0, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(x=Tensor([0, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.not_equal(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.not_equal(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.not_equal(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.not_equal(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.not_equal(x=Tensor([0, 3],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([0, 3],"float64"), y=Tensor([3],"float64"), )
paddle.not_equal(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.not_equal(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.not_equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([1, 0, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 0, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 0, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 0],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.not_equal(x=Tensor([1, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([1, 1, 0, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 0, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([1, 1, 1, 0, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 0, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 0, 3],"float64"), y=Tensor([1, 1, 1, 1, 0, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 0, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 0, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 0],"float64"), y=Tensor([1, 1, 1, 1, 3, 0],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 0],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 0],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 0, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 0, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 0, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 0, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 0],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 0],"float64"), )
paddle.not_equal(x=Tensor([1, 2, 0, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 2, 1, 0],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 0],"float64"), )
paddle.not_equal(x=Tensor([1, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.not_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.not_equal(x=Tensor([1, 3],"float64"), y=Tensor([0, 1, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 0, 1, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 0, 3, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 0, 3],"float64"), )
paddle.not_equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 3, 0],"float64"), )
paddle.not_equal(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.not_equal(x=Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.not_equal(x=Tensor([3, 0],"float32"), y=Tensor([3, 3],"float32"), )
paddle.not_equal(x=Tensor([3, 0],"float64"), y=Tensor([3],"float64"), )
paddle.not_equal(x=Tensor([3, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.not_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.not_equal(x=Tensor([3, 3],"float64"), y=Tensor([0],"float64"), )
paddle.numel(Tensor([0, 1, 1],"float32"), )
paddle.numel(Tensor([0, 1, 36],"float32"), )
paddle.numel(Tensor([0, 1, 512, 4, 4],"float32"), )
paddle.numel(Tensor([0, 10],"float16"), )
paddle.numel(Tensor([0, 10],"float64"), )
paddle.numel(Tensor([0, 2, 1, 512, 4, 4],"float32"), )
paddle.numel(Tensor([0, 3, 4, 10],"float32"), )
paddle.numel(Tensor([0, 3, 4, 10],"float64"), )
paddle.numel(Tensor([0],"bool"), )
paddle.numel(Tensor([0],"float32"), )
paddle.numel(Tensor([1, 0, 1],"float32"), )
paddle.numel(Tensor([1, 0, 36],"float32"), )
paddle.numel(Tensor([1, 0, 4, 10],"float32"), )
paddle.numel(Tensor([1, 0, 4, 10],"float64"), )
paddle.numel(Tensor([1, 0],"float16"), )
paddle.numel(Tensor([1, 0],"float64"), )
paddle.numel(Tensor([1, 1, 0],"float32"), )
paddle.numel(Tensor([1, 3, 0, 10],"float32"), )
paddle.numel(Tensor([1, 3, 0, 10],"float64"), )
paddle.numel(Tensor([1, 3, 4, 0],"float32"), )
paddle.numel(Tensor([1, 3, 4, 0],"float64"), )
paddle.numel(Tensor([2, 0, 512, 4, 4],"float32"), )
paddle.numel(Tensor([2, 1, 0, 4, 4],"float32"), )
paddle.numel(Tensor([2, 1, 512, 0, 4],"float32"), )
paddle.numel(Tensor([2, 1, 512, 4, 0],"float32"), )
paddle.numel(Tensor([4, 0, 1, 512, 4, 4],"float32"), )
paddle.numel(Tensor([4, 2, 0, 512, 4, 4],"float32"), )
paddle.numel(Tensor([4, 2, 1, 0, 4, 4],"float32"), )
paddle.numel(Tensor([4, 2, 1, 512, 0, 4],"float32"), )
paddle.numel(Tensor([4, 2, 1, 512, 4, 0],"float32"), )
paddle.numel(x=Tensor([0, 5],"float16"), )
paddle.numel(x=Tensor([0, 5],"float32"), )
paddle.numel(x=Tensor([4, 0],"float16"), )
paddle.numel(x=Tensor([4, 0],"float32"), )
paddle.ones_like(Tensor([0, 1, 1],"int32"), dtype=VarType(float32), )
paddle.ones_like(Tensor([0, 1, 5, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 1],"int64"), dtype="bool", )
paddle.ones_like(Tensor([0, 1],"int64"), dtype="int64", )
paddle.ones_like(Tensor([0, 1],"int64"), dtype=Dtype(int64), )
paddle.ones_like(Tensor([0, 2, 2],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 2, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 2, 2],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 2, 3],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 2, 3],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 20],"int64"), dtype="int64", )
paddle.ones_like(Tensor([0, 3, 2, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 3, 2],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 3, 5, 4],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 3, 5, 4],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 3],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 3],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 3],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 5],"int64"), dtype="bool", )
paddle.ones_like(Tensor([0, 7],"int32"), dtype=Dtype(int64), )
paddle.ones_like(Tensor([0],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0],"int64"), dtype="int32", )
paddle.ones_like(Tensor([1, 0, 1],"int32"), dtype=VarType(float32), )
paddle.ones_like(Tensor([1, 0, 2, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([1, 0, 2],"float64"), dtype="float64", )
paddle.ones_like(Tensor([1, 0],"int64"), dtype="bool", )
paddle.ones_like(Tensor([1, 0],"int64"), dtype="int64", )
paddle.ones_like(Tensor([1, 0],"int64"), dtype=Dtype(int64), )
paddle.ones_like(Tensor([1, 1, 0],"int32"), dtype=VarType(float32), )
paddle.ones_like(Tensor([1, 3, 0, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([1, 3, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([1, 3, 2, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([13, 0],"int32"), dtype=Dtype(int64), )
paddle.ones_like(Tensor([2, 0, 2],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0, 2],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 0, 3],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0, 3],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0, 5, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0, 5, 4],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0, 5, 4],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 0],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 1, 0, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 1, 5, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 2, 0],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 2, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 2, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 3, 0, 4],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 3, 0, 4],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 3, 5, 0],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 3, 5, 0],"float64"), dtype="float64", )
paddle.outer(Tensor([0, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.outer(Tensor([0, 10, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.outer(Tensor([0, 50],"complex128"), Tensor([50],"complex128"), )
paddle.outer(Tensor([0, 50],"float64"), Tensor([50],"float64"), )
paddle.outer(Tensor([20, 0],"complex128"), Tensor([50],"complex128"), )
paddle.outer(Tensor([20, 0],"float64"), Tensor([50],"float64"), )
paddle.outer(Tensor([20, 50],"complex128"), Tensor([0],"complex128"), )
paddle.outer(Tensor([20, 50],"float64"), Tensor([0],"float64"), )
paddle.outer(Tensor([5, 0, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.outer(Tensor([5, 0, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.outer(Tensor([5, 10, 0],"complex128"), Tensor([2, 10],"complex128"), )
paddle.outer(Tensor([5, 10, 0],"float64"), Tensor([2, 10],"float64"), )
paddle.outer(Tensor([5, 10, 10],"complex128"), Tensor([0, 10],"complex128"), )
paddle.outer(Tensor([5, 10, 10],"complex128"), Tensor([2, 0],"complex128"), )
paddle.outer(Tensor([5, 10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.outer(Tensor([5, 10, 10],"float64"), Tensor([2, 0],"float64"), )
paddle.outer(x=Tensor([0, 2, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.outer(x=Tensor([0, 2, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.outer(x=Tensor([0, 2, 5, 2],"float64"), y=Tensor([0, 3, 4, 4],"float64"), )
paddle.outer(x=Tensor([0, 2, 5, 2],"float64"), y=Tensor([2, 3, 4, 4],"float64"), )
paddle.outer(x=Tensor([0, 2],"float64"), y=Tensor([2, 3, 4],"float64"), )
paddle.outer(x=Tensor([0, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.outer(x=Tensor([0, 4],"float32"), y=Tensor([1, 4],"float32"), )
paddle.outer(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.outer(x=Tensor([0, 4],"float64"), y=Tensor([1, 4],"float64"), )
paddle.outer(x=Tensor([1, 0],"float32"), y=Tensor([1, 0],"float32"), )
paddle.outer(x=Tensor([1, 0],"float32"), y=Tensor([1, 4],"float32"), )
paddle.outer(x=Tensor([1, 0],"float64"), y=Tensor([1, 0],"float64"), )
paddle.outer(x=Tensor([1, 0],"float64"), y=Tensor([1, 4],"float64"), )
paddle.outer(x=Tensor([1, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.outer(x=Tensor([1, 4],"float32"), y=Tensor([1, 0],"float32"), )
paddle.outer(x=Tensor([1, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.outer(x=Tensor([1, 4],"float64"), y=Tensor([1, 0],"float64"), )
paddle.outer(x=Tensor([4, 0, 3],"float64"), y=Tensor([4, 0, 3],"float64"), )
paddle.outer(x=Tensor([4, 0, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.outer(x=Tensor([4, 0, 5, 2],"float64"), y=Tensor([2, 0, 4, 4],"float64"), )
paddle.outer(x=Tensor([4, 0, 5, 2],"float64"), y=Tensor([2, 3, 4, 4],"float64"), )
paddle.outer(x=Tensor([4, 0],"float64"), y=Tensor([2, 3, 4],"float64"), )
paddle.outer(x=Tensor([4, 2, 0, 2],"float64"), y=Tensor([2, 3, 0, 4],"float64"), )
paddle.outer(x=Tensor([4, 2, 0, 2],"float64"), y=Tensor([2, 3, 4, 4],"float64"), )
paddle.outer(x=Tensor([4, 2, 0],"float64"), y=Tensor([4, 2, 0],"float64"), )
paddle.outer(x=Tensor([4, 2, 0],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 0, 3],"float64"), )
paddle.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2, 0],"float64"), )
paddle.outer(x=Tensor([4, 2, 5, 0],"float64"), y=Tensor([2, 3, 4, 0],"float64"), )
paddle.outer(x=Tensor([4, 2, 5, 0],"float64"), y=Tensor([2, 3, 4, 4],"float64"), )
paddle.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([0, 3, 4, 4],"float64"), )
paddle.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([2, 0, 4, 4],"float64"), )
paddle.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([2, 3, 0, 4],"float64"), )
paddle.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([2, 3, 4, 0],"float64"), )
paddle.outer(x=Tensor([4, 2],"float64"), y=Tensor([0, 3, 4],"float64"), )
paddle.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3, 0],"float64"), )
paddle.polar(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.polar(Tensor([0],"float32"), Tensor([2],"float32"), )
paddle.polar(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.polar(Tensor([0],"float64"), Tensor([2],"float64"), )
paddle.polar(Tensor([2],"float32"), Tensor([0],"float32"), )
paddle.polar(Tensor([2],"float64"), Tensor([0],"float64"), )
paddle.positive(Tensor([0, 1024],"float32"), )
paddle.positive(Tensor([0, 3, 4, 5],"float16"), )
paddle.positive(Tensor([0, 3, 4, 5],"float32"), )
paddle.positive(Tensor([10, 0],"float32"), )
paddle.positive(Tensor([2, 0, 4, 5],"float16"), )
paddle.positive(Tensor([2, 0, 4, 5],"float32"), )
paddle.positive(Tensor([2, 3, 0, 5],"float16"), )
paddle.positive(Tensor([2, 3, 0, 5],"float32"), )
paddle.positive(Tensor([2, 3, 4, 0],"float16"), )
paddle.positive(Tensor([2, 3, 4, 0],"float32"), )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=list[0.1,0.2,0.3,], axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=list[0.2,0.67,], axis=list[1,-1,], )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=list[0.3,0.44,], axis=-2, )
paddle.quantile(Tensor([0, 3],"float32"), list[0.3,0.7,], 1, )
paddle.quantile(Tensor([0, 7, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([0, 7, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.quantile(Tensor([0],"float32"), list[0.55,0.7,], 0, )
paddle.quantile(Tensor([2, 0],"float32"), list[0.3,0.7,], 1, )
paddle.quantile(Tensor([4, 0, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([4, 0, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.quantile(Tensor([4, 7, 0],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([4, 7, 0],"float64"), q=0.75, axis=list[0,2,], )
paddle.quantile(Tensor([5, 0, 4],"float64"), q=list[0.1,0.2,0.3,], axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 0, 4],"float64"), q=list[0.2,0.67,], axis=list[1,-1,], )
paddle.quantile(Tensor([5, 0, 4],"float64"), q=list[0.3,0.44,], axis=-2, )
paddle.quantile(Tensor([5, 3, 0],"float64"), q=list[0.1,0.2,0.3,], axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 3, 0],"float64"), q=list[0.2,0.67,], axis=list[1,-1,], )
paddle.quantile(Tensor([5, 3, 0],"float64"), q=list[0.3,0.44,], axis=-2, )
paddle.quantile(x=Tensor([0, 6, 3, 4, 2, 5],"float64"), q=list[0.25,0.5,0.75,], axis=3, keepdim=False, )
paddle.quantile(x=Tensor([0, 6, 3, 4, 2, 5],"float64"), q=tuple(0.11,0.5,0.73,0.9,), axis=4, keepdim=False, )
paddle.quantile(x=Tensor([3, 0, 3, 4, 2, 5],"float64"), q=list[0.25,0.5,0.75,], axis=3, keepdim=False, )
paddle.quantile(x=Tensor([3, 0, 3, 4, 2, 5],"float64"), q=tuple(0.11,0.5,0.73,0.9,), axis=4, keepdim=False, )
paddle.quantile(x=Tensor([3, 6, 0, 4, 2, 5],"float64"), q=list[0.25,0.5,0.75,], axis=3, keepdim=False, )
paddle.quantile(x=Tensor([3, 6, 0, 4, 2, 5],"float64"), q=tuple(0.11,0.5,0.73,0.9,), axis=4, keepdim=False, )
paddle.quantile(x=Tensor([3, 6, 3, 0, 2, 5],"float64"), q=list[0.25,0.5,0.75,], axis=3, keepdim=False, )
paddle.quantile(x=Tensor([3, 6, 3, 0, 2, 5],"float64"), q=tuple(0.11,0.5,0.73,0.9,), axis=4, keepdim=False, )
paddle.quantile(x=Tensor([3, 6, 3, 4, 0, 5],"float64"), q=list[0.25,0.5,0.75,], axis=3, keepdim=False, )
paddle.quantile(x=Tensor([3, 6, 3, 4, 0, 5],"float64"), q=tuple(0.11,0.5,0.73,0.9,), axis=4, keepdim=False, )
paddle.quantile(x=Tensor([3, 6, 3, 4, 2, 0],"float64"), q=list[0.25,0.5,0.75,], axis=3, keepdim=False, )
paddle.quantile(x=Tensor([3, 6, 3, 4, 2, 0],"float64"), q=tuple(0.11,0.5,0.73,0.9,), axis=4, keepdim=False, )
paddle.rank(input=Tensor([0, 1, 1, 1],"bool"), )
paddle.rank(input=Tensor([0, 1, 1, 1],"float32"), )
paddle.rank(input=Tensor([0, 1],"float64"), )
paddle.rank(input=Tensor([0, 2],"float64"), )
paddle.rank(input=Tensor([0],"float64"), )
paddle.rank(input=Tensor([1, 0, 1, 1],"bool"), )
paddle.rank(input=Tensor([1, 0, 1, 1],"float32"), )
paddle.rank(input=Tensor([1, 1, 0, 1],"bool"), )
paddle.rank(input=Tensor([1, 1, 0, 1],"float32"), )
paddle.rank(input=Tensor([1, 1, 1, 0],"bool"), )
paddle.rank(input=Tensor([1, 1, 1, 0],"float32"), )
paddle.rank(input=Tensor([2, 0],"float64"), )
paddle.rank(input=Tensor([4, 0],"float64"), )
paddle.rank(Tensor([0, 5],"float32"), )
paddle.rank(Tensor([3, 0],"float32"), )
paddle.reduce_as(Tensor([0, 200, 40],"float32"), Tensor([200, 40],"float32"), )
paddle.reduce_as(Tensor([30, 0, 40],"float32"), Tensor([200, 40],"float32"), )
paddle.reduce_as(Tensor([30, 200, 0],"float32"), Tensor([200, 40],"float32"), )
paddle.reduce_as(Tensor([30, 200, 40],"float32"), Tensor([0, 40],"float32"), )
paddle.reduce_as(Tensor([30, 200, 40],"float32"), Tensor([200, 0],"float32"), )
paddle.remainder(Tensor([0, 1, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([0, 1, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([0, 2, 3, 4, 5],"float32"), Tensor([0, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([0, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([0, 2, 3, 4, 5],"float64"), Tensor([0, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([0, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([0, 3, 1, 5],"float32"), Tensor([0, 1, 4, 1],"float32"), )
paddle.remainder(Tensor([0, 3, 1, 5],"float32"), Tensor([2, 1, 4, 1],"float32"), )
paddle.remainder(Tensor([0, 3, 1, 5],"float64"), Tensor([0, 1, 4, 1],"float64"), )
paddle.remainder(Tensor([0, 3, 1, 5],"float64"), Tensor([2, 1, 4, 1],"float64"), )
paddle.remainder(Tensor([0, 3, 4, 5],"float32"), Tensor([1, 1, 5],"float32"), )
paddle.remainder(Tensor([0, 3, 4, 5],"float64"), Tensor([1, 1, 5],"float64"), )
paddle.remainder(Tensor([0, 4],"int64"), Tensor([1],"int64"), )
paddle.remainder(Tensor([0, 8],"int64"), Tensor([1],"int64"), )
paddle.remainder(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.remainder(Tensor([0],"int32"), Tensor([1],"int32"), )
paddle.remainder(Tensor([0],"int64"), Tensor([0],"int64"), None, )
paddle.remainder(Tensor([0],"int64"), Tensor([4],"int64"), None, )
paddle.remainder(Tensor([1, 0, 1, 5],"float32"), Tensor([2, 0, 4, 1],"float32"), )
paddle.remainder(Tensor([1, 0, 1, 5],"float32"), Tensor([2, 1, 4, 1],"float32"), )
paddle.remainder(Tensor([1, 0, 1, 5],"float64"), Tensor([2, 0, 4, 1],"float64"), )
paddle.remainder(Tensor([1, 0, 1, 5],"float64"), Tensor([2, 1, 4, 1],"float64"), )
paddle.remainder(Tensor([1, 0, 3, 4, 5],"float32"), Tensor([1, 0, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 0, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 0, 3, 4, 5],"float64"), Tensor([1, 0, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 0, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 0, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 0, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 1, 0],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 1, 0],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 1, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 1, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 1, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.remainder(Tensor([1, 1, 5],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.remainder(Tensor([1, 1, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 1, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 1, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.remainder(Tensor([1, 1, 5],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.remainder(Tensor([1, 2, 0, 4, 5],"float32"), Tensor([1, 2, 0, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 0, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 0, 4, 5],"float64"), Tensor([1, 2, 0, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 0, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 0, 5],"float32"), Tensor([1, 2, 3, 0, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 0, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 0, 5],"float64"), Tensor([1, 2, 3, 0, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 0, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 0],"float32"), Tensor([1, 2, 3, 4, 0],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 0],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 0],"float64"), Tensor([1, 2, 3, 4, 0],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 0],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([0, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([1, 0, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([1, 2, 0, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 0, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 0],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([0, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([1, 0, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([1, 2, 0, 4, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 0, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 0],"float64"), )
paddle.remainder(Tensor([1, 3, 0, 5],"float32"), Tensor([2, 1, 0, 1],"float32"), )
paddle.remainder(Tensor([1, 3, 0, 5],"float32"), Tensor([2, 1, 4, 1],"float32"), )
paddle.remainder(Tensor([1, 3, 0, 5],"float64"), Tensor([2, 1, 0, 1],"float64"), )
paddle.remainder(Tensor([1, 3, 0, 5],"float64"), Tensor([2, 1, 4, 1],"float64"), )
paddle.remainder(Tensor([1, 3, 1, 0],"float32"), Tensor([2, 1, 4, 0],"float32"), )
paddle.remainder(Tensor([1, 3, 1, 0],"float32"), Tensor([2, 1, 4, 1],"float32"), )
paddle.remainder(Tensor([1, 3, 1, 0],"float64"), Tensor([2, 1, 4, 0],"float64"), )
paddle.remainder(Tensor([1, 3, 1, 0],"float64"), Tensor([2, 1, 4, 1],"float64"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float32"), Tensor([0, 1, 4, 1],"float32"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float32"), Tensor([2, 0, 4, 1],"float32"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float32"), Tensor([2, 1, 0, 1],"float32"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float32"), Tensor([2, 1, 4, 0],"float32"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float64"), Tensor([0, 1, 4, 1],"float64"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float64"), Tensor([2, 0, 4, 1],"float64"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float64"), Tensor([2, 1, 0, 1],"float64"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float64"), Tensor([2, 1, 4, 0],"float64"), )
paddle.remainder(Tensor([1],"int32"), Tensor([0],"int32"), )
paddle.remainder(Tensor([2, 0, 4, 5],"float32"), Tensor([1, 1, 5],"float32"), )
paddle.remainder(Tensor([2, 0, 4, 5],"float64"), Tensor([1, 1, 5],"float64"), )
paddle.remainder(Tensor([2, 3, 0, 5],"float32"), Tensor([1, 1, 5],"float32"), )
paddle.remainder(Tensor([2, 3, 0, 5],"float64"), Tensor([1, 1, 5],"float64"), )
paddle.remainder(Tensor([2, 3, 4, 0],"float32"), Tensor([1, 1, 5],"float32"), )
paddle.remainder(Tensor([2, 3, 4, 0],"float64"), Tensor([1, 1, 5],"float64"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float32"), Tensor([0, 1, 5],"float32"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float32"), Tensor([1, 0, 5],"float32"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float64"), Tensor([0, 1, 5],"float64"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float64"), Tensor([1, 0, 5],"float64"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.remainder(Tensor([4, 0],"int64"), Tensor([1],"int64"), )
paddle.remainder(Tensor([4, 4],"int64"), Tensor([0],"int64"), )
paddle.remainder(Tensor([4, 8],"int64"), Tensor([0],"int64"), )
paddle.remainder(Tensor([4],"int64"), Tensor([0],"int64"), None, )
paddle.reshape(Tensor([0, 1, 3, 1],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([0, 128, 320000],"float16"), shape=list[0,0,-1,100,100,], )
paddle.reshape(Tensor([0, 128, 320000],"float32"), shape=list[0,0,-1,100,100,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[0,0,-1,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[-1,0,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[2,-1,0,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[2,3,0,-1,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[0,0,-1,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[-1,0,3,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[2,-1,0,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[2,3,0,-1,], )
paddle.reshape(Tensor([0, 256, 47, 156],"float32"), tuple(0,256,-1,), )
paddle.reshape(Tensor([0, 256, 81, 1],"float32"), tuple(0,256,-1,), )
paddle.reshape(Tensor([0, 3, 3],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([0, 3, 4],"complex128"), tuple(0,-1,), )
paddle.reshape(Tensor([0, 3, 4],"complex64"), tuple(0,-1,), )
paddle.reshape(Tensor([0, 4],"float32"), shape=tuple(0,-1,4,), )
paddle.reshape(Tensor([0, 40, 40, 12],"float32"), list[0,-1,2,], )
paddle.reshape(Tensor([0, 40, 40, 24],"float32"), list[0,-1,4,], )
paddle.reshape(Tensor([0, 512, 47, 156],"float32"), tuple(0,512,-1,), )
paddle.reshape(Tensor([0, 80, 80, 4],"float32"), list[0,-1,2,], )
paddle.reshape(Tensor([0, 80, 80, 8],"float32"), list[0,-1,4,], )
paddle.reshape(Tensor([0, 81, 47, 156],"float32"), tuple(0,81,-1,), )
paddle.reshape(Tensor([11, 0],"float32"), shape=tuple(0,-1,4,), )
paddle.reshape(Tensor([13, 0, 3, 1],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([13, 0, 3],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([13, 1, 0, 1],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([13, 1, 3, 0],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([13, 3, 0],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([2, 0, 4],"complex128"), tuple(0,-1,), )
paddle.reshape(Tensor([2, 0, 4],"complex64"), tuple(0,-1,), )
paddle.reshape(Tensor([2, 3, 0],"complex128"), tuple(0,-1,), )
paddle.reshape(Tensor([2, 3, 0],"complex64"), tuple(0,-1,), )
paddle.reshape(Tensor([21, 0],"float32"), shape=tuple(0,-1,4,), )
paddle.reshape(Tensor([4, 0, 40, 12],"float32"), list[0,-1,2,], )
paddle.reshape(Tensor([4, 0, 40, 24],"float32"), list[0,-1,4,], )
paddle.reshape(Tensor([4, 0, 47, 156],"float32"), tuple(0,256,-1,), )
paddle.reshape(Tensor([4, 0, 47, 156],"float32"), tuple(0,512,-1,), )
paddle.reshape(Tensor([4, 0, 47, 156],"float32"), tuple(0,81,-1,), )
paddle.reshape(Tensor([4, 0, 80, 4],"float32"), list[0,-1,2,], )
paddle.reshape(Tensor([4, 0, 80, 8],"float32"), list[0,-1,4,], )
paddle.reshape(Tensor([4, 0, 81, 1],"float32"), tuple(0,256,-1,), )
paddle.reshape(Tensor([4, 256, 0, 1],"float32"), tuple(0,256,-1,), )
paddle.reshape(Tensor([4, 256, 0, 156],"float32"), tuple(0,256,-1,), )
paddle.reshape(Tensor([4, 256, 47, 0],"float32"), tuple(0,256,-1,), )
paddle.reshape(Tensor([4, 256, 81, 0],"float32"), tuple(0,256,-1,), )
paddle.reshape(Tensor([4, 40, 0, 12],"float32"), list[0,-1,2,], )
paddle.reshape(Tensor([4, 40, 0, 24],"float32"), list[0,-1,4,], )
paddle.reshape(Tensor([4, 40, 40, 0],"float32"), list[0,-1,2,], )
paddle.reshape(Tensor([4, 40, 40, 0],"float32"), list[0,-1,4,], )
paddle.reshape(Tensor([4, 512, 0, 156],"float32"), tuple(0,512,-1,), )
paddle.reshape(Tensor([4, 512, 47, 0],"float32"), tuple(0,512,-1,), )
paddle.reshape(Tensor([4, 80, 0, 4],"float32"), list[0,-1,2,], )
paddle.reshape(Tensor([4, 80, 0, 8],"float32"), list[0,-1,4,], )
paddle.reshape(Tensor([4, 80, 80, 0],"float32"), list[0,-1,2,], )
paddle.reshape(Tensor([4, 80, 80, 0],"float32"), list[0,-1,4,], )
paddle.reshape(Tensor([4, 81, 0, 156],"float32"), tuple(0,81,-1,), )
paddle.reshape(Tensor([4, 81, 47, 0],"float32"), tuple(0,81,-1,), )
paddle.reshape(Tensor([52, 0, 3, 1],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([52, 0, 3],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([52, 1, 0, 1],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([52, 1, 3, 0],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([52, 3, 0],"float32"), list[0,0,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[0,0,-1,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,0,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,-1,0,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,3,0,-1,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[0,0,-1,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,0,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,-1,0,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,3,0,-1,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[0,0,-1,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,0,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,-1,0,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,3,0,-1,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[0,0,-1,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,0,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,-1,0,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,3,0,-1,], )
paddle.reshape(Tensor([8, 0, 320000],"float16"), shape=list[0,0,-1,100,100,], )
paddle.reshape(Tensor([8, 0, 320000],"float32"), shape=list[0,0,-1,100,100,], )
paddle.reshape(Tensor([8, 128, 0],"float16"), shape=list[0,0,-1,100,100,], )
paddle.reshape(Tensor([8, 128, 0],"float32"), shape=list[0,0,-1,100,100,], )
paddle.reshape(x=Tensor([0, 1, 32],"float32"), shape=list[0,0,4,8,], )
paddle.reshape(x=Tensor([0, 1, 8],"float32"), shape=list[0,0,2,4,], )
paddle.reshape(x=Tensor([0, 10, 36],"float32"), shape=list[0,0,6,6,], )
paddle.reshape(x=Tensor([0, 1024, 4, 256],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([0, 11, 512],"float32"), shape=list[0,0,16,32,], )
paddle.reshape(x=Tensor([0, 11, 8, 32],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([0, 1100, 8, 32],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([0, 1156, 4, 256],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([0, 140, 2, 1],"float32"), shape=list[0,0,2,], )
paddle.reshape(x=Tensor([0, 140, 2],"float32"), shape=list[0,0,2,1,], )
paddle.reshape(x=Tensor([0, 15, 8],"float32"), shape=list[0,0,2,4,], )
paddle.reshape(x=Tensor([0, 17, 16],"float32"), shape=list[0,0,4,4,], )
paddle.reshape(x=Tensor([0, 2],"float64"), shape=list[2,0,], )
paddle.reshape(x=Tensor([0, 20, 16],"float32"), shape=list[0,0,4,4,], )
paddle.reshape(x=Tensor([0, 3, 36],"float32"), shape=list[0,0,6,6,], )
paddle.reshape(x=Tensor([0, 324, 8, 64],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([0, 4, 512],"float32"), shape=list[0,0,8,64,], )
paddle.reshape(x=Tensor([0, 400, 8, 48],"float32"), shape=list[0,0,384,], )
paddle.reshape(x=Tensor([0, 400, 8, 64],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([0, 529, 8, 48],"float32"), shape=list[0,0,384,], )
paddle.reshape(x=Tensor([0, 7, 4, 8],"float32"), shape=list[0,0,32,], )
paddle.reshape(x=Tensor([1, 0, 16],"float32"), shape=list[0,0,4,4,], )
paddle.reshape(x=Tensor([1, 0, 32],"float32"), shape=list[0,0,4,8,], )
paddle.reshape(x=Tensor([1, 0, 4, 256],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 0, 512],"float32"), shape=list[0,0,16,32,], )
paddle.reshape(x=Tensor([1, 0, 8, 32],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 0, 8, 48],"float32"), shape=list[0,0,384,], )
paddle.reshape(x=Tensor([1, 0, 8, 64],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([1, 1, 0],"float32"), shape=list[0,0,4,8,], )
paddle.reshape(x=Tensor([1, 1024, 0, 256],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 1024, 4, 0],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 11, 0, 32],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 11, 0],"float32"), shape=list[0,0,16,32,], )
paddle.reshape(x=Tensor([1, 11, 8, 0],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 1100, 0, 32],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 1100, 8, 0],"float32"), shape=list[0,0,256,], )
paddle.reshape(x=Tensor([1, 1156, 0, 256],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 1156, 4, 0],"float32"), shape=list[0,0,1024,], )
paddle.reshape(x=Tensor([1, 20, 0],"float32"), shape=list[0,0,4,4,], )
paddle.reshape(x=Tensor([1, 324, 0, 64],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([1, 324, 8, 0],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([1, 400, 0, 64],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([1, 400, 8, 0],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([1, 529, 0, 48],"float32"), shape=list[0,0,384,], )
paddle.reshape(x=Tensor([1, 529, 8, 0],"float32"), shape=list[0,0,384,], )
paddle.reshape(x=Tensor([12, 0, 16],"float32"), shape=list[0,0,4,4,], )
paddle.reshape(x=Tensor([12, 17, 0],"float32"), shape=list[0,0,4,4,], )
paddle.reshape(x=Tensor([13, 0, 4, 8],"float32"), shape=list[0,0,32,], )
paddle.reshape(x=Tensor([13, 7, 0, 8],"float32"), shape=list[0,0,32,], )
paddle.reshape(x=Tensor([13, 7, 4, 0],"float32"), shape=list[0,0,32,], )
paddle.reshape(x=Tensor([14, 0, 32],"float32"), shape=list[0,0,4,8,], )
paddle.reshape(x=Tensor([14, 1, 0],"float32"), shape=list[0,0,4,8,], )
paddle.reshape(x=Tensor([2, 0, 36],"float32"), shape=list[0,0,6,6,], )
paddle.reshape(x=Tensor([2, 0, 8, 48],"float32"), shape=list[0,0,384,], )
paddle.reshape(x=Tensor([2, 0],"float64"), shape=list[2,0,], )
paddle.reshape(x=Tensor([2, 10, 0],"float32"), shape=list[0,0,6,6,], )
paddle.reshape(x=Tensor([2, 3, 0],"float32"), shape=list[0,0,6,6,], )
paddle.reshape(x=Tensor([2, 400, 0, 48],"float32"), shape=list[0,0,384,], )
paddle.reshape(x=Tensor([2, 400, 8, 0],"float32"), shape=list[0,0,384,], )
paddle.reshape(x=Tensor([32, 0, 512],"float32"), shape=list[0,0,8,64,], )
paddle.reshape(x=Tensor([32, 4, 0],"float32"), shape=list[0,0,8,64,], )
paddle.reshape(x=Tensor([5, 0, 8],"float32"), shape=list[0,0,2,4,], )
paddle.reshape(x=Tensor([5, 1, 0],"float32"), shape=list[0,0,2,4,], )
paddle.reshape(x=Tensor([5, 15, 0],"float32"), shape=list[0,0,2,4,], )
paddle.reshape(x=Tensor([52, 0, 4, 8],"float32"), shape=list[0,0,32,], )
paddle.reshape(x=Tensor([52, 7, 0, 8],"float32"), shape=list[0,0,32,], )
paddle.reshape(x=Tensor([52, 7, 4, 0],"float32"), shape=list[0,0,32,], )
paddle.reshape(x=Tensor([58, 0, 2, 1],"float32"), shape=list[0,0,2,], )
paddle.reshape(x=Tensor([58, 0, 2],"float32"), shape=list[0,0,2,1,], )
paddle.reshape(x=Tensor([58, 140, 0, 1],"float32"), shape=list[0,0,2,], )
paddle.reshape(x=Tensor([58, 140, 0],"float32"), shape=list[0,0,2,1,], )
paddle.reshape(x=Tensor([58, 140, 2, 0],"float32"), shape=list[0,0,2,], )
paddle.reverse(Tensor([0, 1, 2],"float32"), axis=list[0,], )
paddle.reverse(Tensor([0, 1, 3],"float32"), axis=0, )
paddle.reverse(Tensor([0, 1, 4],"float32"), axis=1, )
paddle.reverse(Tensor([0, 12, 32],"float64"), axis=1, )
paddle.reverse(Tensor([0, 13, 3],"int64"), list[0,], )
paddle.reverse(Tensor([0, 4, 16],"float64"), axis=list[0,], )
paddle.reverse(Tensor([0, 4, 8],"float64"), axis=0, )
paddle.reverse(Tensor([0, 4],"float64"), axis=list[0,], )
paddle.reverse(Tensor([0, 7],"int64"), list[1,], )
paddle.reverse(Tensor([1, 0, 2],"float32"), axis=list[0,], )
paddle.reverse(Tensor([1, 0, 4],"float32"), axis=1, )
paddle.reverse(Tensor([1, 1, 0],"float32"), axis=1, )
paddle.reverse(Tensor([1, 1, 0],"float32"), axis=list[0,], )
paddle.reverse(Tensor([12, 0, 16],"float64"), axis=list[0,], )
paddle.reverse(Tensor([12, 0, 8],"float64"), axis=0, )
paddle.reverse(Tensor([12, 0],"float64"), axis=list[0,], )
paddle.reverse(Tensor([12, 4, 0],"float64"), axis=0, )
paddle.reverse(Tensor([12, 4, 0],"float64"), axis=list[0,], )
paddle.reverse(Tensor([13, 0],"int64"), list[1,], )
paddle.reverse(Tensor([2, 0, 3],"float32"), axis=0, )
paddle.reverse(Tensor([2, 1, 0],"float32"), axis=0, )
paddle.reverse(Tensor([4, 0, 32],"float64"), axis=1, )
paddle.reverse(Tensor([4, 12, 0],"float64"), axis=1, )
paddle.reverse(Tensor([6, 0, 3],"int64"), list[0,], )
paddle.reverse(Tensor([6, 13, 0],"int64"), list[0,], )
paddle.roll(Tensor([0, 3],"int64"), shifts=Tensor([2],"int64"), axis=list[0,1,], )
paddle.roll(Tensor([0, 4, 2],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([0, 5, 4, 4],"complex128"), Tensor([1],"int64"), 3, name=None, )
paddle.roll(Tensor([0, 5, 4, 4],"complex128"), Tensor([2],"int64"), tuple(0,3,), name=None, )
paddle.roll(Tensor([0, 5, 4, 4],"complex128"), Tensor([2],"int64"), tuple(1,3,), name=None, )
paddle.roll(Tensor([0, 5, 4, 4],"complex128"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([0, 5, 4, 4],"float64"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([0, 5, 4],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([0],"float32"), Tensor([0],"int64"), list[0,], name=None, )
paddle.roll(Tensor([0],"float32"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(Tensor([0],"float64"), Tensor([0],"int64"), list[0,], name=None, )
paddle.roll(Tensor([0],"float64"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(Tensor([10],"float32"), Tensor([0],"int64"), list[0,], name=None, )
paddle.roll(Tensor([10],"float64"), Tensor([0],"int64"), list[0,], name=None, )
paddle.roll(Tensor([2, 0, 2],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([2, 4, 0],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([2, 4, 2],"float64"), Tensor([0],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([3, 0],"int64"), shifts=Tensor([2],"int64"), axis=list[0,1,], )
paddle.roll(Tensor([3, 3],"int64"), shifts=Tensor([0],"int64"), axis=list[0,1,], )
paddle.roll(Tensor([4, 0, 4, 4],"complex128"), Tensor([1],"int64"), 3, name=None, )
paddle.roll(Tensor([4, 0, 4, 4],"complex128"), Tensor([2],"int64"), tuple(0,3,), name=None, )
paddle.roll(Tensor([4, 0, 4, 4],"complex128"), Tensor([2],"int64"), tuple(1,3,), name=None, )
paddle.roll(Tensor([4, 0, 4, 4],"complex128"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 0, 4, 4],"float64"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 0, 4],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([4, 5, 0, 4],"complex128"), Tensor([1],"int64"), 3, name=None, )
paddle.roll(Tensor([4, 5, 0, 4],"complex128"), Tensor([2],"int64"), tuple(0,3,), name=None, )
paddle.roll(Tensor([4, 5, 0, 4],"complex128"), Tensor([2],"int64"), tuple(1,3,), name=None, )
paddle.roll(Tensor([4, 5, 0, 4],"complex128"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 0, 4],"float64"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 0],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([4, 5, 4, 0],"complex128"), Tensor([1],"int64"), 3, name=None, )
paddle.roll(Tensor([4, 5, 4, 0],"complex128"), Tensor([2],"int64"), tuple(0,3,), name=None, )
paddle.roll(Tensor([4, 5, 4, 0],"complex128"), Tensor([2],"int64"), tuple(1,3,), name=None, )
paddle.roll(Tensor([4, 5, 4, 0],"complex128"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 4, 0],"float64"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([0],"int64"), 3, name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([0],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([0],"int64"), tuple(0,3,), name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([0],"int64"), tuple(1,3,), name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"float64"), Tensor([0],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 4],"float64"), Tensor([0],"int64"), list[0,1,2,], name=None, )
paddle.round(Tensor([0, 128],"float32"), )
paddle.round(Tensor([0, 3, 4],"float64"), )
paddle.round(Tensor([0, 512],"float16"), )
paddle.round(Tensor([0, 8, 64, 64],"float16"), )
paddle.round(Tensor([0],"float32"), )
paddle.round(Tensor([0],"float64"), )
paddle.round(Tensor([1, 0, 4],"float64"), )
paddle.round(Tensor([1, 3, 0],"float64"), )
paddle.round(Tensor([128, 0],"float16"), )
paddle.round(Tensor([128, 0],"float32"), )
paddle.round(Tensor([2, 0, 64, 64],"float16"), )
paddle.round(Tensor([2, 8, 0, 64],"float16"), )
paddle.round(Tensor([2, 8, 64, 0],"float16"), )
paddle.round(x=Tensor([0, 3, 3],"float32"), )
paddle.round(x=Tensor([0, 3, 3],"float64"), )
paddle.round(x=Tensor([3, 0, 3],"float32"), )
paddle.round(x=Tensor([3, 0, 3],"float64"), )
paddle.round(x=Tensor([3, 3, 0],"float32"), )
paddle.round(x=Tensor([3, 3, 0],"float64"), )
paddle.scale(Tensor([0, 1, 1, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([0, 1, 1, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([0, 1, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([0, 1, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([0, 1],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([0, 10, 15, 20],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([0, 10, 15, 20],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([0, 128, 32, 32],"float16"), 0.08838834764831843, )
paddle.scale(Tensor([0, 128, 32, 32],"float32"), 0.08838834764831843, )
paddle.scale(Tensor([0, 128, 32, 32],"float32"), 0.17677669529663687, )
paddle.scale(Tensor([0, 16, 1, 129],"float32"), scale=0.125, )
paddle.scale(Tensor([0, 16, 128, 128],"float16"), scale=0.125, )
paddle.scale(Tensor([0, 16, 32, 32],"float32"), 0.25, )
paddle.scale(Tensor([0, 2, 140, 140],"float32"), scale=0.7071067811865476, )
paddle.scale(Tensor([0, 2],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([0, 25],"float32"), 2.0, 3.0, )
paddle.scale(Tensor([0, 256, 128, 128],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([0, 3, 3, 40, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([0, 3, 4, 5, 6],"float32"), scale=Tensor([1],"float32"), )
paddle.scale(Tensor([0, 3, 40, 40, 3],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([0, 3, 40, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([0, 3],"float32"), scale=0.0, )
paddle.scale(Tensor([0, 3],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([0, 3],"float32"), scale=1.0, )
paddle.scale(Tensor([0, 3],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([0, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([0, 40, 40, 3],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([0, 40, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([0, 40],"bfloat16"), scale=0.0, )
paddle.scale(Tensor([0, 40],"bfloat16"), scale=1.0, )
paddle.scale(Tensor([0, 40],"bfloat16"), scale=-1.7580993408473766, )
paddle.scale(Tensor([0, 8, 128, 128],"float32"), 0.25, )
paddle.scale(Tensor([0, 8, 32, 32],"float32"), 0.35355339059327373, )
paddle.scale(Tensor([0, 8, 4, 32],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([0, 8, 4, 4],"float32"), scale=0.04419417382415922, )
paddle.scale(Tensor([0, 8, 8],"float32"), scale=0.25, )
paddle.scale(Tensor([0],"float16"), 0.125, )
paddle.scale(Tensor([0],"float16"), 0.25, )
paddle.scale(Tensor([0],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([0],"float64"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([1, 0, 128, 128],"float32"), 0.25, )
paddle.scale(Tensor([1, 0, 32, 32],"float16"), 0.08838834764831843, )
paddle.scale(Tensor([1, 0, 32, 32],"float32"), 0.08838834764831843, )
paddle.scale(Tensor([1, 0, 32, 32],"float32"), 0.17677669529663687, )
paddle.scale(Tensor([1, 0, 32, 32],"float32"), 0.25, )
paddle.scale(Tensor([1, 0, 32, 32],"float32"), 0.35355339059327373, )
paddle.scale(Tensor([1, 128, 0, 32],"float16"), 0.08838834764831843, )
paddle.scale(Tensor([1, 128, 0, 32],"float32"), 0.08838834764831843, )
paddle.scale(Tensor([1, 128, 0, 32],"float32"), 0.17677669529663687, )
paddle.scale(Tensor([1, 128, 32, 0],"float16"), 0.08838834764831843, )
paddle.scale(Tensor([1, 128, 32, 0],"float32"), 0.08838834764831843, )
paddle.scale(Tensor([1, 128, 32, 0],"float32"), 0.17677669529663687, )
paddle.scale(Tensor([1, 16, 0, 32],"float32"), 0.25, )
paddle.scale(Tensor([1, 16, 32, 0],"float32"), 0.25, )
paddle.scale(Tensor([1, 8, 0, 128],"float32"), 0.25, )
paddle.scale(Tensor([1, 8, 0, 32],"float32"), 0.35355339059327373, )
paddle.scale(Tensor([1, 8, 128, 0],"float32"), 0.25, )
paddle.scale(Tensor([1, 8, 32, 0],"float32"), 0.35355339059327373, )
paddle.scale(Tensor([13, 0, 4, 32],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([13, 8, 0, 32],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([13, 8, 4, 0],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 0, 1, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 0, 1, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 0, 128, 128],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 0, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 0, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 0, 4, 5, 6],"float32"), scale=Tensor([1],"float32"), )
paddle.scale(Tensor([2, 0, 8],"float32"), scale=0.25, )
paddle.scale(Tensor([2, 0],"float32"), 2.0, 3.0, )
paddle.scale(Tensor([2, 0],"float32"), scale=0.0, )
paddle.scale(Tensor([2, 0],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([2, 0],"float32"), scale=1.0, )
paddle.scale(Tensor([2, 0],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([2, 0],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([2, 0],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 0, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 0, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 1, 0, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 0, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 1, 1, 0, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 1, 0, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 1, 1, 2, 0],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 1, 2, 0],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 1, 2, 0],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 2, 0],"float64"), scale=2.0, )
paddle.scale(Tensor([2, 256, 0, 128],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 256, 128, 0],"float32"), scale=1.1111111111111112, )
paddle.scale(Tensor([2, 3, 0, 5, 6],"float32"), scale=Tensor([1],"float32"), )
paddle.scale(Tensor([2, 3, 4, 0, 6],"float32"), scale=Tensor([1],"float32"), )
paddle.scale(Tensor([2, 3, 4, 5, 0],"float32"), scale=Tensor([1],"float32"), )
paddle.scale(Tensor([2, 3, 4, 5, 6],"float32"), scale=Tensor([0],"float32"), )
paddle.scale(Tensor([2, 8, 0],"float32"), scale=0.25, )
paddle.scale(Tensor([3, 0, 3, 40, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 0, 40, 3],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 0, 40, 40, 3],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 0, 40, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 0, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 0],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([3, 3, 0, 40, 3],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 3, 0, 40, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 3, 0, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 3, 3, 0, 40],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 3, 3, 40, 0],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 3, 40, 0, 3],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 3, 40, 0],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 3, 40, 40, 0],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 40, 0, 3],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 40, 0],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([3, 40, 40, 0],"float32"), scale=0.0001, bias=1.0, )
paddle.scale(Tensor([32, 0, 4, 4],"float32"), scale=0.04419417382415922, )
paddle.scale(Tensor([32, 8, 0, 4],"float32"), scale=0.04419417382415922, )
paddle.scale(Tensor([32, 8, 4, 0],"float32"), scale=0.04419417382415922, )
paddle.scale(Tensor([40, 0],"bfloat16"), scale=0.0, )
paddle.scale(Tensor([40, 0],"bfloat16"), scale=1.0, )
paddle.scale(Tensor([40, 0],"bfloat16"), scale=-1.7580993408473766, )
paddle.scale(Tensor([5, 0, 15, 20],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([5, 0, 15, 20],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([5, 10, 0, 20],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([5, 10, 0, 20],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([5, 10, 15, 0],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([5, 10, 15, 0],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([58, 0, 140, 140],"float32"), scale=0.7071067811865476, )
paddle.scale(Tensor([58, 2, 0, 140],"float32"), scale=0.7071067811865476, )
paddle.scale(Tensor([58, 2, 140, 0],"float32"), scale=0.7071067811865476, )
paddle.scale(Tensor([8, 0, 1, 129],"float32"), scale=0.125, )
paddle.scale(Tensor([8, 0, 128, 128],"float16"), scale=0.125, )
paddle.scale(Tensor([8, 16, 0, 128],"float16"), scale=0.125, )
paddle.scale(Tensor([8, 16, 0, 129],"float32"), scale=0.125, )
paddle.scale(Tensor([8, 16, 1, 0],"float32"), scale=0.125, )
paddle.scale(Tensor([8, 16, 128, 0],"float16"), scale=0.125, )
paddle.scale(x=Tensor([0, 140, 140],"float32"), scale=10000.0, bias=-1.0, bias_after_scale=False, )
paddle.scale(x=Tensor([0, 3, 3],"float32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([0, 3, 3],"float64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([0, 3, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=False, act=None, )
paddle.scale(x=Tensor([0, 3, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([0, 4, 512],"float32"), scale=22.627416997969522, )
paddle.scale(x=Tensor([3, 0, 3],"float32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 0, 3],"float64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 0, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=False, act=None, )
paddle.scale(x=Tensor([3, 0, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 0],"float32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 0],"float64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 0],"float64"), scale=2.0, bias=4.0, bias_after_scale=False, act=None, )
paddle.scale(x=Tensor([3, 3, 0],"float64"), scale=2.0, bias=4.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([32, 0, 512],"float32"), scale=22.627416997969522, )
paddle.scale(x=Tensor([32, 4, 0],"float32"), scale=22.627416997969522, )
paddle.scale(x=Tensor([58, 0, 140],"float32"), scale=10000.0, bias=-1.0, bias_after_scale=False, )
paddle.scale(x=Tensor([58, 140, 0],"float32"), scale=10000.0, bias=-1.0, bias_after_scale=False, )
paddle.searchsorted(sorted_sequence=Tensor([0, 5],"float32"), values=Tensor([0, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([0, 5],"float32"), values=Tensor([2, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([0, 5],"float64"), values=Tensor([0, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([0, 5],"float64"), values=Tensor([2, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([0],"float32"), values=Tensor([0],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([0],"float32"), values=Tensor([2, 2, 2],"float32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([0],"float32"), values=Tensor([2, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([0],"float32"), values=Tensor([2],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([0],"float32"), values=Tensor([3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([0],"float32"), values=Tensor([4, 2],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([0],"float64"), values=Tensor([2, 2, 2],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([2, 0],"float32"), values=Tensor([2, 0],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 0],"float32"), values=Tensor([2, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 0],"float64"), values=Tensor([2, 0],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 0],"float64"), values=Tensor([2, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float32"), values=Tensor([0, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float32"), values=Tensor([2, 0],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float64"), values=Tensor([0, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float64"), values=Tensor([2, 0],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([0, 2],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([0, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([0],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([2, 0],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([4, 0],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([7],"float32"), values=Tensor([0, 2, 2],"float32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"float32"), values=Tensor([2, 0, 2],"float32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"float32"), values=Tensor([2, 2, 0],"float32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"float64"), values=Tensor([0, 2, 2],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"float64"), values=Tensor([2, 0, 2],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([7],"float64"), values=Tensor([2, 2, 0],"float64"), right=True, )
paddle.searchsorted(Tensor([0],"bfloat16"), Tensor([0],"bfloat16"), )
paddle.searchsorted(Tensor([0],"bfloat16"), Tensor([512],"bfloat16"), )
paddle.searchsorted(Tensor([0],"float16"), Tensor([0],"float16"), )
paddle.searchsorted(Tensor([0],"float16"), Tensor([512],"float16"), )
paddle.searchsorted(Tensor([0],"float32"), Tensor([0],"float32"), right=True, )
paddle.searchsorted(Tensor([0],"float32"), Tensor([4],"float32"), right=True, )
paddle.searchsorted(Tensor([0],"float64"), Tensor([0],"float64"), right=True, )
paddle.searchsorted(Tensor([0],"float64"), Tensor([2, 3],"float64"), out_int32=True, )
paddle.searchsorted(Tensor([0],"float64"), Tensor([2, 3],"float64"), right=True, )
paddle.searchsorted(Tensor([0],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(Tensor([1024],"bfloat16"), Tensor([0],"bfloat16"), )
paddle.searchsorted(Tensor([1024],"float16"), Tensor([0],"float16"), )
paddle.searchsorted(Tensor([2],"float64"), Tensor([0],"float64"), right=True, )
paddle.searchsorted(Tensor([3],"float32"), Tensor([0],"float32"), right=True, )
paddle.searchsorted(Tensor([5],"float64"), Tensor([0, 3],"float64"), out_int32=True, )
paddle.searchsorted(Tensor([5],"float64"), Tensor([0, 3],"float64"), right=True, )
paddle.searchsorted(Tensor([5],"float64"), Tensor([2, 0],"float64"), out_int32=True, )
paddle.searchsorted(Tensor([5],"float64"), Tensor([2, 0],"float64"), right=True, )
paddle.shape(Tensor([0, 1, 1, 50],"float16"), )
paddle.shape(Tensor([0, 1, 16],"float32"), )
paddle.shape(Tensor([0, 1, 32],"float16"), )
paddle.shape(Tensor([0, 100],"complex128"), )
paddle.shape(Tensor([0, 100],"float64"), )
paddle.shape(Tensor([0, 128, 128, 128],"float32"), )
paddle.shape(Tensor([0, 188, 1, 1, 2, 6],"float32"), )
paddle.shape(Tensor([0, 188, 1, 1, 3],"float32"), )
paddle.shape(Tensor([0, 280, 376, 25, 3],"bool"), )
paddle.shape(Tensor([0, 3, 5, 5, 2, 1, 2, 2, 2],"float64"), )
paddle.shape(Tensor([0],"complex64"), )
paddle.shape(Tensor([0],"float64"), )
paddle.shape(Tensor([1, 0, 1, 50],"float16"), )
paddle.shape(Tensor([1, 0, 128, 128],"float32"), )
paddle.shape(Tensor([1, 0, 16],"float32"), )
paddle.shape(Tensor([1, 0, 32],"float16"), )
paddle.shape(Tensor([1, 0],"complex128"), )
paddle.shape(Tensor([1, 0],"float64"), )
paddle.shape(Tensor([1, 1, 0, 50],"float16"), )
paddle.shape(Tensor([1, 1, 0],"float16"), )
paddle.shape(Tensor([1, 1, 0],"float32"), )
paddle.shape(Tensor([1, 1, 1, 0],"float16"), )
paddle.shape(Tensor([1, 128, 0, 128],"float32"), )
paddle.shape(Tensor([1, 128, 128, 0],"float32"), )
paddle.shape(Tensor([140, 0, 1, 1, 2, 6],"float32"), )
paddle.shape(Tensor([140, 0, 1, 1, 3],"float32"), )
paddle.shape(Tensor([140, 188, 0, 1, 2, 6],"float32"), )
paddle.shape(Tensor([140, 188, 0, 1, 3],"float32"), )
paddle.shape(Tensor([140, 188, 1, 0, 2, 6],"float32"), )
paddle.shape(Tensor([140, 188, 1, 0, 3],"float32"), )
paddle.shape(Tensor([140, 188, 1, 1, 0, 6],"float32"), )
paddle.shape(Tensor([140, 188, 1, 1, 0],"float32"), )
paddle.shape(Tensor([140, 188, 1, 1, 2, 0],"float32"), )
paddle.shape(Tensor([2, 0, 5, 5, 2, 1, 2, 2, 2],"float64"), )
paddle.shape(Tensor([2, 3, 0, 5, 2, 1, 2, 2, 2],"float64"), )
paddle.shape(Tensor([2, 3, 5, 0, 2, 1, 2, 2, 2],"float64"), )
paddle.shape(Tensor([2, 3, 5, 5, 0, 1, 2, 2, 2],"float64"), )
paddle.shape(Tensor([2, 3, 5, 5, 2, 0, 2, 2, 2],"float64"), )
paddle.shape(Tensor([2, 3, 5, 5, 2, 1, 0, 2, 2],"float64"), )
paddle.shape(Tensor([2, 3, 5, 5, 2, 1, 2, 0, 2],"float64"), )
paddle.shape(Tensor([2, 3, 5, 5, 2, 1, 2, 2, 0],"float64"), )
paddle.shape(Tensor([4, 0, 376, 25, 3],"bool"), )
paddle.shape(Tensor([4, 280, 0, 25, 3],"bool"), )
paddle.shape(Tensor([4, 280, 376, 0, 3],"bool"), )
paddle.shape(Tensor([4, 280, 376, 25, 0],"bool"), )
paddle.sign(Tensor([0],"complex64"), )
paddle.signal.stft(n_fft=400, x=Tensor([0],"float32"), )
paddle.signal.stft(Tensor([0, 160000],"float64"), 512, 255, 499, Tensor([499],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([0, 160000],"float64"), 512, 255, None, Tensor([512],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([0, 160000],"float64"), 512, None, None, None, False, "reflect", False, True, )
paddle.signal.stft(Tensor([0, 160000],"float64"), 512, None, None, None, True, "reflect", False, True, )
paddle.signal.stft(Tensor([0, 160000],"float64"), 512, None, None, Tensor([512],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([0, 25500],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([0, 25500],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([0, 25500],"float32"), 512, 50, 240, window=Tensor([240],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([0],"float32"), 400, 160, window=Tensor([0],"float32"), )
paddle.signal.stft(Tensor([0],"float32"), 400, 160, window=Tensor([400],"float32"), )
paddle.signal.stft(Tensor([0],"float64"), 512, None, None, Tensor([0],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([0],"float64"), 512, None, None, Tensor([512],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([1, 0],"float64"), 512, 255, 499, Tensor([499],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([1, 0],"float64"), 512, 255, None, Tensor([512],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([1, 0],"float64"), 512, None, None, None, False, "reflect", False, True, )
paddle.signal.stft(Tensor([1, 0],"float64"), 512, None, None, None, True, "reflect", False, True, )
paddle.signal.stft(Tensor([1, 0],"float64"), 512, None, None, Tensor([512],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([1, 160000],"float64"), 512, 255, 499, Tensor([0],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([1, 160000],"float64"), 512, 255, None, Tensor([0],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([1, 160000],"float64"), 512, None, None, Tensor([0],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([16, 0],"float32"), 1024, 120, 600, window=Tensor([600],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 0],"float32"), 2048, 240, 1200, window=Tensor([1200],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 0],"float32"), 512, 50, 240, window=Tensor([240],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 25500],"float32"), 1024, 120, 600, window=Tensor([0],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 25500],"float32"), 2048, 240, 1200, window=Tensor([0],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([16, 25500],"float32"), 512, 50, 240, window=Tensor([0],"float32"), center=True, pad_mode="reflect", )
paddle.signal.stft(Tensor([160000],"float64"), 512, None, None, Tensor([0],"float64"), True, "reflect", False, True, )
paddle.signal.stft(Tensor([79949],"float32"), 400, 160, window=Tensor([0],"float32"), )
paddle.slice(input=Tensor([0, 140, 2],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(input=Tensor([58, 0, 2],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(input=Tensor([58, 140, 0],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,0,], list[13,1,16,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,0,], list[16,1,16,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,0,], list[3,1,16,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,16,], list[13,1,32,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,16,], list[16,1,32,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,16,], list[3,1,32,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,24,], list[13,1,40,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,24,], list[16,1,40,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,24,], list[3,1,40,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,32,], list[13,1,48,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,32,], list[16,1,48,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,32,], list[3,1,48,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,40,], list[13,1,56,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,40,], list[16,1,56,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,40,], list[3,1,56,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,48,], list[13,1,64,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,48,], list[16,1,64,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,48,], list[3,1,64,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,56,], list[13,1,72,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,56,], list[16,1,72,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,56,], list[3,1,72,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,64,], list[13,1,80,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,64,], list[16,1,80,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,64,], list[3,1,80,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,72,], list[13,1,88,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,72,], list[16,1,88,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,72,], list[3,1,88,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,8,], list[13,1,24,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,8,], list[16,1,24,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,8,], list[3,1,24,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,80,], list[13,1,96,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,80,], list[16,1,96,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,80,], list[3,1,96,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,88,], list[13,1,104,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,88,], list[16,1,104,], )
paddle.slice(Tensor([0, 1, 104],"float32"), list[0,1,2,], list[0,0,88,], list[3,1,104,], )
paddle.slice(Tensor([0, 1, 4],"float32"), axes=list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 1, 4],"float32"), axes=list[2,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 1, 4],"float32"), axes=list[2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 1, 4],"float32"), axes=list[2,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([0, 10, 5],"float32"), list[0,], list[0,], list[1,], )
paddle.slice(Tensor([0, 10, 5],"float32"), list[0,], list[0,], list[2,], )
paddle.slice(Tensor([0, 10, 5],"float32"), list[0,], list[1,], list[2,], )
paddle.slice(Tensor([0, 10, 5],"float32"), list[0,], list[2,], list[4,], )
paddle.slice(Tensor([0, 10],"int64"), axes=list[1,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([0, 16, 1024],"float16"), axes=list[0,], starts=list[0,], ends=list[128,], )
paddle.slice(Tensor([0, 16, 1024],"float16"), axes=list[0,], starts=list[128,], ends=list[256,], )
paddle.slice(Tensor([0, 16, 1024],"float16"), axes=list[0,], starts=list[256,], ends=list[384,], )
paddle.slice(Tensor([0, 16, 1024],"float16"), axes=list[0,], starts=list[384,], ends=list[512,], )
paddle.slice(Tensor([0, 16, 1024],"float16"), axes=list[0,], starts=list[512,], ends=list[640,], )
paddle.slice(Tensor([0, 16, 1024],"float16"), axes=list[0,], starts=list[640,], ends=list[768,], )
paddle.slice(Tensor([0, 16, 1024],"float16"), axes=list[0,], starts=list[768,], ends=list[896,], )
paddle.slice(Tensor([0, 16, 1024],"float16"), axes=list[0,], starts=list[896,], ends=list[1024,], )
paddle.slice(Tensor([0, 2, 100, 100],"float16"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 2, 100, 100],"float16"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 2, 100, 100],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 2, 100, 100],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[0,], ends=list[128,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[0,], ends=list[256,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[128,], ends=list[256,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[256,], ends=list[384,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[256,], ends=list[512,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[384,], ends=list[512,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[512,], ends=list[640,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[512,], ends=list[768,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[640,], ends=list[768,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[768,], ends=list[1024,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[768,], ends=list[896,], )
paddle.slice(Tensor([0, 2, 1024],"float16"), axes=list[0,], starts=list[896,], ends=list[1024,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,0,], list[16,2,16,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,0,], list[2,2,16,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,16,], list[16,2,32,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,16,], list[2,2,32,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,24,], list[16,2,40,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,24,], list[2,2,40,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,32,], list[16,2,48,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,32,], list[2,2,48,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,40,], list[16,2,56,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,40,], list[2,2,56,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,48,], list[16,2,64,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,48,], list[2,2,64,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,56,], list[16,2,72,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,56,], list[2,2,72,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,64,], list[16,2,80,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,64,], list[2,2,80,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,72,], list[16,2,88,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,72,], list[2,2,88,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,8,], list[16,2,24,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,8,], list[2,2,24,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,80,], list[16,2,96,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,80,], list[2,2,96,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,88,], list[16,2,104,], )
paddle.slice(Tensor([0, 2, 104],"float32"), list[0,1,2,], list[0,0,88,], list[2,2,104,], )
paddle.slice(Tensor([0, 2, 2, 3],"complex128"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 2, 2],"float64"), list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 2, 2],"float64"), list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 2, 2],"float64"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 2, 4],"int64"), list[1,2,], list[0,0,], list[2,2,], )
paddle.slice(Tensor([0, 2],"int64"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 2],"int64"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 2],"int64"), list[0,1,], tuple(0,0,), list[2,2,], )
paddle.slice(Tensor([0, 20, 20],"float16"), list[0,], list[0,], list[2,], )
paddle.slice(Tensor([0, 20, 20],"float16"), list[0,], list[0,], list[4,], )
paddle.slice(Tensor([0, 20, 20],"float16"), list[0,], list[2,], list[4,], )
paddle.slice(Tensor([0, 20, 20],"float16"), list[0,], list[4,], list[8,], )
paddle.slice(Tensor([0, 3, 2, 2],"complex128"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 3, 2],"float64"), list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 3, 2],"float64"), list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 3, 3],"float64"), list[0,2,], starts=list[0,0,], ends=list[1,2,], )
paddle.slice(Tensor([0, 3, 3],"float64"), list[1,2,], starts=list[0,0,], ends=list[1,2,], )
paddle.slice(Tensor([0, 3, 4, 5, 6],"float32"), axes=list[0,1,2,], starts=list[1,0,2,], ends=list[3,3,4,], )
paddle.slice(Tensor([0, 3, 4, 5, 6],"int64"), list[0,1,2,4,], list[0,1,2,-4,], list[3,3,4,-2,], )
paddle.slice(Tensor([0, 3, 4, 5],"int64"), list[0,1,2,3,], list[0,1,2,-4,], list[3,3,4,-2,], )
paddle.slice(Tensor([0, 3, 4],"int64"), axes=list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 3, 4],"int64"), axes=list[2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 3, 6],"int64"), axes=list[2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 3, 6],"int64"), axes=list[2,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([0, 3, 6],"int64"), axes=list[2,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([0, 3, 6],"int64"), axes=list[2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0, 3, 6],"int64"), axes=list[2,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([0, 3, 6],"int64"), axes=list[2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0, 3, 6],"int64"), axes=list[2,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([0, 3, 8],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 3, 8],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 3, 8],"float32"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 3],"float16"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 4, 10],"float32"), axes=list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 4, 2],"float32"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 4, 2],"float64"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 4, 3, 3],"float64"), list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 4, 3, 3],"float64"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[4,], ends=list[7,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 3],"int64"), axes=list[0,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([0, 4, 4, 7],"int64"), axes=list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 4, 4, 7],"int64"), axes=list[3,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 4, 4, 7],"int64"), axes=list[3,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0, 4, 4, 7],"int64"), axes=list[3,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 4, 7],"int64"), axes=list[3,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([0, 4, 4, 7],"int64"), axes=list[3,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 4, 7],"int64"), axes=list[3,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([0, 4, 4],"float32"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 4, 5, 6],"float64"), axes=list[-2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 4, 5],"bool"), list[0,1,2,], list[0,1,2,], list[3,5,4,], )
paddle.slice(Tensor([0, 4, 5],"int64"), list[0,], list[1,], list[2,], )
paddle.slice(Tensor([0, 4, 5],"int64"), list[0,1,2,], list[0,1,2,], list[3,3,4,], )
paddle.slice(Tensor([0, 4, 5],"int64"), list[0,2,], list[2,2,], list[3,4,], )
paddle.slice(Tensor([0, 4, 5],"int64"), list[-1,], list[0,], list[2,], )
paddle.slice(Tensor([0, 4, 5],"int64"), list[1,], list[2,], list[3,], )
paddle.slice(Tensor([0, 4, 5],"int64"), list[1,2,], list[2,2,], list[3,4,], )
paddle.slice(Tensor([0, 4, 5],"int64"), list[-3,-2,-1,], list[1,-3,2,], list[3,3,4,], )
paddle.slice(Tensor([0, 4, 6, 2],"float64"), list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 4, 6],"float64"), list[1,2,], starts=list[0,0,], ends=list[2,4,], )
paddle.slice(Tensor([0, 4, 6],"float64"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 4, 7, 4],"int64"), axes=list[-2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 4, 7, 4],"int64"), axes=list[-2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 4, 7, 4],"int64"), axes=list[-2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0, 4, 7, 4],"int64"), axes=list[-2,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 7, 4],"int64"), axes=list[-2,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([0, 4, 7, 4],"int64"), axes=list[-2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 7, 4],"int64"), axes=list[-2,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([0, 4, 7],"int64"), axes=list[2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0, 4, 7],"int64"), axes=list[2,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 7],"int64"), axes=list[2,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([0, 4, 7],"int64"), axes=list[2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0, 4, 7],"int64"), axes=list[2,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([0, 4],"float16"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 4],"float32"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 4],"float32"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 4],"float64"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[4,], ends=list[7,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[0,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 4],"int64"), axes=list[1,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([0, 4],"int64"), list[0,], list[0,], list[2,], )
paddle.slice(Tensor([0, 4],"int64"), list[0,1,], list[0,0,], list[2,2,], )
paddle.slice(Tensor([0, 4],"int64"), list[0,1,], list[0,1,], list[2,3,], )
paddle.slice(Tensor([0, 4],"int64"), list[1,], list[-3,], list[2,], )
paddle.slice(Tensor([0, 4],"int64"), list[-2,-1,], list[-3,0,], list[2,-1,], )
paddle.slice(Tensor([0, 5, 6],"float32"), axes=list[0,1,2,], starts=list[-3,0,2,], ends=list[3,2,4,], )
paddle.slice(Tensor([0, 51],"float32"), axes=list[1,], starts=list[49,], ends=list[50,], )
paddle.slice(Tensor([0, 51],"int64"), axes=list[1,], starts=list[49,], ends=list[50,], )
paddle.slice(Tensor([0, 6, 3],"int64"), axes=list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 6, 3],"int64"), axes=list[1,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([0, 6, 3],"int64"), axes=list[1,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([0, 6, 3],"int64"), axes=list[1,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0, 6, 3],"int64"), axes=list[1,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([0, 6, 3],"int64"), axes=list[1,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0, 6, 3],"int64"), axes=list[1,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([0, 6],"float32"), axes=list[1,], starts=list[4,], ends=list[5,], )
paddle.slice(Tensor([0, 6],"int64"), axes=list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 6],"int64"), axes=list[1,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([0, 6],"int64"), axes=list[1,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([0, 6],"int64"), axes=list[1,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0, 6],"int64"), axes=list[1,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([0, 6],"int64"), axes=list[1,], starts=list[4,], ends=list[5,], )
paddle.slice(Tensor([0, 6],"int64"), axes=list[1,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0, 6],"int64"), axes=list[1,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([0, 7],"int64"), axes=list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0, 7],"int64"), axes=list[1,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0, 7],"int64"), axes=list[1,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([0, 7],"int64"), axes=list[1,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([0, 7],"int64"), axes=list[1,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0, 7],"int64"), axes=list[1,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([0, 78],"int64"), list[0,-1,], list[32,58,], list[-2,-1,], )
paddle.slice(Tensor([0, 8, 24],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0, 8, 24],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([0, 8, 24],"float32"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0, 8, 24],"float32"), axes=list[1,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([0, 8, 24],"float32"), axes=list[1,], starts=list[4,], ends=list[5,], )
paddle.slice(Tensor([0, 8, 24],"float32"), axes=list[1,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([0, 8, 24],"float32"), axes=list[1,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([0, 8, 24],"float32"), axes=list[1,], starts=list[7,], ends=list[8,], )
paddle.slice(Tensor([0, 8],"int64"), list[0,1,], tuple(0,0,), list[13,8,], )
paddle.slice(Tensor([0, 9, 16],"float32"), axes=list[1,], starts=list[0,], ends=list[7,], )
paddle.slice(Tensor([0, 9, 16],"float32"), axes=list[1,], starts=list[1,], ends=list[8,], )
paddle.slice(Tensor([0, 9, 16],"float32"), axes=list[1,], starts=list[2,], ends=list[9,], )
paddle.slice(Tensor([0],"complex128"), list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0],"float16"), axes=list[0,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([0],"float16"), axes=list[0,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[11,], ends=list[12,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[12,], ends=list[13,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[19,], ends=list[20,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[20,], ends=list[21,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[391999,], ends=list[392000,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[392000,], ends=list[392001,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[7,], ends=list[8,], )
paddle.slice(Tensor([0],"float32"), axes=list[0,], starts=list[9,], ends=list[10,], )
paddle.slice(Tensor([0],"float64"), axes=list[0,], starts=list[11,], ends=list[12,], )
paddle.slice(Tensor([0],"float64"), axes=list[0,], starts=list[12,], ends=list[13,], )
paddle.slice(Tensor([0],"float64"), axes=list[0,], starts=list[19,], ends=list[20,], )
paddle.slice(Tensor([0],"float64"), axes=list[0,], starts=list[20,], ends=list[21,], )
paddle.slice(Tensor([0],"float64"), axes=list[0,], starts=list[9,], ends=list[10,], )
paddle.slice(Tensor([0],"int32"), axes=list[0,], starts=list[0,], ends=list[128,], )
paddle.slice(Tensor([0],"int32"), axes=list[0,], starts=list[0,], ends=list[384,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[0,], ends=list[3,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[2,], ends=list[16,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[2,], ends=list[5,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[3,], ends=list[16,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[4,], ends=list[5,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[4,], ends=list[7,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([0],"int64"), axes=list[0,], starts=list[6,], ends=list[16,], )
paddle.slice(Tensor([0],"int64"), list[0,], list[-3,], list[-1,], )
paddle.slice(Tensor([0],"int64"), list[0,], list[3,], list[5,], )
paddle.slice(Tensor([1, 0, 10],"float32"), axes=list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([1, 0, 4],"int64"), list[1,2,], list[0,0,], list[2,2,], )
paddle.slice(Tensor([1, 0],"int64"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([1, 0],"int64"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([1, 2, 0],"int64"), list[1,2,], list[0,0,], list[2,2,], )
paddle.slice(Tensor([1, 4, 0],"float32"), axes=list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([10, 0],"int64"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([10, 0],"int64"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([1000, 0],"int64"), axes=list[1,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[0,], ends=list[128,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[0,], ends=list[256,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[128,], ends=list[256,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[256,], ends=list[384,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[256,], ends=list[512,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[384,], ends=list[512,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[512,], ends=list[640,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[512,], ends=list[768,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[640,], ends=list[768,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[768,], ends=list[1024,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[768,], ends=list[896,], )
paddle.slice(Tensor([1024, 0, 1024],"float16"), axes=list[0,], starts=list[896,], ends=list[1024,], )
paddle.slice(Tensor([1024, 16, 0],"float16"), axes=list[0,], starts=list[0,], ends=list[128,], )
paddle.slice(Tensor([1024, 16, 0],"float16"), axes=list[0,], starts=list[128,], ends=list[256,], )
paddle.slice(Tensor([1024, 16, 0],"float16"), axes=list[0,], starts=list[256,], ends=list[384,], )
paddle.slice(Tensor([1024, 16, 0],"float16"), axes=list[0,], starts=list[384,], ends=list[512,], )
paddle.slice(Tensor([1024, 16, 0],"float16"), axes=list[0,], starts=list[512,], ends=list[640,], )
paddle.slice(Tensor([1024, 16, 0],"float16"), axes=list[0,], starts=list[640,], ends=list[768,], )
paddle.slice(Tensor([1024, 16, 0],"float16"), axes=list[0,], starts=list[768,], ends=list[896,], )
paddle.slice(Tensor([1024, 16, 0],"float16"), axes=list[0,], starts=list[896,], ends=list[1024,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[0,], ends=list[128,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[0,], ends=list[256,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[128,], ends=list[256,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[256,], ends=list[384,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[256,], ends=list[512,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[384,], ends=list[512,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[512,], ends=list[640,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[512,], ends=list[768,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[640,], ends=list[768,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[768,], ends=list[1024,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[768,], ends=list[896,], )
paddle.slice(Tensor([1024, 2, 0],"float16"), axes=list[0,], starts=list[896,], ends=list[1024,], )
paddle.slice(Tensor([11, 0, 4],"float32"), axes=list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([11, 0, 4],"float32"), axes=list[2,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([11, 0, 4],"float32"), axes=list[2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([11, 0, 4],"float32"), axes=list[2,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([11, 1, 0],"float32"), axes=list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([11, 1, 0],"float32"), axes=list[2,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([11, 1, 0],"float32"), axes=list[2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([11, 1, 0],"float32"), axes=list[2,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,0,], list[13,1,16,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,16,], list[13,1,32,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,24,], list[13,1,40,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,32,], list[13,1,48,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,40,], list[13,1,56,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,48,], list[13,1,64,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,56,], list[13,1,72,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,64,], list[13,1,80,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,72,], list[13,1,88,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,8,], list[13,1,24,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,80,], list[13,1,96,], )
paddle.slice(Tensor([13, 0, 104],"float32"), list[0,1,2,], list[0,0,88,], list[13,1,104,], )
paddle.slice(Tensor([13, 0, 16],"float32"), axes=list[1,], starts=list[0,], ends=list[7,], )
paddle.slice(Tensor([13, 0, 16],"float32"), axes=list[1,], starts=list[1,], ends=list[8,], )
paddle.slice(Tensor([13, 0, 16],"float32"), axes=list[1,], starts=list[2,], ends=list[9,], )
paddle.slice(Tensor([13, 0],"int64"), list[0,1,], tuple(0,0,), list[13,8,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,0,], list[13,1,16,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,16,], list[13,1,32,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,24,], list[13,1,40,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,32,], list[13,1,48,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,40,], list[13,1,56,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,48,], list[13,1,64,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,56,], list[13,1,72,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,64,], list[13,1,80,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,72,], list[13,1,88,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,8,], list[13,1,24,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,80,], list[13,1,96,], )
paddle.slice(Tensor([13, 1, 0],"float32"), list[0,1,2,], list[0,0,88,], list[13,1,104,], )
paddle.slice(Tensor([13, 9, 0],"float32"), axes=list[1,], starts=list[0,], ends=list[7,], )
paddle.slice(Tensor([13, 9, 0],"float32"), axes=list[1,], starts=list[1,], ends=list[8,], )
paddle.slice(Tensor([13, 9, 0],"float32"), axes=list[1,], starts=list[2,], ends=list[9,], )
paddle.slice(Tensor([15, 0],"int64"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([15, 0],"int64"), axes=list[1,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,0,], list[16,1,16,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,0,], list[16,2,16,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,16,], list[16,1,32,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,16,], list[16,2,32,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,24,], list[16,1,40,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,24,], list[16,2,40,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,32,], list[16,1,48,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,32,], list[16,2,48,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,40,], list[16,1,56,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,40,], list[16,2,56,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,48,], list[16,1,64,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,48,], list[16,2,64,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,56,], list[16,1,72,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,56,], list[16,2,72,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,64,], list[16,1,80,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,64,], list[16,2,80,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,72,], list[16,1,88,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,72,], list[16,2,88,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,8,], list[16,1,24,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,8,], list[16,2,24,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,80,], list[16,1,96,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,80,], list[16,2,96,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,88,], list[16,1,104,], )
paddle.slice(Tensor([16, 0, 104],"float32"), list[0,1,2,], list[0,0,88,], list[16,2,104,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,0,], list[16,1,16,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,16,], list[16,1,32,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,24,], list[16,1,40,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,32,], list[16,1,48,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,40,], list[16,1,56,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,48,], list[16,1,64,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,56,], list[16,1,72,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,64,], list[16,1,80,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,72,], list[16,1,88,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,8,], list[16,1,24,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,80,], list[16,1,96,], )
paddle.slice(Tensor([16, 1, 0],"float32"), list[0,1,2,], list[0,0,88,], list[16,1,104,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,0,], list[16,2,16,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,16,], list[16,2,32,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,24,], list[16,2,40,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,32,], list[16,2,48,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,40,], list[16,2,56,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,48,], list[16,2,64,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,56,], list[16,2,72,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,64,], list[16,2,80,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,72,], list[16,2,88,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,8,], list[16,2,24,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,80,], list[16,2,96,], )
paddle.slice(Tensor([16, 2, 0],"float32"), list[0,1,2,], list[0,0,88,], list[16,2,104,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,0,], list[2,2,16,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,16,], list[2,2,32,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,24,], list[2,2,40,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,32,], list[2,2,48,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,40,], list[2,2,56,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,48,], list[2,2,64,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,56,], list[2,2,72,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,64,], list[2,2,80,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,72,], list[2,2,88,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,8,], list[2,2,24,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,80,], list[2,2,96,], )
paddle.slice(Tensor([2, 0, 104],"float32"), list[0,1,2,], list[0,0,88,], list[2,2,104,], )
paddle.slice(Tensor([2, 0, 2],"float32"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 0, 2],"float64"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 0, 2],"float64"), list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 0, 2],"float64"), list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 0, 2],"float64"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 0, 24],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 0, 24],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 0, 24],"float32"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([2, 0, 24],"float32"), axes=list[1,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([2, 0, 24],"float32"), axes=list[1,], starts=list[4,], ends=list[5,], )
paddle.slice(Tensor([2, 0, 24],"float32"), axes=list[1,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([2, 0, 24],"float32"), axes=list[1,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([2, 0, 24],"float32"), axes=list[1,], starts=list[7,], ends=list[8,], )
paddle.slice(Tensor([2, 0, 3, 3],"float64"), list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 0, 3, 3],"float64"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 0, 4, 5, 6],"float32"), axes=list[0,1,2,], starts=list[1,0,2,], ends=list[3,3,4,], )
paddle.slice(Tensor([2, 0, 4, 5, 6],"int64"), list[0,1,2,4,], list[0,1,2,-4,], list[3,3,4,-2,], )
paddle.slice(Tensor([2, 0, 4, 5],"int64"), list[0,1,2,3,], list[0,1,2,-4,], list[3,3,4,-2,], )
paddle.slice(Tensor([2, 0, 4],"int64"), axes=list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 0, 4],"int64"), axes=list[2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 0, 5],"float32"), list[0,], list[0,], list[1,], )
paddle.slice(Tensor([2, 0, 5],"float32"), list[0,], list[1,], list[2,], )
paddle.slice(Tensor([2, 0, 8],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 0, 8],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 0, 8],"float32"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([2, 0],"float16"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 0],"float32"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 0],"float32"), axes=list[1,], starts=list[49,], ends=list[50,], )
paddle.slice(Tensor([2, 0],"int64"), axes=list[1,], starts=list[49,], ends=list[50,], )
paddle.slice(Tensor([2, 0],"int64"), list[0,1,], list[0,0,], list[2,2,], )
paddle.slice(Tensor([2, 0],"int64"), list[0,1,], list[0,1,], list[2,3,], )
paddle.slice(Tensor([2, 0],"int64"), list[0,1,], tuple(0,0,), list[2,2,], )
paddle.slice(Tensor([2, 10, 0],"float32"), list[0,], list[0,], list[1,], )
paddle.slice(Tensor([2, 10, 0],"float32"), list[0,], list[1,], list[2,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,0,], list[2,2,16,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,16,], list[2,2,32,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,24,], list[2,2,40,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,32,], list[2,2,48,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,40,], list[2,2,56,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,48,], list[2,2,64,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,56,], list[2,2,72,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,64,], list[2,2,80,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,72,], list[2,2,88,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,8,], list[2,2,24,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,80,], list[2,2,96,], )
paddle.slice(Tensor([2, 2, 0],"float32"), list[0,1,2,], list[0,0,88,], list[2,2,104,], )
paddle.slice(Tensor([2, 2, 0],"float64"), list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 2, 0],"float64"), list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 2, 0],"float64"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 3, 0, 5, 6],"float32"), axes=list[0,1,2,], starts=list[1,0,2,], ends=list[3,3,4,], )
paddle.slice(Tensor([2, 3, 0, 5, 6],"int64"), list[0,1,2,4,], list[0,1,2,-4,], list[3,3,4,-2,], )
paddle.slice(Tensor([2, 3, 0, 5],"int64"), list[0,1,2,3,], list[0,1,2,-4,], list[3,3,4,-2,], )
paddle.slice(Tensor([2, 3, 0],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 3, 0],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 3, 0],"float32"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([2, 3, 0],"int64"), axes=list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 3, 0],"int64"), axes=list[2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 3, 4, 0, 6],"float32"), axes=list[0,1,2,], starts=list[1,0,2,], ends=list[3,3,4,], )
paddle.slice(Tensor([2, 3, 4, 0, 6],"int64"), list[0,1,2,4,], list[0,1,2,-4,], list[3,3,4,-2,], )
paddle.slice(Tensor([2, 3, 4, 0],"int64"), list[0,1,2,3,], list[0,1,2,-4,], list[3,3,4,-2,], )
paddle.slice(Tensor([2, 3, 4, 5, 0],"float32"), axes=list[0,1,2,], starts=list[1,0,2,], ends=list[3,3,4,], )
paddle.slice(Tensor([2, 3, 4, 5, 0],"int64"), list[0,1,2,4,], list[0,1,2,-4,], list[3,3,4,-2,], )
paddle.slice(Tensor([2, 4, 0, 3],"float64"), list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 4, 0, 3],"float64"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 4, 0],"float32"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 4, 0],"float64"), axes=list[0,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 4, 3, 0],"float64"), list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 4, 3, 0],"float64"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([2, 8, 0],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([2, 8, 0],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([2, 8, 0],"float32"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([2, 8, 0],"float32"), axes=list[1,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([2, 8, 0],"float32"), axes=list[1,], starts=list[4,], ends=list[5,], )
paddle.slice(Tensor([2, 8, 0],"float32"), axes=list[1,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([2, 8, 0],"float32"), axes=list[1,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([2, 8, 0],"float32"), axes=list[1,], starts=list[7,], ends=list[8,], )
paddle.slice(Tensor([21, 0, 4],"float32"), axes=list[2,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([21, 0, 4],"float32"), axes=list[2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([21, 0, 4],"float32"), axes=list[2,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([21, 1, 0],"float32"), axes=list[2,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([21, 1, 0],"float32"), axes=list[2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([21, 1, 0],"float32"), axes=list[2,], starts=list[3,], ends=list[4,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,0,], list[3,1,16,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,16,], list[3,1,32,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,24,], list[3,1,40,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,32,], list[3,1,48,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,40,], list[3,1,56,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,48,], list[3,1,64,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,56,], list[3,1,72,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,64,], list[3,1,80,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,72,], list[3,1,88,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,8,], list[3,1,24,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,80,], list[3,1,96,], )
paddle.slice(Tensor([3, 0, 104],"float32"), list[0,1,2,], list[0,0,88,], list[3,1,104,], )
paddle.slice(Tensor([3, 0, 2, 2],"complex128"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([3, 0, 2, 3],"complex128"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([3, 0, 4],"float32"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([3, 0, 5, 6],"float64"), axes=list[-2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([3, 0, 5],"bool"), list[0,1,2,], list[0,1,2,], list[3,5,4,], )
paddle.slice(Tensor([3, 0],"float16"), axes=list[1,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([3, 0],"float32"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([3, 0],"float32"), axes=list[1,], starts=list[4,], ends=list[5,], )
paddle.slice(Tensor([3, 0],"float64"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([3, 0],"int64"), axes=list[1,], starts=list[4,], ends=list[5,], )
paddle.slice(Tensor([3, 0],"int64"), list[0,], list[0,], list[2,], )
paddle.slice(Tensor([3, 0],"int64"), list[1,], list[-3,], list[2,], )
paddle.slice(Tensor([3, 0],"int64"), list[-2,-1,], list[-3,0,], list[2,-1,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,0,], list[3,1,16,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,16,], list[3,1,32,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,24,], list[3,1,40,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,32,], list[3,1,48,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,40,], list[3,1,56,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,48,], list[3,1,64,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,56,], list[3,1,72,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,64,], list[3,1,80,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,72,], list[3,1,88,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,8,], list[3,1,24,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,80,], list[3,1,96,], )
paddle.slice(Tensor([3, 1, 0],"float32"), list[0,1,2,], list[0,0,88,], list[3,1,104,], )
paddle.slice(Tensor([3, 2, 0, 3],"complex128"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([3, 2, 2, 0],"complex128"), list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([3, 3, 0, 2],"complex128"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([3, 3, 2, 0],"complex128"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([3, 4, 0, 6],"float64"), axes=list[-2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([3, 4, 0],"bool"), list[0,1,2,], list[0,1,2,], list[3,5,4,], )
paddle.slice(Tensor([3, 4, 0],"float32"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([3, 4, 5, 0],"float64"), axes=list[-2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([4, 0, 2],"float64"), list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([4, 0, 2],"float64"), list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([4, 0, 20],"float16"), list[0,], list[0,], list[2,], )
paddle.slice(Tensor([4, 0, 20],"float16"), list[0,], list[2,], list[4,], )
paddle.slice(Tensor([4, 0, 3],"float64"), list[0,2,], starts=list[0,0,], ends=list[1,2,], )
paddle.slice(Tensor([4, 0, 3],"float64"), list[1,2,], starts=list[0,0,], ends=list[1,2,], )
paddle.slice(Tensor([4, 0, 3],"int64"), axes=list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 0, 3],"int64"), axes=list[1,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([4, 0, 3],"int64"), axes=list[1,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([4, 0, 3],"int64"), axes=list[1,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 0, 3],"int64"), axes=list[1,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 3],"int64"), axes=list[1,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 3],"int64"), axes=list[1,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 4, 7],"int64"), axes=list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 0, 4, 7],"int64"), axes=list[3,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([4, 0, 4, 7],"int64"), axes=list[3,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 0, 4, 7],"int64"), axes=list[3,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 4, 7],"int64"), axes=list[3,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([4, 0, 4, 7],"int64"), axes=list[3,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 4, 7],"int64"), axes=list[3,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([4, 0, 5],"float32"), list[0,], list[0,], list[2,], )
paddle.slice(Tensor([4, 0, 5],"float32"), list[0,], list[2,], list[4,], )
paddle.slice(Tensor([4, 0, 5],"int64"), list[0,], list[1,], list[2,], )
paddle.slice(Tensor([4, 0, 5],"int64"), list[0,1,2,], list[0,1,2,], list[3,3,4,], )
paddle.slice(Tensor([4, 0, 5],"int64"), list[0,2,], list[2,2,], list[3,4,], )
paddle.slice(Tensor([4, 0, 5],"int64"), list[-1,], list[0,], list[2,], )
paddle.slice(Tensor([4, 0, 5],"int64"), list[1,], list[2,], list[3,], )
paddle.slice(Tensor([4, 0, 5],"int64"), list[1,2,], list[2,2,], list[3,4,], )
paddle.slice(Tensor([4, 0, 5],"int64"), list[-3,-2,-1,], list[1,-3,2,], list[3,3,4,], )
paddle.slice(Tensor([4, 0, 6, 2],"float64"), list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 0, 6],"float32"), axes=list[0,1,2,], starts=list[-3,0,2,], ends=list[3,2,4,], )
paddle.slice(Tensor([4, 0, 6],"float64"), list[1,2,], starts=list[0,0,], ends=list[2,4,], )
paddle.slice(Tensor([4, 0, 6],"float64"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([4, 0, 6],"int64"), axes=list[2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 0, 6],"int64"), axes=list[2,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([4, 0, 6],"int64"), axes=list[2,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([4, 0, 6],"int64"), axes=list[2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 0, 6],"int64"), axes=list[2,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 6],"int64"), axes=list[2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 6],"int64"), axes=list[2,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 7, 4],"int64"), axes=list[-2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 0, 7, 4],"int64"), axes=list[-2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([4, 0, 7, 4],"int64"), axes=list[-2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 0, 7, 4],"int64"), axes=list[-2,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 7, 4],"int64"), axes=list[-2,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([4, 0, 7, 4],"int64"), axes=list[-2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 7, 4],"int64"), axes=list[-2,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([4, 0, 7],"int64"), axes=list[2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 0, 7],"int64"), axes=list[2,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 7],"int64"), axes=list[2,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([4, 0, 7],"int64"), axes=list[2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 0, 7],"int64"), axes=list[2,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([4, 0],"int64"), axes=list[1,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([4, 10, 0],"float32"), list[0,], list[0,], list[2,], )
paddle.slice(Tensor([4, 10, 0],"float32"), list[0,], list[2,], list[4,], )
paddle.slice(Tensor([4, 20, 0],"float16"), list[0,], list[0,], list[2,], )
paddle.slice(Tensor([4, 20, 0],"float16"), list[0,], list[2,], list[4,], )
paddle.slice(Tensor([4, 3, 0],"float64"), list[0,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([4, 3, 0],"float64"), list[0,2,], starts=list[0,0,], ends=list[1,2,], )
paddle.slice(Tensor([4, 3, 0],"float64"), list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([4, 3, 0],"float64"), list[1,2,], starts=list[0,0,], ends=list[1,2,], )
paddle.slice(Tensor([4, 3, 0],"int64"), axes=list[2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 3, 0],"int64"), axes=list[2,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([4, 3, 0],"int64"), axes=list[2,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([4, 3, 0],"int64"), axes=list[2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 3, 0],"int64"), axes=list[2,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([4, 3, 0],"int64"), axes=list[2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 3, 0],"int64"), axes=list[2,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 0, 2],"float64"), list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 4, 0, 4],"int64"), axes=list[-2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 4, 0, 4],"int64"), axes=list[-2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([4, 4, 0, 4],"int64"), axes=list[-2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 4, 0, 4],"int64"), axes=list[-2,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 0, 4],"int64"), axes=list[-2,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([4, 4, 0, 4],"int64"), axes=list[-2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 0, 4],"int64"), axes=list[-2,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([4, 4, 0, 7],"int64"), axes=list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 4, 0, 7],"int64"), axes=list[3,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([4, 4, 0, 7],"int64"), axes=list[3,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 4, 0, 7],"int64"), axes=list[3,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 0, 7],"int64"), axes=list[3,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([4, 4, 0, 7],"int64"), axes=list[3,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 0, 7],"int64"), axes=list[3,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([4, 4, 0],"float64"), list[1,2,], starts=list[0,0,], ends=list[2,4,], )
paddle.slice(Tensor([4, 4, 0],"float64"), list[2,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([4, 4, 0],"int64"), axes=list[2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 4, 0],"int64"), axes=list[2,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 0],"int64"), axes=list[2,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([4, 4, 0],"int64"), axes=list[2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 0],"int64"), axes=list[2,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([4, 4, 0],"int64"), list[0,], list[1,], list[2,], )
paddle.slice(Tensor([4, 4, 0],"int64"), list[0,1,2,], list[0,1,2,], list[3,3,4,], )
paddle.slice(Tensor([4, 4, 0],"int64"), list[0,2,], list[2,2,], list[3,4,], )
paddle.slice(Tensor([4, 4, 0],"int64"), list[-1,], list[0,], list[2,], )
paddle.slice(Tensor([4, 4, 0],"int64"), list[1,], list[2,], list[3,], )
paddle.slice(Tensor([4, 4, 0],"int64"), list[1,2,], list[2,2,], list[3,4,], )
paddle.slice(Tensor([4, 4, 0],"int64"), list[-3,-2,-1,], list[1,-3,2,], list[3,3,4,], )
paddle.slice(Tensor([4, 4, 4, 0],"int64"), axes=list[3,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 4, 4, 0],"int64"), axes=list[3,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([4, 4, 4, 0],"int64"), axes=list[3,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 4, 4, 0],"int64"), axes=list[3,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 4, 0],"int64"), axes=list[3,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([4, 4, 4, 0],"int64"), axes=list[3,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 4, 0],"int64"), axes=list[3,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([4, 4, 6, 0],"float64"), list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 4, 7, 0],"int64"), axes=list[-2,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 4, 7, 0],"int64"), axes=list[-2,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([4, 4, 7, 0],"int64"), axes=list[-2,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 4, 7, 0],"int64"), axes=list[-2,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 7, 0],"int64"), axes=list[-2,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([4, 4, 7, 0],"int64"), axes=list[-2,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 4, 7, 0],"int64"), axes=list[-2,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([4, 5, 0],"float32"), axes=list[0,1,2,], starts=list[-3,0,2,], ends=list[3,2,4,], )
paddle.slice(Tensor([4, 6, 0],"int64"), axes=list[1,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([4, 6, 0],"int64"), axes=list[1,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([4, 6, 0],"int64"), axes=list[1,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([4, 6, 0],"int64"), axes=list[1,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([4, 6, 0],"int64"), axes=list[1,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([4, 6, 0],"int64"), axes=list[1,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([4, 6, 0],"int64"), axes=list[1,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([52, 0, 16],"float32"), axes=list[1,], starts=list[0,], ends=list[7,], )
paddle.slice(Tensor([52, 0, 16],"float32"), axes=list[1,], starts=list[1,], ends=list[8,], )
paddle.slice(Tensor([52, 0, 16],"float32"), axes=list[1,], starts=list[2,], ends=list[9,], )
paddle.slice(Tensor([52, 9, 0],"float32"), axes=list[1,], starts=list[0,], ends=list[7,], )
paddle.slice(Tensor([52, 9, 0],"float32"), axes=list[1,], starts=list[1,], ends=list[8,], )
paddle.slice(Tensor([52, 9, 0],"float32"), axes=list[1,], starts=list[2,], ends=list[9,], )
paddle.slice(Tensor([6, 0, 3],"int64"), axes=list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([6, 0, 3],"int64"), axes=list[0,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([6, 0, 3],"int64"), axes=list[0,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([6, 0, 3],"int64"), axes=list[0,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([6, 0, 3],"int64"), axes=list[0,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([6, 0, 3],"int64"), axes=list[0,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([6, 0, 3],"int64"), axes=list[0,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([6, 0],"int64"), axes=list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([6, 0],"int64"), axes=list[0,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([6, 0],"int64"), axes=list[0,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([6, 0],"int64"), axes=list[0,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([6, 0],"int64"), axes=list[0,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([6, 0],"int64"), axes=list[0,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([6, 0],"int64"), axes=list[0,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([6, 4, 0],"int64"), axes=list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([6, 4, 0],"int64"), axes=list[0,], starts=list[0,], ends=list[5,], )
paddle.slice(Tensor([6, 4, 0],"int64"), axes=list[0,], starts=list[1,], ends=list[3,], )
paddle.slice(Tensor([6, 4, 0],"int64"), axes=list[0,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([6, 4, 0],"int64"), axes=list[0,], starts=list[3,], ends=list[6,], )
paddle.slice(Tensor([6, 4, 0],"int64"), axes=list[0,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([6, 4, 0],"int64"), axes=list[0,], starts=list[5,], ends=list[6,], )
paddle.slice(Tensor([7, 0, 3],"int64"), axes=list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([7, 0, 3],"int64"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([7, 0, 3],"int64"), axes=list[0,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([7, 0, 3],"int64"), axes=list[0,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([7, 0, 3],"int64"), axes=list[0,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([7, 0, 3],"int64"), axes=list[0,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([7, 0, 3],"int64"), axes=list[0,], starts=list[4,], ends=list[7,], )
paddle.slice(Tensor([7, 0, 3],"int64"), axes=list[0,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([7, 0],"int64"), axes=list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([7, 0],"int64"), axes=list[0,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([7, 0],"int64"), axes=list[0,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([7, 0],"int64"), axes=list[0,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([7, 0],"int64"), axes=list[0,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([7, 0],"int64"), axes=list[0,], starts=list[4,], ends=list[7,], )
paddle.slice(Tensor([7, 0],"int64"), axes=list[0,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([7, 4, 0],"int64"), axes=list[0,], starts=list[0,], ends=list[2,], )
paddle.slice(Tensor([7, 4, 0],"int64"), axes=list[0,], starts=list[2,], ends=list[3,], )
paddle.slice(Tensor([7, 4, 0],"int64"), axes=list[0,], starts=list[2,], ends=list[4,], )
paddle.slice(Tensor([7, 4, 0],"int64"), axes=list[0,], starts=list[2,], ends=list[6,], )
paddle.slice(Tensor([7, 4, 0],"int64"), axes=list[0,], starts=list[3,], ends=list[7,], )
paddle.slice(Tensor([7, 4, 0],"int64"), axes=list[0,], starts=list[4,], ends=list[6,], )
paddle.slice(Tensor([7, 4, 0],"int64"), axes=list[0,], starts=list[4,], ends=list[7,], )
paddle.slice(Tensor([7, 4, 0],"int64"), axes=list[0,], starts=list[6,], ends=list[7,], )
paddle.slice(Tensor([78, 0],"int64"), list[0,-1,], list[32,58,], list[-2,-1,], )
paddle.slice(Tensor([8, 0, 100, 100],"float16"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([8, 0, 100, 100],"float16"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([8, 0, 100, 100],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([8, 0, 100, 100],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([8, 0, 20],"float16"), list[0,], list[0,], list[4,], )
paddle.slice(Tensor([8, 0, 20],"float16"), list[0,], list[4,], list[8,], )
paddle.slice(Tensor([8, 2, 0, 100],"float16"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([8, 2, 0, 100],"float16"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([8, 2, 0, 100],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([8, 2, 0, 100],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([8, 2, 100, 0],"float16"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([8, 2, 100, 0],"float16"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([8, 2, 100, 0],"float32"), axes=list[1,], starts=list[0,], ends=list[1,], )
paddle.slice(Tensor([8, 2, 100, 0],"float32"), axes=list[1,], starts=list[1,], ends=list[2,], )
paddle.slice(Tensor([8, 20, 0],"float16"), list[0,], list[0,], list[4,], )
paddle.slice(Tensor([8, 20, 0],"float16"), list[0,], list[4,], list[8,], )
paddle.slice_scatter(Tensor([0, 6, 3, 5],"float32"), Tensor([0, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3, 5],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3, 5],"float64"), Tensor([0, 2, 3, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3, 5],"float64"), Tensor([8, 2, 3, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3, 9],"float32"), Tensor([0, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3, 9],"float32"), Tensor([8, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3, 9],"float64"), Tensor([0, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3, 9],"float64"), Tensor([8, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3],"float32"), Tensor([0, 2, 3],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3],"float32"), Tensor([8, 2, 3],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3],"float64"), Tensor([0, 2, 3],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6, 3],"float64"), Tensor([8, 2, 3],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6],"bfloat16"), Tensor([0, 2],"bfloat16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6],"bfloat16"), Tensor([8, 2],"bfloat16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6],"bool"), Tensor([0, 2],"bool"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 6],"bool"), Tensor([8, 2],"bool"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([0, 9, 6],"float32"), Tensor([0, 9, 1],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([0, 9, 6],"float32"), Tensor([1, 9, 1],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([0, 9, 6],"float64"), Tensor([0, 9, 1],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([0, 9, 6],"float64"), Tensor([1, 9, 1],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 0, 3, 5],"float32"), Tensor([8, 0, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3, 5],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3, 5],"float64"), Tensor([8, 0, 3, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3, 5],"float64"), Tensor([8, 2, 3, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3, 9],"float32"), Tensor([8, 0, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3, 9],"float32"), Tensor([8, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3, 9],"float64"), Tensor([8, 0, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3, 9],"float64"), Tensor([8, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3],"float32"), Tensor([8, 0, 3],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3],"float32"), Tensor([8, 2, 3],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3],"float64"), Tensor([8, 0, 3],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 3],"float64"), Tensor([8, 2, 3],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0, 6],"float32"), Tensor([1, 0, 1],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 0, 6],"float32"), Tensor([1, 9, 1],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 0, 6],"float64"), Tensor([1, 0, 1],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 0, 6],"float64"), Tensor([1, 9, 1],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 0],"bfloat16"), Tensor([8, 0],"bfloat16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0],"bfloat16"), Tensor([8, 2],"bfloat16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0],"bool"), Tensor([8, 0],"bool"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 0],"bool"), Tensor([8, 2],"bool"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0, 5],"float32"), Tensor([8, 2, 0, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0, 5],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0, 5],"float64"), Tensor([8, 2, 0, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0, 5],"float64"), Tensor([8, 2, 3, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0, 9],"float32"), Tensor([8, 6, 0, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0, 9],"float32"), Tensor([8, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0, 9],"float64"), Tensor([8, 6, 0, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0, 9],"float64"), Tensor([8, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0],"float32"), Tensor([8, 2, 0],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0],"float32"), Tensor([8, 2, 3],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0],"float64"), Tensor([8, 2, 0],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 0],"float64"), Tensor([8, 2, 3],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 0],"float32"), Tensor([8, 2, 3, 0],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 0],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 0],"float32"), Tensor([8, 6, 3, 0],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 0],"float32"), Tensor([8, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 0],"float64"), Tensor([8, 2, 3, 0],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 0],"float64"), Tensor([8, 2, 3, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 0],"float64"), Tensor([8, 6, 3, 0],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 0],"float64"), Tensor([8, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float32"), Tensor([0, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float32"), Tensor([8, 0, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float32"), Tensor([8, 2, 0, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float32"), Tensor([8, 2, 3, 0],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float64"), Tensor([0, 2, 3, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float64"), Tensor([8, 0, 3, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float64"), Tensor([8, 2, 0, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float64"), Tensor([8, 2, 3, 0],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float32"), Tensor([0, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float32"), Tensor([8, 0, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float32"), Tensor([8, 6, 0, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float32"), Tensor([8, 6, 3, 0],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float64"), Tensor([0, 6, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float64"), Tensor([8, 0, 3, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float64"), Tensor([8, 6, 0, 2],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 9],"float64"), Tensor([8, 6, 3, 0],"float64"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3],"float32"), Tensor([0, 2, 3],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3],"float32"), Tensor([8, 0, 3],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3],"float32"), Tensor([8, 2, 0],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3],"float64"), Tensor([0, 2, 3],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3],"float64"), Tensor([8, 0, 3],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3],"float64"), Tensor([8, 2, 0],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"bfloat16"), Tensor([0, 2],"bfloat16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"bfloat16"), Tensor([8, 0],"bfloat16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"bool"), Tensor([0, 2],"bool"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"bool"), Tensor([8, 0],"bool"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 9, 0],"float32"), Tensor([1, 9, 0],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 0],"float32"), Tensor([1, 9, 1],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 0],"float64"), Tensor([1, 9, 0],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 0],"float64"), Tensor([1, 9, 1],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 6],"float32"), Tensor([0, 9, 1],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 6],"float32"), Tensor([1, 0, 1],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 6],"float32"), Tensor([1, 9, 0],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 6],"float64"), Tensor([0, 9, 1],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 6],"float64"), Tensor([1, 0, 1],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 6],"float64"), Tensor([1, 9, 0],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.sort(Tensor([0, 10],"float64"), )
paddle.sort(Tensor([0, 10],"float64"), axis=-1, )
paddle.sort(Tensor([0, 3, 3],"float32"), 0, )
paddle.sort(Tensor([0, 3, 4],"float64"), 0, )
paddle.sort(Tensor([0, 3, 4],"float64"), 1, )
paddle.sort(Tensor([0, 3],"float32"), 1, )
paddle.sort(Tensor([0, 3],"float64"), 0, )
paddle.sort(Tensor([0, 30000],"float32"), descending=True, )
paddle.sort(Tensor([0, 32000],"float16"), descending=True, )
paddle.sort(Tensor([0, 42],"float64"), 1, )
paddle.sort(Tensor([0, 6, 3, 4, 2, 5],"float64"), 3, )
paddle.sort(Tensor([0, 6, 3, 4, 2, 5],"float64"), 4, )
paddle.sort(Tensor([0, 6, 3, 4, 2, 5],"float64"), 5, )
paddle.sort(Tensor([0, 7, 6],"float64"), 1, )
paddle.sort(Tensor([0, 7, 6],"float64"), 2, )
paddle.sort(Tensor([0],"bfloat16"), )
paddle.sort(Tensor([0],"float16"), )
paddle.sort(Tensor([0],"float32"), 0, )
paddle.sort(Tensor([0],"float64"), axis=0, )
paddle.sort(Tensor([1, 0],"float16"), descending=True, )
paddle.sort(Tensor([1, 0],"float32"), descending=True, )
paddle.sort(Tensor([10, 0],"float64"), )
paddle.sort(Tensor([10, 0],"float64"), axis=-1, )
paddle.sort(Tensor([2, 0, 4],"float64"), 0, )
paddle.sort(Tensor([2, 0],"float32"), 1, )
paddle.sort(Tensor([2, 0],"float64"), 0, )
paddle.sort(Tensor([2, 3, 0],"float64"), 0, )
paddle.sort(Tensor([3, 0, 3, 4, 2, 5],"float64"), 3, )
paddle.sort(Tensor([3, 0, 3, 4, 2, 5],"float64"), 4, )
paddle.sort(Tensor([3, 0, 3, 4, 2, 5],"float64"), 5, )
paddle.sort(Tensor([3, 0, 3],"float32"), 0, )
paddle.sort(Tensor([3, 3, 0],"float32"), 0, )
paddle.sort(Tensor([3, 6, 0, 4, 2, 5],"float64"), 3, )
paddle.sort(Tensor([3, 6, 0, 4, 2, 5],"float64"), 4, )
paddle.sort(Tensor([3, 6, 0, 4, 2, 5],"float64"), 5, )
paddle.sort(Tensor([3, 6, 3, 0, 2, 5],"float64"), 3, )
paddle.sort(Tensor([3, 6, 3, 0, 2, 5],"float64"), 4, )
paddle.sort(Tensor([3, 6, 3, 0, 2, 5],"float64"), 5, )
paddle.sort(Tensor([3, 6, 3, 4, 0, 5],"float64"), 3, )
paddle.sort(Tensor([3, 6, 3, 4, 0, 5],"float64"), 4, )
paddle.sort(Tensor([3, 6, 3, 4, 0, 5],"float64"), 5, )
paddle.sort(Tensor([3, 6, 3, 4, 2, 0],"float64"), 3, )
paddle.sort(Tensor([3, 6, 3, 4, 2, 0],"float64"), 4, )
paddle.sort(Tensor([3, 6, 3, 4, 2, 0],"float64"), 5, )
paddle.sort(Tensor([4, 0, 6],"float64"), 1, )
paddle.sort(Tensor([4, 0, 6],"float64"), 2, )
paddle.sort(Tensor([4, 0],"float64"), 1, )
paddle.sort(Tensor([4, 7, 0],"float64"), 1, )
paddle.sort(Tensor([4, 7, 0],"float64"), 2, )
paddle.sort(Tensor([5, 0, 4],"float64"), 1, )
paddle.sort(Tensor([5, 3, 0],"float64"), 1, )
paddle.sort(x=Tensor([0, 2, 2],"float32"), axis=0, )
paddle.sort(x=Tensor([0, 2, 2],"float64"), axis=0, )
paddle.sort(x=Tensor([0, 2, 2],"float64"), axis=0, descending=True, )
paddle.sort(x=Tensor([0, 2, 2],"float64"), axis=1, )
paddle.sort(x=Tensor([0, 2, 2],"float64"), axis=-1, )
paddle.sort(x=Tensor([3, 0, 2],"float32"), axis=0, )
paddle.sort(x=Tensor([3, 0, 2],"float64"), axis=0, )
paddle.sort(x=Tensor([3, 0, 2],"float64"), axis=0, descending=True, )
paddle.sort(x=Tensor([3, 0, 2],"float64"), axis=1, )
paddle.sort(x=Tensor([3, 0, 2],"float64"), axis=-1, )
paddle.sort(x=Tensor([3, 2, 0],"float32"), axis=0, )
paddle.sort(x=Tensor([3, 2, 0],"float64"), axis=0, )
paddle.sort(x=Tensor([3, 2, 0],"float64"), axis=0, descending=True, )
paddle.sort(x=Tensor([3, 2, 0],"float64"), axis=1, )
paddle.sort(x=Tensor([3, 2, 0],"float64"), axis=-1, )
paddle.split(Tensor([0, 1, 10285],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([0, 1, 16, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 1, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([0, 1, 3598],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([0, 1, 36858],"float32"), list[27648,6912,1728,432,108,30,], axis=-1, )
paddle.split(Tensor([0, 1, 38402],"float32"), list[28800,7200,1800,450,117,35,], axis=-1, )
paddle.split(Tensor([0, 1, 4, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 1, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([0, 1, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 1, 400, 176, 176],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 1, 400, 184, 184],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 1, 400, 2],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 1, 400, 4],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([0, 1, 4165],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([0, 1, 492, 11],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([0, 1, 492, 4],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([0, 1, 496, 11],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([0, 1, 496, 4],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([0, 1, 500, 11],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([0, 1, 5440],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([0, 1, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([0, 1, 6400],"float32"), list[4800,1200,300,80,20,], axis=-1, )
paddle.split(Tensor([0, 1, 6885],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([0, 1, 8500],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([0, 1, 8580],"float32"), list[6408,1620,414,108,30,], axis=-1, )
paddle.split(Tensor([0, 1, 96],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 10, 11109],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([0, 10, 12096],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([0, 10, 20],"float32"), 2, axis=1, )
paddle.split(Tensor([0, 10, 2541],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([0, 10, 34],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([0, 10, 4725],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([0, 10, 5],"float32"), 2, )
paddle.split(Tensor([0, 10, 5376],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([0, 10, 6069],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([0, 10, 6804],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([0, 10, 6885],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([0, 10, 7581],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([0, 10, 8400],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([0, 10, 9261],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([0, 10],"int64"), 2, axis=1, )
paddle.split(Tensor([0, 100, 4],"float32"), 2, -1, )
paddle.split(Tensor([0, 1000],"bfloat16"), 2, axis=0, )
paddle.split(Tensor([0, 1000],"bool"), 2, axis=0, )
paddle.split(Tensor([0, 1007, 34],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([0, 101, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([0, 101, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 1024, 1, 1],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([0, 1024, 1, 1],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([0, 1024, 12288],"bfloat16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 1024, 16, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([0, 1024, 4],"float32"), 2, -1, )
paddle.split(Tensor([0, 1024],"float32"), 8, )
paddle.split(Tensor([0, 1024],"int64"), 8, )
paddle.split(Tensor([0, 104, 14, 14],"float16"), list[52,52,], axis=1, )
paddle.split(Tensor([0, 104, 14, 14],"float32"), list[52,52,], axis=1, )
paddle.split(Tensor([0, 104, 56, 56],"float16"), 4, 1, )
paddle.split(Tensor([0, 104, 56, 56],"float32"), 4, 1, )
paddle.split(Tensor([0, 11, 10164],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([0, 11, 12096],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([0, 11, 16, 96],"float32"), num_or_sections=list[32,32,32,], axis=-1, )
paddle.split(Tensor([0, 11, 2100],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([0, 11, 3549],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([0, 11, 4116],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([0, 11, 4725],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([0, 11, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([0, 11, 512],"float32"), 2, axis=2, )
paddle.split(Tensor([0, 11, 5376],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([0, 11, 8400],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([0, 112, 11, 11],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([0, 112, 12, 12],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([0, 116, 28, 28],"float16"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([0, 116, 28, 28],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([0, 12, 10164],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([0, 12, 10285],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([0, 12, 11109],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([0, 12, 2100],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([0, 12, 3549],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([0, 12, 3598],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([0, 12, 4165],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([0, 12, 6804],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([0, 12, 7581],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([0, 12, 9261],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([0, 12, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([0, 12],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([0, 12],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 120, 28, 28],"float16"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([0, 120, 28, 28],"float32"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([0, 120, 56, 56],"float16"), list[60,60,], axis=1, )
paddle.split(Tensor([0, 120, 56, 56],"float32"), list[60,60,], axis=1, )
paddle.split(Tensor([0, 128, 7, 7],"float32"), num_or_sections=list[64,64,], axis=1, )
paddle.split(Tensor([0, 128, 768],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 128],"float64"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0, 13, 2541],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([0, 13, 4116],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([0, 13, 6069],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([0, 14, 3024],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([0, 14, 5440],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([0, 14, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([0, 14, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([0, 15, 1360],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([0, 15, 1726],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([0, 15, 3024],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([0, 1536],"float32"), 48, axis=-1, )
paddle.split(Tensor([0, 1584, 7, 7],"float16"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([0, 1584, 7, 7],"float16"), list[792,792,], axis=1, )
paddle.split(Tensor([0, 1584, 7, 7],"float32"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([0, 1584, 7, 7],"float32"), list[792,792,], axis=1, )
paddle.split(Tensor([0, 16, 257, 64],"float32"), list[1,256,], axis=2, )
paddle.split(Tensor([0, 16, 476, 4],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([0, 16, 476, 80],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([0, 160, 14, 14],"float16"), list[80,80,], axis=1, )
paddle.split(Tensor([0, 160, 14, 14],"float32"), list[80,80,], axis=1, )
paddle.split(Tensor([0, 160, 28, 28],"float16"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([0, 160, 28, 28],"float32"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([0, 17, 1360],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([0, 17, 1726],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([0, 176, 28, 28],"float32"), num_or_sections=list[88,88,], axis=1, )
paddle.split(Tensor([0, 192, 112, 112],"float16"), list[64,64,64,], axis=1, )
paddle.split(Tensor([0, 192, 112, 112],"float32"), list[64,64,64,], axis=1, )
paddle.split(Tensor([0, 192, 16, 16],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([0, 192, 28, 28],"float16"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([0, 192, 28, 28],"float32"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([0, 192, 56, 56],"float16"), list[96,96,], axis=1, )
paddle.split(Tensor([0, 192, 56, 56],"float32"), list[96,96,], axis=1, )
paddle.split(Tensor([0, 192, 7, 7],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([0, 2, 1, 8, 128, 96],"float16"), 2, axis=0, )
paddle.split(Tensor([0, 2, 1100, 4],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([0, 2, 1100, 80],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([0, 2, 2, 8, 128, 96],"float16"), 2, axis=0, )
paddle.split(Tensor([0, 2, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([0, 2, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([0, 2, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([0, 2, 32, 32, 128],"float16"), 2, axis=0, )
paddle.split(Tensor([0, 2, 498, 1],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([0, 2, 498, 4],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([0, 2, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([0, 2, 8, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 2],"int64"), 2, axis=1, )
paddle.split(Tensor([0, 20, 2],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([0, 20],"float32"), num_or_sections=list[10,10,], axis=1, )
paddle.split(Tensor([0, 224, 28, 28],"float32"), num_or_sections=list[112,112,], axis=1, )
paddle.split(Tensor([0, 232, 14, 14],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([0, 232, 14, 14],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([0, 24, 10, 10],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([0, 24, 28, 28],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([0, 240, 56, 56],"float16"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([0, 240, 56, 56],"float32"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([0, 25, 5],"float32"), 5, axis=-1, )
paddle.split(Tensor([0, 27, 10, 10],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([0, 27, 10, 10],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([0, 288, 14, 14],"float16"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([0, 288, 14, 14],"float32"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([0, 3, 192, 288],"float32"), num_or_sections=list[2,1,], axis=1, )
paddle.split(Tensor([0, 3, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([0, 3, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([0, 3],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 3],"float64"), 3, )
paddle.split(Tensor([0, 300, 512],"float32"), 2, axis=2, )
paddle.split(Tensor([0, 32, 112, 112],"float16"), list[16,16,], axis=1, )
paddle.split(Tensor([0, 32, 112, 112],"float32"), list[16,16,], axis=1, )
paddle.split(Tensor([0, 32, 28, 28],"float32"), num_or_sections=list[16,16,], axis=1, )
paddle.split(Tensor([0, 32, 3, 128],"float16"), 3, axis=2, )
paddle.split(Tensor([0, 320, 14, 14],"float16"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([0, 320, 14, 14],"float32"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([0, 33, 10, 10],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([0, 33, 11, 11],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([0, 336, 28, 28],"float16"), list[112,112,112,], axis=1, )
paddle.split(Tensor([0, 336, 28, 28],"float16"), list[168,168,], axis=1, )
paddle.split(Tensor([0, 336, 28, 28],"float32"), list[112,112,112,], axis=1, )
paddle.split(Tensor([0, 336, 28, 28],"float32"), list[168,168,], axis=1, )
paddle.split(Tensor([0, 34, 128, 128],"float16"), 2, axis=1, )
paddle.split(Tensor([0, 34, 128, 128],"float32"), 2, axis=1, )
paddle.split(Tensor([0, 352, 14, 14],"float32"), num_or_sections=list[176,176,], axis=1, )
paddle.split(Tensor([0, 384, 10, 10],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([0, 384, 10, 10],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([0, 4, 2, 2],"float32"), 2, -1, )
paddle.split(Tensor([0, 4, 4, 2],"float32"), 2, -1, )
paddle.split(Tensor([0, 4, 500, 4],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([0, 4, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([0, 4, 8500],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([0, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([0, 4],"float32"), tuple(1,1,1,1,), axis=-1, )
paddle.split(Tensor([0, 40, 56, 56],"float16"), list[20,20,], axis=1, )
paddle.split(Tensor([0, 40, 56, 56],"float32"), list[20,20,], axis=1, )
paddle.split(Tensor([0, 400, 176, 176],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 400, 184, 184],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 400, 2],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 400, 4],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([0, 43, 100, 76],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([0, 43, 104, 80],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([0, 464, 7, 7],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([0, 464, 7, 7],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([0, 48, 14, 14],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([0, 48, 5, 5],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([0, 480, 14, 14],"float16"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([0, 480, 14, 14],"float16"), list[240,240,], axis=1, )
paddle.split(Tensor([0, 480, 14, 14],"float32"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([0, 480, 14, 14],"float32"), list[240,240,], axis=1, )
paddle.split(Tensor([0, 488, 14, 14],"float32"), num_or_sections=list[244,244,], axis=1, )
paddle.split(Tensor([0, 5, 15, 15],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([0, 5, 21, 21],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([0, 5, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([0, 5],"float32"), list[2,2,1,], axis=-1, )
paddle.split(Tensor([0, 512],"float32"), 16, axis=-1, )
paddle.split(Tensor([0, 54, 100, 100],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([0, 54, 100, 100],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([0, 56, 28, 28],"float16"), list[28,28,], axis=1, )
paddle.split(Tensor([0, 56, 28, 28],"float32"), list[28,28,], axis=1, )
paddle.split(Tensor([0, 576, 7, 7],"float16"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([0, 576, 7, 7],"float32"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([0, 6, 6],"bool"), num_or_sections=3, axis=1, )
paddle.split(Tensor([0, 6, 6],"float32"), num_or_sections=list[5,0,3,], )
paddle.split(Tensor([0, 6, 6],"int32"), list[2,2,2,], axis=1, )
paddle.split(Tensor([0, 6, 6],"int32"), list[6,], axis=1, )
paddle.split(Tensor([0, 6, 6],"int32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([0, 6, 6],"int32"), num_or_sections=list[2,2,2,], axis=1, )
paddle.split(Tensor([0, 624, 14, 14],"float16"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([0, 624, 14, 14],"float16"), list[312,312,], axis=1, )
paddle.split(Tensor([0, 624, 14, 14],"float32"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([0, 624, 14, 14],"float32"), list[312,312,], axis=1, )
paddle.split(Tensor([0, 64, 14, 14],"float32"), num_or_sections=list[32,32,], axis=1, )
paddle.split(Tensor([0, 640, 7, 7],"float16"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([0, 640, 7, 7],"float32"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([0, 7, 2],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([0, 7, 202],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([0, 7, 96],"float32"), 3, axis=-1, )
paddle.split(Tensor([0, 7],"float32"), 7, axis=-1, )
paddle.split(Tensor([0, 704, 7, 7],"float32"), num_or_sections=list[352,352,], axis=1, )
paddle.split(Tensor([0, 8, 128, 128],"float32"), num_or_sections=8, axis=1, )
paddle.split(Tensor([0, 8, 16, 128, 64],"float32"), 2, )
paddle.split(Tensor([0, 8, 5],"float64"), num_or_sections=2, axis=1, )
paddle.split(Tensor([0, 80, 56, 56],"float16"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([0, 80, 56, 56],"float32"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([0, 9, 128, 128],"float32"), num_or_sections=9, axis=1, )
paddle.split(Tensor([0, 9],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([0, 96, 14, 14],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([0, 96, 3, 3],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([0, 96, 56, 56],"float16"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([0, 96, 56, 56],"float32"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([0, 960, 14, 14],"float16"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([0, 960, 14, 14],"float32"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([0, 976, 7, 7],"float32"), num_or_sections=list[488,488,], axis=1, )
paddle.split(Tensor([0],"bool"), list[27648,6912,1728,432,108,30,], )
paddle.split(Tensor([0],"bool"), list[28800,7200,1800,450,117,35,], )
paddle.split(Tensor([0],"bool"), list[4800,1200,300,80,20,], )
paddle.split(Tensor([0],"bool"), list[6408,1620,414,108,30,], )
paddle.split(Tensor([0],"float32"), 100, )
paddle.split(Tensor([0],"float32"), 16, axis=-1, )
paddle.split(Tensor([0],"float32"), 48, axis=-1, )
paddle.split(Tensor([0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([0],"int64"), 2, axis=0, )
paddle.split(Tensor([0],"int64"), list[100,], )
paddle.split(Tensor([0],"int64"), list[100,100,], )
paddle.split(Tensor([0],"int64"), list[100,100,100,100,], )
paddle.split(Tensor([0],"int64"), list[100,100,100,100,100,100,100,100,], )
paddle.split(Tensor([0],"int64"), list[33,99,], )
paddle.split(Tensor([0],"int64"), list[4,8,8,20,32,88,20,20,72,12,36,16,4,8,44,12,], )
paddle.split(Tensor([0],"int64"), list[5,4,0,4,], )
paddle.split(Tensor([0],"int64"), list[96,], )
paddle.split(Tensor([0],"int64"), list[96,32,], )
paddle.split(Tensor([0],"int64"), list[98,], )
paddle.split(Tensor([1, 0, 10, 10],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([1, 0, 10285],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([1, 0, 12288],"bfloat16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0, 16, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0, 16, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0, 16, 96],"float32"), num_or_sections=list[32,32,32,], axis=-1, )
paddle.split(Tensor([1, 0, 176, 176],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 0, 184, 184],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 0, 192, 288],"float32"), num_or_sections=list[2,1,], axis=1, )
paddle.split(Tensor([1, 0, 2],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 0, 2],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([1, 0, 257, 64],"float32"), list[1,256,], axis=2, )
paddle.split(Tensor([1, 0, 3, 3],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([1, 0, 3598],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([1, 0, 36858],"float32"), list[27648,6912,1728,432,108,30,], axis=-1, )
paddle.split(Tensor([1, 0, 38402],"float32"), list[28800,7200,1800,450,117,35,], axis=-1, )
paddle.split(Tensor([1, 0, 4, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([1, 0, 4],"float32"), 2, -1, )
paddle.split(Tensor([1, 0, 4],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 0, 4],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 0, 4],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 0, 4165],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([1, 0, 4789],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([1, 0, 5, 5],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([1, 0, 5],"float32"), 5, axis=-1, )
paddle.split(Tensor([1, 0, 512],"float32"), 2, axis=2, )
paddle.split(Tensor([1, 0, 5440],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([1, 0, 6150],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([1, 0, 6400],"float32"), list[4800,1200,300,80,20,], axis=-1, )
paddle.split(Tensor([1, 0, 6885],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([1, 0, 7681],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([1, 0, 8500],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([1, 0, 8580],"float32"), list[6408,1620,414,108,30,], axis=-1, )
paddle.split(Tensor([1, 0, 9382],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([1, 0, 96],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 0],"float32"), 7, axis=-1, )
paddle.split(Tensor([1, 0],"float32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([1, 0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 0],"float32"), num_or_sections=list[10,10,], axis=1, )
paddle.split(Tensor([1, 0],"float64"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 1, 0, 192],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1, 0, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[27648,6912,1728,432,108,30,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[28800,7200,1800,450,117,35,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[4800,1200,300,80,20,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[6408,1620,414,108,30,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1, 0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 1, 16, 0],"float32"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1, 4, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([1, 10, 0],"float32"), list[5184,1296,324,81,], axis=-1, )
paddle.split(Tensor([1, 100, 0],"float32"), 2, -1, )
paddle.split(Tensor([1, 101, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([1, 101, 0],"float32"), num_or_sections=4, axis=-1, )
paddle.split(Tensor([1, 1024, 0, 192],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1024, 0],"bfloat16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 1024, 0],"float32"), 2, -1, )
paddle.split(Tensor([1, 1024, 16, 0],"float16"), num_or_sections=3, axis=-1, )
paddle.split(Tensor([1, 11, 0, 96],"float32"), num_or_sections=list[32,32,32,], axis=-1, )
paddle.split(Tensor([1, 11, 0],"float32"), 2, axis=2, )
paddle.split(Tensor([1, 11, 0],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([1, 11, 16, 0],"float32"), num_or_sections=list[32,32,32,], axis=-1, )
paddle.split(Tensor([1, 12, 0],"float32"), list[2704,676,169,49,], axis=-1, )
paddle.split(Tensor([1, 12, 0],"float32"), list[3136,784,196,49,], axis=-1, )
paddle.split(Tensor([1, 12, 0],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([1, 12, 0],"float32"), list[7744,1936,484,121,], axis=-1, )
paddle.split(Tensor([1, 14, 0],"float32"), list[4096,1024,256,64,], axis=-1, )
paddle.split(Tensor([1, 14, 0],"float32"), list[4624,1156,289,81,], axis=-1, )
paddle.split(Tensor([1, 14, 0],"float32"), list[7056,1764,441,121,], axis=-1, )
paddle.split(Tensor([1, 16, 0, 64],"float32"), list[1,256,], axis=2, )
paddle.split(Tensor([1, 16, 257, 0],"float32"), list[1,256,], axis=2, )
paddle.split(Tensor([1, 2, 0],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([1, 20, 0],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([1, 24, 0, 10],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([1, 24, 10, 0],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([1, 25, 0],"float32"), 5, axis=-1, )
paddle.split(Tensor([1, 3, 0, 288],"float32"), num_or_sections=list[2,1,], axis=1, )
paddle.split(Tensor([1, 3, 0],"float32"), list[3600,900,225,64,], axis=-1, )
paddle.split(Tensor([1, 3, 192, 0],"float32"), num_or_sections=list[2,1,], axis=1, )
paddle.split(Tensor([1, 300, 0],"float32"), 2, axis=2, )
paddle.split(Tensor([1, 4, 0],"float32"), list[5776,1444,361,100,], axis=-1, )
paddle.split(Tensor([1, 4, 0],"float32"), list[6400,1600,400,100,], axis=-1, )
paddle.split(Tensor([1, 400, 0, 176],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 400, 0, 184],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 400, 0],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 400, 176, 0],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 400, 184, 0],"float32"), list[100,300,], axis=1, )
paddle.split(Tensor([1, 48, 0, 5],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([1, 48, 5, 0],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([1, 96, 0, 3],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([1, 96, 3, 0],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([10, 0, 8, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([10, 0],"bfloat16"), 2, axis=0, )
paddle.split(Tensor([10, 0],"bool"), 2, axis=0, )
paddle.split(Tensor([10, 0],"float32"), 7, axis=-1, )
paddle.split(Tensor([10, 2, 0, 24],"float32"), 3, axis=-1, )
paddle.split(Tensor([10, 2, 8, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([100, 0],"float32"), 2, axis=-1, )
paddle.split(Tensor([10240, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([12, 0, 10, 10],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 0, 10, 10],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 27, 0, 10],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 27, 0, 10],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 27, 10, 0],"float16"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([12, 27, 10, 0],"float32"), num_or_sections=list[18,9,], axis=1, )
paddle.split(Tensor([13, 0, 2, 2],"float32"), 2, -1, )
paddle.split(Tensor([13, 0, 2],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([13, 0, 202],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([13, 0, 34],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([13, 0, 4, 2],"float32"), 2, -1, )
paddle.split(Tensor([13, 10, 0],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([13, 1007, 0],"float32"), list[2,16,16,], axis=-1, )
paddle.split(Tensor([13, 4, 0, 2],"float32"), 2, -1, )
paddle.split(Tensor([13, 4, 2, 0],"float32"), 2, -1, )
paddle.split(Tensor([13, 4, 4, 0],"float32"), 2, -1, )
paddle.split(Tensor([13, 7, 0],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([13, 7, 0],"float32"), num_or_sections=2, axis=-1, )
paddle.split(Tensor([14, 0, 96],"float32"), 3, axis=-1, )
paddle.split(Tensor([14, 7, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([1536, 0, 14, 14],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 0, 14, 14],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 0, 28, 28],"float16"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 0, 28, 28],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 0, 7, 7],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 0, 7, 7],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 116, 0, 28],"float16"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 116, 0, 28],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 116, 28, 0],"float16"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 116, 28, 0],"float32"), num_or_sections=list[58,58,], axis=1, )
paddle.split(Tensor([1536, 232, 0, 14],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 232, 0, 14],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 232, 14, 0],"float16"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 232, 14, 0],"float32"), num_or_sections=list[116,116,], axis=1, )
paddle.split(Tensor([1536, 464, 0, 7],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 464, 0, 7],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 464, 7, 0],"float16"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([1536, 464, 7, 0],"float32"), num_or_sections=list[232,232,], axis=1, )
paddle.split(Tensor([16, 0, 10164],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([16, 0, 11109],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([16, 0, 12096],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([16, 0, 2100],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([16, 0, 2125],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([16, 0, 2541],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([16, 0, 3024],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([16, 0, 3060],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([16, 0, 3549],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([16, 0, 4116],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([16, 0, 4725],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([16, 0, 5376],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([16, 0, 6069],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([16, 0, 6804],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([16, 0, 7581],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([16, 0, 8400],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([16, 0, 9261],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([16, 0],"float32"), 8, )
paddle.split(Tensor([16, 0],"int64"), 8, )
paddle.split(Tensor([16, 10, 0],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([16, 10, 0],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[225,900,3600,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[256,1024,4096,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[400,1600,6400,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([16, 11, 0],"float32"), list[576,2304,9216,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[100,400,1600,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[169,676,2704,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[324,1296,5184,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[361,1444,5776,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[441,1764,7056,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[484,1936,7744,], axis=-1, )
paddle.split(Tensor([16, 12, 0],"float32"), list[529,2116,8464,], axis=-1, )
paddle.split(Tensor([16, 13, 0],"float32"), list[121,484,1936,], axis=-1, )
paddle.split(Tensor([16, 13, 0],"float32"), list[196,784,3136,], axis=-1, )
paddle.split(Tensor([16, 13, 0],"float32"), list[289,1156,4624,], axis=-1, )
paddle.split(Tensor([16, 14, 0],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([16, 15, 0],"float32"), list[144,576,2304,], axis=-1, )
paddle.split(Tensor([16, 2, 0],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([16, 2, 0],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([16, 3, 0],"float32"), list[1600,400,100,25,], axis=-1, )
paddle.split(Tensor([16, 5, 0],"float32"), list[2304,576,144,36,], axis=-1, )
paddle.split(Tensor([1820, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([2, 0, 1, 8, 128, 96],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 0, 10, 10],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 0, 11, 11],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[176,176,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[244,244,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[32,32,], axis=1, )
paddle.split(Tensor([2, 0, 14, 14],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([2, 0, 15, 15],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 0, 16, 128, 64],"float32"), 2, )
paddle.split(Tensor([2, 0, 2, 8, 128, 96],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 0, 21, 21],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 0, 28, 28],"float32"), num_or_sections=list[112,112,], axis=1, )
paddle.split(Tensor([2, 0, 28, 28],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([2, 0, 28, 28],"float32"), num_or_sections=list[16,16,], axis=1, )
paddle.split(Tensor([2, 0, 28, 28],"float32"), num_or_sections=list[88,88,], axis=1, )
paddle.split(Tensor([2, 0, 3, 128],"float16"), 3, axis=2, )
paddle.split(Tensor([2, 0, 32, 32, 128],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 0, 5],"float32"), 2, )
paddle.split(Tensor([2, 0, 7, 7],"float32"), num_or_sections=list[352,352,], axis=1, )
paddle.split(Tensor([2, 0, 7, 7],"float32"), num_or_sections=list[488,488,], axis=1, )
paddle.split(Tensor([2, 0, 7, 7],"float32"), num_or_sections=list[64,64,], axis=1, )
paddle.split(Tensor([2, 0, 7, 7],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([2, 10, 0],"float32"), 2, )
paddle.split(Tensor([2, 128, 0, 7],"float32"), num_or_sections=list[64,64,], axis=1, )
paddle.split(Tensor([2, 128, 7, 0],"float32"), num_or_sections=list[64,64,], axis=1, )
paddle.split(Tensor([2, 176, 0, 28],"float32"), num_or_sections=list[88,88,], axis=1, )
paddle.split(Tensor([2, 176, 28, 0],"float32"), num_or_sections=list[88,88,], axis=1, )
paddle.split(Tensor([2, 192, 0, 7],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([2, 192, 7, 0],"float32"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([2, 2, 0, 32, 128],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 2, 0, 8, 128, 96],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 2, 1, 0, 128, 96],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 2, 1, 8, 0, 96],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 2, 1, 8, 128, 0],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 2, 2, 0, 128, 96],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 2, 2, 8, 0, 96],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 2, 2, 8, 128, 0],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 2, 32, 0, 128],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 2, 32, 32, 0],"float16"), 2, axis=0, )
paddle.split(Tensor([2, 224, 0, 28],"float32"), num_or_sections=list[112,112,], axis=1, )
paddle.split(Tensor([2, 224, 28, 0],"float32"), num_or_sections=list[112,112,], axis=1, )
paddle.split(Tensor([2, 24, 0, 28],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([2, 24, 28, 0],"float32"), num_or_sections=list[12,12,], axis=1, )
paddle.split(Tensor([2, 32, 0, 128],"float16"), 3, axis=2, )
paddle.split(Tensor([2, 32, 0, 28],"float32"), num_or_sections=list[16,16,], axis=1, )
paddle.split(Tensor([2, 32, 28, 0],"float32"), num_or_sections=list[16,16,], axis=1, )
paddle.split(Tensor([2, 32, 3, 0],"float16"), 3, axis=2, )
paddle.split(Tensor([2, 33, 0, 10],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 0, 11],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 10, 0],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 33, 11, 0],"float32"), list[1,32,], axis=1, )
paddle.split(Tensor([2, 352, 0, 14],"float32"), num_or_sections=list[176,176,], axis=1, )
paddle.split(Tensor([2, 352, 14, 0],"float32"), num_or_sections=list[176,176,], axis=1, )
paddle.split(Tensor([2, 48, 0, 14],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([2, 48, 14, 0],"float32"), num_or_sections=list[24,24,], axis=1, )
paddle.split(Tensor([2, 488, 0, 14],"float32"), num_or_sections=list[244,244,], axis=1, )
paddle.split(Tensor([2, 488, 14, 0],"float32"), num_or_sections=list[244,244,], axis=1, )
paddle.split(Tensor([2, 5, 0, 15],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 0, 21],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 15, 0],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 5, 21, 0],"float32"), list[4,1,], axis=1, )
paddle.split(Tensor([2, 64, 0, 14],"float32"), num_or_sections=list[32,32,], axis=1, )
paddle.split(Tensor([2, 64, 14, 0],"float32"), num_or_sections=list[32,32,], axis=1, )
paddle.split(Tensor([2, 704, 0, 7],"float32"), num_or_sections=list[352,352,], axis=1, )
paddle.split(Tensor([2, 704, 7, 0],"float32"), num_or_sections=list[352,352,], axis=1, )
paddle.split(Tensor([2, 8, 0, 128, 64],"float32"), 2, )
paddle.split(Tensor([2, 8, 16, 0, 64],"float32"), 2, )
paddle.split(Tensor([2, 8, 16, 128, 0],"float32"), 2, )
paddle.split(Tensor([2, 96, 0, 14],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([2, 96, 14, 0],"float32"), num_or_sections=list[48,48,], axis=1, )
paddle.split(Tensor([2, 976, 0, 7],"float32"), num_or_sections=list[488,488,], axis=1, )
paddle.split(Tensor([2, 976, 7, 0],"float32"), num_or_sections=list[488,488,], axis=1, )
paddle.split(Tensor([24, 0, 100, 76],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 0, 104, 80],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 0, 128, 128],"float16"), 2, axis=1, )
paddle.split(Tensor([24, 0, 128, 128],"float32"), 2, axis=1, )
paddle.split(Tensor([24, 34, 0, 128],"float16"), 2, axis=1, )
paddle.split(Tensor([24, 34, 0, 128],"float32"), 2, axis=1, )
paddle.split(Tensor([24, 34, 128, 0],"float16"), 2, axis=1, )
paddle.split(Tensor([24, 34, 128, 0],"float32"), 2, axis=1, )
paddle.split(Tensor([24, 43, 0, 76],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 0, 80],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 100, 0],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([24, 43, 104, 0],"float32"), list[11,32,], axis=1, )
paddle.split(Tensor([3, 0, 5],"float64"), num_or_sections=2, axis=1, )
paddle.split(Tensor([3, 0, 500, 4],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([3, 4, 0, 4],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([3, 4, 500, 0],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([3, 8, 0],"float64"), num_or_sections=2, axis=1, )
paddle.split(Tensor([300, 0],"float32"), tuple(1,1,1,1,), axis=-1, )
paddle.split(Tensor([304, 0],"float32"), list[2,2,1,], axis=-1, )
paddle.split(Tensor([32, 0, 11, 11],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 0, 12, 12],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 0, 11],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 0, 12],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 11, 0],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([32, 112, 12, 0],"float32"), list[80,32,], axis=1, )
paddle.split(Tensor([3200, 0],"int64"), 2, axis=1, )
paddle.split(Tensor([4, 0, 20],"float32"), 2, axis=1, )
paddle.split(Tensor([4, 0, 2577],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([4, 0, 5],"float32"), 2, )
paddle.split(Tensor([4, 0, 6],"bool"), num_or_sections=3, axis=1, )
paddle.split(Tensor([4, 0, 6],"int32"), list[2,2,2,], axis=1, )
paddle.split(Tensor([4, 0, 6],"int32"), list[6,], axis=1, )
paddle.split(Tensor([4, 0, 6],"int32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([4, 0, 6],"int32"), num_or_sections=list[2,2,2,], axis=1, )
paddle.split(Tensor([4, 0],"int64"), 2, axis=1, )
paddle.split(Tensor([4, 1, 0],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([4, 10, 0],"float32"), 2, )
paddle.split(Tensor([4, 10, 0],"float32"), 2, axis=1, )
paddle.split(Tensor([4, 2, 0],"float32"), list[1936,484,121,36,], axis=-1, )
paddle.split(Tensor([4, 6, 0],"bool"), num_or_sections=3, axis=1, )
paddle.split(Tensor([4, 6, 0],"int32"), list[2,2,2,], axis=1, )
paddle.split(Tensor([4, 6, 0],"int32"), list[6,], axis=1, )
paddle.split(Tensor([4, 6, 0],"int32"), num_or_sections=3, axis=1, )
paddle.split(Tensor([4, 6, 0],"int32"), num_or_sections=list[2,2,2,], axis=1, )
paddle.split(Tensor([512, 0, 28, 28],"float16"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 0, 28, 28],"float32"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 0],"float32"), 16, axis=-1, )
paddle.split(Tensor([512, 0],"float32"), 48, axis=-1, )
paddle.split(Tensor([512, 120, 0, 28],"float16"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 120, 0, 28],"float32"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 120, 28, 0],"float16"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([512, 120, 28, 0],"float32"), num_or_sections=list[60,60,], axis=1, )
paddle.split(Tensor([52, 0, 202],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([52, 7, 0],"float32"), list[37,37,128,], axis=-1, )
paddle.split(Tensor([6, 0, 100, 100],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 0, 100, 100],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 0, 1100, 4],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 0, 1100, 80],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 0, 400, 176, 176],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 400, 184, 184],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 400, 2],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 400, 4],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 0, 476, 4],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 0, 476, 80],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 0, 492, 11],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 0, 492, 4],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 0, 496, 11],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 0, 496, 4],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 0, 498, 1],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 0, 498, 4],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 0, 500, 11],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([6, 0],"float64"), 3, )
paddle.split(Tensor([6, 1, 0, 11],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 11],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 11],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 176, 176],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 184, 184],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 2],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 4],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 4],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 1, 0, 4],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 0, 176],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 0, 184],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 0],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 176, 0],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 400, 184, 0],"float32"), list[100,300,], axis=2, )
paddle.split(Tensor([6, 1, 492, 0],"float32"), list[192,300,], axis=2, )
paddle.split(Tensor([6, 1, 496, 0],"float32"), list[196,300,], axis=2, )
paddle.split(Tensor([6, 1, 500, 0],"float32"), list[200,300,], axis=2, )
paddle.split(Tensor([6, 16, 0, 4],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 16, 0, 80],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 16, 476, 0],"float32"), list[176,300,], axis=2, )
paddle.split(Tensor([6, 2, 0, 1],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 2, 0, 4],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 2, 0, 4],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 2, 0, 80],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 2, 1100, 0],"float32"), list[200,900,], axis=2, )
paddle.split(Tensor([6, 2, 498, 0],"float32"), list[198,300,], axis=2, )
paddle.split(Tensor([6, 54, 0, 100],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 0, 100],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 100, 0],"float16"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6, 54, 100, 0],"float32"), num_or_sections=list[36,18,], axis=1, )
paddle.split(Tensor([6380, 0],"float32"), tuple(1,1,1,1,), axis=-1, )
paddle.split(Tensor([64, 0, 1, 1],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 0, 1, 1],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 0, 10, 10],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 0, 10, 10],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 0, 112, 112],"float16"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 0, 112, 112],"float16"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 0, 112, 112],"float32"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 0, 112, 112],"float32"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 0, 1360],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float16"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 0, 14, 14],"float32"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 0, 16, 16],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 0, 1726],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float16"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 0, 28, 28],"float32"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), 4, 1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float16"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), 4, 1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 0, 56, 56],"float32"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float16"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float16"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float16"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float16"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float32"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float32"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float32"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 0, 7, 7],"float32"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 1024, 0, 1],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 0, 1],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 1, 0],"float16"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 1024, 1, 0],"float32"), num_or_sections=2, axis=1, )
paddle.split(Tensor([64, 104, 0, 14],"float16"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 104, 0, 14],"float32"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 104, 0, 56],"float16"), 4, 1, )
paddle.split(Tensor([64, 104, 0, 56],"float32"), 4, 1, )
paddle.split(Tensor([64, 104, 14, 0],"float16"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 104, 14, 0],"float32"), list[52,52,], axis=1, )
paddle.split(Tensor([64, 104, 56, 0],"float16"), 4, 1, )
paddle.split(Tensor([64, 104, 56, 0],"float32"), 4, 1, )
paddle.split(Tensor([64, 120, 0, 56],"float16"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 120, 0, 56],"float32"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 120, 56, 0],"float16"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 120, 56, 0],"float32"), list[60,60,], axis=1, )
paddle.split(Tensor([64, 15, 0],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([64, 15, 0],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([64, 1584, 0, 7],"float16"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 1584, 0, 7],"float16"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 1584, 0, 7],"float32"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 1584, 0, 7],"float32"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 1584, 7, 0],"float16"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 1584, 7, 0],"float16"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 1584, 7, 0],"float32"), list[396,396,396,396,], axis=1, )
paddle.split(Tensor([64, 1584, 7, 0],"float32"), list[792,792,], axis=1, )
paddle.split(Tensor([64, 160, 0, 14],"float16"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 160, 0, 14],"float32"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 160, 0, 28],"float16"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 160, 0, 28],"float32"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 160, 14, 0],"float16"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 160, 14, 0],"float32"), list[80,80,], axis=1, )
paddle.split(Tensor([64, 160, 28, 0],"float16"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 160, 28, 0],"float32"), num_or_sections=list[128,32,], axis=1, )
paddle.split(Tensor([64, 17, 0],"float32"), list[1024,256,64,16,], axis=-1, )
paddle.split(Tensor([64, 17, 0],"float32"), list[1296,324,81,25,], axis=-1, )
paddle.split(Tensor([64, 192, 0, 112],"float16"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 192, 0, 112],"float32"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 192, 0, 16],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 0, 28],"float16"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 192, 0, 28],"float32"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 192, 0, 56],"float16"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 0, 56],"float32"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 112, 0],"float16"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 192, 112, 0],"float32"), list[64,64,64,], axis=1, )
paddle.split(Tensor([64, 192, 16, 0],"float16"), num_or_sections=list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 28, 0],"float16"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 192, 28, 0],"float32"), num_or_sections=list[128,64,], axis=1, )
paddle.split(Tensor([64, 192, 56, 0],"float16"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 192, 56, 0],"float32"), list[96,96,], axis=1, )
paddle.split(Tensor([64, 240, 0, 56],"float16"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 240, 0, 56],"float32"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 240, 56, 0],"float16"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 240, 56, 0],"float32"), list[60,60,60,60,], axis=1, )
paddle.split(Tensor([64, 288, 0, 14],"float16"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 288, 0, 14],"float32"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 288, 14, 0],"float16"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 288, 14, 0],"float32"), num_or_sections=list[256,32,], axis=1, )
paddle.split(Tensor([64, 32, 0, 112],"float16"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 32, 0, 112],"float32"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 32, 112, 0],"float16"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 32, 112, 0],"float32"), list[16,16,], axis=1, )
paddle.split(Tensor([64, 320, 0, 14],"float16"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 320, 0, 14],"float32"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 320, 14, 0],"float16"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 320, 14, 0],"float32"), num_or_sections=list[256,64,], axis=1, )
paddle.split(Tensor([64, 336, 0, 28],"float16"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 336, 0, 28],"float16"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 336, 0, 28],"float32"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 336, 0, 28],"float32"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 336, 28, 0],"float16"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 336, 28, 0],"float16"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 336, 28, 0],"float32"), list[112,112,112,], axis=1, )
paddle.split(Tensor([64, 336, 28, 0],"float32"), list[168,168,], axis=1, )
paddle.split(Tensor([64, 384, 0, 10],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 0, 10],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 10, 0],"float16"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 384, 10, 0],"float32"), num_or_sections=list[192,192,], axis=1, )
paddle.split(Tensor([64, 40, 0, 56],"float16"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 40, 0, 56],"float32"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 40, 56, 0],"float16"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 40, 56, 0],"float32"), list[20,20,], axis=1, )
paddle.split(Tensor([64, 480, 0, 14],"float16"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 480, 0, 14],"float16"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 480, 0, 14],"float32"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 480, 0, 14],"float32"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 480, 14, 0],"float16"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 480, 14, 0],"float16"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 480, 14, 0],"float32"), list[120,120,120,120,], axis=1, )
paddle.split(Tensor([64, 480, 14, 0],"float32"), list[240,240,], axis=1, )
paddle.split(Tensor([64, 56, 0, 28],"float16"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 56, 0, 28],"float32"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 56, 28, 0],"float16"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 56, 28, 0],"float32"), list[28,28,], axis=1, )
paddle.split(Tensor([64, 576, 0, 7],"float16"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 576, 0, 7],"float32"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 576, 7, 0],"float16"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 576, 7, 0],"float32"), num_or_sections=list[512,64,], axis=1, )
paddle.split(Tensor([64, 624, 0, 14],"float16"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 624, 0, 14],"float16"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 624, 0, 14],"float32"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 624, 0, 14],"float32"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 624, 14, 0],"float16"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 624, 14, 0],"float16"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 624, 14, 0],"float32"), list[156,156,156,156,], axis=1, )
paddle.split(Tensor([64, 624, 14, 0],"float32"), list[312,312,], axis=1, )
paddle.split(Tensor([64, 640, 0, 7],"float16"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 640, 0, 7],"float32"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 640, 7, 0],"float16"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 640, 7, 0],"float32"), num_or_sections=list[512,128,], axis=1, )
paddle.split(Tensor([64, 80, 0, 56],"float16"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 80, 0, 56],"float32"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 80, 56, 0],"float16"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 80, 56, 0],"float32"), num_or_sections=list[64,16,], axis=1, )
paddle.split(Tensor([64, 96, 0, 56],"float16"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 96, 0, 56],"float32"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 96, 56, 0],"float16"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 96, 56, 0],"float32"), num_or_sections=list[64,32,], axis=1, )
paddle.split(Tensor([64, 960, 0, 14],"float16"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 960, 0, 14],"float32"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 960, 14, 0],"float16"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([64, 960, 14, 0],"float32"), list[240,240,240,240,], axis=1, )
paddle.split(Tensor([8, 0, 128, 128],"float32"), num_or_sections=8, axis=1, )
paddle.split(Tensor([8, 0, 128, 128],"float32"), num_or_sections=9, axis=1, )
paddle.split(Tensor([8, 0, 6],"float32"), num_or_sections=list[5,0,3,], )
paddle.split(Tensor([8, 0, 768],"float32"), 3, axis=-1, )
paddle.split(Tensor([8, 128, 0],"float32"), 3, axis=-1, )
paddle.split(Tensor([8, 6, 0],"float32"), num_or_sections=list[5,0,3,], )
paddle.split(Tensor([8, 8, 0, 128],"float32"), num_or_sections=8, axis=1, )
paddle.split(Tensor([8, 8, 128, 0],"float32"), num_or_sections=8, axis=1, )
paddle.split(Tensor([8, 9, 0, 128],"float32"), num_or_sections=9, axis=1, )
paddle.split(Tensor([8, 9, 128, 0],"float32"), num_or_sections=9, axis=1, )
paddle.split(x=Tensor([0, 1024, 7, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([0, 1152, 7, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([0, 128, 28, 28],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([0, 128, 56, 56],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([0, 144, 56, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([0, 1536, 7, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([0, 160, 14, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([0, 192, 28, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([0, 256, 14, 14],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([0, 256, 28, 28],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([0, 288, 28, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([0, 3],"float64"), num_or_sections=2, )
paddle.split(x=Tensor([0, 3],"float64"), num_or_sections=list[2,-1,], axis=-1, )
paddle.split(x=Tensor([0, 3],"float64"), num_or_sections=tuple(2,1,), axis=1, )
paddle.split(x=Tensor([0, 320, 7, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([0, 384, 14, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([0, 40, 56, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([0, 512, 14, 14],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([0, 512, 7, 7],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([0, 576, 14, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([0, 6],"float32"), axis=1, num_or_sections=3, )
paddle.split(x=Tensor([0, 64, 56, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([0, 768, 7, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([0, 80, 28, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([0, 96, 56, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([0],"bool"), num_or_sections=3, axis=0, )
paddle.split(x=Tensor([1, 0],"float32"), axis=1, num_or_sections=3, )
paddle.split(x=Tensor([124, 0, 14, 14],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 0, 14, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([124, 0, 14, 14],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 0, 14, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([124, 0, 28, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([124, 0, 28, 28],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 0, 28, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([124, 0, 28, 28],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 0, 56, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([124, 0, 56, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([124, 0, 56, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([124, 0, 56, 56],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 0, 7, 7],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 0, 7, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([124, 0, 7, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([124, 0, 7, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([124, 1024, 0, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([124, 1024, 7, 0],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([124, 128, 0, 28],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 128, 0, 56],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 128, 28, 0],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 128, 56, 0],"float32"), num_or_sections=list[32,96,], axis=1, )
paddle.split(x=Tensor([124, 160, 0, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([124, 160, 14, 0],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([124, 192, 0, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([124, 192, 28, 0],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([124, 256, 0, 14],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 256, 0, 28],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 256, 14, 0],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 256, 28, 0],"float32"), num_or_sections=list[64,192,], axis=1, )
paddle.split(x=Tensor([124, 320, 0, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([124, 320, 7, 0],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([124, 384, 0, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([124, 384, 14, 0],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([124, 40, 0, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([124, 40, 56, 0],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([124, 512, 0, 14],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 512, 0, 7],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 512, 14, 0],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 512, 7, 0],"float32"), num_or_sections=list[128,384,], axis=1, )
paddle.split(x=Tensor([124, 64, 0, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([124, 64, 56, 0],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([124, 768, 0, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([124, 768, 7, 0],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([124, 80, 0, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([124, 80, 28, 0],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([124, 96, 0, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([124, 96, 56, 0],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([128, 0, 14, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([128, 0, 14, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([128, 0, 28, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([128, 0, 28, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([128, 0, 56, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([128, 0, 56, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([128, 0, 56, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([128, 0, 7, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([128, 0, 7, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([128, 0, 7, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([128, 1024, 0, 7],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([128, 1024, 7, 0],"float32"), num_or_sections=list[256,768,], axis=1, )
paddle.split(x=Tensor([128, 160, 0, 14],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([128, 160, 14, 0],"float32"), num_or_sections=list[40,120,], axis=1, )
paddle.split(x=Tensor([128, 192, 0, 28],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([128, 192, 28, 0],"float32"), num_or_sections=list[48,144,], axis=1, )
paddle.split(x=Tensor([128, 320, 0, 7],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([128, 320, 7, 0],"float32"), num_or_sections=list[80,240,], axis=1, )
paddle.split(x=Tensor([128, 384, 0, 14],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([128, 384, 14, 0],"float32"), num_or_sections=list[96,288,], axis=1, )
paddle.split(x=Tensor([128, 40, 0, 56],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([128, 40, 56, 0],"float32"), num_or_sections=list[10,30,], axis=1, )
paddle.split(x=Tensor([128, 64, 0, 56],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([128, 64, 56, 0],"float32"), num_or_sections=list[16,48,], axis=1, )
paddle.split(x=Tensor([128, 768, 0, 7],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([128, 768, 7, 0],"float32"), num_or_sections=list[192,576,], axis=1, )
paddle.split(x=Tensor([128, 80, 0, 28],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([128, 80, 28, 0],"float32"), num_or_sections=list[20,60,], axis=1, )
paddle.split(x=Tensor([128, 96, 0, 56],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([128, 96, 56, 0],"float32"), num_or_sections=list[24,72,], axis=1, )
paddle.split(x=Tensor([2, 0],"float64"), num_or_sections=2, )
paddle.split(x=Tensor([2, 0],"float64"), num_or_sections=list[2,-1,], axis=-1, )
paddle.split(x=Tensor([2, 0],"float64"), num_or_sections=tuple(2,1,), axis=1, )
paddle.split(x=Tensor([4, 0, 14, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([4, 0, 28, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([4, 0, 56, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([4, 0, 7, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([4, 0, 7, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([4, 1152, 0, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([4, 1152, 7, 0],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([4, 144, 0, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([4, 144, 56, 0],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([4, 1536, 0, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([4, 1536, 7, 0],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([4, 288, 0, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([4, 288, 28, 0],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([4, 576, 0, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([4, 576, 14, 0],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([60, 0, 14, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([60, 0, 28, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([60, 0, 56, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([60, 0, 7, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([60, 0, 7, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([60, 1152, 0, 7],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([60, 1152, 7, 0],"float32"), num_or_sections=list[288,864,], axis=1, )
paddle.split(x=Tensor([60, 144, 0, 56],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([60, 144, 56, 0],"float32"), num_or_sections=list[36,108,], axis=1, )
paddle.split(x=Tensor([60, 1536, 0, 7],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([60, 1536, 7, 0],"float32"), num_or_sections=list[384,1152,], axis=1, )
paddle.split(x=Tensor([60, 288, 0, 28],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([60, 288, 28, 0],"float32"), num_or_sections=list[72,216,], axis=1, )
paddle.split(x=Tensor([60, 576, 0, 14],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.split(x=Tensor([60, 576, 14, 0],"float32"), num_or_sections=list[144,432,], axis=1, )
paddle.stanh(x=Tensor([0, 2],"float32"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([0, 2],"float32"), scale_a=1.43, scale_b=4.56, )
paddle.stanh(x=Tensor([0, 2],"float32"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([0, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([0, 2],"float64"), scale_a=1.43, scale_b=4.56, )
paddle.stanh(x=Tensor([0, 2],"float64"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([0, 3, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([0],"float32"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([0],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([1, 0],"float32"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([1, 0],"float32"), scale_a=1.43, scale_b=4.56, )
paddle.stanh(x=Tensor([1, 0],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([1, 0],"float64"), scale_a=1.43, scale_b=4.56, )
paddle.stanh(x=Tensor([2, 0, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([2, 0],"float32"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 0],"float64"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 3, 0, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([2, 3, 2, 0],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.strided_slice(Tensor([0, 6],"int64"), axes=list[0,1,], starts=list[8,-1,], ends=list[1,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([0, 7, 8],"int64"), axes=list[0,2,], starts=list[7,-1,], ends=list[2,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([0],"int64"), axes=list[0,], starts=list[3,], ends=list[1,], strides=list[-2,], )
paddle.strided_slice(Tensor([6, 0, 8],"int64"), axes=list[0,2,], starts=list[7,-1,], ends=list[2,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([6, 0],"int64"), axes=list[0,1,], starts=list[8,-1,], ends=list[1,-5,], strides=list[-2,-3,], )
paddle.strided_slice(Tensor([6, 7, 0],"int64"), axes=list[0,2,], starts=list[7,-1,], ends=list[2,-5,], strides=list[-2,-3,], )
paddle.strided_slice(x=Tensor([0, 4, 5, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([0, 4, 5, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([0, 6],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[1,-2,], )
paddle.strided_slice(x=Tensor([0, 6],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[4,-2,], )
paddle.strided_slice(x=Tensor([0, 8, 6, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([0, 8, 6, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([0],"float32"), axes=list[0,], starts=list[3,], ends=list[1,], strides=list[-2,], )
paddle.strided_slice(x=Tensor([3, 0, 5, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 0, 5, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 0, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 0, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 0],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 0],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([5, 0, 6, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 0, 6, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([5, 8, 0, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 0, 4, 2, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 0, 2, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 0, 2, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 0, 6],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 0, 6],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 2, 0],"float64"), axes=list[1,2,5,], starts=list[-3,3,4,], ends=list[3,0,1,], strides=list[-1,-1,-2,], )
paddle.strided_slice(x=Tensor([5, 8, 6, 4, 2, 0],"float64"), axes=list[1,2,5,], starts=list[6,5,4,], ends=list[2,0,1,], strides=list[-1,-2,-3,], )
paddle.strided_slice(x=Tensor([6, 0],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[1,-2,], )
paddle.strided_slice(x=Tensor([6, 0],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[4,-2,], )
paddle.subtract(Tensor([0, 1, 30, 30],"float32"), Tensor([0, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([0, 1, 30, 30],"float32"), Tensor([1, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.subtract(Tensor([0, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.subtract(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.subtract(Tensor([0, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.subtract(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.subtract(Tensor([0, 3, 256, 256],"float32"), Tensor([0, 3, 256, 256],"float32"), )
paddle.subtract(Tensor([0, 3, 256, 256],"float32"), Tensor([1, 3, 256, 256],"float32"), )
paddle.subtract(Tensor([0, 3, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.subtract(Tensor([0, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.subtract(Tensor([0, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.subtract(Tensor([0, 3, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.subtract(Tensor([0, 3, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.subtract(Tensor([0, 3],"complex128"), Tensor([0, 3],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([0, 3],"complex128"), Tensor([2, 3],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([0, 3],"complex64"), Tensor([0, 3],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([0, 3],"complex64"), Tensor([2, 3],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([0, 96, 1],"float32"), Tensor([0, 96, 1],"float32"), )
paddle.subtract(Tensor([0, 96, 1],"float32"), Tensor([16, 96, 1],"float32"), )
paddle.subtract(Tensor([0, 96, 2],"float32"), Tensor([0, 96, 2],"float32"), )
paddle.subtract(Tensor([0, 96, 2],"float32"), Tensor([16, 96, 2],"float32"), )
paddle.subtract(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.subtract(Tensor([0],"float32"), Tensor([0],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([0],"float32"), Tensor([0],"float32"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([0],"float32"), Tensor([1, 1],"float32"), )
paddle.subtract(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.subtract(Tensor([0],"float32"), Tensor([1],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([0],"float32"), Tensor([1],"float32"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([0],"float32"), Tensor([3],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([0],"float32"), Tensor([4, 1],"float32"), )
paddle.subtract(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.subtract(Tensor([0],"float64"), Tensor([0],"float64"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([0],"float64"), Tensor([0],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.subtract(Tensor([0],"float64"), Tensor([1],"float64"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([0],"float64"), Tensor([2],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([1, 0, 256, 256],"float32"), Tensor([1, 0, 256, 256],"float32"), )
paddle.subtract(Tensor([1, 0, 256, 256],"float32"), Tensor([1, 3, 256, 256],"float32"), )
paddle.subtract(Tensor([1, 0, 30, 30],"float32"), Tensor([1, 0, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 0, 30, 30],"float32"), Tensor([1, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 0],"float32"), Tensor([4, 0],"float32"), )
paddle.subtract(Tensor([1, 0],"float32"), Tensor([4, 1],"float32"), )
paddle.subtract(Tensor([1, 1, 0, 30],"float32"), Tensor([1, 1, 0, 30],"float32"), )
paddle.subtract(Tensor([1, 1, 0, 30],"float32"), Tensor([1, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 1, 30, 0],"float32"), Tensor([1, 1, 30, 0],"float32"), )
paddle.subtract(Tensor([1, 1, 30, 0],"float32"), Tensor([1, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 1, 30, 30],"float32"), Tensor([0, 1, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 1, 30, 30],"float32"), Tensor([1, 0, 30, 30],"float32"), )
paddle.subtract(Tensor([1, 1, 30, 30],"float32"), Tensor([1, 1, 0, 30],"float32"), )
paddle.subtract(Tensor([1, 1, 30, 30],"float32"), Tensor([1, 1, 30, 0],"float32"), )
paddle.subtract(Tensor([1, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.subtract(Tensor([1, 1],"float32"), Tensor([4, 0],"float32"), )
paddle.subtract(Tensor([1, 3, 0, 256],"float32"), Tensor([1, 3, 0, 256],"float32"), )
paddle.subtract(Tensor([1, 3, 0, 256],"float32"), Tensor([1, 3, 256, 256],"float32"), )
paddle.subtract(Tensor([1, 3, 256, 0],"float32"), Tensor([1, 3, 256, 0],"float32"), )
paddle.subtract(Tensor([1, 3, 256, 0],"float32"), Tensor([1, 3, 256, 256],"float32"), )
paddle.subtract(Tensor([1, 3, 256, 256],"float32"), Tensor([0, 3, 256, 256],"float32"), )
paddle.subtract(Tensor([1, 3, 256, 256],"float32"), Tensor([1, 0, 256, 256],"float32"), )
paddle.subtract(Tensor([1, 3, 256, 256],"float32"), Tensor([1, 3, 0, 256],"float32"), )
paddle.subtract(Tensor([1, 3, 256, 256],"float32"), Tensor([1, 3, 256, 0],"float32"), )
paddle.subtract(Tensor([1],"float32"), Tensor([0, 1],"float32"), )
paddle.subtract(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.subtract(Tensor([1],"float32"), Tensor([0],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([1],"float32"), Tensor([0],"float32"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([1],"float32"), Tensor([1, 0],"float32"), )
paddle.subtract(Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.subtract(Tensor([1],"float64"), Tensor([0],"float64"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.subtract(Tensor([10, 0],"float32"), Tensor([10, 10],"float32"), )
paddle.subtract(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.subtract(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.subtract(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.subtract(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.subtract(Tensor([16, 0, 1],"float32"), Tensor([16, 0, 1],"float32"), )
paddle.subtract(Tensor([16, 0, 1],"float32"), Tensor([16, 96, 1],"float32"), )
paddle.subtract(Tensor([16, 0, 2],"float32"), Tensor([16, 0, 2],"float32"), )
paddle.subtract(Tensor([16, 0, 2],"float32"), Tensor([16, 96, 2],"float32"), )
paddle.subtract(Tensor([16, 96, 0],"float32"), Tensor([16, 96, 0],"float32"), )
paddle.subtract(Tensor([16, 96, 0],"float32"), Tensor([16, 96, 1],"float32"), )
paddle.subtract(Tensor([16, 96, 0],"float32"), Tensor([16, 96, 2],"float32"), )
paddle.subtract(Tensor([16, 96, 1],"float32"), Tensor([0, 96, 1],"float32"), )
paddle.subtract(Tensor([16, 96, 1],"float32"), Tensor([16, 0, 1],"float32"), )
paddle.subtract(Tensor([16, 96, 1],"float32"), Tensor([16, 96, 0],"float32"), )
paddle.subtract(Tensor([16, 96, 2],"float32"), Tensor([0, 96, 2],"float32"), )
paddle.subtract(Tensor([16, 96, 2],"float32"), Tensor([16, 0, 2],"float32"), )
paddle.subtract(Tensor([16, 96, 2],"float32"), Tensor([16, 96, 0],"float32"), )
paddle.subtract(Tensor([2, 0, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.subtract(Tensor([2, 0, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.subtract(Tensor([2, 0, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.subtract(Tensor([2, 0, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.subtract(Tensor([2, 0, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.subtract(Tensor([2, 0],"complex128"), Tensor([2, 0],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 0],"complex128"), Tensor([2, 3],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 0],"complex64"), Tensor([2, 0],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 0],"complex64"), Tensor([2, 3],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 3, 0, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.subtract(Tensor([2, 3, 0, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.subtract(Tensor([2, 3, 0, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.subtract(Tensor([2, 3, 0, 5],"float32"), Tensor([5],"complex64"), )
paddle.subtract(Tensor([2, 3, 0, 5],"float64"), Tensor([5],"complex128"), )
paddle.subtract(Tensor([2, 3, 3, 0],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 4],"float32"), Tensor([0, 1, 4],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 0, 4],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 0],"float32"), )
paddle.subtract(Tensor([2, 3, 4, 0],"complex128"), Tensor([4, 5],"float64"), )
paddle.subtract(Tensor([2, 3, 4, 0],"complex64"), Tensor([4, 5],"float32"), )
paddle.subtract(Tensor([2, 3, 4, 0],"float32"), Tensor([5],"complex64"), )
paddle.subtract(Tensor([2, 3, 4, 0],"float64"), Tensor([5],"complex128"), )
paddle.subtract(Tensor([2, 3, 4, 5],"complex128"), Tensor([0, 5],"float64"), )
paddle.subtract(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 0],"float64"), )
paddle.subtract(Tensor([2, 3, 4, 5],"complex64"), Tensor([0, 5],"float32"), )
paddle.subtract(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 0],"float32"), )
paddle.subtract(Tensor([2, 3, 4, 5],"float32"), Tensor([0],"complex64"), )
paddle.subtract(Tensor([2, 3, 4, 5],"float64"), Tensor([0],"complex128"), )
paddle.subtract(Tensor([2, 3],"complex128"), Tensor([0, 3],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 3],"complex128"), Tensor([2, 0],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 3],"complex64"), Tensor([0, 3],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 3],"complex64"), Tensor([2, 0],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([2],"float64"), Tensor([0],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([3],"float32"), Tensor([0],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([4],"float32"), Tensor([0, 1],"float32"), )
paddle.subtract(Tensor([4],"float32"), Tensor([4, 0],"float32"), )
paddle.subtract(x=Tensor([0, 2],"float32"), y=Tensor([0, 2],"float32"), )
paddle.subtract(x=Tensor([0, 2],"float32"), y=Tensor([2, 2],"float32"), )
paddle.subtract(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.subtract(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.subtract(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.subtract(x=Tensor([0],"float64"), y=Tensor([3],"float64"), )
paddle.subtract(x=Tensor([2, 0],"float32"), y=Tensor([2, 0],"float32"), )
paddle.subtract(x=Tensor([2, 0],"float32"), y=Tensor([2, 2],"float32"), )
paddle.subtract(x=Tensor([2, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.subtract(x=Tensor([2, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.subtract(x=Tensor([2, 2],"float32"), y=Tensor([0, 2],"float32"), )
paddle.subtract(x=Tensor([2, 2],"float32"), y=Tensor([2, 0],"float32"), )
paddle.subtract(x=Tensor([2, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.subtract(x=Tensor([2, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.subtract(x=Tensor([3],"float64"), y=Tensor([0],"float64"), )
paddle.sum(Tensor([0, 2, 10],"float64"), None, "float64", False, None, )
paddle.sum(Tensor([0, 5],"float32"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([0, 5],"float32"), keepdim=True, )
paddle.sum(Tensor([0, 5],"float32"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([0, 5],"float64"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([0, 5],"float64"), -1, keepdim=True, dtype="float32", )
paddle.sum(Tensor([0, 5],"float64"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([0, 5],"float64"), None, keepdim=True, dtype="float32", )
paddle.sum(Tensor([0, 7],"int32"), axis=1, dtype="int64", )
paddle.sum(Tensor([13, 0],"int32"), axis=1, dtype="int64", )
paddle.sum(Tensor([2, 0],"float32"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 0],"float32"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([2, 0],"float64"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 0],"float64"), -1, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 0],"float64"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([2, 0],"float64"), None, keepdim=True, dtype="float32", )
paddle.sum(Tensor([3, 0],"float32"), keepdim=True, )
paddle.sum(Tensor([6, 0, 10],"float64"), None, "float64", False, None, )
paddle.sum(Tensor([6, 2, 0],"float64"), None, "float64", False, None, )
paddle.sum(x=Tensor([0, 2],"float32"), dtype="float64", )
paddle.sum(x=Tensor([0, 2],"float64"), dtype="float64", )
paddle.sum(x=Tensor([0, 3, 4, 5],"float64"), keepdim=True, )
paddle.sum(x=Tensor([2, 0, 4, 5],"float64"), keepdim=True, )
paddle.sum(x=Tensor([2, 0],"float32"), dtype="float64", )
paddle.sum(x=Tensor([2, 0],"float64"), dtype="float64", )
paddle.sum(x=Tensor([2, 3, 0, 5],"float64"), keepdim=True, )
paddle.sum(x=Tensor([2, 3, 4, 0],"float64"), keepdim=True, )
paddle.take(Tensor([0, 4],"float32"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"float64"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"float64"), Tensor([0, 8],"int64"), mode="clip", )
paddle.take(Tensor([0, 4],"float64"), Tensor([0, 8],"int64"), mode="wrap", )
paddle.take(Tensor([0, 4],"float64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([0, 4],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 0],"float32"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float64"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float64"), Tensor([5, 0],"int64"), mode="clip", )
paddle.take(Tensor([3, 0],"float64"), Tensor([5, 0],"int64"), mode="wrap", )
paddle.take(Tensor([3, 0],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 0],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 4],"float32"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float32"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([0, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"float64"), Tensor([0, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 4],"float64"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 0],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 0],"int64"), mode="wrap", )
paddle.tanh(Tensor([0, 1, 128],"float32"), )
paddle.tanh(Tensor([0, 1, 1792],"float32"), )
paddle.tanh(Tensor([0, 26, 512, 1, 40],"float16"), )
paddle.tanh(Tensor([0, 26, 512, 1, 40],"float32"), )
paddle.tanh(Tensor([0, 3, 256, 256],"float32"), )
paddle.tanh(Tensor([0, 3, 32, 32],"float32"), )
paddle.tanh(Tensor([0, 32],"float32"), )
paddle.tanh(Tensor([0, 32],"float64"), )
paddle.tanh(Tensor([0],"float32"), )
paddle.tanh(Tensor([0],"float64"), )
paddle.tanh(Tensor([1, 0, 128],"float32"), )
paddle.tanh(Tensor([1, 0, 1792],"float32"), )
paddle.tanh(Tensor([1, 0, 256, 256],"float32"), )
paddle.tanh(Tensor([1, 0, 32, 32],"float32"), )
paddle.tanh(Tensor([1, 0],"float32"), )
paddle.tanh(Tensor([1, 0],"float64"), )
paddle.tanh(Tensor([1, 1, 0],"float32"), )
paddle.tanh(Tensor([1, 3, 0, 256],"float32"), )
paddle.tanh(Tensor([1, 3, 0, 32],"float32"), )
paddle.tanh(Tensor([1, 3, 256, 0],"float32"), )
paddle.tanh(Tensor([1, 3, 32, 0],"float32"), )
paddle.tanh(Tensor([64, 0, 512, 1, 40],"float16"), )
paddle.tanh(Tensor([64, 0, 512, 1, 40],"float32"), )
paddle.tanh(Tensor([64, 26, 0, 1, 40],"float16"), )
paddle.tanh(Tensor([64, 26, 0, 1, 40],"float32"), )
paddle.tanh(Tensor([64, 26, 512, 0, 40],"float16"), )
paddle.tanh(Tensor([64, 26, 512, 0, 40],"float32"), )
paddle.tanh(Tensor([64, 26, 512, 1, 0],"float16"), )
paddle.tanh(Tensor([64, 26, 512, 1, 0],"float32"), )
paddle.tanh(x=Tensor([0, 3, 4],"float64"), )
paddle.tanh(x=Tensor([0, 5],"float64"), )
paddle.tanh(x=Tensor([0, 8, 8],"float32"), )
paddle.tanh(x=Tensor([0],"float64"), )
paddle.tanh(x=Tensor([2, 0, 4],"float64"), )
paddle.tanh(x=Tensor([2, 0, 8],"float32"), )
paddle.tanh(x=Tensor([2, 3, 0],"float64"), )
paddle.tanh(x=Tensor([2, 8, 0],"float32"), )
paddle.tanh(x=Tensor([3, 0],"float64"), )
paddle.Tensor.__abs__(Tensor([0, 1024],"complex64"), )
paddle.Tensor.__abs__(Tensor([0, 1024],"float32"), )
paddle.Tensor.__abs__(Tensor([0],"float32"), )
paddle.Tensor.__abs__(Tensor([10, 0],"complex64"), )
paddle.Tensor.__abs__(Tensor([10, 0],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 1, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 1, 24276, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 1, 24276, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1],"float32"), 1e-05, )
paddle.Tensor.__add__(Tensor([0, 1, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([0, 1, 100],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([0, 1, 1024],"float32"), Tensor([0, 1, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1024],"float32"), Tensor([1, 1, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1024],"float32"), Tensor([1, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 10285],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([0, 1, 115],"float32"), 0.0001, )
paddle.Tensor.__add__(Tensor([0, 1, 1280],"float32"), Tensor([0, 1, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1280],"float32"), Tensor([1, 1, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 1280],"float32"), Tensor([1, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1, 13],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([0, 1, 14, 14],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([0, 1, 15],"float32"), 0.0001, )
paddle.Tensor.__add__(Tensor([0, 1, 2, 1],"float32"), 1e-15, )
paddle.Tensor.__add__(Tensor([0, 1, 24, 24],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([0, 1, 4096],"float32"), 1e-05, )
paddle.Tensor.__add__(Tensor([0, 1, 512, 4, 4],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([0, 1, 7, 7],"int64"), 7, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 0, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 10164, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 1936, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 2541, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 2704, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 27648, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 28800, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 3136, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 3380, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 34560, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 3549, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 36000, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 36288, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 36720, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 36828, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 37800, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 38250, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 38367, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 3920, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 4096, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 4116, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 4624, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 4800, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 5120, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 5184, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 5376, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 5780, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 6000, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 6069, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 6300, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 6380, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 6400, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 6408, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 6480, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 6804, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 7744, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 8000, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 8028, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 8400, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 8442, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 8550, )
paddle.Tensor.__add__(Tensor([0, 1, 9],"int64"), 9680, )
paddle.Tensor.__add__(Tensor([0, 1, 99],"float16"), Tensor([99],"float16"), )
paddle.Tensor.__add__(Tensor([0, 1, 99],"float32"), Tensor([99],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1],"float32"), 0.08, )
paddle.Tensor.__add__(Tensor([0, 1],"float32"), 1e-05, )
paddle.Tensor.__add__(Tensor([0, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([0, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([0, 1],"float32"), 1e-10, )
paddle.Tensor.__add__(Tensor([0, 1],"float32"), 2, )
paddle.Tensor.__add__(Tensor([0, 1],"float32"), -39.6, )
paddle.Tensor.__add__(Tensor([0, 1],"float32"), -51.1, )
paddle.Tensor.__add__(Tensor([0, 1],"float64"), 1.0, )
paddle.Tensor.__add__(Tensor([0, 1],"float64"), 1e-05, )
paddle.Tensor.__add__(Tensor([0, 1],"int32"), 0, )
paddle.Tensor.__add__(Tensor([0, 1],"int32"), 128, )
paddle.Tensor.__add__(Tensor([0, 1],"int64"), 14, )
paddle.Tensor.__add__(Tensor([0, 1],"int64"), 1e-15, )
paddle.Tensor.__add__(Tensor([0, 10, 15, 2],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([0, 10, 8, 2],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([0, 10, 8],"float32"), -0.5, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 0, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 1125, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 121, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 1280, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 1445, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 1620, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 1805, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 2000, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 2205, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 225, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 256, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 2645, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 2880, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 289, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 324, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 361, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 400, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 441, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 5184, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 529, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 576, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 605, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 6480, )
paddle.Tensor.__add__(Tensor([0, 10, 9],"int64"), 6804, )
paddle.Tensor.__add__(Tensor([0, 10],"float32"), 100, )
paddle.Tensor.__add__(Tensor([0, 10],"float32"), 160.0, )
paddle.Tensor.__add__(Tensor([0, 10],"float32"), 80.0, )
paddle.Tensor.__add__(Tensor([0, 100],"complex128"), Tensor([0, 100],"complex128"), )
paddle.Tensor.__add__(Tensor([0, 100],"complex128"), Tensor([1, 100],"complex128"), )
paddle.Tensor.__add__(Tensor([0, 100],"float32"), 40.0, )
paddle.Tensor.__add__(Tensor([0, 1024],"float32"), 0.1, )
paddle.Tensor.__add__(Tensor([0, 10285],"float32"), 1e-10, )
paddle.Tensor.__add__(Tensor([0, 104],"float32"), 40.0, )
paddle.Tensor.__add__(Tensor([0, 108, 6, 49, 49],"float32"), Tensor([0, 108, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([0, 108, 6, 49, 49],"float32"), Tensor([1, 108, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([0, 11, 1, 4, 1, 2],"float32"), Tensor([0, 11, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 11, 1, 4, 1, 2],"float32"), Tensor([1, 11, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 11, 10, 10],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([0, 11, 11, 11],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 100, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 1125, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 1280, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 169, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 196, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 2000, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 225, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 2420, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 256, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 2880, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 3600, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 400, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 4500, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 4725, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 484, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 500, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 576, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 845, )
paddle.Tensor.__add__(Tensor([0, 11, 9],"int64"), 980, )
paddle.Tensor.__add__(Tensor([0, 11],"float32"), 160.0, )
paddle.Tensor.__add__(Tensor([0, 11],"float32"), 80.0, )
paddle.Tensor.__add__(Tensor([0, 11],"int64"), 2, )
paddle.Tensor.__add__(Tensor([0, 1100, 1, 5, 1, 2],"float32"), Tensor([0, 1100, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 1100, 1, 5, 1, 2],"float32"), Tensor([1, 1100, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 12, 1, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 12, 12, 392, 392],"float16"), Tensor([0, 12, 1, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([0, 12, 12, 392, 392],"float16"), Tensor([1, 12, 1, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([0, 12, 77, 77],"float32"), Tensor([77, 77],"float32"), )
paddle.Tensor.__add__(Tensor([0, 12, 9],"float32"), 0.0, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"float32"), -0.5, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 100, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 10164, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 1620, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 169, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 1805, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 2205, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 2420, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 2645, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 2704, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 3136, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 324, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 3380, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 3549, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 361, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 3920, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 4116, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 441, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 484, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 500, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 529, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 7056, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 7744, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 845, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 8820, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 9261, )
paddle.Tensor.__add__(Tensor([0, 12, 9],"int64"), 9680, )
paddle.Tensor.__add__(Tensor([0, 12],"float32"), 5, )
paddle.Tensor.__add__(Tensor([0, 12],"float32"), Tensor([12],"float32"), )
paddle.Tensor.__add__(Tensor([0, 128, 16, 16],"float16"), 3, )
paddle.Tensor.__add__(Tensor([0, 128, 16, 16],"float32"), 3, )
paddle.Tensor.__add__(Tensor([0, 128, 2],"float32"), Tensor([1, 128, 128, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 128, 2],"float32"), Tensor([4, 128, 128, 2],"float32"), )
paddle.Tensor.__add__(Tensor([0, 128, 56, 56],"float32"), Tensor([128, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 128, 96, 96],"float32"), Tensor([128, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([0, 128],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([0, 128],"float32"), 20.0, )
paddle.Tensor.__add__(Tensor([0, 128],"float64"), Tensor([128],"float64"), )
paddle.Tensor.__add__(Tensor([0, 13, 9],"int64"), 121, )
paddle.Tensor.__add__(Tensor([0, 13, 9],"int64"), 1445, )
paddle.Tensor.__add__(Tensor([0, 13, 9],"int64"), 196, )
paddle.Tensor.__add__(Tensor([0, 13, 9],"int64"), 289, )
paddle.Tensor.__add__(Tensor([0, 13, 9],"int64"), 605, )
paddle.Tensor.__add__(Tensor([0, 13, 9],"int64"), 980, )
paddle.Tensor.__add__(Tensor([0, 136],"float32"), 20.0, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 144, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 4096, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 4624, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 5120, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 5376, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 5780, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 6069, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 7056, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 720, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 8820, )
paddle.Tensor.__add__(Tensor([0, 14, 9],"int64"), 9261, )
paddle.Tensor.__add__(Tensor([0, 14],"float32"), 13.0, )
paddle.Tensor.__add__(Tensor([0, 14],"int64"), 160, )
paddle.Tensor.__add__(Tensor([0, 144, 200],"float32"), 0.0, )
paddle.Tensor.__add__(Tensor([0, 144],"int64"), 11, )
paddle.Tensor.__add__(Tensor([0, 15, 3, 256, 256],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([0, 15, 9],"int64"), 1024, )
paddle.Tensor.__add__(Tensor([0, 15, 9],"int64"), 1296, )
paddle.Tensor.__add__(Tensor([0, 15, 9],"int64"), 1344, )
paddle.Tensor.__add__(Tensor([0, 15, 9],"int64"), 144, )
paddle.Tensor.__add__(Tensor([0, 15, 9],"int64"), 1701, )
paddle.Tensor.__add__(Tensor([0, 15, 9],"int64"), 720, )
paddle.Tensor.__add__(Tensor([0, 15],"float32"), 4, )
paddle.Tensor.__add__(Tensor([0, 16, 32],"float32"), 99, )
paddle.Tensor.__add__(Tensor([0, 16],"float32"), 100, )
paddle.Tensor.__add__(Tensor([0, 16],"float32"), 3, )
paddle.Tensor.__add__(Tensor([0, 16],"float32"), 99, )
paddle.Tensor.__add__(Tensor([0, 17, 9],"int64"), 1024, )
paddle.Tensor.__add__(Tensor([0, 17, 9],"int64"), 1296, )
paddle.Tensor.__add__(Tensor([0, 17, 9],"int64"), 1344, )
paddle.Tensor.__add__(Tensor([0, 17, 9],"int64"), 1701, )
paddle.Tensor.__add__(Tensor([0, 192, 4],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([0, 196, 4],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([0, 196],"int64"), 13, )
paddle.Tensor.__add__(Tensor([0, 2, 16, 4, 1],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([0, 2, 2, 2],"complex128"), 1, )
paddle.Tensor.__add__(Tensor([0, 2, 2, 2],"complex64"), 1, )
paddle.Tensor.__add__(Tensor([0, 2, 2],"float32"), 1.5, )
paddle.Tensor.__add__(Tensor([0, 2, 2],"int64"), 1.5, )
paddle.Tensor.__add__(Tensor([0, 2, 3],"float32"), 1, )
paddle.Tensor.__add__(Tensor([0, 2, 9],"int64"), 1600, )
paddle.Tensor.__add__(Tensor([0, 2, 9],"int64"), 1936, )
paddle.Tensor.__add__(Tensor([0, 2, 9],"int64"), 2100, )
paddle.Tensor.__add__(Tensor([0, 2, 9],"int64"), 2304, )
paddle.Tensor.__add__(Tensor([0, 2, 9],"int64"), 2541, )
paddle.Tensor.__add__(Tensor([0, 2, 9],"int64"), 3024, )
paddle.Tensor.__add__(Tensor([0, 2, 9],"int64"), 5776, )
paddle.Tensor.__add__(Tensor([0, 2, 9],"int64"), 7220, )
paddle.Tensor.__add__(Tensor([0, 2, 9],"int64"), 7581, )
paddle.Tensor.__add__(Tensor([0, 2],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([0, 2],"float32"), 0.9189385332046727, )
paddle.Tensor.__add__(Tensor([0, 2],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([0, 2],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([0, 2],"float64"), 0.0, )
paddle.Tensor.__add__(Tensor([0, 2],"int64"), 1e-15, )
paddle.Tensor.__add__(Tensor([0, 20, 1],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([0, 20, 1],"float32"), 2, )
paddle.Tensor.__add__(Tensor([0, 20],"float32"), 0.5723649429247001, )
paddle.Tensor.__add__(Tensor([0, 20],"float64"), 0.5723649429247001, )
paddle.Tensor.__add__(Tensor([0, 20],"int64"), 0, )
paddle.Tensor.__add__(Tensor([0, 200, 100],"float64"), 2.0, )
paddle.Tensor.__add__(Tensor([0, 209],"int64"), 3, )
paddle.Tensor.__add__(Tensor([0, 25, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([0, 25],"int64"), 4, )
paddle.Tensor.__add__(Tensor([0, 28],"float32"), 0.45, )
paddle.Tensor.__add__(Tensor([0, 28],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([0, 28],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([0, 28],"float32"), 4.0, )
paddle.Tensor.__add__(Tensor([0, 280, 376, 25, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([0, 280, 376, 25, 3],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([0, 3, 1, 16, 1, 32, 1],"float32"), 2, )
paddle.Tensor.__add__(Tensor([0, 3, 10, 10, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([0, 3, 20, 20, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([0, 3, 256, 256],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 1, )
paddle.Tensor.__add__(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 1, )
paddle.Tensor.__add__(Tensor([0, 3, 4, 4, 5, 3],"float32"), 1, )
paddle.Tensor.__add__(Tensor([0, 3, 4, 4, 5, 3],"float64"), 1, )
paddle.Tensor.__add__(Tensor([0, 3, 4],"bfloat16"), complex(0.0,2.0), )
paddle.Tensor.__add__(Tensor([0, 3, 4],"bool"), complex(0.0,2.0), )
paddle.Tensor.__add__(Tensor([0, 3, 5, 2, 4],"float16"), Tensor([2, 4],"float16"), )
paddle.Tensor.__add__(Tensor([0, 3, 5, 2, 4],"float32"), Tensor([2, 4],"float32"), )
paddle.Tensor.__add__(Tensor([0, 3, 5, 6],"float16"), Tensor([6],"float16"), )
paddle.Tensor.__add__(Tensor([0, 3, 5, 6],"float32"), Tensor([6],"float32"), )
paddle.Tensor.__add__(Tensor([0, 3, 9],"int64"), 1600, )
paddle.Tensor.__add__(Tensor([0, 3, 9],"int64"), 2100, )
paddle.Tensor.__add__(Tensor([0, 3, 9],"int64"), 3600, )
paddle.Tensor.__add__(Tensor([0, 3, 9],"int64"), 4500, )
paddle.Tensor.__add__(Tensor([0, 3, 9],"int64"), 4725, )
paddle.Tensor.__add__(Tensor([0, 3],"float32"), 0.5723649429247004, )
paddle.Tensor.__add__(Tensor([0, 3],"float32"), 0.9189385332046727, )
paddle.Tensor.__add__(Tensor([0, 3],"float32"), 1.1447298858494002, )
paddle.Tensor.__add__(Tensor([0, 3],"float32"), 10, )
paddle.Tensor.__add__(Tensor([0, 3],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([0, 3],"float32"), Tensor([10000, 2, 3],"float32"), )
paddle.Tensor.__add__(Tensor([0, 3],"float64"), 0.5723649429247004, )
paddle.Tensor.__add__(Tensor([0, 3],"float64"), 0.5772156649015329, )
paddle.Tensor.__add__(Tensor([0, 3],"float64"), 1.1447298858494002, )
paddle.Tensor.__add__(Tensor([0, 3],"float64"), Tensor([10000, 2, 3],"float64"), )
paddle.Tensor.__add__(Tensor([0, 3],"int32"), 7, )
paddle.Tensor.__add__(Tensor([0, 3],"int64"), 7, )
paddle.Tensor.__add__(Tensor([0, 300, 4096],"float32"), 1, )
paddle.Tensor.__add__(Tensor([0, 32],"float32"), 0.23000000000000004, )
paddle.Tensor.__add__(Tensor([0, 32],"float32"), 31.0, )
paddle.Tensor.__add__(Tensor([0, 32],"float32"), 99, )
paddle.Tensor.__add__(Tensor([0, 33],"float32"), 0.05, )
paddle.Tensor.__add__(Tensor([0, 392],"int64"), 6, )
paddle.Tensor.__add__(Tensor([0, 4, 1],"float32"), 1e-10, )
paddle.Tensor.__add__(Tensor([0, 4, 3, 2, 2],"float64"), Tensor([4, 1, 1, 1],"float64"), )
paddle.Tensor.__add__(Tensor([0, 4, 4, 5, 7],"float32"), 1, )
paddle.Tensor.__add__(Tensor([0, 4, 5],"float32"), 2, )
paddle.Tensor.__add__(Tensor([0, 4, 5],"float32"), 3, )
paddle.Tensor.__add__(Tensor([0, 4, 5],"float32"), 4, )
paddle.Tensor.__add__(Tensor([0, 4, 5],"float32"), 5, )
paddle.Tensor.__add__(Tensor([0, 4, 7, 7],"float32"), 0, )
paddle.Tensor.__add__(Tensor([0, 4, 9],"int64"), 5776, )
paddle.Tensor.__add__(Tensor([0, 4, 9],"int64"), 6400, )
paddle.Tensor.__add__(Tensor([0, 4, 9],"int64"), 7220, )
paddle.Tensor.__add__(Tensor([0, 4, 9],"int64"), 7581, )
paddle.Tensor.__add__(Tensor([0, 4, 9],"int64"), 8000, )
paddle.Tensor.__add__(Tensor([0, 4, 9],"int64"), 8400, )
paddle.Tensor.__add__(Tensor([0, 4],"float32"), 0.4, )
paddle.Tensor.__add__(Tensor([0, 4],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([0, 4],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([0, 4],"float64"), 0.7, )
paddle.Tensor.__add__(Tensor([0, 48],"float32"), 47.0, )
paddle.Tensor.__add__(Tensor([0, 49],"int64"), 6, )
paddle.Tensor.__add__(Tensor([0, 5, 1, 10],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([0, 5, 9],"int64"), 2304, )
paddle.Tensor.__add__(Tensor([0, 5, 9],"int64"), 3024, )
paddle.Tensor.__add__(Tensor([0, 5],"complex128"), complex(1.0,1.0), )
paddle.Tensor.__add__(Tensor([0, 5],"int64"), 10, )
paddle.Tensor.__add__(Tensor([0, 512],"float32"), 64, )
paddle.Tensor.__add__(Tensor([0, 6144],"float32"), 1e-16, )
paddle.Tensor.__add__(Tensor([0, 7, 1],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([0, 7, 1],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([0, 7],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([0, 7],"int64"), 160, )
paddle.Tensor.__add__(Tensor([0, 8, 16, 32],"float32"), 99, )
paddle.Tensor.__add__(Tensor([0, 8, 8],"float32"), -0.2, )
paddle.Tensor.__add__(Tensor([0, 8, 8],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([0, 8, 8],"float32"), 4.0, )
paddle.Tensor.__add__(Tensor([0, 8],"float32"), -0.2, )
paddle.Tensor.__add__(Tensor([0, 8],"float32"), 4.0, )
paddle.Tensor.__add__(Tensor([0, 81, 94, 311],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([0, 93431],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([0],"float16"), 0.001, )
paddle.Tensor.__add__(Tensor([0],"float16"), 1e-06, )
paddle.Tensor.__add__(Tensor([0],"float32"), 0, )
paddle.Tensor.__add__(Tensor([0],"float32"), 0.001, )
paddle.Tensor.__add__(Tensor([0],"float32"), 0.01, )
paddle.Tensor.__add__(Tensor([0],"float32"), 0.16, )
paddle.Tensor.__add__(Tensor([0],"float32"), 0.23000000000000004, )
paddle.Tensor.__add__(Tensor([0],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([0],"float32"), -1, )
paddle.Tensor.__add__(Tensor([0],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([0],"float32"), 1.0000000000000002e-10, )
paddle.Tensor.__add__(Tensor([0],"float32"), 1.7170948287741004, )
paddle.Tensor.__add__(Tensor([0],"float32"), -1.78, )
paddle.Tensor.__add__(Tensor([0],"float32"), 10, )
paddle.Tensor.__add__(Tensor([0],"float32"), 1e-05, )
paddle.Tensor.__add__(Tensor([0],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([0],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([0],"float32"), 1e-10, )
paddle.Tensor.__add__(Tensor([0],"float32"), 1e-11, )
paddle.Tensor.__add__(Tensor([0],"float32"), 1e-16, )
paddle.Tensor.__add__(Tensor([0],"float32"), 2, )
paddle.Tensor.__add__(Tensor([0],"float32"), 3, )
paddle.Tensor.__add__(Tensor([0],"float32"), -39.52, )
paddle.Tensor.__add__(Tensor([0],"float32"), 4, )
paddle.Tensor.__add__(Tensor([0],"float32"), 5, )
paddle.Tensor.__add__(Tensor([0],"float32"), 6, )
paddle.Tensor.__add__(Tensor([0],"float32"), -6.907755278982137, )
paddle.Tensor.__add__(Tensor([0],"float32"), 7, )
paddle.Tensor.__add__(Tensor([0],"float32"), 8, )
paddle.Tensor.__add__(Tensor([0],"float32"), 9, )
paddle.Tensor.__add__(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__add__(Tensor([0],"float32"), Tensor([10, 10],"float32"), )
paddle.Tensor.__add__(Tensor([0],"float32"), Tensor([1000],"float32"), )
paddle.Tensor.__add__(Tensor([0],"float32"), Tensor([10008],"float32"), )
paddle.Tensor.__add__(Tensor([0],"float32"), Tensor([10105, 10],"float32"), )
paddle.Tensor.__add__(Tensor([0],"float32"), Tensor([13, 7, 32],"float32"), )
paddle.Tensor.__add__(Tensor([0],"float64"), 0.3, )
paddle.Tensor.__add__(Tensor([0],"float64"), 0.5772156649015329, )
paddle.Tensor.__add__(Tensor([0],"float64"), 0.9189385332046727, )
paddle.Tensor.__add__(Tensor([0],"float64"), 1e-11, )
paddle.Tensor.__add__(Tensor([0],"int32"), -1, )
paddle.Tensor.__add__(Tensor([0],"int32"), 10086, )
paddle.Tensor.__add__(Tensor([0],"int32"), 110, )
paddle.Tensor.__add__(Tensor([0],"int32"), 5, )
paddle.Tensor.__add__(Tensor([0],"int64"), 0.0, )
paddle.Tensor.__add__(Tensor([0],"int64"), 0.5, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1000, )
paddle.Tensor.__add__(Tensor([0],"int64"), 10010, )
paddle.Tensor.__add__(Tensor([0],"int64"), 100663296, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1016064, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1024, )
paddle.Tensor.__add__(Tensor([0],"int64"), 10272768, )
paddle.Tensor.__add__(Tensor([0],"int64"), 103809024, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1048576, )
paddle.Tensor.__add__(Tensor([0],"int64"), 10485760, )
paddle.Tensor.__add__(Tensor([0],"int64"), 104857600, )
paddle.Tensor.__add__(Tensor([0],"int64"), 105021440, )
paddle.Tensor.__add__(Tensor([0],"int64"), 10551296, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1073741824, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1077936128, )
paddle.Tensor.__add__(Tensor([0],"int64"), 10838016, )
paddle.Tensor.__add__(Tensor([0],"int64"), 110100480, )
paddle.Tensor.__add__(Tensor([0],"int64"), 113064, )
paddle.Tensor.__add__(Tensor([0],"int64"), 113246208, )
paddle.Tensor.__add__(Tensor([0],"int64"), 113568, )
paddle.Tensor.__add__(Tensor([0],"int64"), 116352, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1179648, )
paddle.Tensor.__add__(Tensor([0],"int64"), 119808, )
paddle.Tensor.__add__(Tensor([0],"int64"), 12, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1207959552, )
paddle.Tensor.__add__(Tensor([0],"int64"), 12288000, )
paddle.Tensor.__add__(Tensor([0],"int64"), 12386304, )
paddle.Tensor.__add__(Tensor([0],"int64"), 125440, )
paddle.Tensor.__add__(Tensor([0],"int64"), 12582912, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1279262720, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1280000, )
paddle.Tensor.__add__(Tensor([0],"int64"), 131072, )
paddle.Tensor.__add__(Tensor([0],"int64"), 131200, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1314, )
paddle.Tensor.__add__(Tensor([0],"int64"), 131584, )
paddle.Tensor.__add__(Tensor([0],"int64"), 134217728, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1343225856, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1354752, )
paddle.Tensor.__add__(Tensor([0],"int64"), 136314880, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1368, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1376928, )
paddle.Tensor.__add__(Tensor([0],"int64"), 14155776, )
paddle.Tensor.__add__(Tensor([0],"int64"), 14745600, )
paddle.Tensor.__add__(Tensor([0],"int64"), 148608, )
paddle.Tensor.__add__(Tensor([0],"int64"), 150528, )
paddle.Tensor.__add__(Tensor([0],"int64"), 15052800, )
paddle.Tensor.__add__(Tensor([0],"int64"), 150994944, )
paddle.Tensor.__add__(Tensor([0],"int64"), 154140672, )
paddle.Tensor.__add__(Tensor([0],"int64"), 15680, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1572864, )
paddle.Tensor.__add__(Tensor([0],"int64"), 160006144, )
paddle.Tensor.__add__(Tensor([0],"int64"), 160628736, )
paddle.Tensor.__add__(Tensor([0],"int64"), 163840, )
paddle.Tensor.__add__(Tensor([0],"int64"), 16512, )
paddle.Tensor.__add__(Tensor([0],"int64"), 16777216, )
paddle.Tensor.__add__(Tensor([0],"int64"), 167772160, )
paddle.Tensor.__add__(Tensor([0],"int64"), 16779264, )
paddle.Tensor.__add__(Tensor([0],"int64"), 16908288, )
paddle.Tensor.__add__(Tensor([0],"int64"), 17039360, )
paddle.Tensor.__add__(Tensor([0],"int64"), 17179869184, )
paddle.Tensor.__add__(Tensor([0],"int64"), 18874368, )
paddle.Tensor.__add__(Tensor([0],"int64"), 19267584, )
paddle.Tensor.__add__(Tensor([0],"int64"), 19327352832, )
paddle.Tensor.__add__(Tensor([0],"int64"), 19329449984, )
paddle.Tensor.__add__(Tensor([0],"int64"), 196608, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1966080, )
paddle.Tensor.__add__(Tensor([0],"int64"), 19922944, )
paddle.Tensor.__add__(Tensor([0],"int64"), 1e-15, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2, )
paddle.Tensor.__add__(Tensor([0],"int64"), 20, )
paddle.Tensor.__add__(Tensor([0],"int64"), 20070400, )
paddle.Tensor.__add__(Tensor([0],"int64"), 202113024, )
paddle.Tensor.__add__(Tensor([0],"int64"), 20608, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2064384, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2097152, )
paddle.Tensor.__add__(Tensor([0],"int64"), 20971520, )
paddle.Tensor.__add__(Tensor([0],"int64"), 21233664, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2147483648, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2148532224, )
paddle.Tensor.__add__(Tensor([0],"int64"), 21495808, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2155872256, )
paddle.Tensor.__add__(Tensor([0],"int64"), 225792, )
paddle.Tensor.__add__(Tensor([0],"int64"), 226492416, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2304, )
paddle.Tensor.__add__(Tensor([0],"int64"), 230640, )
paddle.Tensor.__add__(Tensor([0],"int64"), 231360, )
paddle.Tensor.__add__(Tensor([0],"int64"), 234881024, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2359296, )
paddle.Tensor.__add__(Tensor([0],"int64"), 23592960, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2363904, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2408448, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2415919104, )
paddle.Tensor.__add__(Tensor([0],"int64"), 24576000, )
paddle.Tensor.__add__(Tensor([0],"int64"), 25088, )
paddle.Tensor.__add__(Tensor([0],"int64"), 254016, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2558525440, )
paddle.Tensor.__add__(Tensor([0],"int64"), 256, )
paddle.Tensor.__add__(Tensor([0],"int64"), 262144, )
paddle.Tensor.__add__(Tensor([0],"int64"), 26214400, )
paddle.Tensor.__add__(Tensor([0],"int64"), 262656, )
paddle.Tensor.__add__(Tensor([0],"int64"), 268435456, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2686451712, )
paddle.Tensor.__add__(Tensor([0],"int64"), 270532608, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2709504, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2752512, )
paddle.Tensor.__add__(Tensor([0],"int64"), 2949120, )
paddle.Tensor.__add__(Tensor([0],"int64"), 29622272, )
paddle.Tensor.__add__(Tensor([0],"int64"), 301056, )
paddle.Tensor.__add__(Tensor([0],"int64"), 30146560, )
paddle.Tensor.__add__(Tensor([0],"int64"), 302120960, )
paddle.Tensor.__add__(Tensor([0],"int64"), 302514176, )
paddle.Tensor.__add__(Tensor([0],"int64"), 303038464, )
paddle.Tensor.__add__(Tensor([0],"int64"), 310378496, )
paddle.Tensor.__add__(Tensor([0],"int64"), 31360, )
paddle.Tensor.__add__(Tensor([0],"int64"), 3145728, )
paddle.Tensor.__add__(Tensor([0],"int64"), 320012288, )
paddle.Tensor.__add__(Tensor([0],"int64"), 327680, )
paddle.Tensor.__add__(Tensor([0],"int64"), 32768000, )
paddle.Tensor.__add__(Tensor([0],"int64"), 329728, )
paddle.Tensor.__add__(Tensor([0],"int64"), 33554432, )
paddle.Tensor.__add__(Tensor([0],"int64"), 338688, )
paddle.Tensor.__add__(Tensor([0],"int64"), 3391488, )
paddle.Tensor.__add__(Tensor([0],"int64"), 344736, )
paddle.Tensor.__add__(Tensor([0],"int64"), 3538944, )
paddle.Tensor.__add__(Tensor([0],"int64"), 3612672, )
paddle.Tensor.__add__(Tensor([0],"int64"), 3630, )
paddle.Tensor.__add__(Tensor([0],"int64"), 3686400, )
paddle.Tensor.__add__(Tensor([0],"int64"), 37152, )
paddle.Tensor.__add__(Tensor([0],"int64"), 3720, )
paddle.Tensor.__add__(Tensor([0],"int64"), 37632, )
paddle.Tensor.__add__(Tensor([0],"int64"), 37748736, )
paddle.Tensor.__add__(Tensor([0],"int64"), 377749504, )
paddle.Tensor.__add__(Tensor([0],"int64"), 378142720, )
paddle.Tensor.__add__(Tensor([0],"int64"), 38654705664, )
paddle.Tensor.__add__(Tensor([0],"int64"), 3932160, )
paddle.Tensor.__add__(Tensor([0],"int64"), 39321600, )
paddle.Tensor.__add__(Tensor([0],"int64"), 401408, )
paddle.Tensor.__add__(Tensor([0],"int64"), 40157184, )
paddle.Tensor.__add__(Tensor([0],"int64"), 402653184, )
paddle.Tensor.__add__(Tensor([0],"int64"), 404226048, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4064256, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4096, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4128, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4194304, )
paddle.Tensor.__add__(Tensor([0],"int64"), 41943040, )
paddle.Tensor.__add__(Tensor([0],"int64"), 419430400, )
paddle.Tensor.__add__(Tensor([0],"int64"), 423360, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4294967296, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4297064448, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4423680, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4515840, )
paddle.Tensor.__add__(Tensor([0],"int64"), 458752, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4718592, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4816896, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4831838208, )
paddle.Tensor.__add__(Tensor([0],"int64"), 492480, )
paddle.Tensor.__add__(Tensor([0],"int64"), 4980736, )
paddle.Tensor.__add__(Tensor([0],"int64"), 49807360, )
paddle.Tensor.__add__(Tensor([0],"int64"), 50176, )
paddle.Tensor.__add__(Tensor([0],"int64"), 50331648, )
paddle.Tensor.__add__(Tensor([0],"int64"), 512, )
paddle.Tensor.__add__(Tensor([0],"int64"), 51380224, )
paddle.Tensor.__add__(Tensor([0],"int64"), 524288, )
paddle.Tensor.__add__(Tensor([0],"int64"), 52428800, )
paddle.Tensor.__add__(Tensor([0],"int64"), 5308416, )
paddle.Tensor.__add__(Tensor([0],"int64"), 536870912, )
paddle.Tensor.__add__(Tensor([0],"int64"), 538968064, )
paddle.Tensor.__add__(Tensor([0],"int64"), 545259520, )
paddle.Tensor.__add__(Tensor([0],"int64"), 55050240, )
paddle.Tensor.__add__(Tensor([0],"int64"), 56448, )
paddle.Tensor.__add__(Tensor([0],"int64"), 56623104, )
paddle.Tensor.__add__(Tensor([0],"int64"), 576, )
paddle.Tensor.__add__(Tensor([0],"int64"), 57720, )
paddle.Tensor.__add__(Tensor([0],"int64"), 58080, )
paddle.Tensor.__add__(Tensor([0],"int64"), 589824, )
paddle.Tensor.__add__(Tensor([0],"int64"), 589896, )
paddle.Tensor.__add__(Tensor([0],"int64"), 590976, )
paddle.Tensor.__add__(Tensor([0],"int64"), 602112, )
paddle.Tensor.__add__(Tensor([0],"int64"), 603979776, )
paddle.Tensor.__add__(Tensor([0],"int64"), 6291456, )
paddle.Tensor.__add__(Tensor([0],"int64"), 64, )
paddle.Tensor.__add__(Tensor([0],"int64"), 64000, )
paddle.Tensor.__add__(Tensor([0],"int64"), 6422528, )
paddle.Tensor.__add__(Tensor([0],"int64"), 655360, )
paddle.Tensor.__add__(Tensor([0],"int64"), 65664, )
paddle.Tensor.__add__(Tensor([0],"int64"), 67108864, )
paddle.Tensor.__add__(Tensor([0],"int64"), 67141632, )
paddle.Tensor.__add__(Tensor([0],"int64"), 67174400, )
paddle.Tensor.__add__(Tensor([0],"int64"), 677376, )
paddle.Tensor.__add__(Tensor([0],"int64"), 688128, )
paddle.Tensor.__add__(Tensor([0],"int64"), 7077888, )
paddle.Tensor.__add__(Tensor([0],"int64"), 7225344, )
paddle.Tensor.__add__(Tensor([0],"int64"), 737280, )
paddle.Tensor.__add__(Tensor([0],"int64"), 75264, )
paddle.Tensor.__add__(Tensor([0],"int64"), 7526400, )
paddle.Tensor.__add__(Tensor([0],"int64"), 753664, )
paddle.Tensor.__add__(Tensor([0],"int64"), 75497472, )
paddle.Tensor.__add__(Tensor([0],"int64"), 786432, )
paddle.Tensor.__add__(Tensor([0],"int64"), 7864320, )
paddle.Tensor.__add__(Tensor([0],"int64"), 78643200, )
paddle.Tensor.__add__(Tensor([0],"int64"), 802816, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8133120, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8146944, )
paddle.Tensor.__add__(Tensor([0],"int64"), 819200, )
paddle.Tensor.__add__(Tensor([0],"int64"), 82080, )
paddle.Tensor.__add__(Tensor([0],"int64"), 82432, )
paddle.Tensor.__add__(Tensor([0],"int64"), 82560, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8388608, )
paddle.Tensor.__add__(Tensor([0],"int64"), 83886080, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8389120, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8390656, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8421376, )
paddle.Tensor.__add__(Tensor([0],"int64"), 84480, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8454144, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8589934592, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8601600, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8650752, )
paddle.Tensor.__add__(Tensor([0],"int64"), 8847360, )
paddle.Tensor.__add__(Tensor([0],"int64"), 903168, )
paddle.Tensor.__add__(Tensor([0],"int64"), 9216, )
paddle.Tensor.__add__(Tensor([0],"int64"), 94080, )
paddle.Tensor.__add__(Tensor([0],"int64"), 9663676416, )
paddle.Tensor.__add__(Tensor([0],"int64"), 983040, )
paddle.Tensor.__add__(Tensor([0],"int64"), 983160, )
paddle.Tensor.__add__(Tensor([0],"int64"), 983520, )
paddle.Tensor.__add__(Tensor([0],"int64"), 9961472, )
paddle.Tensor.__add__(Tensor([0],"int64"), 99614720, )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 24276, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1, 24276, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 10],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([1, 0, 1, 16, 1, 32, 1],"float32"), 2, )
paddle.Tensor.__add__(Tensor([1, 0, 1, 4, 1, 2],"float32"), Tensor([1, 0, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 4, 1, 2],"float32"), Tensor([1, 11, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 5, 1, 2],"float32"), Tensor([1, 0, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1, 5, 1, 2],"float32"), Tensor([1, 1100, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1],"float32"), 1e-05, )
paddle.Tensor.__add__(Tensor([1, 0, 1],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([1, 0, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 0, 10, 10],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 0, 100],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([1, 0, 1024],"float32"), Tensor([1, 0, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1024],"float32"), Tensor([1, 1, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1024],"float32"), Tensor([1, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 10285],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 0, 11, 11],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 0, 12, 392, 392],"float16"), Tensor([1, 0, 1, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 0, 12, 392, 392],"float16"), Tensor([1, 12, 1, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 0, 1280],"float32"), Tensor([1, 0, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1280],"float32"), Tensor([1, 1, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 1280],"float32"), Tensor([1, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 13],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([1, 0, 15, 2],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([1, 0, 2, 2],"complex128"), 1, )
paddle.Tensor.__add__(Tensor([1, 0, 2, 2],"complex64"), 1, )
paddle.Tensor.__add__(Tensor([1, 0, 200],"float32"), 0.0, )
paddle.Tensor.__add__(Tensor([1, 0, 3],"float32"), 1, )
paddle.Tensor.__add__(Tensor([1, 0, 376, 25, 3],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([1, 0, 4],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([1, 0, 4096],"float32"), 1, )
paddle.Tensor.__add__(Tensor([1, 0, 4096],"float32"), 1e-05, )
paddle.Tensor.__add__(Tensor([1, 0, 5, 2, 4],"float16"), Tensor([2, 4],"float16"), )
paddle.Tensor.__add__(Tensor([1, 0, 5, 2, 4],"float32"), Tensor([2, 4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 5, 6],"float16"), Tensor([6],"float16"), )
paddle.Tensor.__add__(Tensor([1, 0, 5, 6],"float32"), Tensor([6],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 6, 49, 49],"float32"), Tensor([1, 0, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 6, 49, 49],"float32"), Tensor([1, 108, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 7, 7],"int64"), 7, )
paddle.Tensor.__add__(Tensor([1, 0, 77, 77],"float32"), Tensor([77, 77],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0, 8, 2],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([1, 0, 8],"float32"), -0.5, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"float32"), 0.0, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"float32"), -0.5, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 0, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 10164, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 2704, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 27648, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 28800, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 3136, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 3380, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 34560, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 3549, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 3600, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 36000, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 36288, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 36720, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 36828, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 37800, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 38250, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 38367, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 3920, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 4096, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 4116, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 4500, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 4624, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 4725, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 4800, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 5120, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 5184, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 5376, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 5776, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 5780, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 6000, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 6069, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 6300, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 6380, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 6400, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 6408, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 6480, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 6804, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 7056, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 7220, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 7581, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 7744, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 8000, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 8028, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 8400, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 8442, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 8550, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 8820, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 9261, )
paddle.Tensor.__add__(Tensor([1, 0, 9],"int64"), 9680, )
paddle.Tensor.__add__(Tensor([1, 0, 99],"float16"), Tensor([99],"float16"), )
paddle.Tensor.__add__(Tensor([1, 0, 99],"float32"), Tensor([99],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0],"complex128"), Tensor([1, 0],"complex128"), )
paddle.Tensor.__add__(Tensor([1, 0],"complex128"), Tensor([1, 100],"complex128"), )
paddle.Tensor.__add__(Tensor([1, 0],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([1, 0],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 0],"float32"), 1e-10, )
paddle.Tensor.__add__(Tensor([1, 0],"float32"), 2, )
paddle.Tensor.__add__(Tensor([1, 0],"float32"), Tensor([12],"float32"), )
paddle.Tensor.__add__(Tensor([1, 0],"float64"), Tensor([128],"float64"), )
paddle.Tensor.__add__(Tensor([1, 0],"int32"), 0, )
paddle.Tensor.__add__(Tensor([1, 0],"int64"), 0, )
paddle.Tensor.__add__(Tensor([1, 0],"int64"), 10, )
paddle.Tensor.__add__(Tensor([1, 0],"int64"), 2, )
paddle.Tensor.__add__(Tensor([1, 0],"int64"), 3, )
paddle.Tensor.__add__(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 1, 0, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 1, 24276, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 0, 7],"int64"), 7, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float16"), Tensor([99],"float16"), )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float32"), 1e-05, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float32"), Tensor([1, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float32"), Tensor([1, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 0],"float32"), Tensor([99],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 0, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 10164, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 2704, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 27648, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 28800, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 3136, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 3380, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 34560, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 3549, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 36000, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 36288, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 36720, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 36828, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 37800, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 38250, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 38367, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 3920, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 4096, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 4116, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 4624, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 4800, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 5120, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 5184, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 5376, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 5780, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 6000, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 6069, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 6300, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 6380, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 6400, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 6408, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 6480, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 6804, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 7744, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 8000, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 8028, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 8400, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 8442, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 8550, )
paddle.Tensor.__add__(Tensor([1, 1, 0],"int64"), 9680, )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24276, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24276, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 1, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 1, 24276, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 24276, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 0, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 24276, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1024],"float32"), Tensor([0, 1, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1024],"float32"), Tensor([0, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1024],"float32"), Tensor([1, 0, 1024],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1024],"float32"), Tensor([1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1024],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1280],"float32"), Tensor([0, 1, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1280],"float32"), Tensor([0, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1280],"float32"), Tensor([1, 0, 1280],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1280],"float32"), Tensor([1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 1280],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 7, 0],"int64"), 7, )
paddle.Tensor.__add__(Tensor([1, 1, 99],"float16"), Tensor([0],"float16"), )
paddle.Tensor.__add__(Tensor([1, 1, 99],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 10, 0, 2],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([1, 10, 0],"float32"), -0.5, )
paddle.Tensor.__add__(Tensor([1, 10, 0],"int64"), 0, )
paddle.Tensor.__add__(Tensor([1, 10, 0],"int64"), 5184, )
paddle.Tensor.__add__(Tensor([1, 10, 0],"int64"), 6480, )
paddle.Tensor.__add__(Tensor([1, 10, 0],"int64"), 6804, )
paddle.Tensor.__add__(Tensor([1, 10, 15, 0],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([1, 10, 8, 0],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([1, 100],"complex128"), Tensor([0, 100],"complex128"), )
paddle.Tensor.__add__(Tensor([1, 100],"complex128"), Tensor([1, 0],"complex128"), )
paddle.Tensor.__add__(Tensor([1, 108, 0, 49, 49],"float32"), Tensor([1, 108, 0, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 0, 49, 49],"float32"), Tensor([1, 108, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 6, 0, 49],"float32"), Tensor([1, 108, 1, 0, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 6, 0, 49],"float32"), Tensor([1, 108, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 6, 49, 0],"float32"), Tensor([1, 108, 1, 49, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 6, 49, 0],"float32"), Tensor([1, 108, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 6, 49, 49],"float32"), Tensor([0, 108, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 6, 49, 49],"float32"), Tensor([1, 0, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 6, 49, 49],"float32"), Tensor([1, 108, 0, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 6, 49, 49],"float32"), Tensor([1, 108, 1, 0, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 108, 6, 49, 49],"float32"), Tensor([1, 108, 1, 49, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 0, 10],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 11, 0, 11],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 11, 0, 4, 1, 2],"float32"), Tensor([1, 11, 0, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 0, 4, 1, 2],"float32"), Tensor([1, 11, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 0],"int64"), 3600, )
paddle.Tensor.__add__(Tensor([1, 11, 0],"int64"), 4500, )
paddle.Tensor.__add__(Tensor([1, 11, 0],"int64"), 4725, )
paddle.Tensor.__add__(Tensor([1, 11, 1, 0, 1, 2],"float32"), Tensor([1, 11, 8, 0, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 0, 1, 2],"float32"), Tensor([1, 11, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 0, 2],"float32"), Tensor([1, 11, 8, 4, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 0, 2],"float32"), Tensor([1, 11, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 1, 0],"float32"), Tensor([1, 11, 8, 4, 4, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 1, 0],"float32"), Tensor([1, 11, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 1, 2],"float32"), Tensor([0, 11, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 1, 2],"float32"), Tensor([1, 0, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 1, 2],"float32"), Tensor([1, 11, 0, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 1, 2],"float32"), Tensor([1, 11, 8, 0, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 1, 2],"float32"), Tensor([1, 11, 8, 4, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 1, 2],"float32"), Tensor([1, 11, 8, 4, 4, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 10, 0],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 11, 11, 0],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1, 1100, 0, 5, 1, 2],"float32"), Tensor([1, 1100, 0, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 0, 5, 1, 2],"float32"), Tensor([1, 1100, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 0, 1, 2],"float32"), Tensor([1, 1100, 8, 0, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 0, 1, 2],"float32"), Tensor([1, 1100, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 0, 2],"float32"), Tensor([1, 1100, 8, 5, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 0, 2],"float32"), Tensor([1, 1100, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 1, 0],"float32"), Tensor([1, 1100, 8, 5, 4, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 1, 0],"float32"), Tensor([1, 1100, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 1, 2],"float32"), Tensor([0, 1100, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 1, 2],"float32"), Tensor([1, 0, 8, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 1, 2],"float32"), Tensor([1, 1100, 0, 5, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 1, 2],"float32"), Tensor([1, 1100, 8, 0, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 1, 2],"float32"), Tensor([1, 1100, 8, 5, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1100, 1, 5, 1, 2],"float32"), Tensor([1, 1100, 8, 5, 4, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 0, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 0, 392, 392],"float16"), Tensor([1, 12, 0, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 0, 392, 392],"float16"), Tensor([1, 12, 1, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 0, 77],"float32"), Tensor([77, 77],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 0],"float32"), 0.0, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"float32"), -0.5, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 10164, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 2704, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 3136, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 3380, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 3549, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 3920, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 4116, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 7056, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 7744, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 8820, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 9261, )
paddle.Tensor.__add__(Tensor([1, 12, 0],"int64"), 9680, )
paddle.Tensor.__add__(Tensor([1, 12, 1, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 1, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 1, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 0, 392],"float16"), Tensor([1, 12, 1, 0, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 0, 392],"float16"), Tensor([1, 12, 1, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 392, 0],"float16"), Tensor([1, 12, 1, 392, 0],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 392, 0],"float16"), Tensor([1, 12, 1, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 392, 392],"float16"), Tensor([0, 12, 1, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 392, 392],"float16"), Tensor([1, 0, 1, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 392, 392],"float16"), Tensor([1, 12, 0, 392, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 392, 392],"float16"), Tensor([1, 12, 1, 0, 392],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 12, 392, 392],"float16"), Tensor([1, 12, 1, 392, 0],"float16"), )
paddle.Tensor.__add__(Tensor([1, 12, 77, 0],"float32"), Tensor([77, 77],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 77, 77],"float32"), Tensor([0, 77],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12, 77, 77],"float32"), Tensor([77, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 12],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 128],"float64"), Tensor([0],"float64"), )
paddle.Tensor.__add__(Tensor([1, 14, 0],"int64"), 4096, )
paddle.Tensor.__add__(Tensor([1, 14, 0],"int64"), 4624, )
paddle.Tensor.__add__(Tensor([1, 14, 0],"int64"), 5120, )
paddle.Tensor.__add__(Tensor([1, 14, 0],"int64"), 5376, )
paddle.Tensor.__add__(Tensor([1, 14, 0],"int64"), 5780, )
paddle.Tensor.__add__(Tensor([1, 14, 0],"int64"), 6069, )
paddle.Tensor.__add__(Tensor([1, 14, 0],"int64"), 7056, )
paddle.Tensor.__add__(Tensor([1, 14, 0],"int64"), 8820, )
paddle.Tensor.__add__(Tensor([1, 14, 0],"int64"), 9261, )
paddle.Tensor.__add__(Tensor([1, 144, 0],"float32"), 0.0, )
paddle.Tensor.__add__(Tensor([1, 192, 0],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([1, 196, 0],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([1, 2, 0, 2],"complex128"), 1, )
paddle.Tensor.__add__(Tensor([1, 2, 0, 2],"complex64"), 1, )
paddle.Tensor.__add__(Tensor([1, 2, 0],"float32"), 1, )
paddle.Tensor.__add__(Tensor([1, 2, 0],"int64"), 5776, )
paddle.Tensor.__add__(Tensor([1, 2, 0],"int64"), 7220, )
paddle.Tensor.__add__(Tensor([1, 2, 0],"int64"), 7581, )
paddle.Tensor.__add__(Tensor([1, 2, 2, 0],"complex128"), 1, )
paddle.Tensor.__add__(Tensor([1, 2, 2, 0],"complex64"), 1, )
paddle.Tensor.__add__(Tensor([1, 20, 0],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([1, 280, 0, 25, 3],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([1, 280, 376, 0, 3],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([1, 280, 376, 25, 0],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([1, 3, 0, 16, 1, 32, 1],"float32"), 2, )
paddle.Tensor.__add__(Tensor([1, 3, 0, 2, 4],"float16"), Tensor([2, 4],"float16"), )
paddle.Tensor.__add__(Tensor([1, 3, 0, 2, 4],"float32"), Tensor([2, 4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 0, 6],"float16"), Tensor([6],"float16"), )
paddle.Tensor.__add__(Tensor([1, 3, 0, 6],"float32"), Tensor([6],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 0],"int64"), 3600, )
paddle.Tensor.__add__(Tensor([1, 3, 0],"int64"), 4500, )
paddle.Tensor.__add__(Tensor([1, 3, 0],"int64"), 4725, )
paddle.Tensor.__add__(Tensor([1, 3, 1, 0, 1, 32, 1],"float32"), 2, )
paddle.Tensor.__add__(Tensor([1, 3, 1, 16, 0, 32, 1],"float32"), 2, )
paddle.Tensor.__add__(Tensor([1, 3, 1, 16, 1, 0, 1],"float32"), 2, )
paddle.Tensor.__add__(Tensor([1, 3, 1, 16, 1, 32, 0],"float32"), 2, )
paddle.Tensor.__add__(Tensor([1, 3, 5, 0, 4],"float16"), Tensor([2, 4],"float16"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 0, 4],"float32"), Tensor([2, 4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 0],"float16"), Tensor([6],"float16"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 0],"float32"), Tensor([6],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 2, 0],"float16"), Tensor([2, 4],"float16"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 2, 0],"float32"), Tensor([2, 4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 2, 4],"float16"), Tensor([0, 4],"float16"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 2, 4],"float16"), Tensor([2, 0],"float16"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 2, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 2, 4],"float32"), Tensor([2, 0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 6],"float16"), Tensor([0],"float16"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 6],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__add__(Tensor([1, 300, 0],"float32"), 1, )
paddle.Tensor.__add__(Tensor([1, 4, 0],"int64"), 5776, )
paddle.Tensor.__add__(Tensor([1, 4, 0],"int64"), 6400, )
paddle.Tensor.__add__(Tensor([1, 4, 0],"int64"), 7220, )
paddle.Tensor.__add__(Tensor([1, 4, 0],"int64"), 7581, )
paddle.Tensor.__add__(Tensor([1, 4, 0],"int64"), 8000, )
paddle.Tensor.__add__(Tensor([1, 4, 0],"int64"), 8400, )
paddle.Tensor.__add__(Tensor([1, 5, 0, 10],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([1, 5, 1, 0],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([10, 0, 1],"float32"), 2, )
paddle.Tensor.__add__(Tensor([10, 0, 7, 7],"float32"), 0, )
paddle.Tensor.__add__(Tensor([10, 0],"float32"), 0.1, )
paddle.Tensor.__add__(Tensor([10, 0],"float32"), 0.5723649429247001, )
paddle.Tensor.__add__(Tensor([10, 0],"float32"), 0.9189385332046727, )
paddle.Tensor.__add__(Tensor([10, 0],"float32"), 160.0, )
paddle.Tensor.__add__(Tensor([10, 0],"float32"), 3, )
paddle.Tensor.__add__(Tensor([10, 0],"float32"), 80.0, )
paddle.Tensor.__add__(Tensor([10, 0],"float64"), 0.5723649429247001, )
paddle.Tensor.__add__(Tensor([10, 20, 0],"float32"), 2, )
paddle.Tensor.__add__(Tensor([10, 4, 0, 7],"float32"), 0, )
paddle.Tensor.__add__(Tensor([10, 4, 7, 0],"float32"), 0, )
paddle.Tensor.__add__(Tensor([10],"float32"), Tensor([0, 10],"float32"), )
paddle.Tensor.__add__(Tensor([10],"float32"), Tensor([10, 0],"float32"), )
paddle.Tensor.__add__(Tensor([10],"float32"), Tensor([10105, 0],"float32"), )
paddle.Tensor.__add__(Tensor([100, 0, 100],"float64"), 2.0, )
paddle.Tensor.__add__(Tensor([100, 0],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([100, 0],"float32"), 40.0, )
paddle.Tensor.__add__(Tensor([100, 200, 0],"float64"), 2.0, )
paddle.Tensor.__add__(Tensor([1000, 0],"float64"), 0.0, )
paddle.Tensor.__add__(Tensor([1000],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__add__(Tensor([10008],"float32"), Tensor([0],"float32"), )
paddle.Tensor.__add__(Tensor([1003, 0],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([1021, 0],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([104, 0],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([104, 0],"float32"), 40.0, )
paddle.Tensor.__add__(Tensor([11, 0, 7, 7],"float32"), 0, )
paddle.Tensor.__add__(Tensor([11, 0],"float32"), 160.0, )
paddle.Tensor.__add__(Tensor([11, 0],"float32"), 80.0, )
paddle.Tensor.__add__(Tensor([11, 4, 0, 7],"float32"), 0, )
paddle.Tensor.__add__(Tensor([11, 4, 7, 0],"float32"), 0, )
paddle.Tensor.__add__(Tensor([1124, 0],"float32"), 0.23000000000000004, )
paddle.Tensor.__add__(Tensor([12, 0, 10, 10, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([12, 0, 20, 20, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([12, 3, 0, 10, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([12, 3, 0, 20, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([12, 3, 10, 0, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([12, 3, 10, 10, 0],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([12, 3, 20, 0, 1],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([12, 3, 20, 20, 0],"float32"), 1e-09, )
paddle.Tensor.__add__(Tensor([1200, 0, 1],"float32"), 1e-10, )
paddle.Tensor.__add__(Tensor([1200, 4, 0],"float32"), 1e-10, )
paddle.Tensor.__add__(Tensor([124, 0, 14, 14],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([124, 0, 24, 24],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([124, 0, 56, 56],"float32"), Tensor([128, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 0, 96, 96],"float32"), Tensor([128, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 1, 0, 14],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([124, 1, 0, 24],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([124, 1, 14, 0],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([124, 1, 24, 0],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([124, 128, 0, 56],"float32"), Tensor([128, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 128, 0, 96],"float32"), Tensor([128, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 128, 56, 0],"float32"), Tensor([128, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 128, 56, 56],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 128, 56, 56],"float32"), Tensor([128, 0, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 128, 56, 56],"float32"), Tensor([128, 1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([124, 128, 96, 0],"float32"), Tensor([128, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 128, 96, 96],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 128, 96, 96],"float32"), Tensor([128, 0, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 128, 96, 96],"float32"), Tensor([128, 1, 0],"float32"), )
paddle.Tensor.__add__(Tensor([128, 0, 2],"float32"), Tensor([1, 128, 128, 2],"float32"), )
paddle.Tensor.__add__(Tensor([128, 0, 2],"float32"), Tensor([4, 128, 128, 2],"float32"), )
paddle.Tensor.__add__(Tensor([128, 0],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([128, 0],"float32"), 20.0, )
paddle.Tensor.__add__(Tensor([128, 128, 0],"float32"), Tensor([1, 128, 128, 2],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 0],"float32"), Tensor([4, 128, 128, 2],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 2],"float32"), Tensor([0, 128, 128, 2],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 2],"float32"), Tensor([1, 0, 128, 2],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 2],"float32"), Tensor([1, 128, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 2],"float32"), Tensor([1, 128, 128, 0],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 2],"float32"), Tensor([4, 0, 128, 2],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 2],"float32"), Tensor([4, 128, 0, 2],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 2],"float32"), Tensor([4, 128, 128, 0],"float32"), )
paddle.Tensor.__add__(Tensor([12988, 0],"float32"), 0.08, )
paddle.Tensor.__add__(Tensor([12988, 0],"float32"), -39.6, )
paddle.Tensor.__add__(Tensor([13, 0, 1],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([13, 0, 1],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([13, 0, 16, 4, 1],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([13, 0],"int32"), 7, )
paddle.Tensor.__add__(Tensor([13, 0],"int64"), 7, )
paddle.Tensor.__add__(Tensor([13, 2, 0, 4, 1],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([13, 2, 16, 0, 1],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([13, 2, 16, 4, 0],"float32"), 1e-06, )
paddle.Tensor.__add__(Tensor([13, 7, 0],"float32"), 1e-07, )
paddle.Tensor.__add__(Tensor([13, 7, 0],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([136, 0],"float32"), 20.0, )
paddle.Tensor.__add__(Tensor([14, 0],"float32"), 13.0, )
paddle.Tensor.__add__(Tensor([14, 0],"int64"), 14, )
paddle.Tensor.__add__(Tensor([14, 0],"int64"), 160, )
paddle.Tensor.__add__(Tensor([144, 0],"int64"), 11, )
paddle.Tensor.__add__(Tensor([15, 0],"int64"), 14, )
paddle.Tensor.__add__(Tensor([16, 0, 1, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 100, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 1125, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 121, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 1280, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 144, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 1445, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 1600, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 1620, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 169, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 1805, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 196, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 2000, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 2100, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 2205, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 225, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 2304, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 2420, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 256, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 2645, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 2880, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 289, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 3024, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 324, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 361, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 400, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 441, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 484, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 500, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 529, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 576, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 605, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 720, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 845, )
paddle.Tensor.__add__(Tensor([16, 0, 9],"int64"), 980, )
paddle.Tensor.__add__(Tensor([16, 0],"float32"), 0.05, )
paddle.Tensor.__add__(Tensor([16, 0],"float32"), 0.23000000000000004, )
paddle.Tensor.__add__(Tensor([16, 0],"float32"), 1e-05, )
paddle.Tensor.__add__(Tensor([16, 0],"float32"), 99, )
paddle.Tensor.__add__(Tensor([16, 0],"float64"), 1e-05, )
paddle.Tensor.__add__(Tensor([16, 1, 0, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([16, 1, 1, 0],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 1125, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 121, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 1280, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 1445, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 1620, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 1805, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 2000, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 2205, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 225, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 256, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 2645, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 2880, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 289, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 324, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 361, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 400, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 441, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 529, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 576, )
paddle.Tensor.__add__(Tensor([16, 10, 0],"int64"), 605, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 100, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 1125, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 1280, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 169, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 196, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 2000, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 225, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 2420, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 256, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 2880, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 400, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 484, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 500, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 576, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 845, )
paddle.Tensor.__add__(Tensor([16, 11, 0],"int64"), 980, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 100, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 1620, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 169, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 1805, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 2205, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 2420, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 2645, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 324, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 361, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 441, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 484, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 500, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 529, )
paddle.Tensor.__add__(Tensor([16, 12, 0],"int64"), 845, )
paddle.Tensor.__add__(Tensor([16, 13, 0],"int64"), 121, )
paddle.Tensor.__add__(Tensor([16, 13, 0],"int64"), 1445, )
paddle.Tensor.__add__(Tensor([16, 13, 0],"int64"), 196, )
paddle.Tensor.__add__(Tensor([16, 13, 0],"int64"), 289, )
paddle.Tensor.__add__(Tensor([16, 13, 0],"int64"), 605, )
paddle.Tensor.__add__(Tensor([16, 13, 0],"int64"), 980, )
paddle.Tensor.__add__(Tensor([16, 14, 0],"int64"), 144, )
paddle.Tensor.__add__(Tensor([16, 14, 0],"int64"), 720, )
paddle.Tensor.__add__(Tensor([16, 15, 0],"int64"), 144, )
paddle.Tensor.__add__(Tensor([16, 15, 0],"int64"), 720, )
paddle.Tensor.__add__(Tensor([16, 2, 0],"int64"), 1600, )
paddle.Tensor.__add__(Tensor([16, 2, 0],"int64"), 2100, )
paddle.Tensor.__add__(Tensor([16, 2, 0],"int64"), 2304, )
paddle.Tensor.__add__(Tensor([16, 2, 0],"int64"), 3024, )
paddle.Tensor.__add__(Tensor([16, 3, 0],"int64"), 1600, )
paddle.Tensor.__add__(Tensor([16, 3, 0],"int64"), 2100, )
paddle.Tensor.__add__(Tensor([16, 5, 0],"int64"), 2304, )
paddle.Tensor.__add__(Tensor([16, 5, 0],"int64"), 3024, )
paddle.Tensor.__add__(Tensor([170628, 0],"float32"), -51.1, )
paddle.Tensor.__add__(Tensor([1800, 0, 1],"float32"), 1e-10, )
paddle.Tensor.__add__(Tensor([1800, 4, 0],"float32"), 1e-10, )
paddle.Tensor.__add__(Tensor([192, 0, 1, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([192, 1, 0, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([192, 1, 1, 0],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([196, 0],"int64"), 13, )
paddle.Tensor.__add__(Tensor([2, 0, 115],"float32"), 0.0001, )
paddle.Tensor.__add__(Tensor([2, 0, 15],"float32"), 0.0001, )
paddle.Tensor.__add__(Tensor([2, 0, 16, 32],"float32"), 99, )
paddle.Tensor.__add__(Tensor([2, 0, 2],"float32"), 1.5, )
paddle.Tensor.__add__(Tensor([2, 0, 2],"int64"), 1.5, )
paddle.Tensor.__add__(Tensor([2, 0, 3, 2, 2],"float64"), Tensor([4, 1, 1, 1],"float64"), )
paddle.Tensor.__add__(Tensor([2, 0, 32],"float32"), 99, )
paddle.Tensor.__add__(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 1, )
paddle.Tensor.__add__(Tensor([2, 0, 4],"bfloat16"), complex(0.0,2.0), )
paddle.Tensor.__add__(Tensor([2, 0, 4],"bool"), complex(0.0,2.0), )
paddle.Tensor.__add__(Tensor([2, 0, 5],"float32"), 2, )
paddle.Tensor.__add__(Tensor([2, 0, 512, 4, 4],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([2, 0, 8],"float32"), -0.2, )
paddle.Tensor.__add__(Tensor([2, 0, 8],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([2, 0, 8],"float32"), 4.0, )
paddle.Tensor.__add__(Tensor([2, 0],"complex128"), complex(1.0,1.0), )
paddle.Tensor.__add__(Tensor([2, 0],"float32"), 0.4, )
paddle.Tensor.__add__(Tensor([2, 0],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([2, 0],"float32"), 0.5723649429247004, )
paddle.Tensor.__add__(Tensor([2, 0],"float32"), 0.9189385332046727, )
paddle.Tensor.__add__(Tensor([2, 0],"float32"), 1.1447298858494002, )
paddle.Tensor.__add__(Tensor([2, 0],"float32"), 10, )
paddle.Tensor.__add__(Tensor([2, 0],"float32"), 1e-16, )
paddle.Tensor.__add__(Tensor([2, 0],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([2, 0],"float32"), Tensor([10000, 2, 3],"float32"), )
paddle.Tensor.__add__(Tensor([2, 0],"float64"), 0.5723649429247004, )
paddle.Tensor.__add__(Tensor([2, 0],"float64"), 0.7, )
paddle.Tensor.__add__(Tensor([2, 0],"float64"), 1.0, )
paddle.Tensor.__add__(Tensor([2, 0],"float64"), 1.1447298858494002, )
paddle.Tensor.__add__(Tensor([2, 0],"float64"), Tensor([10000, 2, 3],"float64"), )
paddle.Tensor.__add__(Tensor([2, 0],"int32"), 128, )
paddle.Tensor.__add__(Tensor([2, 0],"int64"), 1e-15, )
paddle.Tensor.__add__(Tensor([2, 1, 0, 4, 4],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([2, 1, 0],"float32"), 0.0001, )
paddle.Tensor.__add__(Tensor([2, 1, 512, 0, 4],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([2, 1, 512, 4, 0],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([2, 16, 0],"float32"), 99, )
paddle.Tensor.__add__(Tensor([2, 2, 0],"float32"), 1.5, )
paddle.Tensor.__add__(Tensor([2, 2, 0],"int64"), 1.5, )
paddle.Tensor.__add__(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 0],"bfloat16"), complex(0.0,2.0), )
paddle.Tensor.__add__(Tensor([2, 3, 0],"bool"), complex(0.0,2.0), )
paddle.Tensor.__add__(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 1, )
paddle.Tensor.__add__(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 1, )
paddle.Tensor.__add__(Tensor([2, 3],"float32"), Tensor([0, 2, 3],"float32"), )
paddle.Tensor.__add__(Tensor([2, 3],"float32"), Tensor([10000, 0, 3],"float32"), )
paddle.Tensor.__add__(Tensor([2, 3],"float32"), Tensor([10000, 2, 0],"float32"), )
paddle.Tensor.__add__(Tensor([2, 3],"float64"), Tensor([0, 2, 3],"float64"), )
paddle.Tensor.__add__(Tensor([2, 3],"float64"), Tensor([10000, 0, 3],"float64"), )
paddle.Tensor.__add__(Tensor([2, 3],"float64"), Tensor([10000, 2, 0],"float64"), )
paddle.Tensor.__add__(Tensor([2, 4, 0, 2, 2],"float64"), Tensor([4, 1, 1, 1],"float64"), )
paddle.Tensor.__add__(Tensor([2, 4, 0],"float32"), 2, )
paddle.Tensor.__add__(Tensor([2, 4, 3, 0, 2],"float64"), Tensor([4, 1, 1, 1],"float64"), )
paddle.Tensor.__add__(Tensor([2, 4, 3, 2, 0],"float64"), Tensor([4, 1, 1, 1],"float64"), )
paddle.Tensor.__add__(Tensor([2, 4, 3, 2, 2],"float64"), Tensor([0, 1, 1, 1],"float64"), )
paddle.Tensor.__add__(Tensor([2, 4, 3, 2, 2],"float64"), Tensor([4, 0, 1, 1],"float64"), )
paddle.Tensor.__add__(Tensor([2, 4, 3, 2, 2],"float64"), Tensor([4, 1, 0, 1],"float64"), )
paddle.Tensor.__add__(Tensor([2, 4, 3, 2, 2],"float64"), Tensor([4, 1, 1, 0],"float64"), )
paddle.Tensor.__add__(Tensor([2, 8, 0, 32],"float32"), 99, )
paddle.Tensor.__add__(Tensor([2, 8, 0],"float32"), -0.2, )
paddle.Tensor.__add__(Tensor([2, 8, 0],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([2, 8, 0],"float32"), 4.0, )
paddle.Tensor.__add__(Tensor([2, 8, 16, 0],"float32"), 99, )
paddle.Tensor.__add__(Tensor([23, 0],"float32"), 0.05, )
paddle.Tensor.__add__(Tensor([25, 0],"int64"), 4, )
paddle.Tensor.__add__(Tensor([26, 0, 1],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([26, 7, 0],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([28, 0],"float32"), 0.45, )
paddle.Tensor.__add__(Tensor([28, 0],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([28, 0],"float32"), 2.0, )
paddle.Tensor.__add__(Tensor([28, 0],"float32"), 4.0, )
paddle.Tensor.__add__(Tensor([29151, 0],"float32"), 0.08, )
paddle.Tensor.__add__(Tensor([29151, 0],"float32"), -39.6, )
paddle.Tensor.__add__(Tensor([3, 0, 2, 1],"float32"), 1e-15, )
paddle.Tensor.__add__(Tensor([3, 0, 4, 5, 7],"float32"), 1, )
paddle.Tensor.__add__(Tensor([3, 0, 5],"float32"), 3, )
paddle.Tensor.__add__(Tensor([3, 0, 5],"float32"), 4, )
paddle.Tensor.__add__(Tensor([3, 0, 5],"float32"), 5, )
paddle.Tensor.__add__(Tensor([3, 0],"float32"), 0.5, )
paddle.Tensor.__add__(Tensor([3, 0],"float32"), 100, )
paddle.Tensor.__add__(Tensor([3, 0],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([3, 1, 0, 1],"float32"), 1e-15, )
paddle.Tensor.__add__(Tensor([3, 1, 2, 0],"float32"), 1e-15, )
paddle.Tensor.__add__(Tensor([3, 4, 0, 5, 7],"float32"), 1, )
paddle.Tensor.__add__(Tensor([3, 4, 0],"float32"), 3, )
paddle.Tensor.__add__(Tensor([3, 4, 0],"float32"), 4, )
paddle.Tensor.__add__(Tensor([3, 4, 0],"float32"), 5, )
paddle.Tensor.__add__(Tensor([3, 4, 4, 0, 7],"float32"), 1, )
paddle.Tensor.__add__(Tensor([3, 4, 4, 5, 0],"float32"), 1, )
paddle.Tensor.__add__(Tensor([300, 0],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([32, 0],"float32"), 31.0, )
paddle.Tensor.__add__(Tensor([32],"float32"), Tensor([0, 7, 32],"float32"), )
paddle.Tensor.__add__(Tensor([32],"float32"), Tensor([13, 0, 32],"float32"), )
paddle.Tensor.__add__(Tensor([32],"float32"), Tensor([13, 7, 0],"float32"), )
paddle.Tensor.__add__(Tensor([392, 0],"int64"), 6, )
paddle.Tensor.__add__(Tensor([4, 0, 16, 16],"float16"), 3, )
paddle.Tensor.__add__(Tensor([4, 0, 16, 16],"float32"), 3, )
paddle.Tensor.__add__(Tensor([4, 0, 16, 32],"float32"), 99, )
paddle.Tensor.__add__(Tensor([4, 0, 3, 256, 256],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([4, 0, 32],"float32"), 99, )
paddle.Tensor.__add__(Tensor([4, 0, 376, 25, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([4, 0, 5],"float32"), 4, )
paddle.Tensor.__add__(Tensor([4, 0, 9],"int64"), 1936, )
paddle.Tensor.__add__(Tensor([4, 0, 9],"int64"), 2541, )
paddle.Tensor.__add__(Tensor([4, 0, 94, 311],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([4, 0],"float32"), 4, )
paddle.Tensor.__add__(Tensor([4, 1, 0],"int64"), 1936, )
paddle.Tensor.__add__(Tensor([4, 1, 0],"int64"), 2541, )
paddle.Tensor.__add__(Tensor([4, 128, 0, 16],"float16"), 3, )
paddle.Tensor.__add__(Tensor([4, 128, 0, 16],"float32"), 3, )
paddle.Tensor.__add__(Tensor([4, 128, 16, 0],"float16"), 3, )
paddle.Tensor.__add__(Tensor([4, 128, 16, 0],"float32"), 3, )
paddle.Tensor.__add__(Tensor([4, 15, 0, 256, 256],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([4, 15, 3, 0, 256],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([4, 15, 3, 256, 0],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([4, 16, 0],"float32"), 99, )
paddle.Tensor.__add__(Tensor([4, 2, 0],"int64"), 1936, )
paddle.Tensor.__add__(Tensor([4, 2, 0],"int64"), 2541, )
paddle.Tensor.__add__(Tensor([4, 280, 0, 25, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([4, 280, 376, 0, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([4, 280, 376, 25, 0],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([4, 4, 0],"float32"), 4, )
paddle.Tensor.__add__(Tensor([4, 8, 0, 32],"float32"), 99, )
paddle.Tensor.__add__(Tensor([4, 8, 16, 0],"float32"), 99, )
paddle.Tensor.__add__(Tensor([4, 81, 0, 311],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([4, 81, 94, 0],"float32"), 1.0, )
paddle.Tensor.__add__(Tensor([421120, 0, 1],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([421120, 25, 0],"float32"), 1e-08, )
paddle.Tensor.__add__(Tensor([48, 0],"float32"), 47.0, )
paddle.Tensor.__add__(Tensor([49, 0],"int64"), 6, )
paddle.Tensor.__add__(Tensor([5, 0, 5],"float32"), 5, )
paddle.Tensor.__add__(Tensor([5, 0],"float32"), 5, )
paddle.Tensor.__add__(Tensor([5, 0],"float64"), 0.5772156649015329, )
paddle.Tensor.__add__(Tensor([5, 4, 0],"float32"), 5, )
paddle.Tensor.__add__(Tensor([512, 0],"float32"), 64, )
paddle.Tensor.__add__(Tensor([64, 0, 256, 256],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([64, 0, 9],"int64"), 1024, )
paddle.Tensor.__add__(Tensor([64, 0, 9],"int64"), 1296, )
paddle.Tensor.__add__(Tensor([64, 0, 9],"int64"), 1344, )
paddle.Tensor.__add__(Tensor([64, 0, 9],"int64"), 1701, )
paddle.Tensor.__add__(Tensor([64, 15, 0],"int64"), 1024, )
paddle.Tensor.__add__(Tensor([64, 15, 0],"int64"), 1296, )
paddle.Tensor.__add__(Tensor([64, 15, 0],"int64"), 1344, )
paddle.Tensor.__add__(Tensor([64, 15, 0],"int64"), 1701, )
paddle.Tensor.__add__(Tensor([64, 17, 0],"int64"), 1024, )
paddle.Tensor.__add__(Tensor([64, 17, 0],"int64"), 1296, )
paddle.Tensor.__add__(Tensor([64, 17, 0],"int64"), 1344, )
paddle.Tensor.__add__(Tensor([64, 17, 0],"int64"), 1701, )
paddle.Tensor.__add__(Tensor([64, 3, 0, 256],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([64, 3, 256, 0],"float32"), 1e-12, )
paddle.Tensor.__add__(Tensor([7, 0],"int64"), 160, )
paddle.Tensor.__add__(Tensor([8, 0, 4, 4, 5, 3],"float32"), 1, )
paddle.Tensor.__add__(Tensor([8, 0, 4, 4, 5, 3],"float64"), 1, )
paddle.Tensor.__add__(Tensor([8, 0],"float32"), -0.2, )
paddle.Tensor.__add__(Tensor([8, 0],"float32"), 100, )
paddle.Tensor.__add__(Tensor([8, 0],"float32"), 4.0, )
paddle.Tensor.__add__(Tensor([8, 0],"float32"), 99, )
paddle.Tensor.__add__(Tensor([8, 3, 0, 4, 5, 3],"float32"), 1, )
paddle.Tensor.__add__(Tensor([8, 3, 0, 4, 5, 3],"float64"), 1, )
paddle.Tensor.__add__(Tensor([8, 3, 4, 0, 5, 3],"float32"), 1, )
paddle.Tensor.__add__(Tensor([8, 3, 4, 0, 5, 3],"float64"), 1, )
paddle.Tensor.__add__(Tensor([8, 3, 4, 4, 0, 3],"float32"), 1, )
paddle.Tensor.__add__(Tensor([8, 3, 4, 4, 0, 3],"float64"), 1, )
paddle.Tensor.__add__(Tensor([8, 3, 4, 4, 5, 0],"float32"), 1, )
paddle.Tensor.__add__(Tensor([8, 3, 4, 4, 5, 0],"float64"), 1, )
paddle.Tensor.__add__(Tensor([80239, 0],"float32"), -51.1, )
paddle.Tensor.__and__(Tensor([0, 1, 1, 23],"bool"), Tensor([0, 1, 1, 23],"bool"), )
paddle.Tensor.__and__(Tensor([0, 1, 1, 23],"bool"), Tensor([1, 1, 1, 23],"bool"), )
paddle.Tensor.__and__(Tensor([0, 1, 1, 24],"bool"), Tensor([0, 1, 1, 24],"bool"), )
paddle.Tensor.__and__(Tensor([0, 1, 1, 24],"bool"), Tensor([1, 1, 1, 24],"bool"), )
paddle.Tensor.__and__(Tensor([0, 10],"bool"), Tensor([0, 10],"bool"), )
paddle.Tensor.__and__(Tensor([0, 10],"bool"), Tensor([2, 10],"bool"), )
paddle.Tensor.__and__(Tensor([0, 16],"bool"), Tensor([0, 16],"bool"), )
paddle.Tensor.__and__(Tensor([0, 16],"bool"), Tensor([2, 16],"bool"), )
paddle.Tensor.__and__(Tensor([0, 25, 21504],"bool"), Tensor([0, 25, 21504],"bool"), )
paddle.Tensor.__and__(Tensor([0, 25, 21504],"bool"), Tensor([1, 25, 21504],"bool"), )
paddle.Tensor.__and__(Tensor([0, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.Tensor.__and__(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__and__(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"bool"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"bool"), )
paddle.Tensor.__and__(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__and__(Tensor([0, 3, 3, 3, 4, 1, 5, 2],"int16"), Tensor([2, 3, 3, 3, 4, 1, 5, 2],"int16"), )
paddle.Tensor.__and__(Tensor([0, 36828, 4],"bool"), Tensor([0, 36828, 4],"bool"), )
paddle.Tensor.__and__(Tensor([0, 36828, 4],"bool"), Tensor([1, 36828, 4],"bool"), )
paddle.Tensor.__and__(Tensor([0, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.Tensor.__and__(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.Tensor.__and__(Tensor([0],"int32"), Tensor([108],"int32"), )
paddle.Tensor.__and__(Tensor([0],"int32"), Tensor([117],"int32"), )
paddle.Tensor.__and__(Tensor([1, 0, 1, 23],"bool"), Tensor([1, 0, 1, 23],"bool"), )
paddle.Tensor.__and__(Tensor([1, 0, 1, 23],"bool"), Tensor([1, 1, 1, 23],"bool"), )
paddle.Tensor.__and__(Tensor([1, 0, 1, 24],"bool"), Tensor([1, 0, 1, 24],"bool"), )
paddle.Tensor.__and__(Tensor([1, 0, 1, 24],"bool"), Tensor([1, 1, 1, 24],"bool"), )
paddle.Tensor.__and__(Tensor([1, 0, 21504],"bool"), Tensor([1, 0, 21504],"bool"), )
paddle.Tensor.__and__(Tensor([1, 0, 21504],"bool"), Tensor([1, 25, 21504],"bool"), )
paddle.Tensor.__and__(Tensor([1, 0, 4],"bool"), Tensor([1, 0, 4],"bool"), )
paddle.Tensor.__and__(Tensor([1, 0, 4],"bool"), Tensor([1, 36828, 4],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 0, 23],"bool"), Tensor([1, 1, 0, 23],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 0, 23],"bool"), Tensor([1, 1, 1, 23],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 0, 24],"bool"), Tensor([1, 1, 0, 24],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 0, 24],"bool"), Tensor([1, 1, 1, 24],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 1, 0],"bool"), Tensor([1, 1, 1, 0],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 1, 0],"bool"), Tensor([1, 1, 1, 23],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 1, 0],"bool"), Tensor([1, 1, 1, 24],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 1, 23],"bool"), Tensor([0, 1, 1, 23],"bool"), )
