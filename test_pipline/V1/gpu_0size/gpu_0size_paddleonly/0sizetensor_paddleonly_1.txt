paddle.add(Tensor([0, 1, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 1, 2, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 1, 2, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 1, 2],"float32"), Tensor([0, 1, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 1, 2],"float32"), Tensor([0, 1, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 1, 2],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 1, 2],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 1, 25, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([0, 1, 512, 1, 40],"float16"), Tensor([0, 26, 512, 1, 1],"float16"), )
paddle.add(Tensor([0, 1, 512, 1, 40],"float16"), Tensor([64, 26, 512, 1, 1],"float16"), )
paddle.add(Tensor([0, 1, 512, 1, 40],"float32"), Tensor([0, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([0, 1, 512, 1, 40],"float32"), Tensor([64, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 1],"float32"), Tensor([100, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 1],"float32"), Tensor([100, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), name="Cauchy_sample", )
paddle.add(Tensor([0, 1],"float64"), Tensor([100, 1],"float64"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 1],"float64"), Tensor([100, 1],"float64"), name="Cauchy_sample", )
paddle.add(Tensor([0, 10, 15, 20],"float32"), Tensor([0, 10, 15, 20],"float32"), name=None, )
paddle.add(Tensor([0, 10, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), name=None, )
paddle.add(Tensor([0, 1024, 62, 64],"float32"), Tensor([0, 1024, 62, 64],"float32"), None, )
paddle.add(Tensor([0, 1024, 62, 64],"float32"), Tensor([1, 1024, 62, 64],"float32"), None, )
paddle.add(Tensor([0, 1024, 64, 128],"float32"), Tensor([0, 1024, 64, 128],"float32"), None, )
paddle.add(Tensor([0, 1024, 64, 128],"float32"), Tensor([1, 1024, 64, 128],"float32"), None, )
paddle.add(Tensor([0, 1024],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([0, 112, 32, 64],"float32"), Tensor([0, 112, 32, 64],"float32"), )
paddle.add(Tensor([0, 112, 32, 64],"float32"), Tensor([1, 112, 32, 64],"float32"), )
paddle.add(Tensor([0, 12],"float32"), Tensor([0, 12],"float32"), )
paddle.add(Tensor([0, 12],"float32"), Tensor([10, 12],"float32"), )
paddle.add(Tensor([0, 128, 200, 272],"float32"), Tensor([0, 128, 200, 272],"float32"), )
paddle.add(Tensor([0, 128, 200, 272],"float32"), Tensor([1, 128, 200, 272],"float32"), )
paddle.add(Tensor([0, 16, 24],"float16"), Tensor([0, 16, 24],"float16"), )
paddle.add(Tensor([0, 16, 24],"float16"), Tensor([12544, 16, 24],"float16"), )
paddle.add(Tensor([0, 16, 24],"float32"), Tensor([0, 16, 24],"float32"), )
paddle.add(Tensor([0, 16, 24],"float32"), Tensor([12544, 16, 24],"float32"), )
paddle.add(Tensor([0, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([0, 2, 1],"float32"), Tensor([0, 2, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 2, 1],"float32"), Tensor([0, 2, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 2, 1],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 2, 1],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 2, 3, 1],"float32"), Tensor([0, 2, 3, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 2, 3, 1],"float32"), Tensor([0, 2, 3, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 2, 3, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([0, 2, 3, 1],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0, 2, 3, 1],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0, 2, 3],"complex128"), Tensor([2, 3],"complex128"), name="Normal_sample", )
paddle.add(Tensor([0, 2, 3],"complex64"), Tensor([2, 3],"complex64"), name="Normal_sample", )
paddle.add(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([0, 2],"float64"), Tensor([2, 2],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([0, 3, 1, 10],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([0, 3, 1, 1000],"float32"), Tensor([1000],"float32"), )
paddle.add(Tensor([0, 3, 3, 4],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.add(Tensor([0, 3, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.add(Tensor([0, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.add(Tensor([0, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.add(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), name="Normal_entropy", )
paddle.add(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), name="Normal_kl_divergence", )
paddle.add(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), name=None, )
paddle.add(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_entropy", )
paddle.add(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_kl_divergence", )
paddle.add(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), name=None, )
paddle.add(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), name="Normal_entropy", )
paddle.add(Tensor([0, 3],"float64"), Tensor([2, 3],"float64"), name="Normal_entropy", )
paddle.add(Tensor([0, 3],"int64"), Tensor([0, 3],"int64"), )
paddle.add(Tensor([0, 3],"int64"), Tensor([3, 3],"int64"), )
paddle.add(Tensor([0, 4],"complex128"), Tensor([4],"complex64"), name="Normal_sample", )
paddle.add(Tensor([0, 4],"float64"), Tensor([4],"float64"), name="Normal_sample", )
paddle.add(Tensor([0, 4],"float64"), Tensor([4],"float64"), name="Uniform_sample", )
paddle.add(Tensor([0, 40],"bfloat16"), Tensor([0, 40],"bfloat16"), name=None, )
paddle.add(Tensor([0, 40],"bfloat16"), Tensor([40, 40],"bfloat16"), name=None, )
paddle.add(Tensor([0, 5, 3],"float64"), Tensor([5, 3],"float64"), name="Uniform_sample", )
paddle.add(Tensor([0, 5, 6],"float32"), Tensor([5, 6],"float32"), name="Uniform_sample", )
paddle.add(Tensor([0, 7, 99],"float32"), Tensor([99],"float32"), )
paddle.add(Tensor([0, 8, 4],"float32"), Tensor([8, 4],"float32"), )
paddle.add(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.add(Tensor([0],"float32"), Tensor([0],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([0],"float32"), Tensor([0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0],"float32"), Tensor([0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.add(Tensor([0],"float32"), Tensor([1],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([0],"float32"), Tensor([100],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([0],"float32"), Tensor([100],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([0],"float32"), Tensor([3],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([0],"float64"), Tensor([0],"float64"), name="Normal_entropy", )
paddle.add(Tensor([0],"float64"), Tensor([0],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([0],"float64"), Tensor([2],"float64"), name="Normal_entropy", )
paddle.add(Tensor([0],"float64"), Tensor([2],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.add(Tensor([0],"int64"), Tensor([168],"int64"), )
paddle.add(Tensor([0],"int64"), Tensor([300, 40],"int64"), )
paddle.add(Tensor([1, 0, 192],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([1, 0, 200, 272],"float32"), Tensor([1, 0, 200, 272],"float32"), )
paddle.add(Tensor([1, 0, 200, 272],"float32"), Tensor([1, 128, 200, 272],"float32"), )
paddle.add(Tensor([1, 0, 32, 64],"float32"), Tensor([1, 0, 32, 64],"float32"), )
paddle.add(Tensor([1, 0, 32, 64],"float32"), Tensor([1, 112, 32, 64],"float32"), )
paddle.add(Tensor([1, 0, 4],"float32"), Tensor([8, 4],"float32"), )
paddle.add(Tensor([1, 0, 62, 64],"float32"), Tensor([1, 0, 62, 64],"float32"), None, )
paddle.add(Tensor([1, 0, 62, 64],"float32"), Tensor([1, 1024, 62, 64],"float32"), None, )
paddle.add(Tensor([1, 0, 64, 128],"float32"), Tensor([1, 0, 64, 128],"float32"), None, )
paddle.add(Tensor([1, 0, 64, 128],"float32"), Tensor([1, 1024, 64, 128],"float32"), None, )
paddle.add(Tensor([1, 0],"int64"), Tensor([3, 0],"int64"), )
paddle.add(Tensor([1, 0],"int64"), Tensor([3, 3],"int64"), )
paddle.add(Tensor([1, 1, 0],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([1, 1, 192],"float16"), Tensor([0],"float16"), )
paddle.add(Tensor([1, 1024, 0, 128],"float32"), Tensor([1, 1024, 0, 128],"float32"), None, )
paddle.add(Tensor([1, 1024, 0, 128],"float32"), Tensor([1, 1024, 64, 128],"float32"), None, )
paddle.add(Tensor([1, 1024, 0, 64],"float32"), Tensor([1, 1024, 0, 64],"float32"), None, )
paddle.add(Tensor([1, 1024, 0, 64],"float32"), Tensor([1, 1024, 62, 64],"float32"), None, )
paddle.add(Tensor([1, 1024, 62, 0],"float32"), Tensor([1, 1024, 62, 0],"float32"), None, )
paddle.add(Tensor([1, 1024, 62, 0],"float32"), Tensor([1, 1024, 62, 64],"float32"), None, )
paddle.add(Tensor([1, 1024, 62, 64],"float32"), Tensor([0, 1024, 62, 64],"float32"), None, )
paddle.add(Tensor([1, 1024, 62, 64],"float32"), Tensor([1, 0, 62, 64],"float32"), None, )
paddle.add(Tensor([1, 1024, 62, 64],"float32"), Tensor([1, 1024, 0, 64],"float32"), None, )
paddle.add(Tensor([1, 1024, 62, 64],"float32"), Tensor([1, 1024, 62, 0],"float32"), None, )
paddle.add(Tensor([1, 1024, 64, 0],"float32"), Tensor([1, 1024, 64, 0],"float32"), None, )
paddle.add(Tensor([1, 1024, 64, 0],"float32"), Tensor([1, 1024, 64, 128],"float32"), None, )
paddle.add(Tensor([1, 1024, 64, 128],"float32"), Tensor([0, 1024, 64, 128],"float32"), None, )
paddle.add(Tensor([1, 1024, 64, 128],"float32"), Tensor([1, 0, 64, 128],"float32"), None, )
paddle.add(Tensor([1, 1024, 64, 128],"float32"), Tensor([1, 1024, 0, 128],"float32"), None, )
paddle.add(Tensor([1, 1024, 64, 128],"float32"), Tensor([1, 1024, 64, 0],"float32"), None, )
paddle.add(Tensor([1, 112, 0, 64],"float32"), Tensor([1, 112, 0, 64],"float32"), )
paddle.add(Tensor([1, 112, 0, 64],"float32"), Tensor([1, 112, 32, 64],"float32"), )
paddle.add(Tensor([1, 112, 32, 0],"float32"), Tensor([1, 112, 32, 0],"float32"), )
paddle.add(Tensor([1, 112, 32, 0],"float32"), Tensor([1, 112, 32, 64],"float32"), )
paddle.add(Tensor([1, 112, 32, 64],"float32"), Tensor([0, 112, 32, 64],"float32"), )
paddle.add(Tensor([1, 112, 32, 64],"float32"), Tensor([1, 0, 32, 64],"float32"), )
paddle.add(Tensor([1, 112, 32, 64],"float32"), Tensor([1, 112, 0, 64],"float32"), )
paddle.add(Tensor([1, 112, 32, 64],"float32"), Tensor([1, 112, 32, 0],"float32"), )
paddle.add(Tensor([1, 128, 0, 272],"float32"), Tensor([1, 128, 0, 272],"float32"), )
paddle.add(Tensor([1, 128, 0, 272],"float32"), Tensor([1, 128, 200, 272],"float32"), )
paddle.add(Tensor([1, 128, 200, 0],"float32"), Tensor([1, 128, 200, 0],"float32"), )
paddle.add(Tensor([1, 128, 200, 0],"float32"), Tensor([1, 128, 200, 272],"float32"), )
paddle.add(Tensor([1, 128, 200, 272],"float32"), Tensor([0, 128, 200, 272],"float32"), )
paddle.add(Tensor([1, 128, 200, 272],"float32"), Tensor([1, 0, 200, 272],"float32"), )
paddle.add(Tensor([1, 128, 200, 272],"float32"), Tensor([1, 128, 0, 272],"float32"), )
paddle.add(Tensor([1, 128, 200, 272],"float32"), Tensor([1, 128, 200, 0],"float32"), )
paddle.add(Tensor([1, 3],"int64"), Tensor([0, 3],"int64"), )
paddle.add(Tensor([1, 3],"int64"), Tensor([3, 0],"int64"), )
paddle.add(Tensor([1, 8, 0],"float32"), Tensor([8, 4],"float32"), )
paddle.add(Tensor([1, 8, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.add(Tensor([1, 8, 4],"float32"), Tensor([8, 0],"float32"), )
paddle.add(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.add(Tensor([1],"float32"), Tensor([0],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.add(Tensor([10, 0],"float32"), Tensor([10, 12],"float32"), )
paddle.add(Tensor([10, 12],"float32"), Tensor([0, 12],"float32"), )
paddle.add(Tensor([10, 12],"float32"), Tensor([10, 0],"float32"), )
paddle.add(Tensor([100, 0, 1],"float32"), Tensor([100, 0, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0, 1],"float32"), Tensor([100, 0, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0, 1],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0, 1],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0, 2, 2],"float32"), Tensor([100, 0, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0, 2, 2],"float32"), Tensor([100, 0, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0, 2, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0, 2, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0, 2],"float32"), Tensor([100, 0, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0, 2],"float32"), Tensor([100, 0, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0, 2],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0, 2],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0, 3, 1],"float32"), Tensor([100, 0, 3, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0, 3, 1],"float32"), Tensor([100, 0, 3, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0, 3, 1],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0, 3, 1],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0],"float16"), Tensor([1024],"float16"), )
paddle.add(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0],"float32"), Tensor([100, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0],"float32"), Tensor([100, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), name="Cauchy_sample", )
paddle.add(Tensor([100, 0],"float64"), Tensor([100, 1],"float64"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 0],"float64"), Tensor([100, 1],"float64"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 0, 2],"float32"), Tensor([100, 1, 0, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 0, 2],"float32"), Tensor([100, 1, 0, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 0, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 0, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 0],"float32"), Tensor([100, 1, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 0],"float32"), Tensor([100, 1, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 0],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 0],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2, 0],"float32"), Tensor([100, 1, 2, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2, 0],"float32"), Tensor([100, 1, 2, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2, 0],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2, 0],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 0, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 0, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 1, 0, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 1, 0, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 1, 2, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 1, 2, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([0, 1, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([0, 1, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([100, 0, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([100, 0, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([100, 1, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([100, 1, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1],"float32"), Tensor([0, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1],"float32"), Tensor([0, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1],"float32"), Tensor([100, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1],"float32"), Tensor([100, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1],"float64"), Tensor([0, 1],"float64"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1],"float64"), Tensor([0, 1],"float64"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1],"float64"), Tensor([100, 0],"float64"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 1],"float64"), Tensor([100, 0],"float64"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1024],"float16"), Tensor([0],"float16"), )
paddle.add(Tensor([100, 2, 0, 1],"float32"), Tensor([100, 2, 0, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 0, 1],"float32"), Tensor([100, 2, 0, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 0, 1],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 0, 1],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 0],"float32"), Tensor([100, 2, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 0],"float32"), Tensor([100, 2, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 0],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 0],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([0, 2, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([0, 2, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([100, 0, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([100, 0, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([100, 2, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([100, 2, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 3, 0],"float32"), Tensor([100, 2, 3, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 3, 0],"float32"), Tensor([100, 2, 3, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 3, 0],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 3, 0],"float32"), Tensor([100, 2, 3, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([0, 2, 3, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([0, 2, 3, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([100, 0, 3, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([100, 0, 3, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([100, 2, 0, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([100, 2, 0, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([100, 2, 3, 0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100, 2, 3, 1],"float32"), Tensor([100, 2, 3, 0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100],"float32"), Tensor([0],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([100],"float32"), Tensor([0],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([10000, 0, 3],"float64"), Tensor([5, 3],"float64"), name="Uniform_sample", )
paddle.add(Tensor([10000, 0],"float64"), Tensor([4],"float64"), name="Uniform_sample", )
paddle.add(Tensor([10000, 4],"float64"), Tensor([0],"float64"), name="Uniform_sample", )
paddle.add(Tensor([10000, 5, 0],"float64"), Tensor([5, 3],"float64"), name="Uniform_sample", )
paddle.add(Tensor([10000, 5, 3],"float64"), Tensor([0, 3],"float64"), name="Uniform_sample", )
paddle.add(Tensor([10000, 5, 3],"float64"), Tensor([5, 0],"float64"), name="Uniform_sample", )
paddle.add(Tensor([100000, 0],"complex128"), Tensor([4],"complex64"), name="Normal_sample", )
paddle.add(Tensor([100000, 0],"float64"), Tensor([4],"float64"), name="Normal_sample", )
paddle.add(Tensor([100000, 4],"complex128"), Tensor([0],"complex64"), name="Normal_sample", )
paddle.add(Tensor([100000, 4],"float64"), Tensor([0],"float64"), name="Normal_sample", )
paddle.add(Tensor([101, 0],"float16"), Tensor([192],"float16"), )
paddle.add(Tensor([101, 192],"float16"), Tensor([0],"float16"), )
paddle.add(Tensor([12544, 0, 24],"float16"), Tensor([12544, 0, 24],"float16"), )
paddle.add(Tensor([12544, 0, 24],"float16"), Tensor([12544, 16, 24],"float16"), )
paddle.add(Tensor([12544, 0, 24],"float32"), Tensor([12544, 0, 24],"float32"), )
paddle.add(Tensor([12544, 0, 24],"float32"), Tensor([12544, 16, 24],"float32"), )
paddle.add(Tensor([12544, 16, 0],"float16"), Tensor([12544, 16, 0],"float16"), )
paddle.add(Tensor([12544, 16, 0],"float16"), Tensor([12544, 16, 24],"float16"), )
paddle.add(Tensor([12544, 16, 0],"float32"), Tensor([12544, 16, 0],"float32"), )
paddle.add(Tensor([12544, 16, 0],"float32"), Tensor([12544, 16, 24],"float32"), )
paddle.add(Tensor([12544, 16, 24],"float16"), Tensor([0, 16, 24],"float16"), )
paddle.add(Tensor([12544, 16, 24],"float16"), Tensor([12544, 0, 24],"float16"), )
paddle.add(Tensor([12544, 16, 24],"float16"), Tensor([12544, 16, 0],"float16"), )
paddle.add(Tensor([12544, 16, 24],"float32"), Tensor([0, 16, 24],"float32"), )
paddle.add(Tensor([12544, 16, 24],"float32"), Tensor([12544, 0, 24],"float32"), )
paddle.add(Tensor([12544, 16, 24],"float32"), Tensor([12544, 16, 0],"float32"), )
paddle.add(Tensor([13, 0, 99],"float32"), Tensor([99],"float32"), )
paddle.add(Tensor([13, 7, 0],"float32"), Tensor([99],"float32"), )
paddle.add(Tensor([13, 7, 99],"float32"), Tensor([0],"float32"), )
paddle.add(Tensor([16, 0, 25, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([16, 0, 3, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([16, 1, 0, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([16, 1, 25, 0],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([16, 1, 25, 1],"float32"), Tensor([0],"float32"), name="Normal_sample", )
paddle.add(Tensor([16, 2, 0, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([16, 2, 3, 0],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([16, 2, 3, 1],"float32"), Tensor([0],"float32"), name="Normal_sample", )
paddle.add(Tensor([168],"int64"), Tensor([0],"int64"), )
paddle.add(Tensor([2, 0, 1, 10],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([2, 0, 1, 1000],"float32"), Tensor([1000],"float32"), )
paddle.add(Tensor([2, 0, 3, 4],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.add(Tensor([2, 0, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.add(Tensor([2, 0, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.add(Tensor([2, 0, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.add(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), name="Normal_entropy", )
paddle.add(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), name=None, )
paddle.add(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), name="Normal_entropy", )
paddle.add(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), name=None, )
paddle.add(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), name="Normal_entropy", )
paddle.add(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 0],"float64"), Tensor([2, 2],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 0],"float64"), Tensor([2, 3],"float64"), name="Normal_entropy", )
paddle.add(Tensor([2, 2],"float64"), Tensor([0, 2],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 2],"float64"), Tensor([2, 0],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 3, 0, 10],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([2, 3, 0, 1000],"float32"), Tensor([1000],"float32"), )
paddle.add(Tensor([2, 3, 0, 4],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.add(Tensor([2, 3, 0, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.add(Tensor([2, 3, 0, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.add(Tensor([2, 3, 0, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.add(Tensor([2, 3, 1, 0],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([2, 3, 1, 0],"float32"), Tensor([1000],"float32"), )
paddle.add(Tensor([2, 3, 1, 10],"float32"), Tensor([0],"float32"), )
paddle.add(Tensor([2, 3, 1, 1000],"float32"), Tensor([0],"float32"), )
paddle.add(Tensor([2, 3, 3, 0],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.add(Tensor([2, 3, 3, 0],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([0, 1, 1],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([0, 1, 4],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 0, 1],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 0, 4],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 0],"float32"), )
paddle.add(Tensor([2, 3, 4, 0],"complex128"), Tensor([4, 5],"float64"), )
paddle.add(Tensor([2, 3, 4, 0],"complex64"), Tensor([4, 5],"float32"), )
paddle.add(Tensor([2, 3, 4, 5],"complex128"), Tensor([0, 5],"float64"), )
paddle.add(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 0],"float64"), )
paddle.add(Tensor([2, 3, 4, 5],"complex64"), Tensor([0, 5],"float32"), )
paddle.add(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 0],"float32"), )
paddle.add(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), name="Normal_entropy", )
paddle.add(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), name=None, )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), name="Normal_entropy", )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), name=None, )
paddle.add(Tensor([2, 3],"float64"), Tensor([0, 3],"float64"), name="Normal_entropy", )
paddle.add(Tensor([2, 3],"float64"), Tensor([2, 0],"float64"), name="Normal_entropy", )
paddle.add(Tensor([2],"float64"), Tensor([0],"float64"), name="Normal_entropy", )
paddle.add(Tensor([2],"float64"), Tensor([0],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([3],"float32"), Tensor([0],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([40, 0],"bfloat16"), Tensor([40, 0],"bfloat16"), name=None, )
paddle.add(Tensor([40, 0],"bfloat16"), Tensor([40, 40],"bfloat16"), name=None, )
paddle.add(Tensor([40, 40],"bfloat16"), Tensor([0, 40],"bfloat16"), name=None, )
paddle.add(Tensor([40, 40],"bfloat16"), Tensor([40, 0],"bfloat16"), name=None, )
paddle.add(Tensor([40],"int64"), Tensor([0, 40],"int64"), )
paddle.add(Tensor([40],"int64"), Tensor([300, 0],"int64"), )
paddle.add(Tensor([5, 0, 15, 20],"float32"), Tensor([5, 0, 15, 20],"float32"), name=None, )
paddle.add(Tensor([5, 0, 15, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), name=None, )
paddle.add(Tensor([5, 10, 0, 20],"float32"), Tensor([5, 10, 0, 20],"float32"), name=None, )
paddle.add(Tensor([5, 10, 0, 20],"float32"), Tensor([5, 10, 15, 20],"float32"), name=None, )
paddle.add(Tensor([5, 10, 15, 0],"float32"), Tensor([5, 10, 15, 0],"float32"), name=None, )
paddle.add(Tensor([5, 10, 15, 0],"float32"), Tensor([5, 10, 15, 20],"float32"), name=None, )
paddle.add(Tensor([5, 10, 15, 20],"float32"), Tensor([0, 10, 15, 20],"float32"), name=None, )
paddle.add(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 0, 15, 20],"float32"), name=None, )
paddle.add(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 0, 20],"float32"), name=None, )
paddle.add(Tensor([5, 10, 15, 20],"float32"), Tensor([5, 10, 15, 0],"float32"), name=None, )
paddle.add(Tensor([64, 0, 512, 1, 40],"float16"), Tensor([64, 0, 512, 1, 1],"float16"), )
paddle.add(Tensor([64, 0, 512, 1, 40],"float16"), Tensor([64, 26, 512, 1, 1],"float16"), )
paddle.add(Tensor([64, 0, 512, 1, 40],"float32"), Tensor([64, 0, 512, 1, 1],"float32"), )
paddle.add(Tensor([64, 0, 512, 1, 40],"float32"), Tensor([64, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([64, 1, 0, 1, 40],"float16"), Tensor([64, 26, 0, 1, 1],"float16"), )
paddle.add(Tensor([64, 1, 0, 1, 40],"float16"), Tensor([64, 26, 512, 1, 1],"float16"), )
paddle.add(Tensor([64, 1, 0, 1, 40],"float32"), Tensor([64, 26, 0, 1, 1],"float32"), )
paddle.add(Tensor([64, 1, 0, 1, 40],"float32"), Tensor([64, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([64, 1, 512, 0, 40],"float16"), Tensor([64, 26, 512, 0, 1],"float16"), )
paddle.add(Tensor([64, 1, 512, 0, 40],"float16"), Tensor([64, 26, 512, 1, 1],"float16"), )
paddle.add(Tensor([64, 1, 512, 0, 40],"float32"), Tensor([64, 26, 512, 0, 1],"float32"), )
paddle.add(Tensor([64, 1, 512, 0, 40],"float32"), Tensor([64, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([64, 1, 512, 1, 0],"float16"), Tensor([64, 26, 512, 1, 0],"float16"), )
paddle.add(Tensor([64, 1, 512, 1, 0],"float16"), Tensor([64, 26, 512, 1, 1],"float16"), )
paddle.add(Tensor([64, 1, 512, 1, 0],"float32"), Tensor([64, 26, 512, 1, 0],"float32"), )
paddle.add(Tensor([64, 1, 512, 1, 0],"float32"), Tensor([64, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float16"), Tensor([0, 26, 512, 1, 1],"float16"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float16"), Tensor([64, 0, 512, 1, 1],"float16"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float16"), Tensor([64, 26, 0, 1, 1],"float16"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float16"), Tensor([64, 26, 512, 0, 1],"float16"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float16"), Tensor([64, 26, 512, 1, 0],"float16"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float32"), Tensor([0, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float32"), Tensor([64, 0, 512, 1, 1],"float32"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float32"), Tensor([64, 26, 0, 1, 1],"float32"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float32"), Tensor([64, 26, 512, 0, 1],"float32"), )
paddle.add(Tensor([64, 1, 512, 1, 40],"float32"), Tensor([64, 26, 512, 1, 0],"float32"), )
paddle.add(Tensor([7, 0, 3],"complex128"), Tensor([2, 3],"complex128"), name="Normal_sample", )
paddle.add(Tensor([7, 0, 3],"complex64"), Tensor([2, 3],"complex64"), name="Normal_sample", )
paddle.add(Tensor([7, 0, 6],"float32"), Tensor([5, 6],"float32"), name="Uniform_sample", )
paddle.add(Tensor([7, 2, 0],"complex128"), Tensor([2, 3],"complex128"), name="Normal_sample", )
paddle.add(Tensor([7, 2, 0],"complex64"), Tensor([2, 3],"complex64"), name="Normal_sample", )
paddle.add(Tensor([7, 2, 3],"complex128"), Tensor([0, 3],"complex128"), name="Normal_sample", )
paddle.add(Tensor([7, 2, 3],"complex128"), Tensor([2, 0],"complex128"), name="Normal_sample", )
paddle.add(Tensor([7, 2, 3],"complex64"), Tensor([0, 3],"complex64"), name="Normal_sample", )
paddle.add(Tensor([7, 2, 3],"complex64"), Tensor([2, 0],"complex64"), name="Normal_sample", )
paddle.add(Tensor([7, 5, 0],"float32"), Tensor([5, 6],"float32"), name="Uniform_sample", )
paddle.add(Tensor([7, 5, 6],"float32"), Tensor([0, 6],"float32"), name="Uniform_sample", )
paddle.add(Tensor([7, 5, 6],"float32"), Tensor([5, 0],"float32"), name="Uniform_sample", )
paddle.add(x=Tensor([0, 1024, 14, 14],"float32"), y=Tensor([0, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([0, 1024, 14, 14],"float32"), y=Tensor([1, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([0, 1024, 36, 50],"float32"), y=Tensor([0, 1024, 36, 50],"float32"), )
paddle.add(x=Tensor([0, 1024, 36, 50],"float32"), y=Tensor([1, 1024, 36, 50],"float32"), )
paddle.add(x=Tensor([0, 1024, 4, 14, 14],"float32"), y=Tensor([0, 1024, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([0, 1024, 4, 14, 14],"float32"), y=Tensor([8, 1024, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([0, 128, 32, 14, 14],"float32"), y=Tensor([0, 128, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([0, 128, 32, 14, 14],"float32"), y=Tensor([8, 128, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([0, 24],"float32"), y=Tensor([0, 24],"float32"), )
paddle.add(x=Tensor([0, 24],"float32"), y=Tensor([2, 24],"float32"), )
paddle.add(x=Tensor([0, 3, 3],"float32"), y=Tensor([0, 3, 3],"float32"), )
paddle.add(x=Tensor([0, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.add(x=Tensor([0, 3, 3],"float64"), y=Tensor([0, 3, 3],"float64"), )
paddle.add(x=Tensor([0, 3, 3],"float64"), y=Tensor([1, 3, 3],"float64"), )
paddle.add(x=Tensor([1, 0, 14, 14],"float32"), y=Tensor([1, 0, 14, 14],"float32"), )
paddle.add(x=Tensor([1, 0, 14, 14],"float32"), y=Tensor([1, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([1, 0, 36, 50],"float32"), y=Tensor([1, 0, 36, 50],"float32"), )
paddle.add(x=Tensor([1, 0, 36, 50],"float32"), y=Tensor([1, 1024, 36, 50],"float32"), )
paddle.add(x=Tensor([1, 1024, 0, 14],"float32"), y=Tensor([1, 1024, 0, 14],"float32"), )
paddle.add(x=Tensor([1, 1024, 0, 14],"float32"), y=Tensor([1, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([1, 1024, 0, 50],"float32"), y=Tensor([1, 1024, 0, 50],"float32"), )
paddle.add(x=Tensor([1, 1024, 0, 50],"float32"), y=Tensor([1, 1024, 36, 50],"float32"), )
paddle.add(x=Tensor([1, 1024, 14, 0],"float32"), y=Tensor([1, 1024, 14, 0],"float32"), )
paddle.add(x=Tensor([1, 1024, 14, 0],"float32"), y=Tensor([1, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([1, 1024, 14, 14],"float32"), y=Tensor([0, 1024, 14, 14],"float32"), )
paddle.add(x=Tensor([1, 1024, 14, 14],"float32"), y=Tensor([1, 0, 14, 14],"float32"), )
paddle.add(x=Tensor([1, 1024, 14, 14],"float32"), y=Tensor([1, 1024, 0, 14],"float32"), )
paddle.add(x=Tensor([1, 1024, 14, 14],"float32"), y=Tensor([1, 1024, 14, 0],"float32"), )
paddle.add(x=Tensor([1, 1024, 36, 0],"float32"), y=Tensor([1, 1024, 36, 0],"float32"), )
paddle.add(x=Tensor([1, 1024, 36, 0],"float32"), y=Tensor([1, 1024, 36, 50],"float32"), )
paddle.add(x=Tensor([1, 1024, 36, 50],"float32"), y=Tensor([0, 1024, 36, 50],"float32"), )
paddle.add(x=Tensor([1, 1024, 36, 50],"float32"), y=Tensor([1, 0, 36, 50],"float32"), )
paddle.add(x=Tensor([1, 1024, 36, 50],"float32"), y=Tensor([1, 1024, 0, 50],"float32"), )
paddle.add(x=Tensor([1, 1024, 36, 50],"float32"), y=Tensor([1, 1024, 36, 0],"float32"), )
paddle.add(x=Tensor([2, 0],"float32"), y=Tensor([2, 0],"float32"), )
paddle.add(x=Tensor([2, 0],"float32"), y=Tensor([2, 24],"float32"), )
paddle.add(x=Tensor([2, 24],"float32"), y=Tensor([0, 24],"float32"), )
paddle.add(x=Tensor([2, 24],"float32"), y=Tensor([2, 0],"float32"), )
paddle.add(x=Tensor([3, 0, 3],"float32"), y=Tensor([3, 0, 3],"float32"), )
paddle.add(x=Tensor([3, 0, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.add(x=Tensor([3, 0, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.add(x=Tensor([3, 0, 3],"float64"), y=Tensor([1, 3, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 0],"float32"), y=Tensor([3, 3, 0],"float32"), )
paddle.add(x=Tensor([3, 3, 0],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.add(x=Tensor([3, 3, 0],"float64"), y=Tensor([1, 3, 0],"float64"), )
paddle.add(x=Tensor([3, 3, 0],"float64"), y=Tensor([1, 3, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float32"), y=Tensor([0, 3, 3],"float32"), )
paddle.add(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 0, 3],"float32"), )
paddle.add(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 0],"float32"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([0, 3, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([1, 3, 0],"float64"), )
paddle.add(x=Tensor([8, 0, 32, 14, 14],"float32"), y=Tensor([8, 0, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 0, 32, 14, 14],"float32"), y=Tensor([8, 128, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 0, 4, 14, 14],"float32"), y=Tensor([8, 0, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 0, 4, 14, 14],"float32"), y=Tensor([8, 1024, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 0, 14, 14],"float32"), y=Tensor([8, 1024, 0, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 0, 14, 14],"float32"), y=Tensor([8, 1024, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 0, 14],"float32"), y=Tensor([8, 1024, 4, 0, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 0, 14],"float32"), y=Tensor([8, 1024, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 14, 0],"float32"), y=Tensor([8, 1024, 4, 14, 0],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 14, 0],"float32"), y=Tensor([8, 1024, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 14, 14],"float32"), y=Tensor([0, 1024, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 14, 14],"float32"), y=Tensor([8, 0, 4, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 14, 14],"float32"), y=Tensor([8, 1024, 0, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 14, 14],"float32"), y=Tensor([8, 1024, 4, 0, 14],"float32"), )
paddle.add(x=Tensor([8, 1024, 4, 14, 14],"float32"), y=Tensor([8, 1024, 4, 14, 0],"float32"), )
paddle.add(x=Tensor([8, 128, 0, 14, 14],"float32"), y=Tensor([8, 128, 0, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 0, 14, 14],"float32"), y=Tensor([8, 128, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 0, 14],"float32"), y=Tensor([8, 128, 32, 0, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 0, 14],"float32"), y=Tensor([8, 128, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 14, 0],"float32"), y=Tensor([8, 128, 32, 14, 0],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 14, 0],"float32"), y=Tensor([8, 128, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 14, 14],"float32"), y=Tensor([0, 128, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 14, 14],"float32"), y=Tensor([8, 0, 32, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 14, 14],"float32"), y=Tensor([8, 128, 0, 14, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 14, 14],"float32"), y=Tensor([8, 128, 32, 0, 14],"float32"), )
paddle.add(x=Tensor([8, 128, 32, 14, 14],"float32"), y=Tensor([8, 128, 32, 14, 0],"float32"), )
paddle.add_n(inputs=Tensor([0, 4, 4, 4],"float64"), )
paddle.add_n(inputs=Tensor([0, 4, 4],"float64"), )
paddle.add_n(inputs=Tensor([0, 4],"float64"), )
paddle.add_n(inputs=Tensor([0],"float32"), )
paddle.add_n(inputs=Tensor([0],"float64"), )
paddle.add_n(inputs=Tensor([4, 0, 4, 4],"float64"), )
paddle.add_n(inputs=Tensor([4, 0, 4],"float64"), )
paddle.add_n(inputs=Tensor([4, 0],"float64"), )
paddle.add_n(inputs=Tensor([4, 4, 0, 4],"float64"), )
paddle.add_n(inputs=Tensor([4, 4, 0],"float64"), )
paddle.add_n(inputs=Tensor([4, 4, 4, 0],"float64"), )
paddle.add_n(list[Tensor([0, 1, 10, 5, 5],"float32"),Tensor([0, 1, 10, 5, 5],"float32"),Tensor([0, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([0, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([0, 128, 32, 32],"float16"),Tensor([0, 128, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([0, 128, 32, 32],"float16"),Tensor([64, 128, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([0, 128, 32, 32],"float32"),Tensor([0, 128, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([0, 128, 32, 32],"float32"),Tensor([64, 128, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([0, 200],"int32"),Tensor([0, 200],"int32"),], )
paddle.add_n(list[Tensor([0, 200],"int32"),Tensor([100, 200],"int32"),], )
paddle.add_n(list[Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([0, 256],"complex128"),], )
paddle.add_n(list[Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([0, 256],"complex64"),], )
paddle.add_n(list[Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),], )
paddle.add_n(list[Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),], )
paddle.add_n(list[Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([0, 40],"float64"),Tensor([0, 40],"float64"),Tensor([0, 40],"float64"),], )
paddle.add_n(list[Tensor([0, 40],"float64"),Tensor([3, 40],"float64"),Tensor([3, 40],"float64"),], )
paddle.add_n(list[Tensor([0],"complex128"),Tensor([0],"complex128"),], )
paddle.add_n(list[Tensor([0],"complex128"),Tensor([3],"complex128"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([0],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([10, 0, 10, 5, 5],"float32"),Tensor([10, 0, 10, 5, 5],"float32"),Tensor([10, 0, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 0, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 0, 5, 5],"float32"),Tensor([10, 1, 0, 5, 5],"float32"),Tensor([10, 1, 0, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 0, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 0, 5],"float32"),Tensor([10, 1, 10, 0, 5],"float32"),Tensor([10, 1, 10, 0, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 0, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 0],"float32"),Tensor([10, 1, 10, 5, 0],"float32"),Tensor([10, 1, 10, 5, 0],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 0],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([0, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 0, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 0, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 0, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 0],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([0, 1, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 0, 10, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 0, 5, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 0, 5],"float32"),], )
paddle.add_n(list[Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 5],"float32"),Tensor([10, 1, 10, 5, 0],"float32"),], )
paddle.add_n(list[Tensor([100, 0],"int32"),Tensor([100, 0],"int32"),], )
paddle.add_n(list[Tensor([100, 0],"int32"),Tensor([100, 200],"int32"),], )
paddle.add_n(list[Tensor([100, 200],"int32"),Tensor([0, 200],"int32"),], )
paddle.add_n(list[Tensor([100, 200],"int32"),Tensor([100, 0],"int32"),], )
paddle.add_n(list[Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 0],"complex128"),], )
paddle.add_n(list[Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 0],"complex64"),], )
paddle.add_n(list[Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),Tensor([16, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([0, 256],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 256],"complex128"),Tensor([16, 0],"complex128"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),Tensor([16, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([0, 256],"complex64"),], )
paddle.add_n(list[Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 256],"complex64"),Tensor([16, 0],"complex64"),], )
paddle.add_n(list[Tensor([2],"float32"),Tensor([0],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.add_n(list[Tensor([2],"float32"),Tensor([2],"float32"),Tensor([0],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.add_n(list[Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([0],"float32"),Tensor([2],"float32"),], )
paddle.add_n(list[Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([0],"float32"),], )
paddle.add_n(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.add_n(list[Tensor([3, 0],"float64"),Tensor([3, 40],"float64"),Tensor([3, 40],"float64"),], )
paddle.add_n(list[Tensor([3, 40],"float64"),Tensor([0, 40],"float64"),Tensor([3, 40],"float64"),], )
paddle.add_n(list[Tensor([3, 40],"float64"),Tensor([3, 0],"float64"),Tensor([3, 40],"float64"),], )
paddle.add_n(list[Tensor([3, 40],"float64"),Tensor([3, 40],"float64"),Tensor([0, 40],"float64"),], )
paddle.add_n(list[Tensor([3, 40],"float64"),Tensor([3, 40],"float64"),Tensor([3, 0],"float64"),], )
paddle.add_n(list[Tensor([3],"complex128"),Tensor([0],"complex128"),], )
paddle.add_n(list[Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.add_n(list[Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.add_n(list[Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.add_n(list[Tensor([64, 0, 32, 32],"float16"),Tensor([64, 0, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 0, 32, 32],"float16"),Tensor([64, 128, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 0, 32, 32],"float32"),Tensor([64, 0, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 0, 32, 32],"float32"),Tensor([64, 128, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 0, 32],"float16"),Tensor([64, 128, 0, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 0, 32],"float16"),Tensor([64, 128, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 0, 32],"float32"),Tensor([64, 128, 0, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 0, 32],"float32"),Tensor([64, 128, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 32, 0],"float16"),Tensor([64, 128, 32, 0],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 32, 0],"float16"),Tensor([64, 128, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 32, 0],"float32"),Tensor([64, 128, 32, 0],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 32, 0],"float32"),Tensor([64, 128, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float16"),Tensor([0, 128, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float16"),Tensor([64, 0, 32, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float16"),Tensor([64, 128, 0, 32],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float16"),Tensor([64, 128, 32, 0],"float16"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float32"),Tensor([0, 128, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float32"),Tensor([64, 0, 32, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float32"),Tensor([64, 128, 0, 32],"float32"),], )
paddle.add_n(list[Tensor([64, 128, 32, 32],"float32"),Tensor([64, 128, 32, 0],"float32"),], )
paddle.add_n(Tensor([0, 13, 11],"float32"), )
paddle.add_n(Tensor([2, 0, 11],"float32"), )
paddle.add_n(Tensor([2, 13, 0],"float32"), )
paddle.allclose(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.allclose(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.allclose(Tensor([0, 13, 128],"float32"), Tensor([0, 13, 128],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 13, 128],"float32"), Tensor([13, 13, 128],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 13, 32],"float32"), Tensor([0, 13, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 13, 32],"float32"), Tensor([13, 13, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 13],"float32"), Tensor([0, 13],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 13],"float32"), Tensor([13, 13],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 16],"float32"), Tensor([0, 16],"float32"), )
paddle.allclose(Tensor([0, 16],"float32"), Tensor([0, 16],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([0, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.allclose(Tensor([0, 16],"float32"), Tensor([64, 16],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 2],"float32"), Tensor([13, 2],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([0, 20, 200],"float32"), Tensor([0, 20, 200],"float32"), )
paddle.allclose(Tensor([0, 20, 200],"float32"), Tensor([1, 20, 200],"float32"), )
paddle.allclose(Tensor([0, 20, 32],"float32"), Tensor([0, 20, 32],"float32"), )
paddle.allclose(Tensor([0, 20, 32],"float32"), Tensor([1, 20, 32],"float32"), )
paddle.allclose(Tensor([0, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), )
paddle.allclose(Tensor([0, 3, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), )
paddle.allclose(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), atol=0.0001, )
paddle.allclose(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), atol=0.01, )
paddle.allclose(Tensor([0, 3],"float32"), Tensor([13, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([0, 3],"float32"), Tensor([13, 3],"float32"), atol=0.01, )
paddle.allclose(Tensor([0, 3],"float32"), Tensor([14, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), atol=0.0001, )
paddle.allclose(Tensor([0, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.allclose(Tensor([0, 32],"float32"), Tensor([1124, 32],"float32"), )
paddle.allclose(Tensor([0, 5, 32],"float32"), Tensor([0, 5, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([0, 5, 32],"float32"), Tensor([1, 5, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([0, 5],"float32"), Tensor([0, 5],"float32"), atol=1e-06, )
paddle.allclose(Tensor([0, 5],"float32"), Tensor([4, 5],"float32"), atol=1e-06, )
paddle.allclose(Tensor([0, 64, 16],"float32"), Tensor([0, 64, 16],"float32"), atol=1e-05, )
paddle.allclose(Tensor([0, 64, 16],"float32"), Tensor([14, 64, 16],"float32"), atol=1e-05, )
paddle.allclose(Tensor([0, 8, 32],"float32"), Tensor([0, 8, 32],"float32"), atol=0.0001, )
paddle.allclose(Tensor([0, 8, 32],"float32"), Tensor([13, 8, 32],"float32"), atol=0.0001, )
paddle.allclose(Tensor([0, 8],"float32"), Tensor([0, 8],"float32"), atol=1e-06, )
paddle.allclose(Tensor([0, 8],"float32"), Tensor([0, 8],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([0, 8],"float32"), Tensor([1, 8],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([0, 8],"float32"), Tensor([2, 8],"float32"), atol=1e-06, )
paddle.allclose(Tensor([0],"bool"), Tensor([0],"bool"), 0.0, 0.0, False, )
paddle.allclose(Tensor([0],"bool"), Tensor([1],"bool"), 0.0, 0.0, False, )
paddle.allclose(Tensor([0],"float16"), Tensor([0],"float16"), atol=0.001, )
paddle.allclose(Tensor([0],"float16"), Tensor([14],"float16"), atol=0.001, )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), atol=0.0001, )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), atol=0.001, )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), atol=0.5, )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), atol=1e-06, )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), rtol=0.01, atol=0.0, name="test_7", )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_1", )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_3", )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_5", )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_2", )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_4", )
paddle.allclose(Tensor([0],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_6", )
paddle.allclose(Tensor([0],"float32"), Tensor([1],"float32"), rtol=0.01, atol=0.0, name="test_7", )
paddle.allclose(Tensor([0],"float32"), Tensor([13],"float32"), atol=0.001, )
paddle.allclose(Tensor([0],"float32"), Tensor([14],"float32"), atol=0.5, )
paddle.allclose(Tensor([0],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_1", )
paddle.allclose(Tensor([0],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_3", )
paddle.allclose(Tensor([0],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_5", )
paddle.allclose(Tensor([0],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_2", )
paddle.allclose(Tensor([0],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_4", )
paddle.allclose(Tensor([0],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_6", )
paddle.allclose(Tensor([0],"float32"), Tensor([30],"float32"), atol=0.0001, )
paddle.allclose(Tensor([0],"float32"), Tensor([30],"float32"), atol=1e-06, )
paddle.allclose(Tensor([0],"float32"), Tensor([30],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([0],"float32"), Tensor([3072],"float32"), )
paddle.allclose(Tensor([0],"float32"), Tensor([32],"float32"), )
paddle.allclose(Tensor([0],"float32"), Tensor([64],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([0],"float64"), Tensor([0],"float64"), atol=0.0001, rtol=0.0001, )
paddle.allclose(Tensor([0],"float64"), Tensor([0],"float64"), rtol=0.015, atol=0.0, name="test_8", )
paddle.allclose(Tensor([0],"float64"), Tensor([1],"float64"), atol=0.0001, rtol=0.0001, )
paddle.allclose(Tensor([0],"float64"), Tensor([1],"float64"), rtol=0.015, atol=0.0, name="test_8", )
paddle.allclose(Tensor([0],"float64"), Tensor([512],"float64"), atol=0.0001, rtol=0.0001, )
paddle.allclose(Tensor([0],"int32"), Tensor([0],"int32"), 50.0, 48.0, False, )
paddle.allclose(Tensor([0],"int32"), Tensor([0],"int32"), 50.0, 49.0, False, )
paddle.allclose(Tensor([0],"int32"), Tensor([1],"int32"), 50.0, 48.0, False, )
paddle.allclose(Tensor([0],"int32"), Tensor([1],"int32"), 50.0, 49.0, False, )
paddle.allclose(Tensor([0],"int64"), Tensor([0],"int64"), 50.0, 48.0, False, )
paddle.allclose(Tensor([0],"int64"), Tensor([0],"int64"), 50.0, 49.0, False, )
paddle.allclose(Tensor([0],"int64"), Tensor([1],"int64"), 50.0, 48.0, False, )
paddle.allclose(Tensor([0],"int64"), Tensor([1],"int64"), 50.0, 49.0, False, )
paddle.allclose(Tensor([1, 0, 200],"float32"), Tensor([1, 0, 200],"float32"), )
paddle.allclose(Tensor([1, 0, 200],"float32"), Tensor([1, 20, 200],"float32"), )
paddle.allclose(Tensor([1, 0, 32],"float32"), Tensor([1, 0, 32],"float32"), )
paddle.allclose(Tensor([1, 0, 32],"float32"), Tensor([1, 0, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([1, 0, 32],"float32"), Tensor([1, 20, 32],"float32"), )
paddle.allclose(Tensor([1, 0, 32],"float32"), Tensor([1, 5, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([1, 0],"float32"), Tensor([1, 8],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([1, 20, 0],"float32"), Tensor([1, 20, 0],"float32"), )
paddle.allclose(Tensor([1, 20, 0],"float32"), Tensor([1, 20, 200],"float32"), )
paddle.allclose(Tensor([1, 20, 0],"float32"), Tensor([1, 20, 32],"float32"), )
paddle.allclose(Tensor([1, 20, 200],"float32"), Tensor([0, 20, 200],"float32"), )
paddle.allclose(Tensor([1, 20, 200],"float32"), Tensor([1, 0, 200],"float32"), )
paddle.allclose(Tensor([1, 20, 200],"float32"), Tensor([1, 20, 0],"float32"), )
paddle.allclose(Tensor([1, 20, 32],"float32"), Tensor([0, 20, 32],"float32"), )
paddle.allclose(Tensor([1, 20, 32],"float32"), Tensor([1, 0, 32],"float32"), )
paddle.allclose(Tensor([1, 20, 32],"float32"), Tensor([1, 20, 0],"float32"), )
paddle.allclose(Tensor([1, 5, 0],"float32"), Tensor([1, 5, 0],"float32"), atol=1e-05, )
paddle.allclose(Tensor([1, 5, 0],"float32"), Tensor([1, 5, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([1, 5, 32],"float32"), Tensor([0, 5, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([1, 5, 32],"float32"), Tensor([1, 0, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([1, 5, 32],"float32"), Tensor([1, 5, 0],"float32"), atol=1e-05, )
paddle.allclose(Tensor([1, 8],"float32"), Tensor([0, 8],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([1, 8],"float32"), Tensor([1, 0],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([1],"bool"), Tensor([0],"bool"), 0.0, 0.0, False, )
paddle.allclose(Tensor([1],"float32"), Tensor([0],"float32"), rtol=0.01, atol=0.0, name="test_7", )
paddle.allclose(Tensor([1],"float64"), Tensor([0],"float64"), atol=0.0001, rtol=0.0001, )
paddle.allclose(Tensor([1],"float64"), Tensor([0],"float64"), rtol=0.015, atol=0.0, name="test_8", )
paddle.allclose(Tensor([1],"int32"), Tensor([0],"int32"), 50.0, 48.0, False, )
paddle.allclose(Tensor([1],"int32"), Tensor([0],"int32"), 50.0, 49.0, False, )
paddle.allclose(Tensor([1],"int64"), Tensor([0],"int64"), 50.0, 48.0, False, )
paddle.allclose(Tensor([1],"int64"), Tensor([0],"int64"), 50.0, 49.0, False, )
paddle.allclose(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, )
paddle.allclose(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.allclose(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.allclose(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, )
paddle.allclose(Tensor([1124, 0],"float32"), Tensor([1124, 0],"float32"), )
paddle.allclose(Tensor([1124, 0],"float32"), Tensor([1124, 32],"float32"), )
paddle.allclose(Tensor([1124, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.allclose(Tensor([1124, 32],"float32"), Tensor([1124, 0],"float32"), )
paddle.allclose(Tensor([13, 0, 128],"float32"), Tensor([13, 0, 128],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 0, 128],"float32"), Tensor([13, 13, 128],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 0, 32],"float32"), Tensor([13, 0, 32],"float32"), atol=0.0001, )
paddle.allclose(Tensor([13, 0, 32],"float32"), Tensor([13, 0, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 0, 32],"float32"), Tensor([13, 13, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 0, 32],"float32"), Tensor([13, 8, 32],"float32"), atol=0.0001, )
paddle.allclose(Tensor([13, 0],"float32"), Tensor([13, 0],"float32"), atol=0.001, )
paddle.allclose(Tensor([13, 0],"float32"), Tensor([13, 0],"float32"), atol=0.01, )
paddle.allclose(Tensor([13, 0],"float32"), Tensor([13, 0],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 0],"float32"), Tensor([13, 13],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 0],"float32"), Tensor([13, 2],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 0],"float32"), Tensor([13, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([13, 0],"float32"), Tensor([13, 3],"float32"), atol=0.01, )
paddle.allclose(Tensor([13, 13, 0],"float32"), Tensor([13, 13, 0],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13, 0],"float32"), Tensor([13, 13, 128],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13, 0],"float32"), Tensor([13, 13, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13, 128],"float32"), Tensor([0, 13, 128],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13, 128],"float32"), Tensor([13, 0, 128],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13, 128],"float32"), Tensor([13, 13, 0],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13, 32],"float32"), Tensor([0, 13, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13, 32],"float32"), Tensor([13, 0, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13, 32],"float32"), Tensor([13, 13, 0],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13],"float32"), Tensor([0, 13],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13],"float32"), Tensor([13, 0],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 2],"float32"), Tensor([0, 2],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 2],"float32"), Tensor([13, 0],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 3],"float32"), Tensor([0, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([13, 3],"float32"), Tensor([0, 3],"float32"), atol=0.01, )
paddle.allclose(Tensor([13, 3],"float32"), Tensor([13, 0],"float32"), atol=0.001, )
paddle.allclose(Tensor([13, 3],"float32"), Tensor([13, 0],"float32"), atol=0.01, )
paddle.allclose(Tensor([13, 8, 0],"float32"), Tensor([13, 8, 0],"float32"), atol=0.0001, )
paddle.allclose(Tensor([13, 8, 0],"float32"), Tensor([13, 8, 32],"float32"), atol=0.0001, )
paddle.allclose(Tensor([13, 8, 32],"float32"), Tensor([0, 8, 32],"float32"), atol=0.0001, )
paddle.allclose(Tensor([13, 8, 32],"float32"), Tensor([13, 0, 32],"float32"), atol=0.0001, )
paddle.allclose(Tensor([13, 8, 32],"float32"), Tensor([13, 8, 0],"float32"), atol=0.0001, )
paddle.allclose(Tensor([13],"float32"), Tensor([0],"float32"), atol=0.001, )
paddle.allclose(Tensor([14, 0, 16],"float32"), Tensor([14, 0, 16],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 0, 16],"float32"), Tensor([14, 64, 16],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 0],"float32"), Tensor([14, 0],"float32"), atol=0.001, )
paddle.allclose(Tensor([14, 0],"float32"), Tensor([14, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([14, 3],"float32"), Tensor([0, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([14, 3],"float32"), Tensor([14, 0],"float32"), atol=0.001, )
paddle.allclose(Tensor([14, 64, 0],"float32"), Tensor([14, 64, 0],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 64, 0],"float32"), Tensor([14, 64, 16],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 64, 16],"float32"), Tensor([0, 64, 16],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 64, 16],"float32"), Tensor([14, 0, 16],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14, 64, 16],"float32"), Tensor([14, 64, 0],"float32"), atol=1e-05, )
paddle.allclose(Tensor([14],"float16"), Tensor([0],"float16"), atol=0.001, )
paddle.allclose(Tensor([14],"float32"), Tensor([0],"float32"), atol=0.5, )
paddle.allclose(Tensor([16, 0],"float32"), Tensor([16, 0],"float32"), )
paddle.allclose(Tensor([16, 0],"float32"), Tensor([16, 16],"float32"), )
paddle.allclose(Tensor([16, 16],"float32"), Tensor([0, 16],"float32"), )
paddle.allclose(Tensor([16, 16],"float32"), Tensor([16, 0],"float32"), )
paddle.allclose(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), )
paddle.allclose(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), )
paddle.allclose(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), atol=0.0001, )
paddle.allclose(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), atol=1e-06, )
paddle.allclose(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), atol=0.0001, )
paddle.allclose(Tensor([2, 0],"float32"), Tensor([2, 8],"float32"), atol=1e-06, )
paddle.allclose(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), )
paddle.allclose(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), )
paddle.allclose(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), )
paddle.allclose(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), )
paddle.allclose(Tensor([2, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), )
paddle.allclose(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), )
paddle.allclose(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), )
paddle.allclose(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 8, 0],"float32"), )
paddle.allclose(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), atol=0.0001, )
paddle.allclose(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), atol=0.0001, )
paddle.allclose(Tensor([2, 8],"float32"), Tensor([0, 8],"float32"), atol=1e-06, )
paddle.allclose(Tensor([2, 8],"float32"), Tensor([2, 0],"float32"), atol=1e-06, )
paddle.allclose(Tensor([2],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_1", )
paddle.allclose(Tensor([2],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_3", )
paddle.allclose(Tensor([2],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_5", )
paddle.allclose(Tensor([2],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_2", )
paddle.allclose(Tensor([2],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_4", )
paddle.allclose(Tensor([2],"float32"), Tensor([0],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_6", )
paddle.allclose(Tensor([30],"float32"), Tensor([0],"float32"), atol=0.0001, )
paddle.allclose(Tensor([30],"float32"), Tensor([0],"float32"), atol=1e-06, )
paddle.allclose(Tensor([30],"float32"), Tensor([0],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([3072],"float32"), Tensor([0],"float32"), )
paddle.allclose(Tensor([32],"float32"), Tensor([0],"float32"), )
paddle.allclose(Tensor([4, 0],"float32"), Tensor([4, 0],"float32"), atol=1e-06, )
paddle.allclose(Tensor([4, 0],"float32"), Tensor([4, 5],"float32"), atol=1e-06, )
paddle.allclose(Tensor([4, 5],"float32"), Tensor([0, 5],"float32"), atol=1e-06, )
paddle.allclose(Tensor([4, 5],"float32"), Tensor([4, 0],"float32"), atol=1e-06, )
paddle.allclose(Tensor([512],"float64"), Tensor([0],"float64"), atol=0.0001, rtol=0.0001, )
paddle.allclose(Tensor([64, 0],"float32"), Tensor([64, 0],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([64, 0],"float32"), Tensor([64, 16],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([64, 16],"float32"), Tensor([0, 16],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([64, 16],"float32"), Tensor([64, 0],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([64],"float32"), Tensor([0],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(tuple(Tensor([0, 20, 100],"float32"),), tuple(Tensor([0, 20, 100],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([0, 20, 100],"float32"),), tuple(Tensor([2, 20, 100],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([0, 20, 32],"float32"),), tuple(Tensor([0, 20, 32],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([0, 20, 32],"float32"),), tuple(Tensor([2, 20, 32],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([0, 3],"float32"),), tuple(Tensor([0, 3],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([0, 3],"float32"),), tuple(Tensor([2, 3],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([0, 7, 16],"float32"),Tensor([0, 7, 16],"float32"),), tuple(Tensor([0, 7, 16],"float32"),Tensor([0, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([0, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([0, 7],"float32"),Tensor([0, 7],"float32"),), tuple(Tensor([0, 7],"float32"),Tensor([0, 7],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([0, 7],"float32"),Tensor([13, 7],"float32"),), tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),), tuple(Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 0, 16],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),), tuple(Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 0],"float32"),Tensor([13, 7],"float32"),), tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),), tuple(Tensor([13, 7, 0],"float32"),Tensor([13, 7, 0],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 0],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([0, 7, 16],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 0, 16],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 0],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([0, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([13, 0, 16],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([13, 7, 0],"float32"),Tensor([13, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([0, 7, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 0, 16],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),), tuple(Tensor([13, 7, 16],"float32"),Tensor([13, 7, 0],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7],"float32"),Tensor([0, 7],"float32"),), tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7],"float32"),Tensor([13, 0],"float32"),), tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), tuple(Tensor([0, 7],"float32"),Tensor([13, 7],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), tuple(Tensor([13, 0],"float32"),Tensor([13, 7],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), tuple(Tensor([13, 7],"float32"),Tensor([0, 7],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([13, 7],"float32"),Tensor([13, 7],"float32"),), tuple(Tensor([13, 7],"float32"),Tensor([13, 0],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 0, 100],"float32"),), tuple(Tensor([2, 0, 100],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 0, 100],"float32"),), tuple(Tensor([2, 20, 100],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 0, 32],"float32"),), tuple(Tensor([2, 0, 32],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 0, 32],"float32"),), tuple(Tensor([2, 20, 32],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 0],"float32"),), tuple(Tensor([2, 0],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 0],"float32"),), tuple(Tensor([2, 3],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 0],"float32"),), tuple(Tensor([2, 20, 0],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 0],"float32"),), tuple(Tensor([2, 20, 100],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 0],"float32"),), tuple(Tensor([2, 20, 32],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 100],"float32"),), tuple(Tensor([0, 20, 100],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 100],"float32"),), tuple(Tensor([2, 0, 100],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 100],"float32"),), tuple(Tensor([2, 20, 0],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 32],"float32"),), tuple(Tensor([0, 20, 32],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 32],"float32"),), tuple(Tensor([2, 0, 32],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 20, 32],"float32"),), tuple(Tensor([2, 20, 0],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 3],"float32"),), tuple(Tensor([0, 3],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(tuple(Tensor([2, 3],"float32"),), tuple(Tensor([2, 0],"float32"),), rtol=0.0001, atol=0.0001, )
paddle.allclose(x=Tensor([0, 2, 2, 3],"float64"), y=Tensor([0, 2, 2, 3],"float64"), )
paddle.allclose(x=Tensor([0, 2, 2, 3],"float64"), y=Tensor([0, 2, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([0, 2, 2, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), )
paddle.allclose(x=Tensor([0, 2, 2, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([0],"float32"), y=Tensor([0],"float32"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float32"), y=Tensor([1],"float32"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), rtol=0.01, atol=0.0, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), rtol=1e-05, atol=0.001, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), rtol=1e-05, atol=0.001, equal_nan=True, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), rtol=1e-06, atol=0.001, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), rtol=1e-06, atol=0.001, equal_nan=True, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([1],"float64"), )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([1],"float64"), rtol=0.01, atol=0.0, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([1],"float64"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([1],"float64"), rtol=1e-05, atol=0.001, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([1],"float64"), rtol=1e-05, atol=0.001, equal_nan=True, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([1],"float64"), rtol=1e-06, atol=0.001, equal_nan=False, )
paddle.allclose(x=Tensor([0],"float64"), y=Tensor([3],"float64"), rtol=1e-06, atol=0.001, equal_nan=True, )
paddle.allclose(x=Tensor([1],"float32"), y=Tensor([0],"float32"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([0],"float64"), rtol=0.01, atol=0.0, equal_nan=False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([0],"float64"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([0],"float64"), rtol=1e-05, atol=0.001, equal_nan=False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([0],"float64"), rtol=1e-05, atol=0.001, equal_nan=True, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([0],"float64"), rtol=1e-06, atol=0.001, equal_nan=False, )
paddle.allclose(x=Tensor([2, 0, 2, 3],"float64"), y=Tensor([2, 0, 2, 3],"float64"), )
paddle.allclose(x=Tensor([2, 0, 2, 3],"float64"), y=Tensor([2, 0, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([2, 0, 2, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), )
paddle.allclose(x=Tensor([2, 0, 2, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([2, 2, 0, 3],"float64"), y=Tensor([2, 2, 0, 3],"float64"), )
paddle.allclose(x=Tensor([2, 2, 0, 3],"float64"), y=Tensor([2, 2, 0, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([2, 2, 0, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), )
paddle.allclose(x=Tensor([2, 2, 0, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([2, 2, 2, 0],"float64"), y=Tensor([2, 2, 2, 0],"float64"), )
paddle.allclose(x=Tensor([2, 2, 2, 0],"float64"), y=Tensor([2, 2, 2, 0],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([2, 2, 2, 0],"float64"), y=Tensor([2, 2, 2, 3],"float64"), )
paddle.allclose(x=Tensor([2, 2, 2, 0],"float64"), y=Tensor([2, 2, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([0, 2, 2, 3],"float64"), )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([0, 2, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 0, 2, 3],"float64"), )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 0, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 2, 0, 3],"float64"), )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 2, 0, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 2, 2, 0],"float64"), )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 2, 2, 0],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(x=Tensor([3],"float64"), y=Tensor([0],"float64"), rtol=1e-06, atol=0.001, equal_nan=True, )
paddle.argmax(Tensor([0, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([0, 2, 1024, 1024],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([0, 2, 496, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 0, 1024, 1024],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 0, 496, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 0, 1024],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 0, 512],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 1024, 0],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([1, 2, 496, 0],"float32"), axis=1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([10, 0],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmax(x=Tensor([0, 1],"int64"), keepdim=None, )
paddle.argmax(x=Tensor([0, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([0, 3, 5],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmax(x=Tensor([0, 3],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmax(x=Tensor([0, 3],"int64"), dtype="int32", )
paddle.argmax(x=Tensor([3, 0, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 0, 5],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmax(x=Tensor([3, 0],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmax(x=Tensor([3, 0],"int64"), dtype="int32", )
paddle.argmax(x=Tensor([3, 0],"int64"), keepdim=None, )
paddle.argmax(x=Tensor([3, 3, 0, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 3, 0],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmax(x=Tensor([3, 3, 2, 0],"float64"), axis=-1, dtype="int64", )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmin(Tensor([10, 0],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmin(x=Tensor([0, 1],"int64"), keepdim=None, )
paddle.argmin(x=Tensor([0, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([0, 3, 5],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmin(x=Tensor([0, 3],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmin(x=Tensor([0, 3],"int64"), dtype="int32", )
paddle.argmin(x=Tensor([3, 0, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([3, 0, 5],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmin(x=Tensor([3, 0],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmin(x=Tensor([3, 0],"int64"), dtype="int32", )
paddle.argmin(x=Tensor([3, 0],"int64"), keepdim=None, )
paddle.argmin(x=Tensor([3, 3, 0, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([3, 3, 0],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmin(x=Tensor([3, 3, 2, 0],"float64"), axis=-1, dtype="int64", )
paddle.as_strided(Tensor([0, 32],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([0, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([0, 32],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([0, 32],"float32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([0, 4, 6],"float32"), list[8,6,], list[6,1,], )
paddle.as_strided(Tensor([2, 0, 6],"float32"), list[8,6,], list[6,1,], )
paddle.as_strided(Tensor([2, 4, 0],"float32"), list[8,6,], list[6,1,], )
paddle.as_strided(Tensor([32, 0],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 0],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 0],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 0],"float32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.assign(0.0, Tensor([0],"float32"), )
paddle.assign(0.005, Tensor([0],"float32"), )
paddle.assign(0.04380856, Tensor([0],"float32"), )
paddle.assign(0.05, Tensor([0],"float32"), )
paddle.assign(1.0, Tensor([0],"float32"), )
paddle.assign(list[Tensor([0, 10],"float64"),], )
paddle.assign(list[Tensor([100, 0],"float64"),], )
paddle.assign(Tensor([0, 1, 1, 11],"float32"), Tensor([0, 1, 1, 11],"float32"), )
paddle.assign(Tensor([0, 1, 1, 11],"float32"), Tensor([1, 1, 1, 11],"float32"), )
paddle.assign(Tensor([0, 1, 1, 7],"float32"), Tensor([0, 1, 1, 7],"float32"), )
paddle.assign(Tensor([0, 1, 1, 7],"float32"), Tensor([1, 1, 1, 7],"float32"), )
paddle.assign(Tensor([0, 1, 1],"float32"), )
paddle.assign(Tensor([0, 1, 768],"float32"), Tensor([0, 1, 768],"float32"), )
paddle.assign(Tensor([0, 1, 768],"float32"), Tensor([1, 1, 768],"float32"), )
paddle.assign(Tensor([0, 1],"float32"), )
paddle.assign(Tensor([0, 10, 3, 3],"float32"), )
paddle.assign(Tensor([0, 102],"float32"), output=Tensor([0, 102],"float32"), )
paddle.assign(Tensor([0, 102],"float32"), output=Tensor([1024, 102],"float32"), )
paddle.assign(Tensor([0, 1024],"float32"), output=Tensor([0, 1024],"float32"), )
paddle.assign(Tensor([0, 1024],"float32"), output=Tensor([1024, 1024],"float32"), )
paddle.assign(Tensor([0, 13],"int64"), )
paddle.assign(Tensor([0, 197, 768],"float32"), Tensor([0, 197, 768],"float32"), )
paddle.assign(Tensor([0, 197, 768],"float32"), Tensor([1, 197, 768],"float32"), )
paddle.assign(Tensor([0, 20],"float32"), Tensor([0, 20],"float32"), )
paddle.assign(Tensor([0, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.assign(Tensor([0, 3, 14, 14],"float32"), output=Tensor([0, 3, 14, 14],"float32"), )
paddle.assign(Tensor([0, 3, 14, 14],"float32"), output=Tensor([1024, 3, 14, 14],"float32"), )
paddle.assign(Tensor([0, 3, 16, 16],"float32"), output=Tensor([0, 3, 16, 16],"float32"), )
paddle.assign(Tensor([0, 3, 16, 16],"float32"), output=Tensor([768, 3, 16, 16],"float32"), )
paddle.assign(Tensor([0, 3, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), )
paddle.assign(Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), )
paddle.assign(Tensor([0, 3, 3, 5],"float32"), )
paddle.assign(Tensor([0, 4, 4, 4, 4],"float32"), Tensor([0, 4, 4, 4, 4],"float32"), )
paddle.assign(Tensor([0, 4, 4, 4, 4],"float32"), Tensor([5, 4, 4, 4, 4],"float32"), )
paddle.assign(Tensor([0, 8],"int64"), Tensor([0, 8],"int64"), )
paddle.assign(Tensor([0, 8],"int64"), Tensor([13, 8],"int64"), )
paddle.assign(Tensor([0],"bfloat16"), Tensor([0],"bfloat16"), )
paddle.assign(Tensor([0],"bfloat16"), Tensor([100],"bfloat16"), )
paddle.assign(Tensor([0],"float32"), )
paddle.assign(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.assign(Tensor([0],"float32"), Tensor([1000],"float32"), )
paddle.assign(Tensor([1, 0, 1, 11],"float32"), Tensor([1, 0, 1, 11],"float32"), )
paddle.assign(Tensor([1, 0, 1, 11],"float32"), Tensor([1, 1, 1, 11],"float32"), )
paddle.assign(Tensor([1, 0, 1, 7],"float32"), Tensor([1, 0, 1, 7],"float32"), )
paddle.assign(Tensor([1, 0, 1, 7],"float32"), Tensor([1, 1, 1, 7],"float32"), )
paddle.assign(Tensor([1, 0, 3, 5],"float32"), )
paddle.assign(Tensor([1, 0, 768],"float32"), Tensor([1, 0, 768],"float32"), )
paddle.assign(Tensor([1, 0, 768],"float32"), Tensor([1, 1, 768],"float32"), )
paddle.assign(Tensor([1, 0, 768],"float32"), Tensor([1, 197, 768],"float32"), )
paddle.assign(Tensor([1, 0],"float32"), )
paddle.assign(Tensor([1, 0],"int64"), )
paddle.assign(Tensor([1, 1, 0, 11],"float32"), Tensor([1, 1, 0, 11],"float32"), )
paddle.assign(Tensor([1, 1, 0, 11],"float32"), Tensor([1, 1, 1, 11],"float32"), )
paddle.assign(Tensor([1, 1, 0, 7],"float32"), Tensor([1, 1, 0, 7],"float32"), )
paddle.assign(Tensor([1, 1, 0, 7],"float32"), Tensor([1, 1, 1, 7],"float32"), )
paddle.assign(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.assign(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 768],"float32"), )
paddle.assign(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 1, 0],"float32"), )
paddle.assign(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 1, 11],"float32"), )
paddle.assign(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 1, 7],"float32"), )
paddle.assign(Tensor([1, 1, 1, 11],"float32"), Tensor([0, 1, 1, 11],"float32"), )
paddle.assign(Tensor([1, 1, 1, 11],"float32"), Tensor([1, 0, 1, 11],"float32"), )
paddle.assign(Tensor([1, 1, 1, 11],"float32"), Tensor([1, 1, 0, 11],"float32"), )
paddle.assign(Tensor([1, 1, 1, 11],"float32"), Tensor([1, 1, 1, 0],"float32"), )
paddle.assign(Tensor([1, 1, 1, 7],"float32"), Tensor([0, 1, 1, 7],"float32"), )
paddle.assign(Tensor([1, 1, 1, 7],"float32"), Tensor([1, 0, 1, 7],"float32"), )
paddle.assign(Tensor([1, 1, 1, 7],"float32"), Tensor([1, 1, 0, 7],"float32"), )
paddle.assign(Tensor([1, 1, 1, 7],"float32"), Tensor([1, 1, 1, 0],"float32"), )
paddle.assign(Tensor([1, 1, 768],"float32"), Tensor([0, 1, 768],"float32"), )
paddle.assign(Tensor([1, 1, 768],"float32"), Tensor([1, 0, 768],"float32"), )
paddle.assign(Tensor([1, 1, 768],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.assign(Tensor([1, 197, 0],"float32"), Tensor([1, 197, 0],"float32"), )
paddle.assign(Tensor([1, 197, 0],"float32"), Tensor([1, 197, 768],"float32"), )
paddle.assign(Tensor([1, 197, 768],"float32"), Tensor([0, 197, 768],"float32"), )
paddle.assign(Tensor([1, 197, 768],"float32"), Tensor([1, 0, 768],"float32"), )
paddle.assign(Tensor([1, 197, 768],"float32"), Tensor([1, 197, 0],"float32"), )
paddle.assign(Tensor([1, 3, 0, 5],"float32"), )
paddle.assign(Tensor([1, 3, 3, 0],"float32"), )
paddle.assign(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.assign(Tensor([10, 0],"float32"), Tensor([10, 20],"float32"), )
paddle.assign(Tensor([10, 20],"float32"), Tensor([0, 20],"float32"), )
paddle.assign(Tensor([10, 20],"float32"), Tensor([10, 0],"float32"), )
paddle.assign(Tensor([100],"bfloat16"), Tensor([0],"bfloat16"), )
paddle.assign(Tensor([1000],"float32"), Tensor([0],"float32"), )
paddle.assign(Tensor([1024, 0, 14, 14],"float32"), output=Tensor([1024, 0, 14, 14],"float32"), )
paddle.assign(Tensor([1024, 0, 14, 14],"float32"), output=Tensor([1024, 3, 14, 14],"float32"), )
paddle.assign(Tensor([1024, 0],"float32"), output=Tensor([1024, 0],"float32"), )
paddle.assign(Tensor([1024, 0],"float32"), output=Tensor([1024, 102],"float32"), )
paddle.assign(Tensor([1024, 0],"float32"), output=Tensor([1024, 1024],"float32"), )
paddle.assign(Tensor([1024, 102],"float32"), output=Tensor([0, 102],"float32"), )
paddle.assign(Tensor([1024, 102],"float32"), output=Tensor([1024, 0],"float32"), )
paddle.assign(Tensor([1024, 1024],"float32"), output=Tensor([0, 1024],"float32"), )
paddle.assign(Tensor([1024, 1024],"float32"), output=Tensor([1024, 0],"float32"), )
paddle.assign(Tensor([1024, 3, 0, 14],"float32"), output=Tensor([1024, 3, 0, 14],"float32"), )
paddle.assign(Tensor([1024, 3, 0, 14],"float32"), output=Tensor([1024, 3, 14, 14],"float32"), )
paddle.assign(Tensor([1024, 3, 14, 0],"float32"), output=Tensor([1024, 3, 14, 0],"float32"), )
paddle.assign(Tensor([1024, 3, 14, 0],"float32"), output=Tensor([1024, 3, 14, 14],"float32"), )
paddle.assign(Tensor([1024, 3, 14, 14],"float32"), output=Tensor([0, 3, 14, 14],"float32"), )
paddle.assign(Tensor([1024, 3, 14, 14],"float32"), output=Tensor([1024, 0, 14, 14],"float32"), )
paddle.assign(Tensor([1024, 3, 14, 14],"float32"), output=Tensor([1024, 3, 0, 14],"float32"), )
paddle.assign(Tensor([1024, 3, 14, 14],"float32"), output=Tensor([1024, 3, 14, 0],"float32"), )
paddle.assign(Tensor([13, 0, 1],"float32"), )
paddle.assign(Tensor([13, 0],"int64"), Tensor([13, 0],"int64"), )
paddle.assign(Tensor([13, 0],"int64"), Tensor([13, 8],"int64"), )
paddle.assign(Tensor([13, 1, 0],"float32"), )
paddle.assign(Tensor([13, 8],"int64"), Tensor([0, 8],"int64"), )
paddle.assign(Tensor([13, 8],"int64"), Tensor([13, 0],"int64"), )
paddle.assign(Tensor([16, 0, 1],"float32"), )
paddle.assign(Tensor([16, 1, 0],"float32"), )
paddle.assign(Tensor([2, 0, 3, 3],"float32"), )
paddle.assign(Tensor([2, 10, 0, 3],"float32"), )
paddle.assign(Tensor([2, 10, 3, 0],"float32"), )
paddle.assign(Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), )
paddle.assign(Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), )
paddle.assign(Tensor([5, 0, 4, 4, 4],"float32"), Tensor([5, 0, 4, 4, 4],"float32"), )
paddle.assign(Tensor([5, 0, 4, 4, 4],"float32"), Tensor([5, 4, 4, 4, 4],"float32"), )
paddle.assign(Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), )
paddle.assign(Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), )
paddle.assign(Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), )
paddle.assign(Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), )
paddle.assign(Tensor([5, 4, 0, 4, 4],"float32"), Tensor([5, 4, 0, 4, 4],"float32"), )
paddle.assign(Tensor([5, 4, 0, 4, 4],"float32"), Tensor([5, 4, 4, 4, 4],"float32"), )
paddle.assign(Tensor([5, 4, 4, 0, 4],"float32"), Tensor([5, 4, 4, 0, 4],"float32"), )
paddle.assign(Tensor([5, 4, 4, 0, 4],"float32"), Tensor([5, 4, 4, 4, 4],"float32"), )
paddle.assign(Tensor([5, 4, 4, 4, 0],"float32"), Tensor([5, 4, 4, 4, 0],"float32"), )
paddle.assign(Tensor([5, 4, 4, 4, 0],"float32"), Tensor([5, 4, 4, 4, 4],"float32"), )
paddle.assign(Tensor([5, 4, 4, 4, 4],"float32"), Tensor([0, 4, 4, 4, 4],"float32"), )
paddle.assign(Tensor([5, 4, 4, 4, 4],"float32"), Tensor([5, 0, 4, 4, 4],"float32"), )
paddle.assign(Tensor([5, 4, 4, 4, 4],"float32"), Tensor([5, 4, 0, 4, 4],"float32"), )
paddle.assign(Tensor([5, 4, 4, 4, 4],"float32"), Tensor([5, 4, 4, 0, 4],"float32"), )
paddle.assign(Tensor([5, 4, 4, 4, 4],"float32"), Tensor([5, 4, 4, 4, 0],"float32"), )
paddle.assign(Tensor([768, 0, 16, 16],"float32"), output=Tensor([768, 0, 16, 16],"float32"), )
paddle.assign(Tensor([768, 0, 16, 16],"float32"), output=Tensor([768, 3, 16, 16],"float32"), )
paddle.assign(Tensor([768, 3, 0, 16],"float32"), output=Tensor([768, 3, 0, 16],"float32"), )
paddle.assign(Tensor([768, 3, 0, 16],"float32"), output=Tensor([768, 3, 16, 16],"float32"), )
paddle.assign(Tensor([768, 3, 16, 0],"float32"), output=Tensor([768, 3, 16, 0],"float32"), )
paddle.assign(Tensor([768, 3, 16, 0],"float32"), output=Tensor([768, 3, 16, 16],"float32"), )
paddle.assign(Tensor([768, 3, 16, 16],"float32"), output=Tensor([0, 3, 16, 16],"float32"), )
paddle.assign(Tensor([768, 3, 16, 16],"float32"), output=Tensor([768, 0, 16, 16],"float32"), )
paddle.assign(Tensor([768, 3, 16, 16],"float32"), output=Tensor([768, 3, 0, 16],"float32"), )
paddle.assign(Tensor([768, 3, 16, 16],"float32"), output=Tensor([768, 3, 16, 0],"float32"), )
paddle.atleast_1d(Tensor([0, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([0, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([0, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([0, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([0, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([0, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([0, 1, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_1d(Tensor([0, 1, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_1d(Tensor([0, 1],"float64"), )
paddle.atleast_1d(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.atleast_1d(Tensor([0, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_1d(Tensor([0, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([0, 2],"float64"), )
paddle.atleast_1d(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_1d(Tensor([0, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_1d(Tensor([0, 2],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([0, 3, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_1d(Tensor([0, 3, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([0, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([0, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([0, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([0, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([0, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([0, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([0],"float32"), Tensor([0],"float64"), )
paddle.atleast_1d(Tensor([0],"float32"), Tensor([2],"float64"), )
paddle.atleast_1d(Tensor([0],"float64"), )
paddle.atleast_1d(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.atleast_1d(Tensor([0],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.atleast_1d(Tensor([0],"float64"), Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.atleast_1d(Tensor([1, 0, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 0, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 0, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 0, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 0, 1],"float64"), Tensor([1, 0, 1],"float64"), Tensor([1, 0, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 0, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_1d(Tensor([1, 0, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_1d(Tensor([1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 0],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 0],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 0, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 0],"float64"), Tensor([1, 1, 0],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 0],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 0],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 0],"float64"), Tensor([2],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([0],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 0, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 0],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 0, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 1],"float64"), Tensor([0, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1],"float64"), Tensor([1, 0],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_1d(Tensor([1, 2],"float64"), Tensor([0],"float64"), )
paddle.atleast_1d(Tensor([1],"float64"), Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.atleast_1d(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.atleast_1d(Tensor([2, 0, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_1d(Tensor([2, 0, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([2, 0],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([2, 1],"float64"), Tensor([0],"float64"), )
paddle.atleast_1d(Tensor([2, 3, 0],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_1d(Tensor([2, 3, 0],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([2, 3, 1],"float64"), Tensor([0, 3],"float64"), )
paddle.atleast_1d(Tensor([2, 3, 1],"float64"), Tensor([0],"float64"), )
paddle.atleast_1d(Tensor([2, 3, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_1d(Tensor([2],"float32"), Tensor([0],"float64"), )
paddle.atleast_1d(Tensor([3, 0, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 0, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 0, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 0, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 0, 2],"float64"), Tensor([3, 0, 2],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 0, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 0],"float64"), )
paddle.atleast_1d(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), )
paddle.atleast_1d(Tensor([3, 0],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 2],"float64"), Tensor([0, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 2],"float64"), Tensor([3, 0],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 0],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 0, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 0],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 0],"float64"), Tensor([3, 4, 0],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 0],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 0],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 0],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 0],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 0, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 0],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.atleast_1d(Tensor([5],"float64"), Tensor([0],"float64"), Tensor([5],"float64"), )
paddle.atleast_1d(Tensor([5],"float64"), Tensor([5],"float64"), Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([0, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([0, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([0, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([0, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([0, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([0, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([0, 1, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_2d(Tensor([0, 1, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([0, 1],"float64"), )
paddle.atleast_2d(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.atleast_2d(Tensor([0, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_2d(Tensor([0, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([0, 2],"float64"), )
paddle.atleast_2d(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_2d(Tensor([0, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_2d(Tensor([0, 2],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([0, 3, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_2d(Tensor([0, 3, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([0, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([0, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([0, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([0, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([0, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([0, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([0],"float32"), Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([0],"float32"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([0],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_2d(Tensor([0],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.atleast_2d(Tensor([0],"float64"), Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.atleast_2d(Tensor([1, 0, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 0, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 0, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 0, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 0, 1],"float64"), Tensor([1, 0, 1],"float64"), Tensor([1, 0, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 0, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_2d(Tensor([1, 0, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 0],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 0],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 0, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 0],"float64"), Tensor([1, 1, 0],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 0],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 0],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 0],"float64"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 0, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 0],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 0, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 1],"float64"), Tensor([0, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1],"float64"), Tensor([1, 0],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_2d(Tensor([1, 2],"float64"), Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([1],"float64"), Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.atleast_2d(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([2, 0, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_2d(Tensor([2, 0, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([2, 0],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([2, 1],"float64"), Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([2, 3, 0],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_2d(Tensor([2, 3, 0],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([2, 3, 1],"float64"), Tensor([0, 3],"float64"), )
paddle.atleast_2d(Tensor([2, 3, 1],"float64"), Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([2, 3, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_2d(Tensor([2],"float32"), Tensor([0],"float64"), )
paddle.atleast_2d(Tensor([2],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_2d(Tensor([2],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_2d(Tensor([3, 0, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 0, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 0, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 0, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 0, 2],"float64"), Tensor([3, 0, 2],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 0, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 0],"float64"), )
paddle.atleast_2d(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), )
paddle.atleast_2d(Tensor([3, 0],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 2],"float64"), Tensor([0, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 2],"float64"), Tensor([3, 0],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 0],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 0, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 0],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 0],"float64"), Tensor([3, 4, 0],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 0],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 0],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 0],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 0],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 0, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 0],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.atleast_2d(Tensor([5],"float64"), Tensor([0],"float64"), Tensor([5],"float64"), )
paddle.atleast_2d(Tensor([5],"float64"), Tensor([5],"float64"), Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([0, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([0, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([0, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([0, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([0, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([0, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([0, 1, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_3d(Tensor([0, 1, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([0, 1],"float64"), )
paddle.atleast_3d(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.atleast_3d(Tensor([0, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_3d(Tensor([0, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([0, 2],"float64"), )
paddle.atleast_3d(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_3d(Tensor([0, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_3d(Tensor([0, 2],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([0, 3, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_3d(Tensor([0, 3, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([0, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([0, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([0, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([0, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([0, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([0, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([0],"float32"), Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([0],"float32"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([0],"float64"), Tensor([1, 2, 1],"float64"), )
paddle.atleast_3d(Tensor([0],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_3d(Tensor([0],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.atleast_3d(Tensor([0],"float64"), Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.atleast_3d(Tensor([1, 0, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 0, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 0, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 0, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 0, 1],"float64"), Tensor([1, 0, 1],"float64"), Tensor([1, 0, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 0, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_3d(Tensor([1, 0, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 0],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 0],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 0, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 0],"float64"), Tensor([1, 1, 0],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 0],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 0],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 0],"float64"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 0, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 0],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([0, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 0, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 1],"float64"), Tensor([0, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1],"float64"), Tensor([1, 0],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_3d(Tensor([1, 2],"float64"), Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([1],"float64"), Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.atleast_3d(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([2, 0, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_3d(Tensor([2, 0, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([2, 0],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([2, 1],"float64"), Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([2, 3, 0],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_3d(Tensor([2, 3, 0],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([2, 3, 1],"float64"), Tensor([0, 3],"float64"), )
paddle.atleast_3d(Tensor([2, 3, 1],"float64"), Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([2, 3, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_3d(Tensor([2],"float32"), Tensor([0],"float64"), )
paddle.atleast_3d(Tensor([2],"float64"), Tensor([0, 2, 1],"float64"), )
paddle.atleast_3d(Tensor([2],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_3d(Tensor([2],"float64"), Tensor([1, 0, 1],"float64"), )
paddle.atleast_3d(Tensor([2],"float64"), Tensor([1, 0],"float64"), )
paddle.atleast_3d(Tensor([2],"float64"), Tensor([1, 2, 0],"float64"), )
paddle.atleast_3d(Tensor([3, 0, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 0, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 0, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 0, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 0, 2],"float64"), Tensor([3, 0, 2],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 0, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 0],"float64"), )
paddle.atleast_3d(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), )
paddle.atleast_3d(Tensor([3, 0],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 2],"float64"), Tensor([0, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 2],"float64"), Tensor([3, 0],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 0],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 0, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 0],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 0],"float64"), Tensor([3, 4, 0],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 0],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 0],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 0],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 0],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([0, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 0, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 0, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 0],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 0, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 0],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.atleast_3d(Tensor([5],"float64"), Tensor([0],"float64"), Tensor([5],"float64"), )
paddle.atleast_3d(Tensor([5],"float64"), Tensor([5],"float64"), Tensor([0],"float64"), )
paddle.autograd.hessian(Tensor([0, 1],"float32"), Tensor([0, 2],"float32"), batch_axis=0, )
paddle.autograd.hessian(Tensor([0, 1],"float32"), Tensor([5, 2],"float32"), batch_axis=0, )
paddle.autograd.hessian(Tensor([5, 0],"float32"), Tensor([5, 0],"float32"), batch_axis=0, )
paddle.autograd.hessian(Tensor([5, 0],"float32"), Tensor([5, 2],"float32"), batch_axis=0, )
paddle.autograd.hessian(Tensor([5, 1],"float32"), Tensor([0, 2],"float32"), batch_axis=0, )
paddle.autograd.hessian(Tensor([5, 1],"float32"), Tensor([5, 0],"float32"), batch_axis=0, )
paddle.autograd.jacobian(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), batch_axis=0, )
paddle.autograd.jacobian(Tensor([0, 3],"float64"), Tensor([2, 3],"float64"), batch_axis=0, )
paddle.autograd.jacobian(Tensor([0],"float64"), Tensor([0],"float64"), batch_axis=None, )
paddle.autograd.jacobian(Tensor([0],"float64"), Tensor([2],"float64"), batch_axis=None, )
paddle.autograd.jacobian(Tensor([0],"float64"), Tensor([6],"float64"), batch_axis=None, )
paddle.autograd.jacobian(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), batch_axis=0, )
paddle.autograd.jacobian(Tensor([2, 0],"float64"), Tensor([2, 3],"float64"), batch_axis=0, )
paddle.autograd.jacobian(Tensor([2, 3],"float64"), Tensor([0, 3],"float64"), batch_axis=0, )
paddle.autograd.jacobian(Tensor([2, 3],"float64"), Tensor([2, 0],"float64"), batch_axis=0, )
paddle.autograd.jacobian(Tensor([2],"float64"), Tensor([0],"float64"), batch_axis=None, )
paddle.autograd.jacobian(Tensor([6],"float64"), Tensor([0],"float64"), batch_axis=None, )
paddle.bincount(x=Tensor([0],"int32"), )
paddle.bitwise_and(Tensor([0, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 0, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 0],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([0, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 0, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 0, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 0],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([0, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 0, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 0, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 0],"int64"), )
paddle.bitwise_invert(Tensor([0, 3, 4, 5],"int32"), )
paddle.bitwise_invert(Tensor([0, 4, 1],"int32"), )
paddle.bitwise_invert(Tensor([2, 0, 4, 5],"int32"), )
paddle.bitwise_invert(Tensor([2, 3, 0, 5],"int32"), )
paddle.bitwise_invert(Tensor([2, 3, 4, 0],"int32"), )
paddle.bitwise_invert(Tensor([3, 0, 1],"int32"), )
paddle.bitwise_invert(Tensor([3, 4, 0],"int32"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([0, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([1],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([1],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 0, 5],"int32"), Tensor([3, 0, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 0, 5],"int32"), Tensor([3, 0, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 0, 5],"int32"), Tensor([3, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 0, 5],"int32"), Tensor([3, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 0],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 0, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 0, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 0],"int32"), True, )
paddle.bitwise_left_shift(Tensor([300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([300],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([300],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_not(Tensor([0, 4, 1],"int64"), out=Tensor([0, 4, 1],"int64"), )
paddle.bitwise_not(Tensor([0, 4, 1],"int64"), out=Tensor([3, 4, 1],"int64"), )
paddle.bitwise_not(Tensor([3, 0, 1],"int64"), out=Tensor([3, 0, 1],"int64"), )
paddle.bitwise_not(Tensor([3, 0, 1],"int64"), out=Tensor([3, 4, 1],"int64"), )
paddle.bitwise_not(Tensor([3, 4, 0],"int64"), out=Tensor([3, 4, 0],"int64"), )
paddle.bitwise_not(Tensor([3, 4, 0],"int64"), out=Tensor([3, 4, 1],"int64"), )
paddle.bitwise_not(Tensor([3, 4, 1],"int64"), out=Tensor([0, 4, 1],"int64"), )
paddle.bitwise_not(Tensor([3, 4, 1],"int64"), out=Tensor([3, 0, 1],"int64"), )
paddle.bitwise_not(Tensor([3, 4, 1],"int64"), out=Tensor([3, 4, 0],"int64"), )
paddle.bitwise_or(Tensor([0, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 0, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 0],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([0, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 0, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 0, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 0],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([0, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 0, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 0, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 0],"int64"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([0],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([0],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([0],"int8"), False, )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([1],"int8"), False, )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([1],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([0],"int8"), False, )
paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([0],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([0],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_xor(Tensor([0, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 0, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 0],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([0, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 0, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 0, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 0],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([0, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 0, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 0, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 0],"int64"), )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 2, 6, 1],"bool"),Tensor([0, 6, 1, 1, 3],"bool"),Tensor([0, 1, 1, 6, 3],"bool"),Tensor([0, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 2, 6, 1],"float32"),Tensor([0, 6, 1, 1, 3],"float32"),Tensor([0, 1, 1, 6, 3],"float32"),Tensor([0, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 1],"bool"),Tensor([0, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 1],"bool"),Tensor([6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 1],"float32"),Tensor([0, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 1],"float32"),Tensor([6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 6, 1],"bool"),Tensor([0, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 6, 1],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 6, 1],"float32"),Tensor([0, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6, 6, 1],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6],"bool"),Tensor([0, 1, 6],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6],"bool"),Tensor([6, 1, 6],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6],"float32"),Tensor([0, 1, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6, 6],"float32"),Tensor([6, 1, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6],"bool"),Tensor([0, 1],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6],"bool"),Tensor([6, 1],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6],"float32"),Tensor([0, 1],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([0, 6],"float32"),Tensor([6, 1],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 2, 6, 1],"bool"),Tensor([1, 0, 1, 1, 3],"bool"),Tensor([1, 0, 1, 6, 3],"bool"),Tensor([1, 0, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 2, 6, 1],"float32"),Tensor([1, 0, 1, 1, 3],"float32"),Tensor([1, 0, 1, 6, 3],"float32"),Tensor([1, 0, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 6, 6, 1],"bool"),Tensor([1, 0, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 6, 6, 1],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 6, 6, 1],"float32"),Tensor([1, 0, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 0, 6, 6, 1],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"bool"),Tensor([1, 6, 0, 1, 3],"bool"),Tensor([1, 1, 0, 6, 3],"bool"),Tensor([1, 6, 0, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"bool"),Tensor([1, 6, 0, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"float32"),Tensor([1, 6, 0, 1, 3],"float32"),Tensor([1, 1, 0, 6, 3],"float32"),Tensor([1, 6, 0, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"float32"),Tensor([1, 6, 0, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 0, 6, 1],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 0, 1],"bool"),Tensor([1, 6, 1, 0, 3],"bool"),Tensor([1, 1, 1, 0, 3],"bool"),Tensor([1, 6, 1, 0, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 0, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 0, 1],"float32"),Tensor([1, 6, 1, 0, 3],"float32"),Tensor([1, 1, 1, 0, 3],"float32"),Tensor([1, 6, 1, 0, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 0, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 0],"bool"),Tensor([1, 6, 1, 1, 0],"bool"),Tensor([1, 1, 1, 6, 0],"bool"),Tensor([1, 6, 1, 6, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 0],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 0],"float32"),Tensor([1, 6, 1, 1, 0],"float32"),Tensor([1, 1, 1, 6, 0],"float32"),Tensor([1, 6, 1, 6, 0],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 0],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([0, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 0, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 0, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 0, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 0],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([0, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 0, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 0, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 0, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 0],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([0, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 0, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 0, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 0, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([0, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 0, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 0, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 0, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 0],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([0, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 0, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 0, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 0, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 0],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([0, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 0, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 0, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 0, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 0],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 0, 1],"bool"),Tensor([1, 6, 1, 0, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 0, 1],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 0, 1],"float32"),Tensor([1, 6, 1, 0, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 0, 1],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 0],"bool"),Tensor([1, 6, 1, 6, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 0],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 0],"float32"),Tensor([1, 6, 1, 6, 0],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 0],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"bool"),Tensor([0, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"bool"),Tensor([1, 0, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"bool"),Tensor([1, 6, 0, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"bool"),Tensor([1, 6, 1, 0, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"bool"),Tensor([1, 6, 1, 6, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float32"),Tensor([0, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float32"),Tensor([1, 0, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float32"),Tensor([1, 6, 0, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float32"),Tensor([1, 6, 1, 0, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float32"),Tensor([1, 6, 1, 6, 0],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6, 1],"bool"),Tensor([6, 0, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6, 1],"bool"),Tensor([6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6, 1],"float32"),Tensor([6, 0, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6, 1],"float32"),Tensor([6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6],"bool"),Tensor([6, 0, 6],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6],"bool"),Tensor([6, 1, 6],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6],"float32"),Tensor([6, 0, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0, 6],"float32"),Tensor([6, 1, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0],"bool"),Tensor([6, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0],"bool"),Tensor([6, 1],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0],"float32"),Tensor([6, 0],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 0],"float32"),Tensor([6, 1],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0, 1],"bool"),Tensor([6, 1, 0, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0, 1],"bool"),Tensor([6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0, 1],"float32"),Tensor([6, 1, 0, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0, 1],"float32"),Tensor([6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0],"bool"),Tensor([6, 1, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0],"bool"),Tensor([6, 1, 6],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0],"float32"),Tensor([6, 1, 0],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 0],"float32"),Tensor([6, 1, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 0],"bool"),Tensor([6, 1, 6, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 0],"bool"),Tensor([6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 0],"float32"),Tensor([6, 1, 6, 0],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 0],"float32"),Tensor([6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"bool"),Tensor([0, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"bool"),Tensor([6, 0, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"bool"),Tensor([6, 1, 0, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"bool"),Tensor([6, 1, 6, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float32"),Tensor([0, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float32"),Tensor([6, 0, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float32"),Tensor([6, 1, 0, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float32"),Tensor([6, 1, 6, 0],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"bool"),Tensor([0, 1, 6],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"bool"),Tensor([6, 0, 6],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"bool"),Tensor([6, 1, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"float32"),Tensor([0, 1, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"float32"),Tensor([6, 0, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"float32"),Tensor([6, 1, 0],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"bool"),Tensor([0, 1],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"bool"),Tensor([6, 0],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"float32"),Tensor([0, 1],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"float32"),Tensor([6, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 1, 10, 1],"float64"),Tensor([0, 1, 10, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0, 1, 10, 1],"float64"),Tensor([12, 1, 10, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0, 1, 2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 1, 4, 1],"complex128"),Tensor([0, 4, 1, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([0, 1, 4, 1],"complex128"),Tensor([1, 4, 1, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 1],"float32"),Tensor([1, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 10, 10],"float64"),Tensor([0, 10, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0, 10, 10],"float64"),Tensor([10, 10, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0, 2, 1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([1, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 4],"float32"),Tensor([0, 1],"float32"),Tensor([0, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 4],"float32"),Tensor([3, 1],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0, 60, 1],"float64"),Tensor([2, 2, 1, 30],"float64"),Tensor([1, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0, 60, 1],"float64"),Tensor([6, 2, 1, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0],"float32"),Tensor([1, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0],"float32"),Tensor([2, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0],"float64"),Tensor([2],"float64"),Tensor([2, 2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([0],"float64"),Tensor([2],"float64"),Tensor([2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 0],"float32"),Tensor([1, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 0],"float32"),Tensor([3, 0],"float32"),Tensor([3, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 0],"float32"),Tensor([3, 1],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 1],"float32"),Tensor([0, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 1],"float32"),Tensor([1, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([0, 1],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([3, 0],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([0, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([3, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([10, 0, 10],"float64"),Tensor([10, 0, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([10, 0, 10],"float64"),Tensor([10, 10, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([10, 10, 0],"float64"),Tensor([10, 10, 0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([10, 10, 0],"float64"),Tensor([10, 10, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([10, 10, 10],"float64"),Tensor([0, 10, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([10, 10, 10],"float64"),Tensor([10, 0, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([10, 10, 10],"float64"),Tensor([10, 10, 0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 0, 10, 1],"float64"),Tensor([12, 0, 10, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 0, 10, 1],"float64"),Tensor([12, 1, 10, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 0, 1],"float64"),Tensor([12, 1, 0, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 0, 1],"float64"),Tensor([12, 1, 10, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 10, 0],"float64"),Tensor([12, 1, 10, 0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 10, 0],"float64"),Tensor([12, 1, 10, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 10, 1],"float64"),Tensor([0, 1, 10, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 10, 1],"float64"),Tensor([12, 0, 10, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 10, 1],"float64"),Tensor([12, 1, 0, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 10, 1],"float64"),Tensor([12, 1, 10, 0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 0, 1],"float64"),Tensor([2, 2, 1, 30],"float64"),Tensor([1, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 0, 1],"float64"),Tensor([6, 2, 1, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 0, 2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 0],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 1, 0],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 1, 2],"float32"),Tensor([0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 2],"float32"),Tensor([0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 0],"float64"),Tensor([2, 2, 1, 30],"float64"),Tensor([1, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 0],"float64"),Tensor([6, 2, 1, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([0, 2, 1, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([0, 2, 1, 30],"float64"),Tensor([1, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([2, 0, 1, 30],"float64"),Tensor([1, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([2, 2, 0, 30],"float64"),Tensor([1, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([2, 2, 1, 0],"float64"),Tensor([1, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([2, 2, 1, 30],"float64"),Tensor([0, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([2, 2, 1, 30],"float64"),Tensor([1, 0, 60, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([2, 2, 1, 30],"float64"),Tensor([1, 2, 0, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([2, 2, 1, 30],"float64"),Tensor([1, 2, 60, 0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([6, 0, 1, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([6, 2, 0, 10],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([6, 2, 1, 0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([0, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([1, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([2, 0],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([0],"float64"),Tensor([2, 2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([0],"float64"),Tensor([2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([2],"float64"),Tensor([0, 2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([2],"float64"),Tensor([0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([2],"float64"),Tensor([2, 0],"float64"),], )
paddle.broadcast_tensors(list[Tensor([4, 0, 1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([1, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 0, 4, 1],"complex128"),Tensor([1, 0, 1, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 0, 4, 1],"complex128"),Tensor([1, 4, 1, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 0, 1],"complex128"),Tensor([1, 4, 0, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 0, 1],"complex128"),Tensor([1, 4, 1, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 0],"complex128"),Tensor([1, 4, 1, 0],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 0],"complex128"),Tensor([1, 4, 1, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex128"),Tensor([0, 4, 1, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex128"),Tensor([1, 0, 1, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex128"),Tensor([1, 4, 0, 4],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex128"),Tensor([1, 4, 1, 0],"complex128"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 0, 4],"float32"),Tensor([3, 1],"float32"),Tensor([1, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 0],"float32"),Tensor([3, 1],"float32"),Tensor([1, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([0, 1],"float32"),Tensor([1, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([3, 0],"float32"),Tensor([1, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([0, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([1, 0, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([1, 3, 0],"float32"),], )
paddle.broadcast_tensors(tuple(Tensor([0, 1],"float32"),Tensor([0, 3],"float32"),Tensor([0, 3],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([0, 1],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),), )
paddle.broadcast_tensors(tuple(Tensor([0, 1],"float64"),Tensor([2, 1],"float64"),Tensor([2, 1],"float64"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 0],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 0],"float64"),Tensor([2, 1],"float64"),Tensor([2, 1],"float64"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float32"),Tensor([0, 3],"float32"),Tensor([2, 3],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float32"),Tensor([2, 0],"float32"),Tensor([2, 3],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float32"),Tensor([2, 3],"float32"),Tensor([0, 3],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float32"),Tensor([2, 3],"float32"),Tensor([2, 0],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float64"),Tensor([0, 1],"float64"),Tensor([2, 1],"float64"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float64"),Tensor([2, 0],"float64"),Tensor([2, 1],"float64"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float64"),Tensor([2, 1],"float64"),Tensor([0, 1],"float64"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float64"),Tensor([2, 1],"float64"),Tensor([2, 0],"float64"),), )
paddle.cartesian_prod(list[Tensor([0],"complex128"),], )
paddle.cartesian_prod(list[Tensor([0],"complex128"),Tensor([0],"complex128"),Tensor([0],"complex128"),], )
paddle.cartesian_prod(list[Tensor([0],"complex128"),Tensor([1],"complex128"),Tensor([3],"complex128"),], )
paddle.cartesian_prod(list[Tensor([0],"float32"),], )
paddle.cartesian_prod(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.cartesian_prod(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.cartesian_prod(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.cartesian_prod(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.cartesian_prod(list[Tensor([2],"complex128"),Tensor([0],"complex128"),Tensor([3],"complex128"),], )
paddle.cartesian_prod(list[Tensor([2],"complex128"),Tensor([1],"complex128"),Tensor([0],"complex128"),], )
paddle.cast(Tensor([0, 1, 1, 1, 1],"bool"), Dtype(float32), )
paddle.cast(Tensor([0, 1, 1, 1, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([0, 1, 1, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([0, 1, 1, 1],"bool"), dtype="float32", )
paddle.cast(Tensor([0, 1, 1, 1],"float16"), "float32", )
paddle.cast(Tensor([0, 1, 1, 1],"int64"), "bool", )
paddle.cast(Tensor([0, 1, 1, 11],"bool"), "bool", )
paddle.cast(Tensor([0, 1, 1, 11],"bool"), dtype="float32", )
paddle.cast(Tensor([0, 1, 1, 114],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([0, 1, 1, 13],"float32"), Dtype(float16), )
paddle.cast(Tensor([0, 1, 1, 2, 3],"float32"), Dtype(float32), )
paddle.cast(Tensor([0, 1, 1, 2, 3],"float64"), Dtype(float64), )
paddle.cast(Tensor([0, 1, 1, 2048],"float32"), Dtype(float16), )
paddle.cast(Tensor([0, 1, 1, 50],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([0, 1, 100],"float32"), dtype=Dtype(float16), )
paddle.cast(Tensor([0, 1, 101],"float32"), dtype=Dtype(float16), )
paddle.cast(Tensor([0, 1, 1024],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([0, 1, 1408],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([0, 1, 192],"float16"), "float32", )
paddle.cast(Tensor([0, 1, 192],"float32"), dtype="float32", )
paddle.cast(Tensor([0, 1, 2, 2],"bool"), Dtype(float64), )
paddle.cast(Tensor([0, 1, 2, 2],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([0, 1, 2],"float64"), dtype="float64", )
paddle.cast(Tensor([0, 1, 24276],"bool"), "float32", )
paddle.cast(Tensor([0, 1, 28, 28],"float32"), "float32", )
paddle.cast(Tensor([0, 1, 50, 50],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([0, 1, 64],"float32"), Dtype(float16), )
paddle.cast(Tensor([0, 1, 768],"float32"), Dtype(float16), )
paddle.cast(Tensor([0, 1],"bool"), "int32", )
paddle.cast(Tensor([0, 1],"bool"), "int64", )
paddle.cast(Tensor([0, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([0, 1],"bool"), dtype="int", )
paddle.cast(Tensor([0, 1],"bool"), dtype=Dtype(float16), )
paddle.cast(Tensor([0, 1],"bool"), dtype=Dtype(float64), )
paddle.cast(Tensor([0, 1],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([0, 1],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([0, 1],"bool"), dtype=type(numpy.int32), )
paddle.cast(Tensor([0, 1],"bool"), dtype=VarType(float32), )
paddle.cast(Tensor([0, 1],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([0, 1],"float32"), dtype="float32", )
paddle.cast(Tensor([0, 1],"float32"), dtype="int64", )
paddle.cast(Tensor([0, 1],"float64"), dtype="float64", )
paddle.cast(Tensor([0, 1],"int32"), Dtype(int64), )
paddle.cast(Tensor([0, 10],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([0, 10],"bool"), "bool", )
paddle.cast(Tensor([0, 10],"bool"), "float", )
paddle.cast(Tensor([0, 10],"bool"), dtype="int32", )
paddle.cast(Tensor([0, 10],"float16"), VarType(float32), )
paddle.cast(Tensor([0, 10],"float32"), "int", )
paddle.cast(Tensor([0, 10],"float32"), Dtype(float16), )
paddle.cast(Tensor([0, 10],"float32"), type(numpy.float32), )
paddle.cast(Tensor([0, 10],"float32"), type(numpy.float64), )
paddle.cast(Tensor([0, 10],"float32"), VarType(bfloat16), )
paddle.cast(Tensor([0, 10],"float32"), VarType(float16), )
paddle.cast(Tensor([0, 10],"float32"), VarType(float64), )
paddle.cast(Tensor([0, 10],"float64"), "int", )
paddle.cast(Tensor([0, 10],"float64"), type(numpy.float32), )
paddle.cast(Tensor([0, 1024, 1],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([0, 1024, 1024, 1],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([0, 1024, 1024],"bool"), "int64", )
paddle.cast(Tensor([0, 1024, 128],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([0, 1024, 768],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([0, 10800],"bool"), dtype=VarType(float32), )
paddle.cast(Tensor([0, 11],"bool"), "int64", )
paddle.cast(Tensor([0, 12],"int64"), Dtype(bool), )
paddle.cast(Tensor([0, 12],"int64"), Dtype(float16), )
paddle.cast(Tensor([0, 12],"int64"), Dtype(float32), )
paddle.cast(Tensor([0, 12],"int64"), Dtype(float64), )
paddle.cast(Tensor([0, 12],"int64"), Dtype(int32), )
paddle.cast(Tensor([0, 12],"int64"), Dtype(int64), )
paddle.cast(Tensor([0, 120],"int64"), "int32", )
paddle.cast(Tensor([0, 1200],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([0, 128, 128],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([0, 128, 128],"int32"), dtype=Dtype(float32), )
paddle.cast(Tensor([0, 128, 128],"int32"), dtype=Dtype(int32), )
paddle.cast(Tensor([0, 128, 2],"int32"), dtype=VarType(float32), )
paddle.cast(Tensor([0, 128, 256],"int32"), dtype=Dtype(float32), )
paddle.cast(Tensor([0, 128, 96],"float32"), dtype="int32", )
paddle.cast(Tensor([0, 14, 5, 14],"bool"), "int64", )
paddle.cast(Tensor([0, 151936],"float16"), Dtype(float32), )
paddle.cast(Tensor([0, 16, 64],"float16"), Dtype(float32), )
paddle.cast(Tensor([0, 16],"bfloat16"), VarType(bfloat16), )
paddle.cast(Tensor([0, 17, 10],"bool"), dtype="bool", )
paddle.cast(Tensor([0, 17, 5, 6, 7],"bool"), dtype="bool", )
paddle.cast(Tensor([0, 17],"bool"), dtype="bool", )
paddle.cast(Tensor([0, 2, 1, 58],"float32"), Dtype(float32), )
paddle.cast(Tensor([0, 2, 2, 1],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([0, 2, 2, 2],"float64"), Dtype(float32), )
paddle.cast(Tensor([0, 2],"float32"), dtype=Dtype(bfloat16), )
paddle.cast(Tensor([0, 20, 1],"float32"), "float64", )
paddle.cast(Tensor([0, 20, 1],"float64"), "float64", )
paddle.cast(Tensor([0, 20, 2],"bool"), dtype="bool", )
paddle.cast(Tensor([0, 20, 20],"int32"), "bool", )
paddle.cast(Tensor([0, 20],"bool"), dtype="float32", )
paddle.cast(Tensor([0, 20],"float32"), "float32", )
paddle.cast(Tensor([0, 20],"float32"), "float64", )
paddle.cast(Tensor([0, 2048, 1],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([0, 22],"bool"), dtype="int64", )
paddle.cast(Tensor([0, 224, 3],"uint8"), type(numpy.float32), )
paddle.cast(Tensor([0, 256, 1, 1, 1],"float16"), "float32", )
paddle.cast(Tensor([0, 256],"float16"), Dtype(int8), )
paddle.cast(Tensor([0, 256],"float64"), Dtype(int8), )
paddle.cast(Tensor([0, 28, 28],"uint8"), type(numpy.float32), )
paddle.cast(Tensor([0, 3, 14, 14],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([0, 3, 4, 5],"bool"), "int64", )
paddle.cast(Tensor([0, 3, 4, 5],"bool"), dtype="bool", )
paddle.cast(Tensor([0, 3],"bool"), dtype="int", )
paddle.cast(Tensor([0, 3],"float32"), "float16", )
paddle.cast(Tensor([0, 3],"float32"), "float32", )
paddle.cast(Tensor([0, 3],"float32"), "float64", )
paddle.cast(Tensor([0, 3],"float32"), "uint8", )
paddle.cast(Tensor([0, 3],"float32"), dtype=Dtype(float64), )
paddle.cast(Tensor([0, 300],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([0, 31, 64],"float16"), Dtype(float32), )
paddle.cast(Tensor([0, 32, 32, 1],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([0, 32, 32, 1],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([0, 32],"float16"), Dtype(bfloat16), )
paddle.cast(Tensor([0, 4, 1],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([0, 4, 19, 34],"bool"), dtype="int64", )
paddle.cast(Tensor([0, 4, 2],"bool"), dtype=Dtype(float64), )
paddle.cast(Tensor([0, 4, 2],"float32"), dtype="float32", )
paddle.cast(Tensor([0, 4, 2],"float64"), dtype="float64", )
paddle.cast(Tensor([0, 4, 38, 68],"bool"), dtype="int64", )
paddle.cast(Tensor([0, 4],"bool"), dtype=Dtype(float16), )
paddle.cast(Tensor([0, 4],"float32"), "complex64", )
paddle.cast(Tensor([0, 4],"float64"), dtype="float64", )
paddle.cast(Tensor([0, 496, 512],"bool"), "int64", )
paddle.cast(Tensor([0, 512, 1024, 1],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([0, 52, 7, 14],"float32"), dtype=Dtype(float32), )
paddle.cast(Tensor([0, 58],"int64"), "bool", )
paddle.cast(Tensor([0, 6, 6],"float64"), dtype=Dtype(float64), )
paddle.cast(Tensor([0, 64],"float16"), "int8", )
paddle.cast(Tensor([0, 640, 1, 1, 1],"float16"), "float32", )
paddle.cast(Tensor([0, 7, 14],"bool"), dtype="int64", )
paddle.cast(Tensor([0, 768, 14, 14],"float32"), VarType(float32), )
paddle.cast(Tensor([0, 768],"float16"), Dtype(bfloat16), )
paddle.cast(Tensor([0, 8, 9, 18],"bool"), dtype="int", )
paddle.cast(Tensor([0],"bool"), "int64", )
paddle.cast(Tensor([0],"bool"), Dtype(float32), )
paddle.cast(Tensor([0],"bool"), Dtype(int64), )
paddle.cast(Tensor([0],"bool"), dtype="bool", )
paddle.cast(Tensor([0],"bool"), dtype="float64", )
paddle.cast(Tensor([0],"bool"), dtype="int", )
paddle.cast(Tensor([0],"bool"), dtype="int32", )
paddle.cast(Tensor([0],"bool"), dtype=Dtype(float16), )
paddle.cast(Tensor([0],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([0],"bool"), dtype=Dtype(float64), )
paddle.cast(Tensor([0],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([0],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([0],"bool"), type(numpy.float16), )
paddle.cast(Tensor([0],"bool"), type(numpy.float32), )
paddle.cast(Tensor([0],"bool"), type(numpy.float64), )
paddle.cast(Tensor([0],"bool"), type(numpy.int32), )
paddle.cast(Tensor([0],"bool"), type(numpy.int64), )
paddle.cast(Tensor([0],"bool"), VarType(float32), )
paddle.cast(Tensor([0],"float16"), "float32", )
paddle.cast(Tensor([0],"float16"), Dtype(bfloat16), )
paddle.cast(Tensor([0],"float16"), Dtype(float32), )
paddle.cast(Tensor([0],"float16"), type(numpy.float16), )
paddle.cast(Tensor([0],"float16"), type(numpy.float32), )
paddle.cast(Tensor([0],"float16"), type(numpy.float64), )
paddle.cast(Tensor([0],"float16"), type(numpy.int32), )
paddle.cast(Tensor([0],"float16"), type(numpy.int64), )
paddle.cast(Tensor([0],"float16"), VarType(float32), )
paddle.cast(Tensor([0],"float32"), "float16", )
paddle.cast(Tensor([0],"float32"), "float32", )
paddle.cast(Tensor([0],"float32"), "float64", )
paddle.cast(Tensor([0],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([0],"float32"), Dtype(float16), )
paddle.cast(Tensor([0],"float32"), Dtype(float64), )
paddle.cast(Tensor([0],"float32"), Dtype(int64), )
paddle.cast(Tensor([0],"float32"), dtype="float16", )
paddle.cast(Tensor([0],"float32"), dtype="float32", )
paddle.cast(Tensor([0],"float32"), dtype="int64", )
paddle.cast(Tensor([0],"float64"), dtype="float64", )
paddle.cast(Tensor([0],"float64"), dtype="int32", )
paddle.cast(Tensor([0],"int64"), "bool", )
paddle.cast(Tensor([0],"int64"), "int32", )
paddle.cast(Tensor([0],"int64"), Dtype(int32), )
paddle.cast(Tensor([0],"int64"), dtype="int64", )
paddle.cast(Tensor([0],"int64"), dtype=Dtype(float16), )
paddle.cast(Tensor([0],"int64"), dtype=Dtype(float32), )
paddle.cast(Tensor([0],"int64"), VarType(int32), )
paddle.cast(Tensor([1, 0, 1, 1],"bool"), dtype="float32", )
paddle.cast(Tensor([1, 0, 1, 1],"float16"), "float32", )
paddle.cast(Tensor([1, 0, 1, 1],"int64"), "bool", )
paddle.cast(Tensor([1, 0, 1, 11],"bool"), "bool", )
paddle.cast(Tensor([1, 0, 1, 11],"bool"), dtype="float32", )
paddle.cast(Tensor([1, 0, 1, 2048],"float32"), Dtype(float16), )
paddle.cast(Tensor([1, 0, 1, 50],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([1, 0, 1, 58],"float32"), Dtype(float32), )
paddle.cast(Tensor([1, 0, 1],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([1, 0, 1],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([1, 0, 1024],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([1, 0, 1024],"bool"), "int64", )
paddle.cast(Tensor([1, 0, 128],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([1, 0, 128],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([1, 0, 128],"int32"), dtype=Dtype(float32), )
paddle.cast(Tensor([1, 0, 128],"int32"), dtype=Dtype(int32), )
paddle.cast(Tensor([1, 0, 14, 14],"float32"), VarType(float32), )
paddle.cast(Tensor([1, 0, 1408],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([1, 0, 192],"float16"), "float32", )
paddle.cast(Tensor([1, 0, 192],"float32"), dtype="float32", )
paddle.cast(Tensor([1, 0, 2, 2],"float64"), Dtype(float32), )
paddle.cast(Tensor([1, 0, 2],"float32"), dtype="float32", )
paddle.cast(Tensor([1, 0, 2],"float64"), dtype="float64", )
paddle.cast(Tensor([1, 0, 24276],"bool"), "float32", )
paddle.cast(Tensor([1, 0, 256],"int32"), dtype=Dtype(float32), )
paddle.cast(Tensor([1, 0, 28, 28],"float32"), "float32", )
paddle.cast(Tensor([1, 0, 28],"uint8"), type(numpy.float32), )
paddle.cast(Tensor([1, 0, 5, 14],"bool"), "int64", )
paddle.cast(Tensor([1, 0, 50, 50],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([1, 0, 512],"bool"), "int64", )
paddle.cast(Tensor([1, 0, 64],"float16"), Dtype(float32), )
paddle.cast(Tensor([1, 0, 64],"float32"), Dtype(float16), )
paddle.cast(Tensor([1, 0, 768],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([1, 0, 768],"float32"), Dtype(float16), )
paddle.cast(Tensor([1, 0],"bool"), "int32", )
paddle.cast(Tensor([1, 0],"bool"), "int64", )
paddle.cast(Tensor([1, 0],"bool"), dtype="float32", )
paddle.cast(Tensor([1, 0],"bool"), dtype="int", )
paddle.cast(Tensor([1, 0],"bool"), dtype="int64", )
paddle.cast(Tensor([1, 0],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([1, 0],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([1, 0],"float16"), Dtype(float32), )
paddle.cast(Tensor([1, 0],"float32"), "float32", )
paddle.cast(Tensor([1, 0],"float32"), dtype="float32", )
paddle.cast(Tensor([1, 0],"float32"), dtype="int64", )
paddle.cast(Tensor([1, 0],"float64"), dtype="float64", )
paddle.cast(Tensor([1, 0],"int32"), Dtype(int64), )
paddle.cast(Tensor([1, 0],"int64"), "bool", )
paddle.cast(Tensor([1, 1, 0, 1],"bool"), dtype="float32", )
paddle.cast(Tensor([1, 1, 0, 1],"float16"), "float32", )
paddle.cast(Tensor([1, 1, 0, 1],"int64"), "bool", )
paddle.cast(Tensor([1, 1, 0, 11],"bool"), "bool", )
paddle.cast(Tensor([1, 1, 0, 11],"bool"), dtype="float32", )
paddle.cast(Tensor([1, 1, 0, 2048],"float32"), Dtype(float16), )
paddle.cast(Tensor([1, 1, 0, 28],"float32"), "float32", )
paddle.cast(Tensor([1, 1, 0, 50],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([1, 1, 0],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([1, 1, 0],"bool"), "float32", )
paddle.cast(Tensor([1, 1, 0],"float16"), "float32", )
paddle.cast(Tensor([1, 1, 0],"float32"), Dtype(float16), )
paddle.cast(Tensor([1, 1, 0],"float32"), dtype="float32", )
paddle.cast(Tensor([1, 1, 1, 0],"bool"), "bool", )
paddle.cast(Tensor([1, 1, 1, 0],"bool"), dtype="float32", )
paddle.cast(Tensor([1, 1, 1, 0],"float16"), "float32", )
paddle.cast(Tensor([1, 1, 1, 0],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([1, 1, 1, 0],"float32"), Dtype(float16), )
paddle.cast(Tensor([1, 1, 1, 0],"int64"), "bool", )
paddle.cast(Tensor([1, 1, 28, 0],"float32"), "float32", )
paddle.cast(Tensor([1, 1, 50, 0],"float16"), dtype=Dtype(float16), )
paddle.cast(Tensor([1, 1024, 0],"bool"), "int64", )
paddle.cast(Tensor([1, 1024, 0],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([1, 1024, 0],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([1, 128, 0],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([1, 128, 0],"int32"), dtype=Dtype(float32), )
paddle.cast(Tensor([1, 128, 0],"int32"), dtype=Dtype(int32), )
paddle.cast(Tensor([1, 14, 0, 14],"bool"), "int64", )
paddle.cast(Tensor([1, 14, 5, 0],"bool"), "int64", )
paddle.cast(Tensor([1, 16, 0],"float16"), Dtype(float32), )
paddle.cast(Tensor([1, 2, 0, 2],"float64"), Dtype(float32), )
paddle.cast(Tensor([1, 2, 0, 58],"float32"), Dtype(float32), )
paddle.cast(Tensor([1, 2, 1, 0],"float32"), Dtype(float32), )
paddle.cast(Tensor([1, 2, 2, 0],"float64"), Dtype(float32), )
paddle.cast(Tensor([1, 2048, 0],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([1, 28, 0],"uint8"), type(numpy.float32), )
paddle.cast(Tensor([1, 31, 0],"float16"), Dtype(float32), )
paddle.cast(Tensor([1, 4, 0],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([1, 4, 0],"float32"), dtype="float32", )
paddle.cast(Tensor([1, 4, 0],"float64"), dtype="float64", )
paddle.cast(Tensor([1, 496, 0],"bool"), "int64", )
paddle.cast(Tensor([1, 768, 0, 14],"float32"), VarType(float32), )
paddle.cast(Tensor([1, 768, 14, 0],"float32"), VarType(float32), )
paddle.cast(Tensor([10, 0, 1],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([10, 0, 1],"float32"), "float64", )
paddle.cast(Tensor([10, 0, 1],"float64"), "float64", )
paddle.cast(Tensor([10, 0],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([10, 0],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([10, 0],"float16"), VarType(float32), )
paddle.cast(Tensor([10, 0],"float32"), Dtype(float16), )
paddle.cast(Tensor([10, 0],"float32"), type(numpy.float32), )
paddle.cast(Tensor([10, 0],"float32"), type(numpy.float64), )
paddle.cast(Tensor([10, 0],"float32"), VarType(bfloat16), )
paddle.cast(Tensor([10, 0],"float32"), VarType(float16), )
paddle.cast(Tensor([10, 0],"float32"), VarType(float64), )
paddle.cast(Tensor([10, 0],"float64"), type(numpy.float32), )
paddle.cast(Tensor([10, 0],"int64"), Dtype(bool), )
paddle.cast(Tensor([10, 0],"int64"), Dtype(float16), )
paddle.cast(Tensor([10, 0],"int64"), Dtype(float32), )
paddle.cast(Tensor([10, 0],"int64"), Dtype(float64), )
paddle.cast(Tensor([10, 0],"int64"), Dtype(int32), )
paddle.cast(Tensor([10, 0],"int64"), Dtype(int64), )
paddle.cast(Tensor([10, 20, 0],"float32"), "float64", )
paddle.cast(Tensor([10, 20, 0],"float64"), "float64", )
paddle.cast(Tensor([10, 4, 0],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([100, 0],"bool"), Dtype(float64), )
paddle.cast(Tensor([100, 0],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([101, 0],"bool"), dtype=type(numpy.int32), )
paddle.cast(Tensor([102, 0],"bool"), dtype=type(numpy.int32), )
paddle.cast(Tensor([1024, 0, 1, 1, 1],"float16"), "float32", )
paddle.cast(Tensor([1024, 0, 14, 14],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([1024, 256, 0, 1, 1],"float16"), "float32", )
paddle.cast(Tensor([1024, 256, 1, 0, 1],"float16"), "float32", )
paddle.cast(Tensor([1024, 256, 1, 1, 0],"float16"), "float32", )
paddle.cast(Tensor([1024, 3, 0, 14],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([1024, 3, 14, 0],"bfloat16"), VarType(float32), )
paddle.cast(Tensor([1024, 640, 0, 1, 1],"float16"), "float32", )
paddle.cast(Tensor([1024, 640, 1, 0, 1],"float16"), "float32", )
paddle.cast(Tensor([1024, 640, 1, 1, 0],"float16"), "float32", )
paddle.cast(Tensor([104, 0, 1, 13],"float32"), Dtype(float16), )
paddle.cast(Tensor([104, 0],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([104, 1, 0, 13],"float32"), Dtype(float16), )
paddle.cast(Tensor([104, 1, 1, 0],"float32"), Dtype(float16), )
paddle.cast(Tensor([11, 0, 10],"bool"), dtype="bool", )
paddle.cast(Tensor([11, 0],"bool"), dtype="bool", )
paddle.cast(Tensor([11, 17, 0],"bool"), dtype="bool", )
paddle.cast(Tensor([11008, 0],"float16"), Dtype(bfloat16), )
paddle.cast(Tensor([1124, 0],"float16"), Dtype(bfloat16), )
paddle.cast(Tensor([114, 0],"float64"), dtype="float64", )
paddle.cast(Tensor([117, 0],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([12, 0, 19, 34],"bool"), dtype="int64", )
paddle.cast(Tensor([12, 0, 2],"bool"), dtype="bool", )
paddle.cast(Tensor([12, 0, 38, 68],"bool"), dtype="int64", )
paddle.cast(Tensor([12, 0],"bool"), "bool", )
paddle.cast(Tensor([12, 0],"bool"), "float", )
paddle.cast(Tensor([12, 0],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([12, 0],"float32"), "int", )
paddle.cast(Tensor([12, 0],"float64"), "int", )
paddle.cast(Tensor([12, 20, 0],"bool"), dtype="bool", )
paddle.cast(Tensor([12, 4, 0, 34],"bool"), dtype="int64", )
paddle.cast(Tensor([12, 4, 0, 68],"bool"), dtype="int64", )
paddle.cast(Tensor([12, 4, 19, 0],"bool"), dtype="int64", )
paddle.cast(Tensor([12, 4, 38, 0],"bool"), dtype="int64", )
paddle.cast(Tensor([16, 0],"bfloat16"), VarType(bfloat16), )
paddle.cast(Tensor([16, 0],"float16"), Dtype(int8), )
paddle.cast(Tensor([16, 0],"float64"), Dtype(int8), )
paddle.cast(Tensor([192, 0],"bool"), dtype=VarType(float32), )
paddle.cast(Tensor([192, 0],"float16"), "int8", )
paddle.cast(Tensor([2, 0, 1, 1, 1],"bool"), Dtype(float32), )
paddle.cast(Tensor([2, 0, 1, 1, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 0, 1, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 0, 1, 114],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([2, 0, 1, 2, 3],"float32"), Dtype(float32), )
paddle.cast(Tensor([2, 0, 1, 2, 3],"float64"), Dtype(float64), )
paddle.cast(Tensor([2, 0, 100],"float32"), dtype=Dtype(float16), )
paddle.cast(Tensor([2, 0, 101],"float32"), dtype=Dtype(float16), )
paddle.cast(Tensor([2, 0, 1024, 1],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([2, 0, 2, 1],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([2, 0, 2, 2],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 0, 2, 2],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([2, 0, 20],"int32"), "bool", )
paddle.cast(Tensor([2, 0, 32, 1],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([2, 0, 32, 1],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([2, 0, 4, 5],"bool"), "int64", )
paddle.cast(Tensor([2, 0, 4, 5],"bool"), dtype="bool", )
paddle.cast(Tensor([2, 0, 7, 14],"float32"), dtype=Dtype(float32), )
paddle.cast(Tensor([2, 0],"bool"), dtype="int32", )
paddle.cast(Tensor([2, 0],"bool"), dtype=Dtype(float64), )
paddle.cast(Tensor([2, 0],"bool"), dtype=VarType(float32), )
paddle.cast(Tensor([2, 0],"float32"), "float16", )
paddle.cast(Tensor([2, 0],"float32"), "float64", )
paddle.cast(Tensor([2, 0],"float32"), "uint8", )
paddle.cast(Tensor([2, 0],"float32"), dtype=Dtype(bfloat16), )
paddle.cast(Tensor([2, 0],"float32"), dtype=Dtype(float64), )
paddle.cast(Tensor([2, 0],"int64"), "int32", )
paddle.cast(Tensor([2, 1, 0, 1, 1],"bool"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 0, 1, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 0, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 0, 114],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([2, 1, 0, 2, 3],"float32"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 0, 2, 3],"float64"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 0, 2],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 0, 2],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([2, 1, 0],"float32"), dtype=Dtype(float16), )
paddle.cast(Tensor([2, 1, 1, 0, 1],"bool"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 1, 0, 1],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 1, 0, 3],"float32"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 1, 0, 3],"float64"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 1, 0],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 1, 0],"float32"), Dtype(bfloat16), )
paddle.cast(Tensor([2, 1, 1, 1, 0],"bool"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 1, 1, 0],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 1, 2, 0],"float32"), Dtype(float32), )
paddle.cast(Tensor([2, 1, 1, 2, 0],"float64"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 2, 0],"bool"), Dtype(float64), )
paddle.cast(Tensor([2, 1, 2, 0],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([2, 1024, 0, 1],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([2, 1024, 1024, 0],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([2, 2, 0, 1],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([2, 2, 2, 0],"bool"), dtype=Dtype(int64), )
paddle.cast(Tensor([2, 20, 0],"int32"), "bool", )
paddle.cast(Tensor([2, 3, 0, 5],"bool"), "int64", )
paddle.cast(Tensor([2, 3, 0, 5],"bool"), dtype="bool", )
paddle.cast(Tensor([2, 3, 4, 0],"bool"), "int64", )
paddle.cast(Tensor([2, 3, 4, 0],"bool"), dtype="bool", )
paddle.cast(Tensor([2, 32, 0, 1],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([2, 32, 0, 1],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([2, 32, 32, 0],"bool"), dtype=Dtype(float32), )
paddle.cast(Tensor([2, 32, 32, 0],"bool"), dtype=Dtype(int32), )
paddle.cast(Tensor([2, 512, 0, 1],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([2, 512, 1024, 0],"bool"), dtype=VarType(int64), )
paddle.cast(Tensor([2, 52, 0, 14],"float32"), dtype=Dtype(float32), )
paddle.cast(Tensor([2, 52, 7, 0],"float32"), dtype=Dtype(float32), )
paddle.cast(Tensor([22016, 0],"float16"), "int8", )
paddle.cast(Tensor([224, 0, 3],"uint8"), type(numpy.float32), )
paddle.cast(Tensor([224, 224, 0],"uint8"), type(numpy.float32), )
paddle.cast(Tensor([3, 0, 2],"bool"), dtype=Dtype(float64), )
paddle.cast(Tensor([3, 0, 2],"float64"), dtype="float64", )
paddle.cast(Tensor([3, 0, 96],"float32"), dtype="int32", )
paddle.cast(Tensor([3, 0],"bool"), dtype="int", )
paddle.cast(Tensor([3, 0],"bool"), dtype=Dtype(float16), )
paddle.cast(Tensor([3, 1, 0],"float64"), dtype="float64", )
paddle.cast(Tensor([3, 128, 0],"float32"), dtype="int32", )
paddle.cast(Tensor([3, 4, 0],"bool"), dtype=Dtype(float64), )
paddle.cast(Tensor([32, 0],"bool"), dtype=Dtype(float16), )
paddle.cast(Tensor([4, 0, 2],"int32"), dtype=VarType(float32), )
paddle.cast(Tensor([4, 0],"float32"), "complex64", )
paddle.cast(Tensor([4, 128, 0],"int32"), dtype=VarType(float32), )
paddle.cast(Tensor([5, 0, 6],"float64"), dtype=Dtype(float64), )
paddle.cast(Tensor([5, 0],"float32"), "float64", )
paddle.cast(Tensor([5, 6, 0],"float64"), dtype=Dtype(float64), )
paddle.cast(Tensor([6, 0, 9, 18],"bool"), dtype="int", )
paddle.cast(Tensor([6, 8, 0, 18],"bool"), dtype="int", )
paddle.cast(Tensor([6, 8, 9, 0],"bool"), dtype="int", )
paddle.cast(Tensor([7, 0, 14],"bool"), dtype="int64", )
paddle.cast(Tensor([7, 7, 0],"bool"), dtype="int64", )
paddle.cast(Tensor([8, 0, 5, 6, 7],"bool"), dtype="bool", )
paddle.cast(Tensor([8, 17, 0, 6, 7],"bool"), dtype="bool", )
paddle.cast(Tensor([8, 17, 5, 0, 7],"bool"), dtype="bool", )
paddle.cast(Tensor([8, 17, 5, 6, 0],"bool"), dtype="bool", )
paddle.cast(x=Tensor([0, 1],"int64"), dtype="int32", )
paddle.cast(x=Tensor([0, 100, 100],"bool"), dtype=Dtype(float16), )
paddle.cast(x=Tensor([0, 100, 100],"bool"), dtype=Dtype(float32), )
paddle.cast(x=Tensor([0, 3, 3],"float32"), dtype="float64", )
paddle.cast(x=Tensor([0, 3, 3],"float64"), dtype="float64", )
paddle.cast(x=Tensor([0, 93431],"bool"), dtype="float32", )
paddle.cast(x=Tensor([0],"bool"), dtype=Dtype(float16), )
paddle.cast(x=Tensor([0],"bool"), dtype=Dtype(float32), )
paddle.cast(x=Tensor([104, 0],"bool"), dtype="float32", )
paddle.cast(x=Tensor([1242, 0],"int64"), dtype="int32", )
paddle.cast(x=Tensor([128, 0],"bool"), dtype="float32", )
paddle.cast(x=Tensor([3, 0, 3],"float32"), dtype="float64", )
paddle.cast(x=Tensor([3, 0, 3],"float64"), dtype="float64", )
paddle.cast(x=Tensor([3, 3, 0],"float32"), dtype="float64", )
paddle.cast(x=Tensor([3, 3, 0],"float64"), dtype="float64", )
paddle.cast(x=Tensor([8, 0, 100],"bool"), dtype=Dtype(float16), )
paddle.cast(x=Tensor([8, 0, 100],"bool"), dtype=Dtype(float32), )
paddle.cast(x=Tensor([8, 100, 0],"bool"), dtype=Dtype(float16), )
paddle.cast(x=Tensor([8, 100, 0],"bool"), dtype=Dtype(float32), )
paddle.clip(x=Tensor([0],"float64"), )
paddle.count_nonzero(Tensor([0, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([0, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([0, 5],"float32"), keepdim=True, )
paddle.count_nonzero(Tensor([1, 0, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 0, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([1, 14, 0, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 0, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 0],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 0],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([3, 0],"float32"), keepdim=True, )
paddle.crop(x=Tensor([0, 3, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([0, 3],"float32"), shape=list[2,2,], )
paddle.crop(x=Tensor([0, 3],"float64"), shape=list[2,2,], )
paddle.crop(x=Tensor([0, 3],"float64"), shape=list[2,2,], offsets=list[1,0,], )
paddle.crop(x=Tensor([0, 3],"float64"), shape=list[2,2,], offsets=tuple(0,0,), )
paddle.crop(x=Tensor([0, 3],"float64"), shape=list[2,2,], offsets=tuple(0,1,), )
paddle.crop(x=Tensor([0, 3],"float64"), shape=list[2,2,], offsets=tuple(1,1,), )
paddle.crop(x=Tensor([2, 0, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([2, 3, 0, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([2, 3, 3, 0],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([3, 0],"float32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 0],"float64"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 0],"float64"), shape=list[2,2,], offsets=list[1,0,], )
paddle.crop(x=Tensor([3, 0],"float64"), shape=list[2,2,], offsets=tuple(0,0,), )
paddle.crop(x=Tensor([3, 0],"float64"), shape=list[2,2,], offsets=tuple(0,1,), )
paddle.crop(x=Tensor([3, 0],"float64"), shape=list[2,2,], offsets=tuple(1,1,), )
paddle.cummax(Tensor([0, 100],"float32"), )
paddle.cummax(Tensor([0, 100],"float32"), axis=0, )
paddle.cummax(Tensor([0, 100],"float32"), axis=-1, )
paddle.cummax(Tensor([0, 100],"float32"), axis=-2, )
paddle.cummax(Tensor([0, 100],"float32"), axis=-2, dtype="int32", )
paddle.cummax(Tensor([0, 100],"int32"), axis=0, )
paddle.cummax(Tensor([100, 0],"float32"), )
paddle.cummax(Tensor([100, 0],"float32"), axis=0, )
paddle.cummax(Tensor([100, 0],"float32"), axis=-1, )
paddle.cummax(Tensor([100, 0],"float32"), axis=-2, )
paddle.cummax(Tensor([100, 0],"float32"), axis=-2, dtype="int32", )
paddle.cummax(Tensor([100, 0],"int32"), axis=0, )
paddle.cummin(Tensor([0, 100],"float32"), )
paddle.cummin(Tensor([0, 100],"float32"), axis=0, )
paddle.cummin(Tensor([0, 100],"float32"), axis=-1, )
paddle.cummin(Tensor([0, 100],"float32"), axis=-2, )
paddle.cummin(Tensor([0, 100],"float32"), axis=-2, dtype="int32", )
paddle.cummin(Tensor([0, 100],"int32"), axis=0, )
paddle.cummin(Tensor([100, 0],"float32"), )
paddle.cummin(Tensor([100, 0],"float32"), axis=0, )
paddle.cummin(Tensor([100, 0],"float32"), axis=-1, )
paddle.cummin(Tensor([100, 0],"float32"), axis=-2, )
paddle.cummin(Tensor([100, 0],"float32"), axis=-2, dtype="int32", )
paddle.cummin(Tensor([100, 0],"int32"), axis=0, )
paddle.cumsum(Tensor([0, 1],"int32"), )
paddle.cumsum(Tensor([0, 12],"float16"), dtype="float16", )
paddle.cumsum(Tensor([0, 12],"float32"), dtype="float32", )
paddle.cumsum(Tensor([0, 20, 1],"float32"), dtype="float32", )
paddle.cumsum(Tensor([0, 4],"int64"), dtype="float64", )
paddle.cumsum(Tensor([0, 4],"int64"), dtype=type(numpy.int32), )
paddle.cumsum(Tensor([0],"float32"), dtype="float32", )
paddle.cumsum(Tensor([0],"int32"), )
paddle.cumsum(Tensor([1, 0],"int32"), )
paddle.cumsum(Tensor([10, 0, 1],"float32"), dtype="float32", )
paddle.cumsum(Tensor([10, 0],"float16"), dtype="float16", )
paddle.cumsum(Tensor([10, 0],"float32"), dtype="float32", )
paddle.cumsum(Tensor([10, 20, 0],"float32"), dtype="float32", )
paddle.cumsum(Tensor([2, 0],"int32"), )
paddle.cumsum(Tensor([3, 0],"int64"), dtype="float64", )
paddle.cumsum(Tensor([3, 0],"int64"), dtype=type(numpy.int32), )
paddle.cumsum(x=Tensor([0, 2, 1, 3],"float64"), axis=Tensor([1],"float64"), )
paddle.cumsum(x=Tensor([0],"float32"), )
paddle.cumsum(x=Tensor([0],"float64"), )
paddle.cumsum(x=Tensor([1, 0, 1, 3],"float64"), axis=Tensor([1],"float64"), )
paddle.cumsum(x=Tensor([1, 2, 0, 3],"float64"), axis=Tensor([1],"float64"), )
paddle.cumsum(x=Tensor([1, 2, 1, 0],"float64"), axis=Tensor([1],"float64"), )
paddle.cumsum(x=Tensor([1, 2, 1, 3],"float64"), axis=Tensor([0],"float64"), )
paddle.cumulative_trapezoid(y=Tensor([0, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float32"), x=Tensor([0, 3],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float32"), x=Tensor([2, 3],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float64"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float64"), x=Tensor([0, 3],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float64"), x=Tensor([2, 3],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float32"), x=Tensor([2, 0],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float32"), x=Tensor([2, 3],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float64"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float64"), x=Tensor([2, 0],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float64"), x=Tensor([2, 3],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=Tensor([0, 3],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=Tensor([2, 0],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float64"), x=Tensor([0, 3],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float64"), x=Tensor([2, 0],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([3, 0, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 0],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 4],"float32"), x=Tensor([0],"float32"), dx=None, axis=1, )
paddle.diag(Tensor([0],"float64"), padding_value=8, )
paddle.diag(Tensor([0],"int64"), padding_value=-8, )
paddle.diag(Tensor([0],"int64"), padding_value=8.0, )
paddle.diag(x=Tensor([0],"float64"), offset=-1, padding_value=-0.001, )
paddle.diag(x=Tensor([0],"float64"), offset=1, padding_value=1.1, )
paddle.diag(x=Tensor([0],"float64"), offset=-2, padding_value=0, )
paddle.divide(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 1, 1, 1],"float32"), )
paddle.divide(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.divide(Tensor([0, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.divide(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.divide(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.divide(Tensor([0, 3, 1, 5],"float32"), Tensor([0, 3, 1, 5],"float32"), )
paddle.divide(Tensor([0, 3, 1, 5],"float32"), Tensor([2, 3, 1, 5],"float32"), )
paddle.divide(Tensor([0, 3, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.divide(Tensor([0, 3, 3, 40, 40],"float32"), Tensor([0, 3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([0, 3, 3, 40, 40],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([0, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.divide(Tensor([0, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.divide(Tensor([0, 3, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.divide(Tensor([0, 3, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.divide(Tensor([0, 3, 4],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.divide(Tensor([0, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.divide(Tensor([0, 3, 40, 40, 3],"float32"), Tensor([0, 3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([0, 3, 40, 40, 3],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([0, 3, 40, 40],"float32"), Tensor([0, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([0, 3, 40, 40],"float32"), Tensor([3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([0, 3],"complex128"), Tensor([0, 3],"float64"), name="Normal_probs", )
paddle.divide(Tensor([0, 3],"complex128"), Tensor([2, 3],"float64"), name="Normal_probs", )
paddle.divide(Tensor([0, 3],"complex64"), Tensor([0, 3],"float32"), name="Normal_probs", )
paddle.divide(Tensor([0, 3],"complex64"), Tensor([2, 3],"float32"), name="Normal_probs", )
paddle.divide(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.divide(Tensor([0, 3],"float32"), Tensor([1, 3],"float32"), )
paddle.divide(Tensor([0, 40, 40, 3],"float32"), Tensor([0, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([0, 40, 40, 3],"float32"), Tensor([3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([0, 40, 40],"float32"), Tensor([0, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([0, 40, 40],"float32"), Tensor([3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.divide(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.divide(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.divide(Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.divide(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 1, 1],"float32"), )
paddle.divide(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.divide(Tensor([1, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.divide(Tensor([1, 0],"float32"), Tensor([1, 3],"float32"), )
paddle.divide(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 1, 0, 1],"float32"), )
paddle.divide(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 1, 0],"float32"), )
paddle.divide(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 1, 1, 1],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 1, 1],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 0, 1],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 1, 0],"float32"), )
paddle.divide(Tensor([1, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.divide(Tensor([1, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.divide(Tensor([1, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.divide(Tensor([1, 3],"float32"), Tensor([1, 0],"float32"), )
paddle.divide(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.divide(Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.divide(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.divide(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.divide(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.divide(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.divide(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.divide(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.divide(Tensor([2, 0, 1, 5],"float32"), Tensor([2, 0, 1, 5],"float32"), )
paddle.divide(Tensor([2, 0, 1, 5],"float32"), Tensor([2, 3, 1, 5],"float32"), )
paddle.divide(Tensor([2, 0, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.divide(Tensor([2, 0, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.divide(Tensor([2, 0, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.divide(Tensor([2, 0, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.divide(Tensor([2, 0, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.divide(Tensor([2, 0, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.divide(Tensor([2, 0, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.divide(Tensor([2, 0],"complex128"), Tensor([2, 0],"float64"), name="Normal_probs", )
paddle.divide(Tensor([2, 0],"complex128"), Tensor([2, 3],"float64"), name="Normal_probs", )
paddle.divide(Tensor([2, 0],"complex64"), Tensor([2, 0],"float32"), name="Normal_probs", )
paddle.divide(Tensor([2, 0],"complex64"), Tensor([2, 3],"float32"), name="Normal_probs", )
paddle.divide(Tensor([2, 3, 0, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.divide(Tensor([2, 3, 0, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.divide(Tensor([2, 3, 0, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.divide(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.divide(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 1, 5],"float32"), )
paddle.divide(Tensor([2, 3, 0, 5],"float32"), Tensor([5],"complex64"), )
paddle.divide(Tensor([2, 3, 0, 5],"float64"), Tensor([5],"complex128"), )
paddle.divide(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.divide(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.divide(Tensor([2, 3, 1, 0],"float32"), Tensor([2, 3, 1, 0],"float32"), )
paddle.divide(Tensor([2, 3, 1, 0],"float32"), Tensor([2, 3, 1, 5],"float32"), )
paddle.divide(Tensor([2, 3, 1, 5],"float32"), Tensor([0, 3, 1, 5],"float32"), )
paddle.divide(Tensor([2, 3, 1, 5],"float32"), Tensor([2, 0, 1, 5],"float32"), )
paddle.divide(Tensor([2, 3, 1, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.divide(Tensor([2, 3, 1, 5],"float32"), Tensor([2, 3, 1, 0],"float32"), )
paddle.divide(Tensor([2, 3, 3, 0],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.divide(Tensor([2, 3, 3, 4],"float32"), Tensor([0, 1, 4],"float32"), )
paddle.divide(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 0, 4],"float32"), )
paddle.divide(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 0],"float32"), )
paddle.divide(Tensor([2, 3, 4, 0],"complex128"), Tensor([4, 5],"float64"), )
paddle.divide(Tensor([2, 3, 4, 0],"complex64"), Tensor([4, 5],"float32"), )
paddle.divide(Tensor([2, 3, 4, 0],"float32"), Tensor([5],"complex64"), )
paddle.divide(Tensor([2, 3, 4, 0],"float64"), Tensor([5],"complex128"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex128"), Tensor([0, 5],"float64"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 0],"float64"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex64"), Tensor([0, 5],"float32"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 0],"float32"), )
paddle.divide(Tensor([2, 3, 4, 5],"float32"), Tensor([0],"complex64"), )
paddle.divide(Tensor([2, 3, 4, 5],"float64"), Tensor([0],"complex128"), )
paddle.divide(Tensor([2, 3, 4],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.divide(Tensor([2, 3, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.divide(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.divide(Tensor([2, 3],"complex128"), Tensor([0, 3],"float64"), name="Normal_probs", )
paddle.divide(Tensor([2, 3],"complex128"), Tensor([2, 0],"float64"), name="Normal_probs", )
paddle.divide(Tensor([2, 3],"complex64"), Tensor([0, 3],"float32"), name="Normal_probs", )
paddle.divide(Tensor([2, 3],"complex64"), Tensor([2, 0],"float32"), name="Normal_probs", )
paddle.divide(Tensor([3, 0, 3, 40, 40],"float32"), Tensor([3, 0, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 0, 3, 40, 40],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 0, 40, 3],"float32"), Tensor([3, 0, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 0, 40, 3],"float32"), Tensor([3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 0, 40, 40, 3],"float32"), Tensor([3, 0, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 0, 40, 40, 3],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 0, 40, 40],"float32"), Tensor([3, 0, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 0, 40, 40],"float32"), Tensor([3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 0, 40],"float32"), Tensor([3, 0, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 0, 40],"float32"), Tensor([3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 0, 40, 3],"float32"), Tensor([3, 3, 0, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 0, 40, 3],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 0, 40, 40],"float32"), Tensor([3, 3, 0, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 0, 40, 40],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 0, 40],"float32"), Tensor([3, 3, 0, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 0, 40],"float32"), Tensor([3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 0, 40],"float32"), Tensor([3, 3, 3, 0, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 0, 40],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 40, 0],"float32"), Tensor([3, 3, 3, 40, 0],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 40, 0],"float32"), Tensor([3, 3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([0, 3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([3, 0, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([3, 3, 0, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([3, 3, 3, 0, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 3, 40, 40],"float32"), Tensor([3, 3, 3, 40, 0],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 0, 3],"float32"), Tensor([3, 3, 40, 0, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 0, 3],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 0],"float32"), Tensor([3, 3, 40, 0],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 0],"float32"), Tensor([3, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40, 0],"float32"), Tensor([3, 3, 40, 40, 0],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40, 0],"float32"), Tensor([3, 3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([0, 3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([3, 0, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([3, 3, 0, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([3, 3, 40, 0, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40, 3],"float32"), Tensor([3, 3, 40, 40, 0],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40],"float32"), Tensor([0, 3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40],"float32"), Tensor([3, 0, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40],"float32"), Tensor([3, 3, 0, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 3, 40, 40],"float32"), Tensor([3, 3, 40, 0],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 0, 3],"float32"), Tensor([3, 40, 0, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 0, 3],"float32"), Tensor([3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 0],"float32"), Tensor([3, 40, 0],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 0],"float32"), Tensor([3, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40, 0],"float32"), Tensor([3, 40, 40, 0],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40, 0],"float32"), Tensor([3, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40, 3],"float32"), Tensor([0, 40, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40, 3],"float32"), Tensor([3, 0, 40, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40, 3],"float32"), Tensor([3, 40, 0, 3],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40, 3],"float32"), Tensor([3, 40, 40, 0],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40],"float32"), Tensor([0, 40, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40],"float32"), Tensor([3, 0, 40],"float32"), name=None, )
paddle.divide(Tensor([3, 40, 40],"float32"), Tensor([3, 40, 0],"float32"), name=None, )
paddle.divide(x=Tensor([0, 1],"float64"), y=Tensor([0, 1],"float64"), name=None, )
paddle.divide(x=Tensor([0, 1],"float64"), y=Tensor([3, 1],"float64"), name=None, )
paddle.divide(x=Tensor([0, 3, 3],"float64"), y=Tensor([3],"float64"), )
paddle.divide(x=Tensor([0],"float32"), y=Tensor([0],"float32"), )
paddle.divide(x=Tensor([0],"float32"), y=Tensor([3],"float32"), )
paddle.divide(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.divide(x=Tensor([0],"float64"), y=Tensor([2],"float64"), )
paddle.divide(x=Tensor([0],"float64"), y=Tensor([3, 1],"float64"), )
paddle.divide(x=Tensor([2],"float64"), y=Tensor([0],"float64"), )
paddle.divide(x=Tensor([3, 0, 3],"float64"), y=Tensor([3],"float64"), )
paddle.divide(x=Tensor([3, 0],"float64"), y=Tensor([3, 0],"float64"), name=None, )
paddle.divide(x=Tensor([3, 0],"float64"), y=Tensor([3, 1],"float64"), name=None, )
paddle.divide(x=Tensor([3, 1],"float64"), y=Tensor([0, 1],"float64"), name=None, )
paddle.divide(x=Tensor([3, 1],"float64"), y=Tensor([3, 0],"float64"), name=None, )
paddle.divide(x=Tensor([3, 3, 0],"float64"), y=Tensor([3],"float64"), )
paddle.divide(x=Tensor([3, 3, 3],"float64"), y=Tensor([0],"float64"), )
paddle.divide(x=Tensor([3],"float32"), y=Tensor([0],"float32"), )
paddle.divide(x=Tensor([3],"float64"), y=Tensor([0, 1],"float64"), )
paddle.divide(x=Tensor([3],"float64"), y=Tensor([3, 0],"float64"), )
paddle.dot(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.dot(Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.dot(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.dot(Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), )
paddle.dot(Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.dot(Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.dot(x=Tensor([0, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.dot(x=Tensor([0, 3],"float64"), y=Tensor([2, 3],"float64"), )
paddle.dot(x=Tensor([0],"int32"), y=Tensor([0],"int32"), )
paddle.dot(x=Tensor([0],"int32"), y=Tensor([6],"int32"), )
paddle.dot(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
paddle.dot(x=Tensor([0],"int64"), y=Tensor([6],"int64"), )
paddle.dot(x=Tensor([2, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.dot(x=Tensor([2, 0],"float64"), y=Tensor([2, 3],"float64"), )
paddle.dot(x=Tensor([2, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.dot(x=Tensor([2, 3],"float64"), y=Tensor([2, 0],"float64"), )
paddle.dot(x=Tensor([6],"int32"), y=Tensor([0],"int32"), )
paddle.dot(x=Tensor([6],"int64"), y=Tensor([0],"int64"), )
paddle.dsplit(Tensor([0, 2, 6],"bool"), 3, )
paddle.dsplit(Tensor([0, 2, 6],"float16"), 3, )
paddle.dsplit(Tensor([0, 3, 6],"int64"), 2, )
paddle.dsplit(Tensor([4, 0, 6],"bool"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"float16"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"int64"), 2, )
paddle.dsplit(Tensor([4, 2, 0],"bool"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"float16"), 3, )
paddle.dsplit(Tensor([4, 3, 0],"int64"), 2, )
paddle.einsum("..., ...", Tensor([0, 10],"float64"), Tensor([2, 3, 10],"float64"), )
paddle.einsum("..., ...", Tensor([0, 11],"float64"), Tensor([2, 3, 11],"float64"), )
paddle.einsum("..., ...", Tensor([3, 0],"float64"), Tensor([2, 3, 10],"float64"), )
paddle.einsum("..., ...", Tensor([3, 0],"float64"), Tensor([2, 3, 11],"float64"), )
paddle.einsum("..., ...", Tensor([3, 10],"float64"), Tensor([0, 3, 10],"float64"), )
paddle.einsum("..., ...", Tensor([3, 10],"float64"), Tensor([2, 0, 10],"float64"), )
paddle.einsum("..., ...", Tensor([3, 10],"float64"), Tensor([2, 3, 0],"float64"), )
paddle.einsum("..., ...", Tensor([3, 11],"float64"), Tensor([0, 3, 11],"float64"), )
paddle.einsum("..., ...", Tensor([3, 11],"float64"), Tensor([2, 0, 11],"float64"), )
paddle.einsum("..., ...", Tensor([3, 11],"float64"), Tensor([2, 3, 0],"float64"), )
paddle.einsum("..., f -> ... f", Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.einsum("..., f -> ... f", Tensor([0],"float32"), Tensor([16],"float32"), )
paddle.einsum("..., f -> ... f", Tensor([16],"float32"), Tensor([0],"float32"), )
paddle.einsum("..., f -> ... f", Tensor([24],"float32"), Tensor([0],"float32"), )
paddle.einsum("...,...", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("...,...", Tensor([0],"float64"), Tensor([10],"float64"), )
paddle.einsum("...,...", Tensor([0],"float64"), Tensor([11],"float64"), )
paddle.einsum("...,...", Tensor([10],"float64"), Tensor([0],"float64"), )
paddle.einsum("...,...", Tensor([11],"float64"), Tensor([0],"float64"), )
paddle.einsum("...,...->...", Tensor([0, 5, 5],"float64"), Tensor([0, 5, 5],"float64"), )
paddle.einsum("...,...->...", Tensor([0, 5, 5],"float64"), Tensor([5, 5, 5],"float64"), )
paddle.einsum("...,...->...", Tensor([5, 0, 5],"float64"), Tensor([5, 0, 5],"float64"), )
paddle.einsum("...,...->...", Tensor([5, 0, 5],"float64"), Tensor([5, 5, 5],"float64"), )
paddle.einsum("...,...->...", Tensor([5, 5, 0],"float64"), Tensor([5, 5, 0],"float64"), )
paddle.einsum("...,...->...", Tensor([5, 5, 0],"float64"), Tensor([5, 5, 5],"float64"), )
paddle.einsum("...,...->...", Tensor([5, 5, 5],"float64"), Tensor([0, 5, 5],"float64"), )
paddle.einsum("...,...->...", Tensor([5, 5, 5],"float64"), Tensor([5, 0, 5],"float64"), )
paddle.einsum("...,...->...", Tensor([5, 5, 5],"float64"), Tensor([5, 5, 0],"float64"), )
paddle.einsum("...->...", Tensor([0, 5, 5],"float64"), )
paddle.einsum("...->...", Tensor([5, 0, 5],"float64"), )
paddle.einsum("...->...", Tensor([5, 5, 0],"float64"), )
paddle.einsum("...a,a...->...", Tensor([0, 2, 2, 10],"float64"), Tensor([0, 3, 2, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([0, 2, 2, 10],"float64"), Tensor([10, 3, 2, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 0, 2, 10],"float64"), Tensor([10, 0, 2, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 0, 2, 10],"float64"), Tensor([10, 3, 2, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 0, 10],"float64"), Tensor([10, 3, 0, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 0, 10],"float64"), Tensor([10, 3, 2, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 2, 0],"float64"), Tensor([10, 3, 2, 0],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 2, 0],"float64"), Tensor([10, 3, 2, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 2, 10],"float64"), Tensor([0, 3, 2, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 2, 10],"float64"), Tensor([10, 0, 2, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 2, 10],"float64"), Tensor([10, 3, 0, 2],"float64"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 2, 10],"float64"), Tensor([10, 3, 2, 0],"float64"), )
paddle.einsum("...i, ...i", Tensor([0, 3, 10],"float64"), Tensor([10],"float64"), )
paddle.einsum("...i, ...i", Tensor([0, 3, 11],"float64"), Tensor([11],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 0, 10],"float64"), Tensor([10],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 0, 11],"float64"), Tensor([11],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 3, 0],"float64"), Tensor([10],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 3, 0],"float64"), Tensor([11],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 3, 10],"float64"), Tensor([0],"float64"), )
paddle.einsum("...i, ...i", Tensor([2, 3, 11],"float64"), Tensor([0],"float64"), )
paddle.einsum("...i->...", Tensor([0, 3, 10],"float64"), )
paddle.einsum("...i->...", Tensor([0, 3, 11],"float64"), )
paddle.einsum("...i->...", Tensor([2, 0, 10],"float64"), )
paddle.einsum("...i->...", Tensor([2, 0, 11],"float64"), )
paddle.einsum("...i->...", Tensor([2, 3, 0],"float64"), )
paddle.einsum("...ii,...i->...i", Tensor([0, 13, 13, 12, 12],"float64"), Tensor([1, 12],"float64"), )
paddle.einsum("...ii,...i->...i", Tensor([32, 0, 13, 12, 12],"float64"), Tensor([1, 12],"float64"), )
paddle.einsum("...ii,...i->...i", Tensor([32, 13, 0, 12, 12],"float64"), Tensor([1, 12],"float64"), )
paddle.einsum("...ii,...i->...i", Tensor([32, 13, 13, 0, 12],"float64"), Tensor([1, 12],"float64"), )
paddle.einsum("...ii,...i->...i", Tensor([32, 13, 13, 12, 0],"float64"), Tensor([1, 12],"float64"), )
paddle.einsum("...ii,...i->...i", Tensor([32, 13, 13, 12, 12],"float64"), Tensor([0, 12],"float64"), )
paddle.einsum("...ii,...i->...i", Tensor([32, 13, 13, 12, 12],"float64"), Tensor([1, 0],"float64"), )
paddle.einsum("...ij,...i->j...", Tensor([0, 11],"float64"), Tensor([3, 4, 5, 10],"float64"), )
paddle.einsum("...ij,...i->j...", Tensor([10, 0],"float64"), Tensor([3, 4, 5, 10],"float64"), )
paddle.einsum("...ij,...i->j...", Tensor([10, 11],"float64"), Tensor([0, 4, 5, 10],"float64"), )
paddle.einsum("...ij,...i->j...", Tensor([10, 11],"float64"), Tensor([3, 0, 5, 10],"float64"), )
paddle.einsum("...ij,...i->j...", Tensor([10, 11],"float64"), Tensor([3, 4, 0, 10],"float64"), )
paddle.einsum("...ij,...i->j...", Tensor([10, 11],"float64"), Tensor([3, 4, 5, 0],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([0, 5],"float64"), Tensor([0, 1],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([0, 5],"float64"), Tensor([5, 1],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([1, 0],"float64"), Tensor([5, 0],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([1, 0],"float64"), Tensor([5, 1],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([1, 0],"float64"), Tensor([5, 5],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([1, 5],"float64"), Tensor([0, 1],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([1, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("...ij,...jk->...ik", Tensor([1, 5],"float64"), Tensor([5, 0],"float64"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([0, 28, 28],"float32"), Tensor([3, 6, 28, 28],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([0, 6, 8, 8],"float32"), Tensor([2, 3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([0, 8, 8],"float32"), Tensor([3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 6, 0, 8],"float32"), Tensor([2, 3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 6, 8, 0],"float32"), Tensor([2, 3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 6, 8, 8],"float32"), Tensor([0, 3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 6, 8, 8],"float32"), Tensor([2, 0, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 6, 8, 8],"float32"), Tensor([2, 3, 0, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 6, 8, 8],"float32"), Tensor([2, 3, 6, 0, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 6, 8, 8],"float32"), Tensor([2, 3, 6, 8, 0],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 0, 28],"float32"), Tensor([3, 6, 28, 28],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 0, 8],"float32"), Tensor([3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 28, 0],"float32"), Tensor([3, 6, 28, 28],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 28, 28],"float32"), Tensor([0, 6, 28, 28],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 28, 28],"float32"), Tensor([3, 0, 28, 28],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 28, 28],"float32"), Tensor([3, 6, 0, 28],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 28, 28],"float32"), Tensor([3, 6, 28, 0],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 8, 0],"float32"), Tensor([3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 8, 8],"float32"), Tensor([0, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 8, 8],"float32"), Tensor([3, 0, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 8, 8],"float32"), Tensor([3, 6, 0, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([6, 8, 8],"float32"), Tensor([3, 6, 8, 0],"float32"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([0, 10, 3],"float64"), Tensor([0, 3, 10],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([0, 10, 3],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 0, 3],"float64"), Tensor([3, 0, 10],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 0, 3],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 10, 0],"float64"), Tensor([3, 3, 0],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 10, 0],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 10, 3],"float64"), Tensor([0, 3, 10],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 10, 3],"float64"), Tensor([3, 0, 10],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 10, 3],"float64"), Tensor([3, 3, 0],"float64"), )
paddle.einsum("...jk->...kj", Tensor([0, 10, 3],"float64"), )
paddle.einsum("...jk->...kj", Tensor([3, 0, 3],"float64"), )
paddle.einsum("...jk->...kj", Tensor([3, 10, 0],"float64"), )
paddle.einsum("...qk,...kd->...qd", Tensor([0, 4, 3, 1, 2],"float32"), Tensor([0, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([0, 4, 3, 1, 2],"float32"), Tensor([13, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([0, 4, 3, 1, 2],"float32"), Tensor([52, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 0, 3, 1, 2],"float32"), Tensor([13, 0, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 0, 3, 1, 2],"float32"), Tensor([13, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 0, 1, 2],"float32"), Tensor([13, 4, 0, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 0, 1, 2],"float32"), Tensor([13, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 0, 2],"float32"), Tensor([13, 4, 3, 0, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 0, 2],"float32"), Tensor([13, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 1, 0],"float32"), Tensor([13, 4, 3, 2, 0],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 1, 0],"float32"), Tensor([13, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 1, 2],"float32"), Tensor([0, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 1, 2],"float32"), Tensor([13, 0, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 1, 2],"float32"), Tensor([13, 4, 0, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 1, 2],"float32"), Tensor([13, 4, 3, 0, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 1, 2],"float32"), Tensor([13, 4, 3, 2, 0],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 0, 3, 1, 2],"float32"), Tensor([52, 0, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 0, 3, 1, 2],"float32"), Tensor([52, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 0, 1, 2],"float32"), Tensor([52, 4, 0, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 0, 1, 2],"float32"), Tensor([52, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 3, 0, 2],"float32"), Tensor([52, 4, 3, 0, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 3, 0, 2],"float32"), Tensor([52, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 3, 1, 0],"float32"), Tensor([52, 4, 3, 2, 0],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 3, 1, 0],"float32"), Tensor([52, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 3, 1, 2],"float32"), Tensor([0, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 3, 1, 2],"float32"), Tensor([52, 0, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 3, 1, 2],"float32"), Tensor([52, 4, 0, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 3, 1, 2],"float32"), Tensor([52, 4, 3, 0, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([52, 4, 3, 1, 2],"float32"), Tensor([52, 4, 3, 2, 0],"float32"), )
paddle.einsum("a...a->...", Tensor([0, 3, 2, 1, 4, 5],"float64"), )
paddle.einsum("a...a->...", Tensor([5, 0, 2, 1, 4, 5],"float64"), )
paddle.einsum("a...a->...", Tensor([5, 3, 0, 1, 4, 5],"float64"), )
paddle.einsum("a...a->...", Tensor([5, 3, 2, 0, 4, 5],"float64"), )
paddle.einsum("a...a->...", Tensor([5, 3, 2, 1, 0, 5],"float64"), )
paddle.einsum("a...a->...", Tensor([5, 3, 2, 1, 4, 0],"float64"), )
paddle.einsum("a...a->a...", Tensor([0, 3, 2, 1, 4, 5],"float64"), )
paddle.einsum("a...a->a...", Tensor([5, 0, 2, 1, 4, 5],"float64"), )
paddle.einsum("a...a->a...", Tensor([5, 3, 0, 1, 4, 5],"float64"), )
paddle.einsum("a...a->a...", Tensor([5, 3, 2, 0, 4, 5],"float64"), )
paddle.einsum("a...a->a...", Tensor([5, 3, 2, 1, 0, 5],"float64"), )
paddle.einsum("a...a->a...", Tensor([5, 3, 2, 1, 4, 0],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([0, 3, 1, 4],"float64"), Tensor([0, 3, 1, 4],"float64"), Tensor([0, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([0, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 0, 1, 4],"float64"), Tensor([4, 0, 1, 4],"float64"), Tensor([4, 0, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 0, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 0],"float64"), Tensor([4, 3, 1, 0],"float64"), Tensor([4, 3, 1, 0],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 0],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 4],"float64"), Tensor([0, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 0, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 0],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([0, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 0, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), )
paddle.einsum("a...b,b...c,c...a", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 0],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([0, 3, 1, 4],"float64"), Tensor([0, 3, 1, 4],"float64"), Tensor([0, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([0, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 0, 1, 4],"float64"), Tensor([4, 0, 1, 4],"float64"), Tensor([4, 0, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 0, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 0],"float64"), Tensor([4, 3, 1, 0],"float64"), Tensor([4, 3, 1, 0],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 0],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 4],"float64"), Tensor([0, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 0, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 0],"float64"), Tensor([4, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([0, 3, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 0, 1, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 0, 4],"float64"), )
paddle.einsum("a...b,b...c,c...d", Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 4],"float64"), Tensor([4, 3, 1, 0],"float64"), )
paddle.einsum("a...d,...cb->...abcd", Tensor([0, 3, 2, 3, 4],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("a...d,...cb->...abcd", Tensor([10, 0, 2, 3, 4],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("a...d,...cb->...abcd", Tensor([10, 3, 0, 3, 4],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("a...d,...cb->...abcd", Tensor([10, 3, 2, 0, 4],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("a...d,...cb->...abcd", Tensor([10, 3, 2, 3, 0],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("a...d,...cb->...abcd", Tensor([10, 3, 2, 3, 4],"float64"), Tensor([0, 10],"float64"), )
paddle.einsum("a...d,...cb->...abcd", Tensor([10, 3, 2, 3, 4],"float64"), Tensor([12, 0],"float64"), )
paddle.einsum("aaa->a", Tensor([0, 5, 5],"float64"), )
paddle.einsum("aaa->a", Tensor([5, 0, 5],"float64"), )
paddle.einsum("aaa->a", Tensor([5, 5, 0],"float64"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([0, 4, 5, 3],"float64"), Tensor([3, 4, 5],"float64"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 0, 5, 3],"float64"), Tensor([3, 4, 5],"float64"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 4, 0, 3],"float64"), Tensor([3, 4, 5],"float64"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 4, 5, 0],"float64"), Tensor([3, 4, 5],"float64"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 4, 5, 3],"float64"), Tensor([0, 4, 5],"float64"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 4, 5, 3],"float64"), Tensor([3, 0, 5],"float64"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 4, 5, 3],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.einsum("ak, kn-> an", Tensor([0, 11],"float32"), Tensor([0, 50],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([0, 11],"float32"), Tensor([11, 50],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([15000, 0],"float32"), Tensor([11, 0],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([15000, 0],"float32"), Tensor([11, 50],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([15000, 11],"float32"), Tensor([0, 50],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([15000, 11],"float32"), Tensor([11, 0],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([60000, 0],"float32"), Tensor([11, 0],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([60000, 0],"float32"), Tensor([11, 50],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([60000, 11],"float32"), Tensor([0, 50],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([60000, 11],"float32"), Tensor([11, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([0, 8, 1, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([0, 8, 109, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([1, 8, 1, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([0, 8, 1, 64],"float32"), Tensor([1, 8, 109, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 0, 1, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 0, 109, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 8, 1, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 0, 1, 64],"float32"), Tensor([1, 8, 109, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 0, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 1, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 109, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 109, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 109, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([0, 8, 1, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([0, 8, 109, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([1, 0, 1, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([1, 0, 109, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([1, 8, 0, 64],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([1, 8, 1, 0],"float32"), )
paddle.einsum("b h i d, b h j d -> b h i j", Tensor([1, 8, 1, 64],"float32"), Tensor([1, 8, 109, 0],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 109],"float32"), Tensor([0, 8, 109, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 109],"float32"), Tensor([1, 8, 109, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 113],"float32"), Tensor([0, 8, 113, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([0, 8, 1, 113],"float32"), Tensor([1, 8, 113, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 109],"float32"), Tensor([1, 0, 109, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 109],"float32"), Tensor([1, 8, 109, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 113],"float32"), Tensor([1, 0, 113, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 0, 1, 113],"float32"), Tensor([1, 8, 113, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 109],"float32"), Tensor([1, 8, 0, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 109],"float32"), Tensor([1, 8, 109, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 113],"float32"), Tensor([1, 8, 0, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 0, 113],"float32"), Tensor([1, 8, 113, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 109, 0],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 109, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 113, 0],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 113, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 109],"float32"), Tensor([0, 8, 109, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 109],"float32"), Tensor([1, 0, 109, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 109],"float32"), Tensor([1, 8, 0, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 109],"float32"), Tensor([1, 8, 109, 0],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 113],"float32"), Tensor([0, 8, 113, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 113],"float32"), Tensor([1, 0, 113, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 113],"float32"), Tensor([1, 8, 0, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 113],"float32"), Tensor([1, 8, 113, 0],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([0, 4, 5, 1, 8],"float32"), Tensor([0, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([0, 4, 5, 1, 8],"float32"), Tensor([13, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([0, 4, 5, 1, 8],"float32"), Tensor([52, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 0, 5, 1, 8],"float32"), Tensor([13, 0, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 0, 5, 1, 8],"float32"), Tensor([13, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 0, 1, 8],"float32"), Tensor([13, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 0, 1, 8],"float32"), Tensor([13, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 0, 8],"float32"), Tensor([13, 4, 5, 0, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 0, 8],"float32"), Tensor([13, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 1, 0],"float32"), Tensor([13, 4, 5, 7, 0],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 1, 0],"float32"), Tensor([13, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 1, 8],"float32"), Tensor([0, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 1, 8],"float32"), Tensor([13, 0, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 1, 8],"float32"), Tensor([13, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 1, 8],"float32"), Tensor([13, 4, 5, 0, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 1, 8],"float32"), Tensor([13, 4, 5, 7, 0],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 0, 5, 1, 8],"float32"), Tensor([52, 0, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 0, 5, 1, 8],"float32"), Tensor([52, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 0, 1, 8],"float32"), Tensor([52, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 0, 1, 8],"float32"), Tensor([52, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 5, 0, 8],"float32"), Tensor([52, 4, 5, 0, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 5, 0, 8],"float32"), Tensor([52, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 5, 1, 0],"float32"), Tensor([52, 4, 5, 7, 0],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 5, 1, 0],"float32"), Tensor([52, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 5, 1, 8],"float32"), Tensor([0, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 5, 1, 8],"float32"), Tensor([52, 0, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 5, 1, 8],"float32"), Tensor([52, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 5, 1, 8],"float32"), Tensor([52, 4, 5, 0, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([52, 4, 5, 1, 8],"float32"), Tensor([52, 4, 5, 7, 0],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([0, 4, 3, 1, 1],"float32"), Tensor([13, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([0, 4, 3, 1, 1],"float32"), Tensor([52, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 0, 3, 1, 1],"float32"), Tensor([13, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 4, 0, 1, 1],"float32"), Tensor([13, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 4, 3, 0, 1],"float32"), Tensor([13, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 4, 3, 1, 0],"float32"), Tensor([13, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 4, 3, 1, 1],"float32"), Tensor([0, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 4, 3, 1, 1],"float32"), Tensor([13, 0, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 4, 3, 1, 1],"float32"), Tensor([13, 4, 0, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 4, 3, 1, 1],"float32"), Tensor([13, 4, 1, 0],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([52, 0, 3, 1, 1],"float32"), Tensor([52, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([52, 4, 0, 1, 1],"float32"), Tensor([52, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([52, 4, 3, 0, 1],"float32"), Tensor([52, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([52, 4, 3, 1, 0],"float32"), Tensor([52, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([52, 4, 3, 1, 1],"float32"), Tensor([0, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([52, 4, 3, 1, 1],"float32"), Tensor([52, 0, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([52, 4, 3, 1, 1],"float32"), Tensor([52, 4, 0, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([52, 4, 3, 1, 1],"float32"), Tensor([52, 4, 1, 0],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([0, 4, 1, 1, 7],"float32"), Tensor([0, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([0, 4, 1, 1, 7],"float32"), Tensor([13, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([0, 4, 3, 1, 3],"float32"), Tensor([0, 4, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([0, 4, 3, 1, 3],"float32"), Tensor([13, 4, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 0, 1, 1, 7],"float32"), Tensor([13, 0, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 0, 1, 1, 7],"float32"), Tensor([13, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 0, 3, 1, 3],"float32"), Tensor([13, 0, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 0, 3, 1, 3],"float32"), Tensor([13, 4, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 0, 1, 3],"float32"), Tensor([13, 4, 0, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 0, 1, 3],"float32"), Tensor([13, 4, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 0, 1, 7],"float32"), Tensor([13, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 0, 1, 7],"float32"), Tensor([13, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 0, 7],"float32"), Tensor([13, 4, 1, 0, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 0, 7],"float32"), Tensor([13, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 1, 0],"float32"), Tensor([13, 4, 1, 7, 0],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 1, 0],"float32"), Tensor([13, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 1, 7],"float32"), Tensor([0, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 1, 7],"float32"), Tensor([13, 0, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 1, 7],"float32"), Tensor([13, 4, 0, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 1, 7],"float32"), Tensor([13, 4, 1, 0, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 1, 7],"float32"), Tensor([13, 4, 1, 7, 0],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 3, 0, 3],"float32"), Tensor([13, 4, 3, 0, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 3, 0, 3],"float32"), Tensor([13, 4, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 3, 1, 0],"float32"), Tensor([13, 4, 3, 3, 0],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 3, 1, 0],"float32"), Tensor([13, 4, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 3, 1, 3],"float32"), Tensor([0, 4, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 3, 1, 3],"float32"), Tensor([13, 0, 3, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 3, 1, 3],"float32"), Tensor([13, 4, 0, 3, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 3, 1, 3],"float32"), Tensor([13, 4, 3, 0, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 3, 1, 3],"float32"), Tensor([13, 4, 3, 3, 0],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([0, 14, 14, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([0, 32, 32, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([432, 0, 14, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([432, 14, 0, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([432, 14, 14, 0],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([432, 14, 14, 64],"float32"), Tensor([0, 14, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([432, 14, 14, 64],"float32"), Tensor([14, 0, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([432, 14, 14, 64],"float32"), Tensor([14, 14, 0],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([48, 0, 32, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([48, 32, 0, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([48, 32, 32, 0],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([48, 32, 32, 64],"float32"), Tensor([0, 32, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([48, 32, 32, 64],"float32"), Tensor([32, 0, 64],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([48, 32, 32, 64],"float32"), Tensor([32, 32, 0],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([0, 14, 14, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([0, 32, 32, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([432, 0, 14, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([432, 14, 0, 64],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([432, 14, 14, 0],"float32"), Tensor([14, 14, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([432, 14, 14, 64],"float32"), Tensor([0, 14, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([432, 14, 14, 64],"float32"), Tensor([14, 0, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([432, 14, 14, 64],"float32"), Tensor([14, 14, 0],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([48, 0, 32, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([48, 32, 0, 64],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([48, 32, 32, 0],"float32"), Tensor([32, 32, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([48, 32, 32, 64],"float32"), Tensor([0, 32, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([48, 32, 32, 64],"float32"), Tensor([32, 0, 64],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([48, 32, 32, 64],"float32"), Tensor([32, 32, 0],"float32"), )
paddle.einsum("bij,bjk->bik", Tensor([0, 4, 5],"float64"), Tensor([0, 5, 2],"float64"), )
paddle.einsum("bij,bjk->bik", Tensor([0, 4, 5],"float64"), Tensor([3, 5, 2],"float64"), )
paddle.einsum("bij,bjk->bik", Tensor([3, 0, 5],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.einsum("bij,bjk->bik", Tensor([3, 0, 5],"float64"), Tensor([3, 5, 2],"float64"), )
paddle.einsum("bij,bjk->bik", Tensor([3, 4, 0],"float64"), Tensor([3, 5, 0],"float64"), )
paddle.einsum("bij,bjk->bik", Tensor([3, 4, 0],"float64"), Tensor([3, 5, 2],"float64"), )
paddle.einsum("bij,bjk->bik", Tensor([3, 4, 5],"float64"), Tensor([0, 5, 2],"float64"), )
paddle.einsum("bij,bjk->bik", Tensor([3, 4, 5],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.einsum("bij,bjk->bik", Tensor([3, 4, 5],"float64"), Tensor([3, 5, 0],"float64"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 2, 4, 4],"float32"), Tensor([0, 2, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 2, 4, 4],"float32"), Tensor([0, 4, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 2, 4, 4],"float32"), Tensor([13, 2, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([0, 2, 4, 4],"float32"), Tensor([13, 4, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 0, 4, 4],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 0, 4, 4],"float32"), Tensor([13, 2, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 0, 4, 4],"float32"), Tensor([13, 4, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 0, 4],"float32"), Tensor([13, 2, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 0, 4],"float32"), Tensor([13, 2, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 0, 4],"float32"), Tensor([13, 4, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 0, 4],"float32"), Tensor([13, 4, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 0],"float32"), Tensor([13, 2, 4, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 0],"float32"), Tensor([13, 2, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 0],"float32"), Tensor([13, 4, 4, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 0],"float32"), Tensor([13, 4, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 4],"float32"), Tensor([0, 2, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 4],"float32"), Tensor([0, 4, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 4],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 4],"float32"), Tensor([13, 2, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 4],"float32"), Tensor([13, 2, 4, 0],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 4],"float32"), Tensor([13, 4, 0, 4],"float32"), )
paddle.einsum("bind,bjnd->bnij", Tensor([13, 2, 4, 4],"float32"), Tensor([13, 4, 4, 0],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([0, 2, 4, 4],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([0, 4, 4, 4],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 0, 4, 4],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 2, 0, 4],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 2, 4, 0],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 2, 4, 4],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 2, 4, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 2, 4, 4],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 4, 0, 4],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 4, 4, 0],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 4, 4, 4],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 4, 4, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 4, 4, 4],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([0, 2, 4, 4],"float32"), Tensor([4, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([0, 2, 4, 4],"float32"), Tensor([8, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 0, 4, 4],"float32"), Tensor([4, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 0, 4, 4],"float32"), Tensor([8, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 0, 4],"float32"), Tensor([4, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 0, 4],"float32"), Tensor([8, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 4, 0],"float32"), Tensor([4, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 4, 0],"float32"), Tensor([8, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 4, 4],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 4, 4],"float32"), Tensor([4, 0, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 4, 4],"float32"), Tensor([8, 0, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 4, 4],"float32"), Tensor([8, 4, 0],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([0, 5, 1, 1],"float32"), Tensor([0, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([0, 5, 1, 1],"float32"), Tensor([13, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([0, 5, 1, 1],"float32"), Tensor([52, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 0, 1, 1],"float32"), Tensor([13, 0, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 0, 1, 1],"float32"), Tensor([13, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 5, 0, 1],"float32"), Tensor([13, 5, 0, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 5, 0, 1],"float32"), Tensor([13, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 5, 1, 0],"float32"), Tensor([13, 5, 1, 0],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 5, 1, 0],"float32"), Tensor([13, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 5, 1, 1],"float32"), Tensor([0, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 5, 1, 1],"float32"), Tensor([13, 0, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 5, 1, 1],"float32"), Tensor([13, 5, 0, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 5, 1, 1],"float32"), Tensor([13, 5, 1, 0],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 0, 1, 1],"float32"), Tensor([52, 0, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 0, 1, 1],"float32"), Tensor([52, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 5, 0, 1],"float32"), Tensor([52, 5, 0, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 5, 0, 1],"float32"), Tensor([52, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 5, 1, 0],"float32"), Tensor([52, 5, 1, 0],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 5, 1, 0],"float32"), Tensor([52, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 5, 1, 1],"float32"), Tensor([0, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 5, 1, 1],"float32"), Tensor([52, 0, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 5, 1, 1],"float32"), Tensor([52, 5, 0, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([52, 5, 1, 1],"float32"), Tensor([52, 5, 1, 0],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([0, 3, 5],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([0, 5, 1],"float32"), Tensor([13, 4, 5, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([1, 0, 5],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([1, 3, 0],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([1, 3, 5],"float64"), Tensor([0, 2, 3, 4],"float64"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([1, 3, 5],"float64"), Tensor([1, 0, 3, 4],"float64"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([1, 3, 5],"float64"), Tensor([1, 2, 0, 4],"float64"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([1, 3, 5],"float64"), Tensor([1, 2, 3, 0],"float64"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([13, 0, 1],"float32"), Tensor([13, 4, 5, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([13, 5, 0],"float32"), Tensor([13, 4, 5, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([13, 5, 1],"float32"), Tensor([0, 4, 5, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([13, 5, 1],"float32"), Tensor([13, 0, 5, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([13, 5, 1],"float32"), Tensor([13, 4, 0, 2],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([13, 5, 1],"float32"), Tensor([13, 4, 5, 0],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([0, 5, 1, 1],"float32"), Tensor([0, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([0, 5, 1, 1],"float32"), Tensor([13, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([0, 5, 1, 1],"float32"), Tensor([52, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 0, 1, 1],"float32"), Tensor([13, 0, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 0, 1, 1],"float32"), Tensor([13, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 5, 0, 1],"float32"), Tensor([13, 1, 0, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 5, 0, 1],"float32"), Tensor([13, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 5, 1, 0],"float32"), Tensor([13, 1, 1, 0],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 5, 1, 0],"float32"), Tensor([13, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 5, 1, 1],"float32"), Tensor([0, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 5, 1, 1],"float32"), Tensor([13, 0, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 5, 1, 1],"float32"), Tensor([13, 1, 0, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([13, 5, 1, 1],"float32"), Tensor([13, 1, 1, 0],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 0, 1, 1],"float32"), Tensor([52, 0, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 0, 1, 1],"float32"), Tensor([52, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 5, 0, 1],"float32"), Tensor([52, 1, 0, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 5, 0, 1],"float32"), Tensor([52, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 5, 1, 0],"float32"), Tensor([52, 1, 1, 0],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 5, 1, 0],"float32"), Tensor([52, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 5, 1, 1],"float32"), Tensor([0, 1, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 5, 1, 1],"float32"), Tensor([52, 0, 1, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 5, 1, 1],"float32"), Tensor([52, 1, 0, 1],"float32"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([52, 5, 1, 1],"float32"), Tensor([52, 1, 1, 0],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([0, 2, 16, 16],"float32"), Tensor([0, 16, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([0, 2, 16, 16],"float32"), Tensor([2, 16, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 0, 16, 16],"float32"), Tensor([2, 0, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 0, 16, 16],"float32"), Tensor([2, 16, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 0, 16],"float32"), Tensor([2, 16, 0, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 0, 16],"float32"), Tensor([2, 16, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 16, 0],"float32"), Tensor([2, 16, 4, 0],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 16, 0],"float32"), Tensor([2, 16, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 16, 16],"float32"), Tensor([0, 16, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 16, 16],"float32"), Tensor([2, 0, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 16, 16],"float32"), Tensor([2, 16, 0, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 16, 16],"float32"), Tensor([2, 16, 4, 0],"float32"), )
paddle.einsum("bn,anm,bm->ba", Tensor([0, 5],"float64"), Tensor([3, 5, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("bn,anm,bm->ba", Tensor([2, 0],"float64"), Tensor([3, 5, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("bn,anm,bm->ba", Tensor([2, 5],"float64"), Tensor([0, 5, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("bn,anm,bm->ba", Tensor([2, 5],"float64"), Tensor([3, 0, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("bn,anm,bm->ba", Tensor([2, 5],"float64"), Tensor([3, 5, 0],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("bn,anm,bm->ba", Tensor([2, 5],"float64"), Tensor([3, 5, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.einsum("bn,anm,bm->ba", Tensor([2, 5],"float64"), Tensor([3, 5, 2],"float64"), Tensor([2, 0],"float64"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 2, 2],"float32"), Tensor([0, 2, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 2, 2],"float32"), Tensor([13, 2, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 2, 4],"float32"), Tensor([0, 4, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([0, 4, 2, 4],"float32"), Tensor([13, 4, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 0, 2, 2],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 0, 2, 2],"float32"), Tensor([13, 2, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 0, 2, 4],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 0, 2, 4],"float32"), Tensor([13, 4, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 0, 2],"float32"), Tensor([13, 2, 0, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 0, 2],"float32"), Tensor([13, 2, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 0, 4],"float32"), Tensor([13, 4, 0, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 0, 4],"float32"), Tensor([13, 4, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 0],"float32"), Tensor([13, 2, 4, 0],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 0],"float32"), Tensor([13, 2, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 0],"float32"), Tensor([13, 4, 4, 0],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 0],"float32"), Tensor([13, 4, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 2],"float32"), Tensor([0, 2, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 2],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 2],"float32"), Tensor([13, 2, 0, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 2],"float32"), Tensor([13, 2, 4, 0],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 4],"float32"), Tensor([0, 4, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 4],"float32"), Tensor([13, 0, 4, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 4],"float32"), Tensor([13, 4, 0, 4],"float32"), )
paddle.einsum("bnij,bjnd->bind", Tensor([13, 4, 2, 4],"float32"), Tensor([13, 4, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([0, 4, 7, 7],"float32"), Tensor([0, 10, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([0, 4, 7, 7],"float32"), Tensor([0, 11, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([0, 4, 7, 7],"float32"), Tensor([7, 10, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([0, 4, 7, 7],"float32"), Tensor([7, 11, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 0, 7, 7],"float32"), Tensor([7, 0, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 0, 7, 7],"float32"), Tensor([7, 10, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4, 0, 7],"float32"), Tensor([7, 10, 0, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4, 0, 7],"float32"), Tensor([7, 10, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4, 7, 0],"float32"), Tensor([7, 10, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4, 7, 0],"float32"), Tensor([7, 10, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4, 7, 7],"float32"), Tensor([0, 10, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4, 7, 7],"float32"), Tensor([7, 0, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4, 7, 7],"float32"), Tensor([7, 10, 0, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4, 7, 7],"float32"), Tensor([7, 10, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 0, 7, 7],"float32"), Tensor([7, 0, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 0, 7, 7],"float32"), Tensor([7, 11, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 4, 0, 7],"float32"), Tensor([7, 11, 0, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 4, 0, 7],"float32"), Tensor([7, 11, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 4, 7, 0],"float32"), Tensor([7, 11, 4, 0],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 4, 7, 0],"float32"), Tensor([7, 11, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 4, 7, 7],"float32"), Tensor([0, 11, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 4, 7, 7],"float32"), Tensor([7, 0, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 4, 7, 7],"float32"), Tensor([7, 11, 0, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11, 4, 7, 7],"float32"), Tensor([7, 11, 4, 0],"float32"), )
paddle.einsum("i , j -> i j", Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.einsum("i , j -> i j", Tensor([0],"float32"), Tensor([2],"float32"), )
paddle.einsum("i , j -> i j", Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.einsum("i , j -> i j", Tensor([10],"float32"), Tensor([0],"float32"), )
paddle.einsum("i, i", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("i, i", Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.einsum("i, i", Tensor([2],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,d->id", Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.einsum("i,d->id", Tensor([0],"float32"), Tensor([16],"float32"), )
paddle.einsum("i,d->id", Tensor([14],"float32"), Tensor([0],"float32"), )
paddle.einsum("i,d->id", Tensor([16],"float32"), Tensor([0],"float32"), )
paddle.einsum("i,i", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,i", Tensor([0],"float64"), Tensor([10],"float64"), )
paddle.einsum("i,i", Tensor([0],"float64"), Tensor([11],"float64"), )
paddle.einsum("i,i", Tensor([10],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,i", Tensor([11],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,i->", Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.einsum("i,i->", Tensor([0],"float32"), Tensor([5],"float32"), )
paddle.einsum("i,i->", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,i->", Tensor([0],"float64"), Tensor([10],"float64"), )
paddle.einsum("i,i->", Tensor([10],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,i->", Tensor([5],"float32"), Tensor([0],"float32"), )
paddle.einsum("i,i->i", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,i->i", Tensor([0],"float64"), Tensor([5],"float64"), )
paddle.einsum("i,i->i", Tensor([5],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,ij->", Tensor([0],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("i,ij->", Tensor([2],"float64"), Tensor([0, 2],"float64"), )
paddle.einsum("i,ij->", Tensor([2],"float64"), Tensor([2, 0],"float64"), )
paddle.einsum("i,j", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,j", Tensor([0],"float64"), Tensor([10],"float64"), )
paddle.einsum("i,j", Tensor([0],"float64"), Tensor([11],"float64"), )
paddle.einsum("i,j", Tensor([3],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,j->ii", Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,j->ii", Tensor([0],"float64"), Tensor([2],"float64"), )
paddle.einsum("i,j->ii", Tensor([2],"float64"), Tensor([0],"float64"), )
paddle.einsum("i,j->ij", Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.einsum("i,j->ij", Tensor([0],"float32"), Tensor([128],"float32"), )
paddle.einsum("i,j->ij", Tensor([0],"float32"), Tensor([2],"float32"), )
paddle.einsum("i,j->ij", Tensor([10],"float32"), Tensor([0],"float32"), )
paddle.einsum("i..., i...", Tensor([0, 3, 2],"float64"), Tensor([1],"float64"), )
paddle.einsum("i..., i...", Tensor([0, 3, 2],"float64"), Tensor([10],"float64"), )
paddle.einsum("i..., i...", Tensor([1, 0, 2],"float64"), Tensor([1],"float64"), )
paddle.einsum("i..., i...", Tensor([1, 3, 0],"float64"), Tensor([1],"float64"), )
paddle.einsum("i..., i...", Tensor([1, 3, 2],"float64"), Tensor([0],"float64"), )
paddle.einsum("i..., i...", Tensor([10, 0, 2],"float64"), Tensor([10],"float64"), )
paddle.einsum("i..., i...", Tensor([10, 3, 0],"float64"), Tensor([10],"float64"), )
paddle.einsum("i..., i...", Tensor([10, 3, 2],"float64"), Tensor([0],"float64"), )
paddle.einsum("i...->...", Tensor([0, 10, 3, 3],"float64"), )
paddle.einsum("i...->...", Tensor([0, 10],"float64"), )
paddle.einsum("i...->...", Tensor([0, 11],"float64"), )
paddle.einsum("i...->...", Tensor([0, 3, 10],"float64"), )
paddle.einsum("i...->...", Tensor([0, 3, 11],"float64"), )
paddle.einsum("i...->...", Tensor([2, 0, 10],"float64"), )
paddle.einsum("i...->...", Tensor([2, 0, 11],"float64"), )
paddle.einsum("i...->...", Tensor([2, 0],"float64"), )
paddle.einsum("i...->...", Tensor([2, 3, 0],"float64"), )
paddle.einsum("i...->...", Tensor([5, 0, 3, 3],"float64"), )
paddle.einsum("i...->...", Tensor([5, 10, 0, 3],"float64"), )
paddle.einsum("i...->...", Tensor([5, 10, 3, 0],"float64"), )
paddle.einsum("i...j, i...j->...", Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.einsum("i...j, i...j->...", Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.einsum("i...j, i...j->...", Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.einsum("i...j, i...j->...", Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), )
paddle.einsum("i...j, i...j->...", Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.einsum("i...j, i...j->...", Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.einsum("i->", Tensor([0],"float64"), )
paddle.einsum("i->ii", Tensor([0],"float64"), )
paddle.einsum("ibm,hm->ibh", Tensor([0, 10, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([0, 14, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([1, 0, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([1, 14, 0],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([1, 14, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([1, 14, 32],"float32"), Tensor([32, 0],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 0, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 10, 0],"float32"), Tensor([32, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 10, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.einsum("ibm,hm->ibh", Tensor([7, 10, 32],"float32"), Tensor([32, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 10, 4, 8],"float32"), Tensor([0, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 10, 4, 8],"float32"), Tensor([14, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([0, 10, 4, 8],"float32"), Tensor([7, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 0, 4, 8],"float32"), Tensor([14, 0, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 0, 4, 8],"float32"), Tensor([14, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 0, 4, 8],"float32"), Tensor([7, 0, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 0, 4, 8],"float32"), Tensor([7, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 0, 8],"float32"), Tensor([14, 10, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 0, 8],"float32"), Tensor([14, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 0, 8],"float32"), Tensor([7, 10, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 0, 8],"float32"), Tensor([7, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 0],"float32"), Tensor([14, 10, 4, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 0],"float32"), Tensor([14, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 0],"float32"), Tensor([7, 10, 4, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 0],"float32"), Tensor([7, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 8],"float32"), Tensor([0, 10, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 8],"float32"), Tensor([14, 0, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 8],"float32"), Tensor([14, 10, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 8],"float32"), Tensor([14, 10, 4, 0],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 8],"float32"), Tensor([7, 0, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 8],"float32"), Tensor([7, 10, 0, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 8],"float32"), Tensor([7, 10, 4, 0],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([0, 14, 4, 8],"float32"), Tensor([2, 4, 8],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 0, 4, 8],"float32"), Tensor([2, 4, 8],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 14, 0, 8],"float32"), Tensor([2, 4, 8],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 14, 4, 0],"float32"), Tensor([2, 4, 8],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 14, 4, 8],"float32"), Tensor([0, 4, 8],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 14, 4, 8],"float32"), Tensor([2, 0, 8],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 14, 4, 8],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.einsum("ii->", Tensor([0, 5],"float64"), )
paddle.einsum("ii->", Tensor([5, 0],"float64"), )
paddle.einsum("ij, j", Tensor([0, 10],"float64"), Tensor([10],"float64"), )
paddle.einsum("ij, j", Tensor([0, 11],"float64"), Tensor([11],"float64"), )
paddle.einsum("ij, j", Tensor([4, 0],"float64"), Tensor([10],"float64"), )
paddle.einsum("ij, j", Tensor([4, 0],"float64"), Tensor([11],"float64"), )
paddle.einsum("ij, j", Tensor([4, 10],"float64"), Tensor([0],"float64"), )
paddle.einsum("ij, j", Tensor([4, 11],"float64"), Tensor([0],"float64"), )
paddle.einsum("ij,...i->j...", Tensor([0, 5],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ij,...i->j...", Tensor([4, 0],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ij,...i->j...", Tensor([4, 5],"float64"), Tensor([0, 2, 4],"float64"), )
paddle.einsum("ij,...i->j...", Tensor([4, 5],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.einsum("ij,...i->j...", Tensor([4, 5],"float64"), Tensor([3, 2, 0],"float64"), )
paddle.einsum("ij,i->", Tensor([0, 2],"float64"), Tensor([2],"float64"), )
paddle.einsum("ij,i->", Tensor([2, 0],"float64"), Tensor([2],"float64"), )
paddle.einsum("ij,i->", Tensor([2, 2],"float64"), Tensor([0],"float64"), )
paddle.einsum("ij,ij->", Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.einsum("ij,ij->", Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.einsum("ij,ij->", Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.einsum("ij,ij->", Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), )
paddle.einsum("ij,ij->", Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.einsum("ij,ij->", Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.einsum("ij,ij->ij", Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("ij,ij->ij", Tensor([0, 5],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ij,ij->ij", Tensor([4, 0],"float64"), Tensor([4, 0],"float64"), )
paddle.einsum("ij,ij->ij", Tensor([4, 0],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ij,ij->ij", Tensor([4, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("ij,ij->ij", Tensor([4, 5],"float64"), Tensor([4, 0],"float64"), )
paddle.einsum("ij,ij->j", Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.einsum("ij,ij->j", Tensor([0, 2],"float64"), Tensor([1, 2],"float64"), )
paddle.einsum("ij,ij->j", Tensor([10, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.einsum("ij,ij->j", Tensor([10, 0],"float64"), Tensor([1, 2],"float64"), )
paddle.einsum("ij,ij->j", Tensor([10, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.einsum("ij,ij->j", Tensor([10, 2],"float64"), Tensor([1, 0],"float64"), )
paddle.einsum("ij,j", Tensor([0, 1],"float64"), Tensor([1],"float64"), )
paddle.einsum("ij,j", Tensor([1, 0],"float64"), Tensor([1],"float64"), )
paddle.einsum("ij,j", Tensor([1, 1],"float64"), Tensor([0],"float64"), )
paddle.einsum("ij,j->i", Tensor([0, 5],"float64"), Tensor([5],"float64"), )
paddle.einsum("ij,j->i", Tensor([4, 0],"float64"), Tensor([5],"float64"), )
paddle.einsum("ij,j->i", Tensor([4, 5],"float64"), Tensor([0],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 10],"float64"), Tensor([0, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 10],"float64"), Tensor([10, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 11],"float64"), Tensor([0, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([0, 11],"float64"), Tensor([11, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 0],"float64"), Tensor([10, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 0],"float64"), Tensor([11, 0],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 0],"float64"), Tensor([11, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 10],"float64"), Tensor([0, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 11],"float64"), Tensor([0, 6],"float64"), )
paddle.einsum("ij,jk", Tensor([4, 11],"float64"), Tensor([11, 0],"float64"), )
paddle.einsum("ij,jk,kl", Tensor([0, 4],"float64"), Tensor([0, 5],"float64"), Tensor([0, 6],"float64"), )
paddle.einsum("ij,jk,kl", Tensor([0, 4],"float64"), Tensor([4, 5],"float64"), Tensor([5, 6],"float64"), )
paddle.einsum("ij,jk,kl", Tensor([3, 0],"float64"), Tensor([4, 0],"float64"), Tensor([5, 0],"float64"), )
paddle.einsum("ij,jk,kl", Tensor([3, 0],"float64"), Tensor([4, 5],"float64"), Tensor([5, 6],"float64"), )
paddle.einsum("ij,jk,kl", Tensor([3, 4],"float64"), Tensor([0, 5],"float64"), Tensor([5, 6],"float64"), )
paddle.einsum("ij,jk,kl", Tensor([3, 4],"float64"), Tensor([4, 0],"float64"), Tensor([5, 6],"float64"), )
paddle.einsum("ij,jk,kl", Tensor([3, 4],"float64"), Tensor([4, 5],"float64"), Tensor([0, 6],"float64"), )
paddle.einsum("ij,jk,kl", Tensor([3, 4],"float64"), Tensor([4, 5],"float64"), Tensor([5, 0],"float64"), )
paddle.einsum("ij,k->ijk", Tensor([0, 128],"float32"), Tensor([32],"float32"), )
paddle.einsum("ij,k->ijk", Tensor([0, 4096],"float32"), Tensor([32],"float32"), )
paddle.einsum("ij,k->ijk", Tensor([1, 0],"float32"), Tensor([32],"float32"), )
paddle.einsum("ij,k->ijk", Tensor([1, 128],"float32"), Tensor([0],"float32"), )
paddle.einsum("ij,k->ijk", Tensor([1, 4096],"float32"), Tensor([0],"float32"), )
paddle.einsum("ij,kj->ik", Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("ij,kj->ik", Tensor([0, 5],"float64"), Tensor([2, 5],"float64"), )
paddle.einsum("ij,kj->ik", Tensor([4, 0],"float64"), Tensor([2, 0],"float64"), )
paddle.einsum("ij,kj->ik", Tensor([4, 0],"float64"), Tensor([2, 5],"float64"), )
paddle.einsum("ij,kj->ik", Tensor([4, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("ij,kj->ik", Tensor([4, 5],"float64"), Tensor([2, 0],"float64"), )
paddle.einsum("ij,kl->ijkl", Tensor([0, 5],"float64"), Tensor([0, 7],"float64"), )
paddle.einsum("ij,kl->ijkl", Tensor([0, 5],"float64"), Tensor([3, 7],"float64"), )
paddle.einsum("ij,kl->ijkl", Tensor([4, 0],"float64"), Tensor([3, 0],"float64"), )
paddle.einsum("ij,kl->ijkl", Tensor([4, 0],"float64"), Tensor([3, 7],"float64"), )
paddle.einsum("ij,kl->ijkl", Tensor([4, 5],"float64"), Tensor([0, 7],"float64"), )
paddle.einsum("ij,kl->ijkl", Tensor([4, 5],"float64"), Tensor([3, 0],"float64"), )
paddle.einsum("ij->", Tensor([0, 2],"float32"), )
paddle.einsum("ij->", Tensor([2, 0],"float32"), )
paddle.einsum("ij->i", Tensor([0, 5],"float64"), )
paddle.einsum("ij->i", Tensor([4, 0],"float64"), )
paddle.einsum("ij->j", Tensor([0, 5],"float64"), )
paddle.einsum("ij->j", Tensor([4, 0],"float64"), )
paddle.einsum("ij->ji", Tensor([0, 5],"float64"), )
paddle.einsum("ij->ji", Tensor([4, 0],"float64"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([0, 7, 14, 2],"float32"), Tensor([0, 14, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([0, 7, 14, 2],"float32"), Tensor([7, 14, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 0, 14, 2],"float32"), Tensor([7, 0, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 0, 14, 2],"float32"), Tensor([7, 14, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 0, 2],"float32"), Tensor([7, 14, 0, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 0, 2],"float32"), Tensor([7, 14, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 14, 0],"float32"), Tensor([7, 14, 4, 0],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 14, 0],"float32"), Tensor([7, 14, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 14, 2],"float32"), Tensor([0, 14, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 14, 2],"float32"), Tensor([7, 0, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 14, 2],"float32"), Tensor([7, 14, 0, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 14, 2],"float32"), Tensor([7, 14, 4, 0],"float32"), )
paddle.einsum("iji->j", Tensor([0, 10, 5],"float64"), )
paddle.einsum("iji->j", Tensor([5, 0, 5],"float64"), )
paddle.einsum("iji->j", Tensor([5, 10, 0],"float64"), )
paddle.einsum("ijk, ik->jk", Tensor([0, 2, 5],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk, ik->jk", Tensor([4, 0, 5],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk, ik->jk", Tensor([4, 2, 0],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk, ik->jk", Tensor([4, 2, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("ijk, ik->jk", Tensor([4, 2, 5],"float64"), Tensor([4, 0],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([0, 10, 3],"float64"), Tensor([0, 3, 10],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([0, 10, 3],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 0, 3],"float64"), Tensor([3, 0, 10],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 0, 3],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 10, 0],"float64"), Tensor([3, 3, 0],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 10, 0],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 10, 3],"float64"), Tensor([0, 3, 10],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 10, 3],"float64"), Tensor([3, 0, 10],"float64"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 10, 3],"float64"), Tensor([3, 3, 0],"float64"), )
paddle.einsum("ijk, jil -> kl", Tensor([0, 4, 5],"float64"), Tensor([0, 3, 2],"float64"), )
paddle.einsum("ijk, jil -> kl", Tensor([0, 4, 5],"float64"), Tensor([4, 3, 2],"float64"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 0, 5],"float64"), Tensor([4, 0, 2],"float64"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 0, 5],"float64"), Tensor([4, 3, 2],"float64"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 4, 0],"float64"), Tensor([4, 3, 0],"float64"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 4, 0],"float64"), Tensor([4, 3, 2],"float64"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 4, 5],"float64"), Tensor([0, 3, 2],"float64"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 4, 5],"float64"), Tensor([4, 0, 2],"float64"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 4, 5],"float64"), Tensor([4, 3, 0],"float64"), )
paddle.einsum("ijk,jk->i", Tensor([0, 4, 5],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk,jk->i", Tensor([3, 0, 5],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk,jk->i", Tensor([3, 4, 0],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk,jk->i", Tensor([3, 4, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("ijk,jk->i", Tensor([3, 4, 5],"float64"), Tensor([4, 0],"float64"), )
paddle.einsum("ijk,jk->ij", Tensor([0, 4, 5],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 0, 5],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 4, 0],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 4, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 4, 5],"float64"), Tensor([4, 0],"float64"), )
paddle.einsum("ijk,jk->ik", Tensor([0, 4, 5],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk,jk->ik", Tensor([3, 0, 5],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk,jk->ik", Tensor([3, 4, 0],"float64"), Tensor([4, 5],"float64"), )
paddle.einsum("ijk,jk->ik", Tensor([3, 4, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("ijk,jk->ik", Tensor([3, 4, 5],"float64"), Tensor([4, 0],"float64"), )
paddle.einsum("ijk,lk->ijl", Tensor([0, 4, 5],"float64"), Tensor([2, 5],"float64"), )
paddle.einsum("ijk,lk->ijl", Tensor([3, 0, 5],"float64"), Tensor([2, 5],"float64"), )
paddle.einsum("ijk,lk->ijl", Tensor([3, 4, 0],"float64"), Tensor([2, 5],"float64"), )
paddle.einsum("ijk,lk->ijl", Tensor([3, 4, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.einsum("ijk,lk->ijl", Tensor([3, 4, 5],"float64"), Tensor([2, 0],"float64"), )
paddle.einsum("ijk->kji", Tensor([0, 10, 3],"float64"), )
paddle.einsum("ijk->kji", Tensor([3, 0, 3],"float64"), )
paddle.einsum("ijk->kji", Tensor([3, 10, 0],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([0, 5, 7, 3],"float64"), Tensor([0, 7, 5, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([0, 5, 7, 3],"float64"), Tensor([5, 7, 5, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 0, 7, 3],"float64"), Tensor([5, 0, 5, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 0, 7, 3],"float64"), Tensor([5, 7, 5, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 5, 0, 3],"float64"), Tensor([5, 7, 0, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 5, 0, 3],"float64"), Tensor([5, 7, 5, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 5, 7, 0],"float64"), Tensor([5, 7, 5, 0],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 5, 7, 0],"float64"), Tensor([5, 7, 5, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 5, 7, 3],"float64"), Tensor([0, 7, 5, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 5, 7, 3],"float64"), Tensor([5, 0, 5, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 5, 7, 3],"float64"), Tensor([5, 7, 0, 7],"float64"), )
paddle.einsum("ijki,jkjk->ik", Tensor([3, 5, 7, 3],"float64"), Tensor([5, 7, 5, 0],"float64"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([0, 4, 5, 3],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 0, 5, 3],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 4, 0, 3],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 4, 5, 0],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 4, 5, 3],"float64"), Tensor([0, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 4, 5, 3],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 4, 5, 3],"float64"), Tensor([3, 2, 0],"float64"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([0, 4, 5, 3],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 0, 5, 3],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 4, 0, 3],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 4, 5, 0],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 4, 5, 3],"float64"), Tensor([0, 2, 4],"float64"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 4, 5, 3],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 4, 5, 3],"float64"), Tensor([3, 2, 0],"float64"), )
paddle.einsum("ik, ijk->j", Tensor([0, 5],"float64"), Tensor([4, 2, 5],"float64"), )
paddle.einsum("ik, ijk->j", Tensor([4, 0],"float64"), Tensor([4, 2, 5],"float64"), )
paddle.einsum("ik, ijk->j", Tensor([4, 5],"float64"), Tensor([0, 2, 5],"float64"), )
paddle.einsum("ik, ijk->j", Tensor([4, 5],"float64"), Tensor([4, 0, 5],"float64"), )
paddle.einsum("ik, ijk->j", Tensor([4, 5],"float64"), Tensor([4, 2, 0],"float64"), )
paddle.einsum("iox,ojx->ijx", Tensor([0, 3, 1],"complex64"), Tensor([0, 2, 1],"complex64"), )
paddle.einsum("iox,ojx->ijx", Tensor([0, 3, 1],"complex64"), Tensor([3, 2, 1],"complex64"), )
paddle.einsum("iox,ojx->ijx", Tensor([2, 0, 1],"complex64"), Tensor([3, 0, 1],"complex64"), )
paddle.einsum("iox,ojx->ijx", Tensor([2, 0, 1],"complex64"), Tensor([3, 2, 1],"complex64"), )
paddle.einsum("iox,ojx->ijx", Tensor([2, 3, 0],"complex64"), Tensor([3, 2, 0],"complex64"), )
paddle.einsum("iox,ojx->ijx", Tensor([2, 3, 0],"complex64"), Tensor([3, 2, 1],"complex64"), )
paddle.einsum("iox,ojx->ijx", Tensor([2, 3, 1],"complex64"), Tensor([0, 2, 1],"complex64"), )
paddle.einsum("iox,ojx->ijx", Tensor([2, 3, 1],"complex64"), Tensor([3, 0, 1],"complex64"), )
paddle.einsum("iox,ojx->ijx", Tensor([2, 3, 1],"complex64"), Tensor([3, 2, 0],"complex64"), )
paddle.einsum("ji,i->", Tensor([0, 2],"float64"), Tensor([2],"float64"), )
paddle.einsum("ji,i->", Tensor([2, 0],"float64"), Tensor([2],"float64"), )
paddle.einsum("ji,i->", Tensor([2, 2],"float64"), Tensor([0],"float64"), )
paddle.einsum("ji,j", Tensor([0, 4],"float64"), Tensor([1],"float64"), )
paddle.einsum("ji,j", Tensor([0, 4],"float64"), Tensor([10],"float64"), )
paddle.einsum("ji,j", Tensor([1, 0],"float64"), Tensor([1],"float64"), )
paddle.einsum("ji,j", Tensor([1, 4],"float64"), Tensor([0],"float64"), )
paddle.einsum("ji,j", Tensor([10, 0],"float64"), Tensor([10],"float64"), )
paddle.einsum("ji,j", Tensor([10, 4],"float64"), Tensor([0],"float64"), )
paddle.einsum("k...,...jk->...k", Tensor([0, 3, 2, 3, 4],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("k...,...jk->...k", Tensor([10, 0, 2, 3, 4],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("k...,...jk->...k", Tensor([10, 3, 0, 3, 4],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("k...,...jk->...k", Tensor([10, 3, 2, 0, 4],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("k...,...jk->...k", Tensor([10, 3, 2, 3, 0],"float64"), Tensor([12, 10],"float64"), )
paddle.einsum("k...,...jk->...k", Tensor([10, 3, 2, 3, 4],"float64"), Tensor([0, 10],"float64"), )
paddle.einsum("k...,...jk->...k", Tensor([10, 3, 2, 3, 4],"float64"), Tensor([12, 0],"float64"), )
paddle.einsum("k...,jk", Tensor([0, 4, 5, 3],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("k...,jk", Tensor([2, 0, 5, 3],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("k...,jk", Tensor([2, 4, 0, 3],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("k...,jk", Tensor([2, 4, 5, 0],"float64"), Tensor([2, 2],"float64"), )
paddle.einsum("k...,jk", Tensor([2, 4, 5, 3],"float64"), Tensor([0, 2],"float64"), )
paddle.einsum("k...,jk", Tensor([2, 4, 5, 3],"float64"), Tensor([2, 0],"float64"), )
paddle.einsum("lbnd,mlb->mbnd", Tensor([0, 14, 4, 8],"float32"), Tensor([1, 8, 14],"float32"), )
paddle.einsum("lbnd,mlb->mbnd", Tensor([8, 0, 4, 8],"float32"), Tensor([1, 8, 14],"float32"), )
paddle.einsum("lbnd,mlb->mbnd", Tensor([8, 14, 0, 8],"float32"), Tensor([1, 8, 14],"float32"), )
paddle.einsum("lbnd,mlb->mbnd", Tensor([8, 14, 4, 0],"float32"), Tensor([1, 8, 14],"float32"), )
paddle.einsum("lbnd,mlb->mbnd", Tensor([8, 14, 4, 8],"float32"), Tensor([0, 8, 14],"float32"), )
paddle.einsum("lbnd,mlb->mbnd", Tensor([8, 14, 4, 8],"float32"), Tensor([1, 0, 14],"float32"), )
paddle.einsum("lbnd,mlb->mbnd", Tensor([8, 14, 4, 8],"float32"), Tensor([1, 8, 0],"float32"), )
paddle.einsum("m,d->md", Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.einsum("m,d->md", Tensor([0],"float32"), Tensor([192],"float32"), )
paddle.einsum("m,d->md", Tensor([196],"float32"), Tensor([0],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([0, 14, 4, 8],"float32"), Tensor([1, 8, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 0, 4, 8],"float32"), Tensor([1, 8, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 14, 0, 8],"float32"), Tensor([1, 8, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 14, 4, 0],"float32"), Tensor([1, 8, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 14, 4, 8],"float32"), Tensor([0, 8, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 14, 4, 8],"float32"), Tensor([1, 0, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 14, 4, 8],"float32"), Tensor([1, 8, 0],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([0, 3, 4, 2],"float32"), Tensor([2, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([0, 3, 5, 6],"float16"), Tensor([6, 2, 4],"float16"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 0, 4, 2],"float32"), Tensor([2, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 0, 5, 6],"float16"), Tensor([6, 2, 4],"float16"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 0, 2],"float32"), Tensor([2, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 0, 6],"float16"), Tensor([6, 2, 4],"float16"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 4, 0],"float32"), Tensor([2, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 4, 2],"float32"), Tensor([0, 2, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 4, 2],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 4, 2],"float32"), Tensor([2, 2, 0],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 5, 0],"float16"), Tensor([6, 2, 4],"float16"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 5, 6],"float16"), Tensor([0, 2, 4],"float16"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 5, 6],"float16"), Tensor([6, 0, 4],"float16"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 5, 6],"float16"), Tensor([6, 2, 0],"float16"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([0, 3, 5, 6],"float16"), Tensor([6, 2, 4],"float16"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([0, 3, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 0, 5, 6],"float16"), Tensor([6, 2, 4],"float16"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 0, 5, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 0, 6],"float16"), Tensor([6, 2, 4],"float16"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 0, 6],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 0],"float16"), Tensor([6, 2, 4],"float16"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 0],"float32"), Tensor([6, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 6],"float16"), Tensor([0, 2, 4],"float16"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 6],"float16"), Tensor([6, 0, 4],"float16"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 6],"float16"), Tensor([6, 2, 0],"float16"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 6],"float32"), Tensor([0, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 6],"float32"), Tensor([6, 0, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 6],"float32"), Tensor([6, 2, 0],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([0, 3, 5, 2, 4],"float16"), Tensor([0, 3, 5, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([0, 3, 5, 2, 4],"float16"), Tensor([1, 3, 5, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([0, 3, 5, 2, 4],"float32"), Tensor([0, 3, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([0, 3, 5, 2, 4],"float32"), Tensor([1, 3, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 0, 5, 2, 4],"float16"), Tensor([1, 0, 5, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 0, 5, 2, 4],"float16"), Tensor([1, 3, 5, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 0, 5, 2, 4],"float32"), Tensor([1, 0, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 0, 5, 2, 4],"float32"), Tensor([1, 3, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 0, 2, 4],"float16"), Tensor([1, 3, 0, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 0, 2, 4],"float16"), Tensor([1, 3, 5, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 0, 2, 4],"float32"), Tensor([1, 3, 0, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 0, 2, 4],"float32"), Tensor([1, 3, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 0, 4],"float16"), Tensor([1, 3, 5, 0, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 0, 4],"float16"), Tensor([1, 3, 5, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 0, 4],"float32"), Tensor([1, 3, 4, 0, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 0, 4],"float32"), Tensor([1, 3, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 0],"float16"), Tensor([1, 3, 5, 2, 0],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 0],"float16"), Tensor([1, 3, 5, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 0],"float32"), Tensor([1, 3, 4, 2, 0],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 0],"float32"), Tensor([1, 3, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float16"), Tensor([0, 3, 5, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float16"), Tensor([1, 0, 5, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float16"), Tensor([1, 3, 0, 2, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float16"), Tensor([1, 3, 5, 0, 4],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float16"), Tensor([1, 3, 5, 2, 0],"float16"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float32"), Tensor([0, 3, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float32"), Tensor([1, 0, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float32"), Tensor([1, 3, 0, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float32"), Tensor([1, 3, 4, 0, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 2, 4],"float32"), Tensor([1, 3, 4, 2, 0],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([0, 52, 7, 8],"float32"), Tensor([0, 52, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([0, 52, 7, 8],"float32"), Tensor([2, 52, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 0, 7, 8],"float32"), Tensor([2, 0, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 0, 7, 8],"float32"), Tensor([2, 52, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 52, 0, 8],"float32"), Tensor([2, 52, 0, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 52, 0, 8],"float32"), Tensor([2, 52, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 52, 7, 0],"float32"), Tensor([2, 52, 14, 0],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 52, 7, 0],"float32"), Tensor([2, 52, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 52, 7, 8],"float32"), Tensor([0, 52, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 52, 7, 8],"float32"), Tensor([2, 0, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 52, 7, 8],"float32"), Tensor([2, 52, 0, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 52, 7, 8],"float32"), Tensor([2, 52, 14, 0],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([0, 52, 7, 14],"float32"), Tensor([0, 52, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([0, 52, 7, 14],"float32"), Tensor([2, 52, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 0, 7, 14],"float32"), Tensor([2, 0, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 0, 7, 14],"float32"), Tensor([2, 52, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 0, 14],"float32"), Tensor([2, 52, 0, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 0, 14],"float32"), Tensor([2, 52, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 7, 0],"float32"), Tensor([2, 52, 14, 0],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 7, 0],"float32"), Tensor([2, 52, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 7, 14],"float32"), Tensor([0, 52, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 7, 14],"float32"), Tensor([2, 0, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 7, 14],"float32"), Tensor([2, 52, 0, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 7, 14],"float32"), Tensor([2, 52, 14, 0],"float32"), )
paddle.einsum("se,sec->sec", Tensor([0, 60],"float32"), Tensor([10, 60, 10],"float32"), )
paddle.einsum("se,sec->sec", Tensor([0, 60],"float32"), Tensor([2, 60, 2],"float32"), )
paddle.einsum("se,sec->sec", Tensor([10, 0],"float32"), Tensor([10, 60, 10],"float32"), )
paddle.einsum("se,sec->sec", Tensor([10, 60],"float32"), Tensor([0, 60, 10],"float32"), )
paddle.einsum("se,sec->sec", Tensor([10, 60],"float32"), Tensor([10, 0, 10],"float32"), )
paddle.einsum("se,sec->sec", Tensor([10, 60],"float32"), Tensor([10, 60, 0],"float32"), )
paddle.einsum("se,sec->sec", Tensor([2, 0],"float32"), Tensor([2, 60, 2],"float32"), )
paddle.einsum("se,sec->sec", Tensor([2, 60],"float32"), Tensor([0, 60, 2],"float32"), )
paddle.einsum("se,sec->sec", Tensor([2, 60],"float32"), Tensor([2, 0, 2],"float32"), )
paddle.einsum("se,sec->sec", Tensor([2, 60],"float32"), Tensor([2, 60, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 10],"float32"), Tensor([0, 10, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 10],"float32"), Tensor([60, 10, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 2],"float32"), Tensor([0, 2, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([0, 60, 2],"float32"), Tensor([60, 2, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([10, 0, 10],"float32"), Tensor([60, 0, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([10, 0, 10],"float32"), Tensor([60, 10, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([10, 60, 0],"float32"), Tensor([60, 10, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([10, 60, 0],"float32"), Tensor([60, 10, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([10, 60, 10],"float32"), Tensor([0, 10, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([10, 60, 10],"float32"), Tensor([60, 0, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([10, 60, 10],"float32"), Tensor([60, 10, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([2, 0, 2],"float32"), Tensor([60, 0, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([2, 0, 2],"float32"), Tensor([60, 2, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([2, 60, 0],"float32"), Tensor([60, 2, 0],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([2, 60, 0],"float32"), Tensor([60, 2, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([2, 60, 2],"float32"), Tensor([0, 2, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([2, 60, 2],"float32"), Tensor([60, 0, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([2, 60, 2],"float32"), Tensor([60, 2, 0],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([0, 60, 10],"float32"), Tensor([10, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([0, 60, 2],"float32"), Tensor([2, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([10, 0, 10],"float32"), Tensor([10, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([10, 60, 0],"float32"), Tensor([10, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([10, 60, 10],"float32"), Tensor([0, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([10, 60, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([2, 0, 2],"float32"), Tensor([2, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([2, 60, 0],"float32"), Tensor([2, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([2, 60, 2],"float32"), Tensor([0, 64],"float32"), )
paddle.einsum("sec,sm->ecm", Tensor([2, 60, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([0, 32],"float32"), Tensor([32, 4, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([14, 0],"float32"), Tensor([32, 4, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([14, 32],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([14, 32],"float32"), Tensor([32, 0, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([14, 32],"float32"), Tensor([32, 4, 0],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([15, 0],"float32"), Tensor([32, 4, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([15, 32],"float32"), Tensor([0, 4, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([15, 32],"float32"), Tensor([32, 0, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([15, 32],"float32"), Tensor([32, 4, 0],"float32"), )
paddle.einsum("xy,yz->xz", Tensor([0, 4],"complex64"), Tensor([0, 4],"complex64"), )
paddle.einsum("xy,yz->xz", Tensor([0, 4],"complex64"), Tensor([4, 4],"complex64"), )
paddle.einsum("xy,yz->xz", Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.einsum("xy,yz->xz", Tensor([0, 4],"float32"), Tensor([4, 4],"float32"), )
paddle.einsum("xy,yz->xz", Tensor([4, 0],"complex64"), Tensor([4, 0],"complex64"), )
paddle.einsum("xy,yz->xz", Tensor([4, 0],"complex64"), Tensor([4, 4],"complex64"), )
paddle.einsum("xy,yz->xz", Tensor([4, 0],"float32"), Tensor([4, 0],"float32"), )
paddle.einsum("xy,yz->xz", Tensor([4, 0],"float32"), Tensor([4, 4],"float32"), )
paddle.einsum("xy,yz->xz", Tensor([4, 4],"complex64"), Tensor([0, 4],"complex64"), )
paddle.einsum("xy,yz->xz", Tensor([4, 4],"complex64"), Tensor([4, 0],"complex64"), )
paddle.einsum("xy,yz->xz", Tensor([4, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.einsum("xy,yz->xz", Tensor([4, 4],"float32"), Tensor([4, 0],"float32"), )
paddle.equal_all(Tensor([0, 1, 2],"int64"), Tensor([0, 1, 2],"int64"), )
paddle.equal_all(Tensor([0, 1, 2],"int64"), Tensor([2, 1, 2],"int64"), )
paddle.equal_all(Tensor([0, 1, 4],"int64"), Tensor([0, 1, 4],"int64"), )
paddle.equal_all(Tensor([0, 1, 4],"int64"), Tensor([2, 1, 4],"int64"), )
paddle.equal_all(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.equal_all(Tensor([0, 10],"float32"), Tensor([1, 10],"float32"), )
paddle.equal_all(Tensor([0, 2, 10, 16],"bool"), Tensor([0, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([0, 2, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([0, 2, 3, 4],"float32"), Tensor([0, 2, 3, 4],"float32"), )
paddle.equal_all(Tensor([0, 2, 3, 4],"float32"), Tensor([1, 2, 3, 4],"float32"), )
paddle.equal_all(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.equal_all(Tensor([0, 2],"float32"), Tensor([1, 2],"float32"), )
paddle.equal_all(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.equal_all(Tensor([0],"float32"), Tensor([128],"float32"), )
paddle.equal_all(Tensor([0],"float32"), Tensor([16],"float32"), )
paddle.equal_all(Tensor([1, 0, 10, 16],"bool"), Tensor([1, 0, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 0, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 0, 3, 4],"float32"), Tensor([1, 0, 3, 4],"float32"), )
paddle.equal_all(Tensor([1, 0, 3, 4],"float32"), Tensor([1, 2, 3, 4],"float32"), )
paddle.equal_all(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.equal_all(Tensor([1, 0],"float32"), Tensor([1, 10],"float32"), )
paddle.equal_all(Tensor([1, 0],"float32"), Tensor([1, 2],"float32"), )
paddle.equal_all(Tensor([1, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.equal_all(Tensor([1, 10],"float32"), Tensor([1, 0],"float32"), )
paddle.equal_all(Tensor([1, 2, 0, 16],"bool"), Tensor([1, 2, 0, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 0, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 0, 4],"float32"), Tensor([1, 2, 0, 4],"float32"), )
paddle.equal_all(Tensor([1, 2, 0, 4],"float32"), Tensor([1, 2, 3, 4],"float32"), )
paddle.equal_all(Tensor([1, 2, 10, 0],"bool"), Tensor([1, 2, 10, 0],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 0],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([0, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 0, 10, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 0, 16],"bool"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 10, 0],"bool"), )
paddle.equal_all(Tensor([1, 2, 3, 0],"float32"), Tensor([1, 2, 3, 0],"float32"), )
paddle.equal_all(Tensor([1, 2, 3, 0],"float32"), Tensor([1, 2, 3, 4],"float32"), )
paddle.equal_all(Tensor([1, 2, 3, 4],"float32"), Tensor([0, 2, 3, 4],"float32"), )
paddle.equal_all(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 0, 3, 4],"float32"), )
paddle.equal_all(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 0, 4],"float32"), )
paddle.equal_all(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 3, 0],"float32"), )
paddle.equal_all(Tensor([1, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.equal_all(Tensor([1, 2],"float32"), Tensor([1, 0],"float32"), )
paddle.equal_all(Tensor([128],"float32"), Tensor([0],"float32"), )
paddle.equal_all(Tensor([16],"float32"), Tensor([0],"float32"), )
paddle.equal_all(Tensor([2, 0, 2],"int64"), Tensor([2, 0, 2],"int64"), )
paddle.equal_all(Tensor([2, 0, 2],"int64"), Tensor([2, 1, 2],"int64"), )
paddle.equal_all(Tensor([2, 0, 4],"int64"), Tensor([2, 0, 4],"int64"), )
paddle.equal_all(Tensor([2, 0, 4],"int64"), Tensor([2, 1, 4],"int64"), )
paddle.equal_all(Tensor([2, 1, 0],"int64"), Tensor([2, 1, 0],"int64"), )
paddle.equal_all(Tensor([2, 1, 0],"int64"), Tensor([2, 1, 2],"int64"), )
paddle.equal_all(Tensor([2, 1, 0],"int64"), Tensor([2, 1, 4],"int64"), )
paddle.equal_all(Tensor([2, 1, 2],"int64"), Tensor([0, 1, 2],"int64"), )
paddle.equal_all(Tensor([2, 1, 2],"int64"), Tensor([2, 0, 2],"int64"), )
paddle.equal_all(Tensor([2, 1, 2],"int64"), Tensor([2, 1, 0],"int64"), )
paddle.equal_all(Tensor([2, 1, 4],"int64"), Tensor([0, 1, 4],"int64"), )
paddle.equal_all(Tensor([2, 1, 4],"int64"), Tensor([2, 0, 4],"int64"), )
paddle.equal_all(Tensor([2, 1, 4],"int64"), Tensor([2, 1, 0],"int64"), )
paddle.equal_all(x=Tensor([0, 1, 1, 2, 3],"float64"), y=Tensor([0, 1, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([0, 1, 1, 2, 3],"float64"), y=Tensor([1, 1, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([0, 2, 3],"float64"), y=Tensor([2, 3],"float64"), )
paddle.equal_all(x=Tensor([0, 3, 3],"float32"), y=Tensor([0, 3, 3],"float32"), )
paddle.equal_all(x=Tensor([0, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.equal_all(x=Tensor([0, 3, 3],"float64"), y=Tensor([0, 3, 3],"float64"), )
paddle.equal_all(x=Tensor([0, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.equal_all(x=Tensor([0, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal_all(x=Tensor([0, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.equal_all(x=Tensor([0, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 0, 1, 2, 3],"float64"), y=Tensor([1, 0, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 0, 1, 2, 3],"float64"), y=Tensor([1, 1, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 0, 3],"float64"), y=Tensor([2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 0, 2, 3],"float64"), y=Tensor([1, 1, 0, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 0, 2, 3],"float64"), y=Tensor([1, 1, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 0, 3],"float64"), y=Tensor([1, 1, 1, 0, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 0, 3],"float64"), y=Tensor([1, 1, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 0],"float64"), y=Tensor([1, 1, 1, 2, 0],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 0],"float64"), y=Tensor([1, 1, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 3],"float64"), y=Tensor([0, 1, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 3],"float64"), y=Tensor([1, 0, 1, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 3],"float64"), y=Tensor([1, 1, 0, 2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 3],"float64"), y=Tensor([1, 1, 1, 0, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 3],"float64"), y=Tensor([1, 1, 1, 2, 0],"float64"), )
paddle.equal_all(x=Tensor([1, 2, 0],"float64"), y=Tensor([2, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 2, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.equal_all(x=Tensor([1, 2, 3],"float64"), y=Tensor([2, 0],"float64"), )
paddle.equal_all(x=Tensor([2, 0],"float64"), y=Tensor([1, 0],"float64"), )
paddle.equal_all(x=Tensor([2, 0],"float64"), y=Tensor([1, 3],"float64"), )
paddle.equal_all(x=Tensor([2, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.equal_all(x=Tensor([2, 3],"float64"), y=Tensor([1, 0],"float64"), )
paddle.equal_all(x=Tensor([3, 0, 3],"float32"), y=Tensor([3, 0, 3],"float32"), )
paddle.equal_all(x=Tensor([3, 0, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.equal_all(x=Tensor([3, 0, 3],"float64"), y=Tensor([3, 0, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 0, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 0, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 0],"float32"), y=Tensor([3, 3, 0],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 0],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 0],"float64"), y=Tensor([3, 3, 0],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 0],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 0],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float32"), y=Tensor([0, 3, 3],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 0, 3],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 0],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([0, 3, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 0, 3],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 0],"float64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 0],"float64"), )
paddle.expand(Tensor([0, 1, 1],"int32"), list[13,2,32,], )
paddle.expand(Tensor([0, 1, 10, 1],"float32"), tuple(10,10,10,10,), )
paddle.expand(Tensor([0, 1, 100, 136],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([0, 1, 100, 136],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([0, 1, 100, 140],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([0, 1, 100, 152],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([0, 1, 16],"float32"), shape=tuple(13,7,16,), )
paddle.expand(Tensor([0, 1, 2, 2],"bool"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([0, 1, 2, 4],"bool"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([0, 1, 32],"int32"), list[13,2,32,], )
paddle.expand(Tensor([0, 1, 4, 4],"bool"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([0, 1, 4, 7],"bool"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([0, 1, 5, 1, 5],"float32"), list[13,4,5,1,-1,], )
paddle.expand(Tensor([0, 1, 5, 1, 5],"float32"), list[52,4,5,1,-1,], )
paddle.expand(Tensor([0, 1, 7, 1],"float32"), list[13,4,7,-1,], )
paddle.expand(Tensor([0, 1, 7, 1],"float32"), list[52,4,7,-1,], )
paddle.expand(Tensor([0, 1, 7, 14],"float32"), shape=list[2,13,7,14,], )
paddle.expand(Tensor([0, 1, 7, 7],"bool"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([0, 1, 7, 7],"int64"), list[13,4,7,7,], )
paddle.expand(Tensor([0, 1, 7, 7],"int64"), list[52,4,7,7,], )
paddle.expand(Tensor([0, 1, 7],"int64"), shape=list[14,2,-1,], )
paddle.expand(Tensor([0, 1, 8],"float32"), list[-1,8,-1,], )
paddle.expand(Tensor([0, 1],"float32"), list[2,3072,], )
paddle.expand(Tensor([0, 1],"int32"), list[-1,1,], )
paddle.expand(Tensor([0, 1],"int64"), list[1,1,], )
paddle.expand(Tensor([0, 1],"int64"), list[14,1,], )
paddle.expand(Tensor([0, 1],"int64"), list[2,1,], )
paddle.expand(Tensor([0, 1],"int64"), list[4,1,], )
paddle.expand(Tensor([0, 1],"int64"), list[6,1,], )
paddle.expand(Tensor([0, 1],"int64"), tuple(128,128,), )
paddle.expand(Tensor([0, 1],"int64"), tuple(14,32,), name=None, )
paddle.expand(Tensor([0, 1],"int64"), tuple(15,32,), name=None, )
paddle.expand(Tensor([0, 1],"int64"), tuple(4,32,), name=None, )
paddle.expand(Tensor([0, 1],"int64"), tuple(8,32,), name=None, )
paddle.expand(Tensor([0, 10, 1, 1],"float32"), list[-1,-1,256,256,], )
paddle.expand(Tensor([0, 10, 1, 1],"float32"), list[-1,-1,32,32,], )
paddle.expand(Tensor([0, 10, 1],"float32"), tuple(10,10,10,10,), )
paddle.expand(Tensor([0, 10],"float32"), tuple(10,10,), )
paddle.expand(Tensor([0, 10],"int64"), list[14,10,], )
paddle.expand(Tensor([0, 1024],"int64"), list[1,1024,], )
paddle.expand(Tensor([0, 11],"int64"), list[1,11,], )
paddle.expand(Tensor([0, 128],"float32"), list[16,32,128,], )
paddle.expand(Tensor([0, 128],"float32"), list[32,64,128,], )
paddle.expand(Tensor([0, 2, 1, 8, 128, 96],"float16"), list[2,2,1,8,128,96,], )
paddle.expand(Tensor([0, 2, 1, 8, 128, 96],"float16"), list[2,2,2,8,128,96,], )
paddle.expand(Tensor([0, 2],"float16"), shape=list[512,3,2,], )
paddle.expand(Tensor([0, 2],"float32"), shape=list[512,3,2,], )
paddle.expand(Tensor([0, 20],"int64"), list[1,20,], )
paddle.expand(Tensor([0, 3, 1, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.expand(Tensor([0, 3],"int64"), list[14,3,], )
paddle.expand(Tensor([0, 3],"int64"), list[2,3,], )
paddle.expand(Tensor([0, 3],"int64"), list[4,3,], )
paddle.expand(Tensor([0, 3],"int64"), list[6,3,], )
paddle.expand(Tensor([0, 32, 128],"float32"), list[8,16,32,128,], )
paddle.expand(Tensor([0, 32],"float32"), list[128,32,32,], )
paddle.expand(Tensor([0, 32],"float32"), list[96,32,32,], )
paddle.expand(Tensor([0, 32],"int64"), list[14,32,], )
paddle.expand(Tensor([0, 32],"int64"), list[15,32,], )
paddle.expand(Tensor([0, 32],"int64"), list[4,32,], )
paddle.expand(Tensor([0, 32],"int64"), list[8,32,], )
paddle.expand(Tensor([0, 4, 1, 1, 1, 8],"float32"), list[13,4,3,1,1,-1,], )
paddle.expand(Tensor([0, 4, 1, 1, 1, 8],"float32"), list[52,4,3,1,1,-1,], )
paddle.expand(Tensor([0, 4, 2, 1],"float32"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([0, 4, 2, 1],"float32"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([0, 4, 4, 1],"float32"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([0, 4, 4, 1],"float32"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([0, 4, 7, 1],"float32"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([0, 64],"float32"), list[16,32,64,], )
paddle.expand(Tensor([0, 7, 7],"float32"), shape=list[13,7,7,], )
paddle.expand(Tensor([0, 7],"int64"), list[14,7,], )
paddle.expand(Tensor([0, 8],"int64"), list[14,8,], )
paddle.expand(Tensor([0],"float32"), shape=list[128,96,], )
paddle.expand(Tensor([0],"int64"), list[13,7,4,], )
paddle.expand(Tensor([0],"int64"), shape=list[1,-1,], )
paddle.expand(Tensor([1, 0, 1, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.expand(Tensor([1, 0, 1, 1],"float32"), list[-1,-1,256,256,], )
paddle.expand(Tensor([1, 0, 1, 1],"float32"), list[-1,-1,32,32,], )
paddle.expand(Tensor([1, 0, 1],"float32"), tuple(10,10,10,10,), )
paddle.expand(Tensor([1, 0, 100, 136],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([1, 0, 100, 136],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([1, 0, 100, 140],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([1, 0, 100, 152],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([1, 0, 32],"int32"), list[13,2,32,], )
paddle.expand(Tensor([1, 0, 7, 7],"int64"), list[13,4,7,7,], )
paddle.expand(Tensor([1, 0, 7, 7],"int64"), list[52,4,7,7,], )
paddle.expand(Tensor([1, 0, 7],"float32"), shape=list[13,7,7,], )
paddle.expand(Tensor([1, 0, 7],"int64"), shape=list[14,2,-1,], )
paddle.expand(Tensor([1, 0],"float32"), tuple(10,10,), )
paddle.expand(Tensor([1, 0],"int64"), list[1,1,], )
paddle.expand(Tensor([1, 0],"int64"), list[1,1024,], )
paddle.expand(Tensor([1, 0],"int64"), list[1,11,], )
paddle.expand(Tensor([1, 0],"int64"), list[1,20,], )
paddle.expand(Tensor([1, 0],"int64"), list[14,1,], )
paddle.expand(Tensor([1, 0],"int64"), list[14,10,], )
paddle.expand(Tensor([1, 0],"int64"), list[14,3,], )
paddle.expand(Tensor([1, 0],"int64"), list[14,32,], )
paddle.expand(Tensor([1, 0],"int64"), list[14,7,], )
paddle.expand(Tensor([1, 0],"int64"), list[14,8,], )
paddle.expand(Tensor([1, 0],"int64"), list[15,32,], )
paddle.expand(Tensor([1, 0],"int64"), list[2,1,], )
paddle.expand(Tensor([1, 0],"int64"), list[2,3,], )
paddle.expand(Tensor([1, 0],"int64"), list[4,1,], )
paddle.expand(Tensor([1, 0],"int64"), list[4,3,], )
paddle.expand(Tensor([1, 0],"int64"), list[4,32,], )
paddle.expand(Tensor([1, 0],"int64"), list[6,1,], )
paddle.expand(Tensor([1, 0],"int64"), list[6,3,], )
paddle.expand(Tensor([1, 0],"int64"), list[8,32,], )
paddle.expand(Tensor([1, 1, 0, 136],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 0, 136],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 0, 140],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 0, 152],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 0, 7],"int64"), list[13,4,7,7,], )
paddle.expand(Tensor([1, 1, 0, 7],"int64"), list[52,4,7,7,], )
paddle.expand(Tensor([1, 1, 0],"int32"), list[13,2,32,], )
paddle.expand(Tensor([1, 1, 0],"int64"), shape=list[14,2,-1,], )
paddle.expand(Tensor([1, 1, 100, 0],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 100, 0],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 7, 0],"int64"), list[13,4,7,7,], )
paddle.expand(Tensor([1, 1, 7, 0],"int64"), list[52,4,7,7,], )
paddle.expand(Tensor([1, 10, 0, 1],"float32"), list[-1,-1,256,256,], )
paddle.expand(Tensor([1, 10, 0, 1],"float32"), list[-1,-1,32,32,], )
paddle.expand(Tensor([1, 10, 0],"float32"), tuple(10,10,10,10,), )
paddle.expand(Tensor([1, 10, 1, 0],"float32"), list[-1,-1,256,256,], )
paddle.expand(Tensor([1, 10, 1, 0],"float32"), list[-1,-1,32,32,], )
paddle.expand(Tensor([1, 3, 0, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.expand(Tensor([1, 3, 1, 0, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.expand(Tensor([1, 3, 1, 1, 0, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.expand(Tensor([1, 3, 1, 1, 1, 0],"float32"), list[1,3,4,4,1,1,], )
paddle.expand(Tensor([1, 7, 0],"float32"), shape=list[13,7,7,], )
paddle.expand(Tensor([10, 0, 10, 1],"float32"), tuple(10,10,10,10,), )
paddle.expand(Tensor([10, 0],"float32"), tuple(10,10,), )
paddle.expand(Tensor([10, 1, 0, 1],"float32"), tuple(10,10,10,10,), )
paddle.expand(Tensor([10, 1, 10, 0],"float32"), tuple(10,10,10,10,), )
paddle.expand(Tensor([108, 0],"int32"), list[-1,1,], )
paddle.expand(Tensor([117, 0],"int32"), list[-1,1,], )
paddle.expand(Tensor([128, 0],"int64"), tuple(128,128,), )
paddle.expand(Tensor([13, 0, 1, 1, 1, 8],"float32"), list[13,4,3,1,1,-1,], )
paddle.expand(Tensor([13, 0, 1],"int32"), list[13,2,32,], )
paddle.expand(Tensor([13, 0, 16],"float32"), shape=tuple(13,7,16,), )
paddle.expand(Tensor([13, 0, 2, 1],"float32"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([13, 0, 2, 1],"float32"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([13, 0, 2, 2],"bool"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([13, 0, 2, 4],"bool"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([13, 0, 4, 1],"float32"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([13, 0, 4, 1],"float32"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([13, 0, 4, 4],"bool"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([13, 0, 4, 7],"bool"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([13, 0, 5, 1, 5],"float32"), list[13,4,5,1,-1,], )
paddle.expand(Tensor([13, 0, 7, 1],"float32"), list[13,4,7,-1,], )
paddle.expand(Tensor([13, 0, 7, 1],"float32"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([13, 0, 7, 7],"bool"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([13, 1, 0, 1, 5],"float32"), list[13,4,5,1,-1,], )
paddle.expand(Tensor([13, 1, 0, 1],"float32"), list[13,4,7,-1,], )
paddle.expand(Tensor([13, 1, 0, 2],"bool"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([13, 1, 0, 4],"bool"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([13, 1, 0, 4],"bool"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([13, 1, 0, 7],"bool"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([13, 1, 0, 7],"bool"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([13, 1, 0],"float32"), shape=tuple(13,7,16,), )
paddle.expand(Tensor([13, 1, 0],"int32"), list[13,2,32,], )
paddle.expand(Tensor([13, 1, 2, 0],"bool"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([13, 1, 2, 0],"bool"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([13, 1, 4, 0],"bool"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([13, 1, 4, 0],"bool"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([13, 1, 5, 0, 5],"float32"), list[13,4,5,1,-1,], )
paddle.expand(Tensor([13, 1, 5, 1, 0],"float32"), list[13,4,5,1,-1,], )
paddle.expand(Tensor([13, 1, 7, 0],"bool"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([13, 1, 7, 0],"float32"), list[13,4,7,-1,], )
paddle.expand(Tensor([13, 4, 0, 1, 1, 8],"float32"), list[13,4,3,1,1,-1,], )
paddle.expand(Tensor([13, 4, 0, 1],"float32"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([13, 4, 0, 1],"float32"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([13, 4, 0, 1],"float32"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([13, 4, 0, 1],"float32"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([13, 4, 0, 1],"float32"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([13, 4, 1, 0, 1, 8],"float32"), list[13,4,3,1,1,-1,], )
paddle.expand(Tensor([13, 4, 1, 1, 0, 8],"float32"), list[13,4,3,1,1,-1,], )
paddle.expand(Tensor([13, 4, 1, 1, 1, 0],"float32"), list[13,4,3,1,1,-1,], )
paddle.expand(Tensor([13, 4, 2, 0],"float32"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([13, 4, 2, 0],"float32"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([13, 4, 4, 0],"float32"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([13, 4, 4, 0],"float32"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([13, 4, 7, 0],"float32"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([14, 0],"int64"), tuple(14,32,), name=None, )
paddle.expand(Tensor([15, 0],"int64"), tuple(15,32,), name=None, )
paddle.expand(Tensor([16, 0, 128],"float32"), list[8,16,32,128,], )
paddle.expand(Tensor([16, 32, 0],"float32"), list[8,16,32,128,], )
paddle.expand(Tensor([2, 0, 1, 8, 128, 96],"float16"), list[2,2,1,8,128,96,], )
paddle.expand(Tensor([2, 0, 1, 8, 128, 96],"float16"), list[2,2,2,8,128,96,], )
paddle.expand(Tensor([2, 0, 7, 14],"float32"), shape=list[2,13,7,14,], )
paddle.expand(Tensor([2, 0, 8],"float32"), list[-1,8,-1,], )
paddle.expand(Tensor([2, 0],"float32"), list[2,3072,], )
paddle.expand(Tensor([2, 1, 0, 14],"float32"), shape=list[2,13,7,14,], )
paddle.expand(Tensor([2, 1, 0],"float32"), list[-1,8,-1,], )
paddle.expand(Tensor([2, 1, 7, 0],"float32"), shape=list[2,13,7,14,], )
paddle.expand(Tensor([2, 2, 0, 8, 128, 96],"float16"), list[2,2,1,8,128,96,], )
paddle.expand(Tensor([2, 2, 0, 8, 128, 96],"float16"), list[2,2,2,8,128,96,], )
paddle.expand(Tensor([2, 2, 1, 0, 128, 96],"float16"), list[2,2,1,8,128,96,], )
paddle.expand(Tensor([2, 2, 1, 0, 128, 96],"float16"), list[2,2,2,8,128,96,], )
paddle.expand(Tensor([2, 2, 1, 8, 0, 96],"float16"), list[2,2,1,8,128,96,], )
paddle.expand(Tensor([2, 2, 1, 8, 0, 96],"float16"), list[2,2,2,8,128,96,], )
paddle.expand(Tensor([2, 2, 1, 8, 128, 0],"float16"), list[2,2,1,8,128,96,], )
paddle.expand(Tensor([2, 2, 1, 8, 128, 0],"float16"), list[2,2,2,8,128,96,], )
paddle.expand(Tensor([3, 0],"float16"), shape=list[512,3,2,], )
paddle.expand(Tensor([3, 0],"float32"), shape=list[512,3,2,], )
paddle.expand(Tensor([32, 0],"float32"), list[128,32,32,], )
paddle.expand(Tensor([32, 0],"float32"), list[16,32,128,], )
paddle.expand(Tensor([32, 0],"float32"), list[16,32,64,], )
paddle.expand(Tensor([32, 0],"float32"), list[96,32,32,], )
paddle.expand(Tensor([4, 0],"int64"), tuple(4,32,), name=None, )
paddle.expand(Tensor([52, 0, 1, 1, 1, 8],"float32"), list[52,4,3,1,1,-1,], )
paddle.expand(Tensor([52, 0, 5, 1, 5],"float32"), list[52,4,5,1,-1,], )
paddle.expand(Tensor([52, 0, 7, 1],"float32"), list[52,4,7,-1,], )
paddle.expand(Tensor([52, 1, 0, 1, 5],"float32"), list[52,4,5,1,-1,], )
paddle.expand(Tensor([52, 1, 0, 1],"float32"), list[52,4,7,-1,], )
paddle.expand(Tensor([52, 1, 5, 0, 5],"float32"), list[52,4,5,1,-1,], )
paddle.expand(Tensor([52, 1, 5, 1, 0],"float32"), list[52,4,5,1,-1,], )
paddle.expand(Tensor([52, 1, 7, 0],"float32"), list[52,4,7,-1,], )
paddle.expand(Tensor([52, 4, 0, 1, 1, 8],"float32"), list[52,4,3,1,1,-1,], )
paddle.expand(Tensor([52, 4, 1, 0, 1, 8],"float32"), list[52,4,3,1,1,-1,], )
paddle.expand(Tensor([52, 4, 1, 1, 0, 8],"float32"), list[52,4,3,1,1,-1,], )
paddle.expand(Tensor([52, 4, 1, 1, 1, 0],"float32"), list[52,4,3,1,1,-1,], )
paddle.expand(Tensor([64, 0],"float32"), list[32,64,128,], )
paddle.expand(Tensor([8, 0],"int64"), tuple(8,32,), name=None, )
paddle.expand(x=Tensor([0, 1, 1],"int64"), shape=Tensor([3],"int32"), )
paddle.expand(x=Tensor([0, 1],"int64"), shape=tuple(3,2,), )
paddle.expand(x=Tensor([0],"float64"), shape=list[3,3,], )
paddle.expand(x=Tensor([0],"int32"), shape=list[1,], )
paddle.expand(x=Tensor([0],"int32"), shape=tuple(3,3,), )
paddle.expand(x=Tensor([0],"int64"), shape=list[1,], )
paddle.expand(x=Tensor([0],"int64"), shape=list[1,-1,], )
paddle.expand(x=Tensor([0],"int64"), shape=list[1,1,1,1,1,1,], )
paddle.expand(x=Tensor([0],"int64"), shape=list[2,], )
paddle.expand(x=Tensor([0],"int64"), shape=list[2,3,], )
paddle.expand(x=Tensor([1, 0, 1],"int64"), shape=Tensor([3],"int32"), )
paddle.expand(x=Tensor([1, 1, 0],"int64"), shape=Tensor([3],"int32"), )
paddle.expand(x=Tensor([1, 1, 1],"int64"), shape=Tensor([0],"int32"), )
paddle.expand(x=Tensor([3, 0],"int64"), shape=tuple(3,2,), )
paddle.expand_as(Tensor([0, 128],"int64"), Tensor([0, 128],"int64"), )
paddle.expand_as(Tensor([0, 128],"int64"), Tensor([32, 128],"int64"), )
paddle.expand_as(Tensor([0, 128],"int64"), Tensor([7, 128],"int64"), )
paddle.expand_as(Tensor([0, 2, 1, 1],"float32"), Tensor([0, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([0, 2, 1, 1],"float32"), Tensor([1, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([0, 2, 1, 1],"float32"), Tensor([10, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([0, 500, 128],"float16"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([0, 500, 128],"float32"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([20, 500, 128],"float16"), )
paddle.expand_as(Tensor([0, 500, 1],"int32"), Tensor([20, 500, 128],"float32"), )
paddle.expand_as(Tensor([0],"float32"), Tensor([1, 1],"int64"), )
paddle.expand_as(Tensor([0],"float32"), Tensor([1, 2],"int64"), )
paddle.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([1, 0],"int64"), Tensor([32, 0],"int64"), )
paddle.expand_as(Tensor([1, 0],"int64"), Tensor([32, 128],"int64"), )
paddle.expand_as(Tensor([1, 0],"int64"), Tensor([7, 0],"int64"), )
paddle.expand_as(Tensor([1, 0],"int64"), Tensor([7, 128],"int64"), )
paddle.expand_as(Tensor([1, 128],"int64"), Tensor([0, 128],"int64"), )
paddle.expand_as(Tensor([1, 128],"int64"), Tensor([32, 0],"int64"), )
paddle.expand_as(Tensor([1, 128],"int64"), Tensor([7, 0],"int64"), )
paddle.expand_as(Tensor([1, 2, 0, 1],"float32"), Tensor([1, 2, 0, 28],"float32"), )
paddle.expand_as(Tensor([1, 2, 0, 1],"float32"), Tensor([1, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([1, 2, 1, 0],"float32"), Tensor([1, 2, 28, 0],"float32"), )
paddle.expand_as(Tensor([1, 2, 1, 0],"float32"), Tensor([1, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([1, 2, 1, 1],"float32"), Tensor([0, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([1, 2, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.expand_as(Tensor([1, 2, 1, 1],"float32"), Tensor([1, 2, 0, 28],"float32"), )
paddle.expand_as(Tensor([1, 2, 1, 1],"float32"), Tensor([1, 2, 28, 0],"float32"), )
paddle.expand_as(Tensor([1],"float32"), Tensor([0, 1],"int64"), )
paddle.expand_as(Tensor([1],"float32"), Tensor([1, 0],"int64"), )
paddle.expand_as(Tensor([10, 0, 1, 1],"float32"), Tensor([10, 0, 28, 28],"float32"), )
paddle.expand_as(Tensor([10, 0, 1, 1],"float32"), Tensor([10, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([10, 2, 0, 1],"float32"), Tensor([10, 2, 0, 28],"float32"), )
paddle.expand_as(Tensor([10, 2, 0, 1],"float32"), Tensor([10, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([10, 2, 1, 0],"float32"), Tensor([10, 2, 28, 0],"float32"), )
paddle.expand_as(Tensor([10, 2, 1, 0],"float32"), Tensor([10, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([10, 2, 1, 1],"float32"), Tensor([0, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([10, 2, 1, 1],"float32"), Tensor([10, 0, 28, 28],"float32"), )
paddle.expand_as(Tensor([10, 2, 1, 1],"float32"), Tensor([10, 2, 0, 28],"float32"), )
paddle.expand_as(Tensor([10, 2, 1, 1],"float32"), Tensor([10, 2, 28, 0],"float32"), )
paddle.expand_as(Tensor([2],"float32"), Tensor([0, 2],"int64"), )
paddle.expand_as(Tensor([2],"float32"), Tensor([1, 0],"int64"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 0, 128],"float16"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 0, 128],"float32"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 500, 128],"float16"), )
paddle.expand_as(Tensor([20, 0, 1],"int32"), Tensor([20, 500, 128],"float32"), )
paddle.expand_as(Tensor([20, 500, 0],"int32"), Tensor([20, 500, 0],"float16"), )
paddle.expand_as(Tensor([20, 500, 0],"int32"), Tensor([20, 500, 0],"float32"), )
paddle.expand_as(Tensor([20, 500, 0],"int32"), Tensor([20, 500, 128],"float16"), )
paddle.expand_as(Tensor([20, 500, 0],"int32"), Tensor([20, 500, 128],"float32"), )
paddle.expand_as(Tensor([20, 500, 1],"int32"), Tensor([0, 500, 128],"float16"), )
paddle.expand_as(Tensor([20, 500, 1],"int32"), Tensor([0, 500, 128],"float32"), )
paddle.expand_as(Tensor([20, 500, 1],"int32"), Tensor([20, 0, 128],"float16"), )
paddle.expand_as(Tensor([20, 500, 1],"int32"), Tensor([20, 0, 128],"float32"), )
paddle.expand_as(Tensor([20, 500, 1],"int32"), Tensor([20, 500, 0],"float16"), )
paddle.expand_as(Tensor([20, 500, 1],"int32"), Tensor([20, 500, 0],"float32"), )
paddle.expand_as(x=Tensor([0, 1],"int64"), y=Tensor([0, 2],"int64"), )
paddle.expand_as(x=Tensor([0, 1],"int64"), y=Tensor([3, 2],"int64"), )
paddle.expand_as(x=Tensor([0, 2],"int32"), y=Tensor([1, 2, 2],"int32"), )
paddle.expand_as(x=Tensor([0],"float64"), y=Tensor([3, 3],"float64"), )
paddle.expand_as(x=Tensor([0],"int32"), y=Tensor([0],"int32"), )
paddle.expand_as(x=Tensor([0],"int32"), y=Tensor([1],"int32"), )
paddle.expand_as(x=Tensor([0],"int32"), y=Tensor([2, 1, 2],"int32"), )
paddle.expand_as(x=Tensor([0],"int32"), y=Tensor([3, 3],"int32"), )
paddle.expand_as(x=Tensor([0],"int64"), y=Tensor([1, 1, 1, 1, 1, 1],"int64"), )
paddle.expand_as(x=Tensor([1],"int32"), y=Tensor([0],"int32"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([0, 1, 1, 1, 1, 1],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 0, 1, 1, 1, 1],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 1, 0, 1, 1, 1],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 1, 1, 0, 1, 1],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 1, 1, 1, 0, 1],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 1, 1, 1, 1, 0],"int64"), )
paddle.expand_as(x=Tensor([2, 0],"int32"), y=Tensor([1, 2, 2],"int32"), )
paddle.expand_as(x=Tensor([2, 2],"int32"), y=Tensor([0, 2, 2],"int32"), )
paddle.expand_as(x=Tensor([2, 2],"int32"), y=Tensor([1, 0, 2],"int32"), )
paddle.expand_as(x=Tensor([2, 2],"int32"), y=Tensor([1, 2, 0],"int32"), )
paddle.expand_as(x=Tensor([2],"int32"), y=Tensor([0, 1, 2],"int32"), )
paddle.expand_as(x=Tensor([2],"int32"), y=Tensor([2, 0, 2],"int32"), )
paddle.expand_as(x=Tensor([2],"int32"), y=Tensor([2, 1, 0],"int32"), )
paddle.expand_as(x=Tensor([3, 0],"int64"), y=Tensor([3, 0],"int64"), )
paddle.expand_as(x=Tensor([3, 0],"int64"), y=Tensor([3, 2],"int64"), )
paddle.expand_as(x=Tensor([3, 1],"int64"), y=Tensor([0, 2],"int64"), )
paddle.expand_as(x=Tensor([3, 1],"int64"), y=Tensor([3, 0],"int64"), )
paddle.expand_as(x=Tensor([3],"float64"), y=Tensor([0, 3],"float64"), )
paddle.expand_as(x=Tensor([3],"float64"), y=Tensor([3, 0],"float64"), )
paddle.expand_as(x=Tensor([3],"int32"), y=Tensor([0, 3],"int32"), )
paddle.expand_as(x=Tensor([3],"int32"), y=Tensor([3, 0],"int32"), )
paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="ortho", axes=None, )
paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="ortho", axes=None, )
paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="ortho", axes=None, )
paddle.flip(Tensor([0, 3, 112, 112],"float32"), axis=-1, )
paddle.flip(Tensor([0, 3],"float32"), 1, )
paddle.flip(Tensor([2, 0],"float32"), 1, )
paddle.flip(Tensor([20, 0, 112, 112],"float32"), axis=-1, )
paddle.flip(Tensor([20, 3, 0, 112],"float32"), axis=-1, )
paddle.flip(Tensor([20, 3, 112, 0],"float32"), axis=-1, )
paddle.flip(Tensor([32, 0, 112, 112],"float32"), axis=-1, )
paddle.flip(Tensor([32, 3, 0, 112],"float32"), axis=-1, )
paddle.flip(Tensor([32, 3, 112, 0],"float32"), axis=-1, )
paddle.floor_divide(Tensor([0, 1024],"int64"), Tensor([0, 1024],"int64"), )
paddle.floor_divide(Tensor([0, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.floor_divide(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.floor_divide(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.floor_divide(Tensor([0, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float16"), )
paddle.floor_divide(Tensor([0, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.floor_divide(Tensor([0, 4],"int64"), Tensor([1],"int64"), )
paddle.floor_divide(Tensor([0, 8],"int64"), Tensor([1],"int64"), )
paddle.floor_divide(Tensor([0],"bfloat16"), Tensor([0],"bfloat16"), )
paddle.floor_divide(Tensor([0],"bfloat16"), Tensor([3],"bfloat16"), )
paddle.floor_divide(Tensor([0],"float16"), Tensor([0],"float16"), )
paddle.floor_divide(Tensor([0],"float16"), Tensor([3],"float16"), )
paddle.floor_divide(Tensor([1],"bfloat16"), Tensor([0],"bfloat16"), )
paddle.floor_divide(Tensor([1],"float16"), Tensor([0],"float16"), )
paddle.floor_divide(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.floor_divide(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.floor_divide(Tensor([10, 0],"int64"), Tensor([10, 0],"int64"), )
paddle.floor_divide(Tensor([10, 0],"int64"), Tensor([10, 1024],"int64"), )
paddle.floor_divide(Tensor([10, 1024],"int64"), Tensor([0, 1024],"int64"), )
paddle.floor_divide(Tensor([10, 1024],"int64"), Tensor([10, 0],"int64"), )
paddle.floor_divide(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.floor_divide(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.floor_divide(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.floor_divide(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.floor_divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.floor_divide(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 0, 2],"float16"), )
paddle.floor_divide(Tensor([4, 0, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 0],"int64"), Tensor([1],"int64"), )
paddle.floor_divide(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 0],"float16"), )
paddle.floor_divide(Tensor([4, 3, 0],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 2],"bfloat16"), Tensor([0, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 0, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 0],"float16"), )
paddle.floor_divide(Tensor([4, 4],"int64"), Tensor([0],"int64"), )
paddle.floor_divide(Tensor([4, 8],"int64"), Tensor([0],"int64"), )
paddle.floor_divide(x=Tensor([0, 1],"int32"), y=Tensor([0, 1],"int32"), name=None, )
paddle.floor_divide(x=Tensor([0, 1],"int32"), y=Tensor([3, 1],"int32"), name=None, )
paddle.floor_divide(x=Tensor([0, 3, 3],"int32"), y=Tensor([3],"int32"), )
paddle.floor_divide(x=Tensor([0],"int32"), y=Tensor([0],"int32"), )
paddle.floor_divide(x=Tensor([0],"int32"), y=Tensor([2],"int32"), )
paddle.floor_divide(x=Tensor([0],"int32"), y=Tensor([3],"int32"), )
paddle.floor_divide(x=Tensor([2],"int32"), y=Tensor([0],"int32"), )
paddle.floor_divide(x=Tensor([3, 0, 3],"int32"), y=Tensor([3],"int32"), )
paddle.floor_divide(x=Tensor([3, 0],"int32"), y=Tensor([3, 0],"int32"), name=None, )
paddle.floor_divide(x=Tensor([3, 0],"int32"), y=Tensor([3, 1],"int32"), name=None, )
paddle.floor_divide(x=Tensor([3, 1],"int32"), y=Tensor([0, 1],"int32"), name=None, )
paddle.floor_divide(x=Tensor([3, 1],"int32"), y=Tensor([3, 0],"int32"), name=None, )
paddle.floor_divide(x=Tensor([3, 3, 0],"int32"), y=Tensor([3],"int32"), )
paddle.floor_divide(x=Tensor([3, 3, 3],"int32"), y=Tensor([0],"int32"), )
paddle.floor_divide(x=Tensor([3],"int32"), y=Tensor([0],"int32"), )
paddle.frac(Tensor([0, 3],"int32"), )
paddle.frac(Tensor([0, 3],"int64"), )
paddle.frac(Tensor([2, 0],"int32"), )
paddle.frac(Tensor([2, 0],"int64"), )
paddle.frexp(Tensor([0, 12],"float32"), )
paddle.frexp(Tensor([0, 12],"float64"), )
paddle.frexp(Tensor([0, 5, 2],"float32"), )
paddle.frexp(Tensor([0, 5, 2],"float64"), )
paddle.frexp(Tensor([10, 0],"float32"), )
paddle.frexp(Tensor([10, 0],"float64"), )
paddle.frexp(Tensor([4, 0, 2],"float32"), )
paddle.frexp(Tensor([4, 0, 2],"float64"), )
paddle.frexp(Tensor([4, 5, 0],"float32"), )
paddle.frexp(Tensor([4, 5, 0],"float64"), )
paddle.full_like(Tensor([0, 1, 1, 100],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([0, 1, 1, 23],"bool"), -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full_like(Tensor([0, 1, 1, 24],"bool"), -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full_like(Tensor([0, 1, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([0, 1],"int64"), True, dtype=VarType(bool), )
paddle.full_like(Tensor([0, 128],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([0, 128],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([0, 160],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([0, 192, 3, 3],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([0, 192, 3, 3],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([0, 192],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([0, 2],"float32"), dtype=type(numpy.float32), fill_value=1.1, )
paddle.full_like(Tensor([0, 232],"float32"), 0.0, VarType(bfloat16), None, )
paddle.full_like(Tensor([0, 232],"int32"), 0.0, Dtype(int16), None, )
paddle.full_like(Tensor([0, 232],"int32"), 0.0, VarType(float32), None, )
paddle.full_like(Tensor([0, 384, 3, 3],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([0, 384, 3, 3],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([0, 4],"float32"), 0, dtype=VarType(float32), )
paddle.full_like(Tensor([0],"float32"), 0, dtype=Dtype(float32), )
paddle.full_like(Tensor([0],"float32"), 0, dtype=VarType(float32), )
paddle.full_like(Tensor([0],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([0],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([0],"float32"), 1.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([0],"float32"), 1.0, dtype=VarType(float32), )
paddle.full_like(Tensor([0],"float32"), -2.0, dtype=VarType(float32), )
paddle.full_like(Tensor([0],"float32"), -4.595, dtype=Dtype(float32), )
paddle.full_like(Tensor([0],"float32"), -4.59511985013459, dtype=Dtype(float32), )
paddle.full_like(Tensor([0],"float32"), -4.59511985013459, dtype=VarType(float32), )
paddle.full_like(Tensor([0],"int64"), False, dtype="bool", )
paddle.full_like(Tensor([1, 0, 1, 23],"bool"), -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full_like(Tensor([1, 0, 1, 24],"bool"), -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full_like(Tensor([1, 0, 2048, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([1, 0, 3, 3],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([1, 0],"float32"), dtype=type(numpy.float32), fill_value=1.1, )
paddle.full_like(Tensor([1, 0],"int64"), True, dtype=VarType(bool), )
paddle.full_like(Tensor([1, 1, 0, 2048],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([1, 1, 0, 23],"bool"), -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full_like(Tensor([1, 1, 0, 24],"bool"), -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full_like(Tensor([1, 1, 1, 0],"bool"), -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full_like(Tensor([1, 1, 2048, 0],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([1, 192, 0, 3],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([1, 192, 3, 0],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([1, 384, 0, 3],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([1, 384, 3, 0],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([10, 0],"int64"), True, dtype=VarType(bool), )
paddle.full_like(Tensor([2, 0, 1, 100],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 0, 100],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 0],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([219, 0],"float32"), 0.0, VarType(bfloat16), None, )
paddle.full_like(Tensor([219, 0],"int32"), 0.0, Dtype(int16), None, )
paddle.full_like(Tensor([219, 0],"int32"), 0.0, VarType(float32), None, )
paddle.full_like(Tensor([256, 0],"float32"), 0, dtype=VarType(float32), )
paddle.full_like(Tensor([256, 0],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([256, 0],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([68, 0, 3, 3],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([68, 192, 0, 3],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([68, 192, 3, 0],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([68, 384, 0, 3],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([68, 384, 3, 0],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(x=Tensor([0],"float64"), fill_value=1, dtype="int32", )
paddle.full_like(x=Tensor([0],"float64"), fill_value=1, dtype="int64", )
paddle.full_like(x=Tensor([0],"float64"), fill_value=1, dtype=type(numpy.int32), )
paddle.full_like(x=Tensor([0],"float64"), fill_value=1, dtype=type(numpy.int64), )
paddle.full_like(x=Tensor([0],"float64"), fill_value=1.0, dtype="float16", )
paddle.full_like(x=Tensor([0],"float64"), fill_value=1.0, dtype="float32", )
paddle.full_like(x=Tensor([0],"float64"), fill_value=1.0, dtype=type(numpy.float16), )
paddle.full_like(x=Tensor([0],"float64"), fill_value=1.0, dtype=type(numpy.float32), )
paddle.full_like(x=Tensor([0],"float64"), fill_value=False, dtype="bool", )
paddle.full_like(x=Tensor([0],"float64"), fill_value=True, dtype="bool", )
paddle.gammaln(Tensor([0, 20, 1],"float32"), )
paddle.gammaln(Tensor([0, 3, 4, 5],"float32"), )
paddle.gammaln(Tensor([0, 3, 4, 5],"float64"), )
paddle.gammaln(Tensor([10, 0, 1],"float32"), )
paddle.gammaln(Tensor([10, 20, 0],"float32"), )
paddle.gammaln(Tensor([2, 0, 4, 5],"float32"), )
paddle.gammaln(Tensor([2, 0, 4, 5],"float64"), )
paddle.gammaln(Tensor([2, 3, 0, 5],"float32"), )
paddle.gammaln(Tensor([2, 3, 0, 5],"float64"), )
paddle.gammaln(Tensor([2, 3, 4, 0],"float32"), )
paddle.gammaln(Tensor([2, 3, 4, 0],"float64"), )
paddle.greater_equal(Tensor([0, 1, 1, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([0, 1, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([0, 1],"int64"), Tensor([0, 1],"int64"), )
paddle.greater_equal(Tensor([0, 1],"int64"), Tensor([1, 1],"int64"), )
paddle.greater_equal(Tensor([0, 2, 16, 4, 1],"int64"), Tensor([0, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([0, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([0, 2, 8, 4, 1],"int64"), Tensor([0, 2, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([0, 2, 8, 4, 1],"int64"), Tensor([13, 2, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.greater_equal(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_equal(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.greater_equal(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_equal(Tensor([0, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.greater_equal(Tensor([0, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.greater_equal(Tensor([0, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.greater_equal(Tensor([0, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.greater_equal(Tensor([0, 8, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([0],"float16"), Tensor([0],"float16"), )
paddle.greater_equal(Tensor([0],"float16"), Tensor([4],"float16"), )
paddle.greater_equal(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.greater_equal(Tensor([0],"int64"), Tensor([4],"int64"), )
paddle.greater_equal(Tensor([1, 0],"int64"), Tensor([1, 0],"int64"), )
paddle.greater_equal(Tensor([1, 0],"int64"), Tensor([1, 1],"int64"), )
paddle.greater_equal(Tensor([1, 1],"int64"), Tensor([0, 1],"int64"), )
paddle.greater_equal(Tensor([1, 1],"int64"), Tensor([1, 0],"int64"), )
paddle.greater_equal(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.greater_equal(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_equal(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.greater_equal(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_equal(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.greater_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.greater_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.greater_equal(Tensor([13, 0, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([13, 0, 16, 4, 1],"int64"), Tensor([13, 0, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 0, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 0, 8, 4, 1],"int64"), Tensor([13, 0, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 0, 8, 4, 1],"int64"), Tensor([13, 2, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 0, 4, 1],"int64"), Tensor([13, 2, 0, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 0, 4, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 0, 4, 1],"int64"), Tensor([13, 2, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 0, 1],"int64"), Tensor([13, 2, 16, 0, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 0, 1],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 0],"int64"), Tensor([13, 2, 16, 1, 0],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 0],"int64"), Tensor([13, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([0, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 0, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 0, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 0, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1],"int64"), Tensor([13, 2, 16, 1, 0],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 0, 1],"int64"), Tensor([13, 2, 8, 0, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 0, 1],"int64"), Tensor([13, 2, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 0],"int64"), Tensor([13, 2, 8, 1, 0],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 0],"int64"), Tensor([13, 2, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 1],"int64"), Tensor([0, 2, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 1],"int64"), Tensor([13, 0, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 1],"int64"), Tensor([13, 2, 0, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 1],"int64"), Tensor([13, 2, 8, 0, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 1],"int64"), Tensor([13, 2, 8, 1, 0],"int64"), )
paddle.greater_equal(Tensor([13, 8, 0, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([13, 8, 1, 0],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([13, 8, 1, 1],"float32"), Tensor([0],"float32"), )
paddle.greater_equal(Tensor([2, 0, 1, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 0, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.greater_equal(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.greater_equal(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.greater_equal(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.greater_equal(Tensor([2, 0],"int64"), Tensor([1, 0],"int64"), )
paddle.greater_equal(Tensor([2, 0],"int64"), Tensor([1, 1],"int64"), )
paddle.greater_equal(Tensor([2, 1, 0, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 1, 0, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 1, 1, 0, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 1, 1, 0],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 1, 1, 1, 0],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 1, 1, 1, 1],"float32"), Tensor([0],"float32"), )
paddle.greater_equal(Tensor([2, 1, 1, 1],"float32"), Tensor([0],"float32"), )
paddle.greater_equal(Tensor([2, 1],"int64"), Tensor([0, 1],"int64"), )
paddle.greater_equal(Tensor([2, 1],"int64"), Tensor([1, 0],"int64"), )
paddle.greater_equal(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.greater_equal(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.greater_equal(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.greater_equal(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.greater_equal(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.greater_equal(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.greater_equal(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.greater_equal(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.greater_equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_equal(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.greater_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.greater_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.greater_equal(Tensor([4],"float16"), Tensor([0],"float16"), )
paddle.greater_equal(Tensor([4],"int64"), Tensor([0],"int64"), )
paddle.greater_equal(x=Tensor([0, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_equal(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.greater_equal(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_equal(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.greater_equal(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_equal(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.greater_equal(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.greater_equal(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
paddle.greater_equal(x=Tensor([0],"int64"), y=Tensor([3],"int64"), )
paddle.greater_equal(x=Tensor([1, 0, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_equal(x=Tensor([1, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.greater_equal(x=Tensor([1, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_equal(x=Tensor([1, 2, 0, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_equal(x=Tensor([1, 2, 1, 0],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.greater_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.greater_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 0],"float64"), )
paddle.greater_equal(x=Tensor([1, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.greater_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.greater_equal(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.greater_equal(x=Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.greater_equal(x=Tensor([3, 0],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_equal(x=Tensor([3, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.greater_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.greater_equal(x=Tensor([3],"int64"), y=Tensor([0],"int64"), )
paddle.greater_than(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.greater_than(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_than(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.greater_than(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_than(Tensor([0],"float16"), Tensor([0],"float16"), )
paddle.greater_than(Tensor([0],"float16"), Tensor([4],"float16"), )
paddle.greater_than(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.greater_than(Tensor([0],"int64"), Tensor([4],"int64"), )
paddle.greater_than(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.greater_than(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_than(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.greater_than(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.greater_than(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.greater_than(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.greater_than(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.greater_than(Tensor([4],"float16"), Tensor([0],"float16"), )
paddle.greater_than(Tensor([4],"int64"), Tensor([0],"int64"), )
paddle.greater_than(x=Tensor([0, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_than(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.greater_than(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_than(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.greater_than(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_than(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.greater_than(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.greater_than(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
paddle.greater_than(x=Tensor([0],"int64"), y=Tensor([3],"int64"), )
paddle.greater_than(x=Tensor([1, 0, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_than(x=Tensor([1, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.greater_than(x=Tensor([1, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_than(x=Tensor([1, 2, 0, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_than(x=Tensor([1, 2, 1, 0],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.greater_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.greater_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 0],"float64"), )
paddle.greater_than(x=Tensor([1, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.greater_than(x=Tensor([1, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.greater_than(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.greater_than(x=Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.greater_than(x=Tensor([3, 0],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_than(x=Tensor([3, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.greater_than(x=Tensor([3, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.greater_than(x=Tensor([3],"int64"), y=Tensor([0],"int64"), )
paddle.histogram(input=Tensor([0, 4],"float32"), )
paddle.histogram(input=Tensor([0, 4],"float64"), )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, max=5, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=-2, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=-4, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=4, max=5, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=-40, )
paddle.histogram(input=Tensor([0, 4],"float64"), bins=4, min=-41, max=-5, )
paddle.histogram(input=Tensor([0],"float64"), )
paddle.histogram(input=Tensor([4, 0],"float32"), )
paddle.histogram(input=Tensor([4, 0],"float64"), )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, max=5, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=-2, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=-4, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=4, max=5, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=-40, )
paddle.histogram(input=Tensor([4, 0],"float64"), bins=4, min=-41, max=-5, )
paddle.histogram_bin_edges(Tensor([0, 20],"float32"), bins=10, min=0, max=1, )
paddle.histogram_bin_edges(Tensor([0, 20],"float32"), bins=10, min=0.2, max=0.9, )
paddle.histogram_bin_edges(Tensor([0, 20],"float32"), bins=10, min=1, max=1, )
paddle.histogram_bin_edges(Tensor([5, 0],"float32"), bins=10, min=0, max=1, )
paddle.histogram_bin_edges(Tensor([5, 0],"float32"), bins=10, min=0.2, max=0.9, )
paddle.histogram_bin_edges(Tensor([5, 0],"float32"), bins=10, min=1, max=1, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=5, weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([0, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([0, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([0, 2],"float32"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([0, 2],"float64"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([0, 2],"float64"), bins=list[3,3,], weights=Tensor([4],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=5, weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 0, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 0, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 0],"float32"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([4, 0],"float64"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([4, 0],"float64"), bins=list[3,3,], weights=Tensor([4],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=5, weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=5, weights=Tensor([0, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=5, weights=Tensor([4, 0],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([0, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([0, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 0],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 0],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([0],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([0],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([0, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 0],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([0, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([0, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 0],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 0],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2],"float64"), bins=list[3,3,], weights=Tensor([0],"float64"), ranges=None, density=False, )
paddle.hsplit(Tensor([0, 6, 3],"int64"), 2, )
paddle.hsplit(Tensor([0, 6, 3],"int64"), 3, )
paddle.hsplit(Tensor([0, 6],"int64"), 2, )
paddle.hsplit(Tensor([0, 6],"int64"), 3, )
paddle.hsplit(Tensor([0],"bool"), 3, )
paddle.hsplit(Tensor([0],"float16"), 3, )
paddle.hsplit(Tensor([0],"int64"), 2, )
paddle.hsplit(Tensor([4, 0, 3],"int64"), 2, )
paddle.hsplit(Tensor([4, 0, 3],"int64"), 3, )
paddle.hsplit(Tensor([4, 0],"int64"), 2, )
paddle.hsplit(Tensor([4, 0],"int64"), 3, )
paddle.hsplit(Tensor([4, 6, 0],"int64"), 2, )
paddle.hsplit(Tensor([4, 6, 0],"int64"), 3, )
paddle.increment(Tensor([0],"float32"), value=2.0, )
paddle.increment(Tensor([0],"int64"), )
paddle.increment(x=Tensor([0],"float32"), )
paddle.increment(x=Tensor([0],"float64"), )
paddle.increment(x=Tensor([0],"float64"), value=2.0, )
paddle.increment(x=Tensor([0],"int64"), value=1.0, )
paddle.incubate.nn.functional.blha_get_max_len(Tensor([0],"int32"), Tensor([0],"int32"), Tensor([0],"float32"), )
paddle.incubate.nn.functional.blha_get_max_len(Tensor([0],"int32"), Tensor([10],"int32"), Tensor([10],"float32"), )
paddle.incubate.nn.functional.blha_get_max_len(Tensor([10],"int32"), Tensor([0],"int32"), Tensor([10],"float32"), )
paddle.incubate.nn.functional.blha_get_max_len(Tensor([10],"int32"), Tensor([10],"int32"), Tensor([0],"float32"), )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009313154732808471, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009654839523136616, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009928022045642138, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010831302497535944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010981468949466944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0014022786635905504, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.001479289960116148, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0016999575309455395, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 256],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 64],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([0, 640],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([1, 0],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([100, 0],"float16"), None, act_method="swiglu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([101, 0],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([101, 256],"float16"), Tensor([0],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 0],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009313154732808471, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009654839523136616, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009928022045642138, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010831302497535944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010981468949466944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0014022786635905504, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.001479289960116148, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0016999575309455395, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0009313154732808471, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0009654839523136616, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0009928022045642138, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0010831302497535944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0010981468949466944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0014022786635905504, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.001479289960116148, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0016999575309455395, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 256],"float16"), Tensor([0],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009313154732808471, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009654839523136616, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009928022045642138, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010831302497535944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010981468949466944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0014022786635905504, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.001479289960116148, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 0],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0016999575309455395, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0009313154732808471, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0009654839523136616, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0009928022045642138, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0010831302497535944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0010981468949466944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0014022786635905504, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.001479289960116148, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 22016],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([0],"float32"), shift=None, smooth=None, quant_scale=0.0016999575309455395, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 10],"int32"), bias=Tensor([10],"float16"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 10],"int32"), bias=Tensor([10],"float32"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="geglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"float16"), bias=Tensor([512],"float16"), act_method="swiglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"float32"), bias=None, act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"float32"), bias=Tensor([512],"float32"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"float32"), bias=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([256],"float16"), smooth=Tensor([256],"float16"), act_method="geglu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float16"), smooth=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([0, 20, 512],"int32"), bias=Tensor([512],"float32"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float32"), smooth=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 10],"int32"), bias=Tensor([10],"float16"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 10],"int32"), bias=Tensor([10],"float32"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"float16"), bias=Tensor([512],"float16"), act_method="geglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"float16"), bias=Tensor([512],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"float16"), bias=Tensor([512],"float16"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"float16"), bias=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"float16"), bias=Tensor([512],"float16"), act_method="swiglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"float32"), bias=None, act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"float32"), bias=Tensor([512],"float32"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"float32"), bias=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([256],"float16"), smooth=Tensor([256],"float16"), act_method="geglu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float16"), smooth=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 0, 512],"int32"), bias=Tensor([512],"float32"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float32"), smooth=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"float16"), bias=Tensor([512],"float16"), act_method="geglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"float16"), bias=Tensor([512],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"float16"), bias=Tensor([512],"float16"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"float16"), bias=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"float16"), bias=Tensor([512],"float16"), act_method="swiglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"float32"), bias=None, act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"float32"), bias=Tensor([512],"float32"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"float32"), bias=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"int32"), bias=Tensor([10],"float16"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"int32"), bias=Tensor([10],"float32"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([256],"float16"), smooth=Tensor([256],"float16"), act_method="geglu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float16"), smooth=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 0],"int32"), bias=Tensor([512],"float32"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float32"), smooth=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 10],"int32"), bias=Tensor([0],"float16"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 10],"int32"), bias=Tensor([0],"float32"), dequant_scales=Tensor([10],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 10],"int32"), bias=Tensor([10],"float16"), dequant_scales=Tensor([0],"float32"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 10],"int32"), bias=Tensor([10],"float32"), dequant_scales=Tensor([0],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([0],"float16"), act_method="geglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([0],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([0],"float16"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([0],"float16"), act_method="gelu", compute_dtype="fp16", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float16"), bias=Tensor([0],"float16"), act_method="swiglu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float32"), bias=Tensor([0],"float32"), act_method="gelu", compute_dtype="default", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"float32"), bias=Tensor([0],"float32"), act_method="gelu", compute_dtype="fp32", )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([0],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([256],"float16"), smooth=Tensor([256],"float16"), act_method="geglu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([0],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float16"), smooth=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([0],"float32"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float32"), smooth=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([0],"float32"), shift=Tensor([256],"float16"), smooth=Tensor([256],"float16"), act_method="geglu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([0],"float32"), shift=Tensor([512],"float16"), smooth=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([0],"float16"), smooth=Tensor([256],"float16"), act_method="geglu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([0],"float16"), smooth=Tensor([512],"float16"), act_method="gelu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([256],"float16"), smooth=Tensor([0],"float16"), act_method="geglu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([512],"float16"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float16"), smooth=Tensor([0],"float16"), act_method="gelu", compute_dtype="fp16", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([512],"float32"), dequant_scales=Tensor([0],"float32"), shift=Tensor([512],"float32"), smooth=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([512],"float32"), dequant_scales=Tensor([512],"float32"), shift=Tensor([0],"float32"), smooth=Tensor([512],"float32"), act_method="gelu", compute_dtype="fp32", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(x=Tensor([2, 20, 512],"int32"), bias=Tensor([512],"float32"), dequant_scales=Tensor([512],"float32"), shift=Tensor([512],"float32"), smooth=Tensor([0],"float32"), act_method="gelu", compute_dtype="fp32", quant_scale=0.5, quant_round_type=1, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([0, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([0, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 768],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([0, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 768],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([0, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([0, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([0, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([0, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([0, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([0, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 0, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 0, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 0, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 0, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 0],"float32"), Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([0, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 0],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([0, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([0],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 0],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 0],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 0],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([0, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([0, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([0, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 0],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 0],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 0],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([0, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([0, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([0, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 0],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 0],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 0],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([0],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([0],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([0],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([0],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([0],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([0],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([0],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([0],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([0],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([0],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([0],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([0],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 0, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 0, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 0, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 0],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 0],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 0],"float64"), Tensor([508, 130],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([0, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([0, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 0],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 0],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([0, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([0, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 0],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 0],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([0],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([0],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 508],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([0],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([0, 130],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 0],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([0, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 0],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 508],"float64"), Tensor([0],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([0],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([0],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([0],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([0],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 508],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([0],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 0, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 768],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 0, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 768],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 0],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 768],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 0],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 768],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([0, 3072],"float16"), Tensor([3072, 768],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([768, 0],"float16"), Tensor([3072, 768],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([0, 768],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 0],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 768],"float16"), Tensor([0],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 768],"float16"), Tensor([3072],"float16"), Tensor([0],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 768],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([0],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 768],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([0],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([0, 3072],"float32"), Tensor([3072, 768],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([768, 0],"float32"), Tensor([3072, 768],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([0, 768],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 0],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 768],"float32"), Tensor([0],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 768],"float32"), Tensor([3072],"float32"), Tensor([0],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 768],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([0],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 768],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([0],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([0, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([0, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([0, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([0, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([0, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([0, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 0, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 0, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 0, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 0, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 0, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 0, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 0],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 0],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 0],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 0],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 0],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 0],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([0, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([0, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([0, 2],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([0, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([0, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([0, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 0],"float32"), linear2_weight=Tensor([2, 2],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 0],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 0],"float32"), linear2_weight=Tensor([2, 2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 0],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 0],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 0],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([0, 2],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([0, 2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([0, 2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 0],"float32"), activation="gelu", dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 0],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 2],"float32"), linear2_weight=Tensor([2, 0],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([0, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([0, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([0, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 0],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 0],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 0],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([0],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([0],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([0],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([0],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([0],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([0],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([0],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([0],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([0],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([0],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 1, 64],"float16"), Tensor([64],"float32"), Tensor([64],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 256],"float16"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 256],"float32"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 512],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([0, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 512],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([100, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 512],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([104, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([0, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, residual_alpha=1.4142135623730951, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([58, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([0, 64],"float16"), Tensor([64],"float32"), Tensor([64],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([1, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([1, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([1, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([1, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([0, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([1, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([1, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([100, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([100, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([100, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([100, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([100, 512],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([0, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([100, 512],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([100, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([101, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 0],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 0],"float16"), Tensor([64],"float32"), Tensor([64],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([0],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([0, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([0, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([101, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=Tensor([0],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([0],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([0],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([0, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), Tensor([0],"float32"), Tensor([64],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 64],"float16"), Tensor([64],"float32"), Tensor([0],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([104, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([104, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([104, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([104, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([104, 512],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([0, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([104, 512],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([104, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 0],"float16"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 0],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 0],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 0],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 0],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 0],"float32"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 0],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([0],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([0, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 0],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([0],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([0],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([0],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([0],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([0],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([0],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([0],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([0],"float32"), 1e-05, begin_norm_axis=1, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([0],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([0],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([0, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([0, 256],"float16"), residual_alpha=0.69204696, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 0],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 0],"float16"), residual_alpha=0.69204696, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([0],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([0, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 0],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), Tensor([0],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), Tensor([256],"float32"), Tensor([0],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([0],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([0, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 0],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 0, 64],"float16"), Tensor([64],"float32"), Tensor([64],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 0],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 0],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 1, 0],"float16"), Tensor([64],"float32"), Tensor([64],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 1, 64],"float16"), Tensor([0],"float32"), Tensor([64],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 1, 64],"float16"), Tensor([64],"float32"), Tensor([0],"float32"), 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([0],"float16"), residual=Tensor([2, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([0, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 64],"float16"), norm_weight=Tensor([0],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([0],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([0],"float16"), residual=Tensor([2, 1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([0, 1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 0, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 1, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([58, 0],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, residual_alpha=1.4142135623730951, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([58, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([58, 64],"float16"), norm_weight=Tensor([0],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, residual_alpha=1.4142135623730951, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([58, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([58, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([0],"float32"), epsilon=1e-05, residual_alpha=1.4142135623730951, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([58, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([58, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, residual_alpha=1.4142135623730951, begin_norm_axis=1, bias=Tensor([0],"float16"), residual=Tensor([58, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([58, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, residual_alpha=1.4142135623730951, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([0, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([58, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, residual_alpha=1.4142135623730951, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([58, 0],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([59, 0],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([59, 64],"float16"), norm_weight=Tensor([0],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([59, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([0],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([59, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([0],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([59, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([0, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([59, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 0],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 1024, 1024],"float16"), Tensor([1024, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 1024, 1024],"float16"), Tensor([1024, 3072],"float16"), Tensor([3072],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 1024],"float16"), Tensor([1024, 1000],"float16"), Tensor([1000],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 115, 64],"float16"), Tensor([64, 64],"float16"), None, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 127, 64],"float16"), Tensor([64, 64],"float16"), None, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 132, 64],"float16"), Tensor([64, 192],"float16"), Tensor([192],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 148, 64],"float16"), Tensor([64, 192],"float16"), Tensor([192],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 196, 2048],"float16"), Tensor([2048, 512],"float16"), Tensor([512],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 196, 512],"float16"), Tensor([512, 2048],"float16"), Tensor([2048],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 40],"float32"), Tensor([40, 50],"float32"), Tensor([50],"float32"), False, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 40],"float32"), Tensor([40, 50],"float32"), Tensor([50],"float32"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 40],"float32"), Tensor([50, 40],"float32"), Tensor([50],"float32"), True, )
paddle.incubate.nn.functional.fused_linear(Tensor([0, 40],"float32"), Tensor([50, 40],"float32"), Tensor([50],"float32"), True, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 0, 1024],"float16"), Tensor([1024, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 0, 1024],"float16"), Tensor([1024, 3072],"float16"), Tensor([3072],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 1024, 0],"float16"), Tensor([1024, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 1024, 0],"float16"), Tensor([1024, 3072],"float16"), Tensor([3072],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 1024, 1024],"float16"), Tensor([0, 1024],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 1024, 1024],"float16"), Tensor([0, 3072],"float16"), Tensor([3072],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 1024, 1024],"float16"), Tensor([1024, 0],"float16"), Tensor([1024],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 1024, 1024],"float16"), Tensor([1024, 0],"float16"), Tensor([3072],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 1024, 1024],"float16"), Tensor([1024, 1024],"float16"), Tensor([0],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([1, 1024, 1024],"float16"), Tensor([1024, 3072],"float16"), Tensor([0],"float16"), name=None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 0, 2048],"float16"), Tensor([2048, 512],"float16"), Tensor([512],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 0, 512],"float16"), Tensor([512, 2048],"float16"), Tensor([2048],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 0],"float16"), Tensor([1024, 1000],"float16"), Tensor([1000],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 1024],"float16"), Tensor([0, 1000],"float16"), Tensor([1000],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 1024],"float16"), Tensor([1024, 0],"float16"), Tensor([1000],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 1024],"float16"), Tensor([1024, 1000],"float16"), Tensor([0],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 196, 0],"float16"), Tensor([2048, 512],"float16"), Tensor([512],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 196, 0],"float16"), Tensor([512, 2048],"float16"), Tensor([2048],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 196, 2048],"float16"), Tensor([0, 512],"float16"), Tensor([512],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 196, 2048],"float16"), Tensor([2048, 0],"float16"), Tensor([512],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 196, 2048],"float16"), Tensor([2048, 512],"float16"), Tensor([0],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 196, 512],"float16"), Tensor([0, 2048],"float16"), Tensor([2048],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 196, 512],"float16"), Tensor([512, 0],"float16"), Tensor([2048],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([128, 196, 512],"float16"), Tensor([512, 2048],"float16"), Tensor([0],"float16"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 0],"float32"), Tensor([40, 50],"float32"), Tensor([50],"float32"), False, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 0],"float32"), Tensor([40, 50],"float32"), Tensor([50],"float32"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 0],"float32"), Tensor([50, 40],"float32"), Tensor([50],"float32"), True, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 0],"float32"), Tensor([50, 40],"float32"), Tensor([50],"float32"), True, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([0, 40],"float32"), Tensor([50],"float32"), True, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([0, 40],"float32"), Tensor([50],"float32"), True, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([0, 50],"float32"), Tensor([50],"float32"), False, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([0, 50],"float32"), Tensor([50],"float32"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([40, 0],"float32"), Tensor([50],"float32"), False, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([40, 0],"float32"), Tensor([50],"float32"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([40, 50],"float32"), Tensor([0],"float32"), False, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([40, 50],"float32"), Tensor([0],"float32"), False, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([50, 0],"float32"), Tensor([50],"float32"), True, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([50, 0],"float32"), Tensor([50],"float32"), True, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([50, 40],"float32"), Tensor([0],"float32"), True, )
paddle.incubate.nn.functional.fused_linear(Tensor([30, 40],"float32"), Tensor([50, 40],"float32"), Tensor([0],"float32"), True, None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 0, 64],"float16"), Tensor([64, 192],"float16"), Tensor([192],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 0, 64],"float16"), Tensor([64, 64],"float16"), None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 115, 0],"float16"), Tensor([64, 64],"float16"), None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 115, 64],"float16"), Tensor([0, 64],"float16"), None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 115, 64],"float16"), Tensor([64, 0],"float16"), None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 127, 0],"float16"), Tensor([64, 64],"float16"), None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 127, 64],"float16"), Tensor([0, 64],"float16"), None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 127, 64],"float16"), Tensor([64, 0],"float16"), None, )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 132, 0],"float16"), Tensor([64, 192],"float16"), Tensor([192],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 132, 64],"float16"), Tensor([0, 192],"float16"), Tensor([192],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 132, 64],"float16"), Tensor([64, 0],"float16"), Tensor([192],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 132, 64],"float16"), Tensor([64, 192],"float16"), Tensor([0],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 148, 0],"float16"), Tensor([64, 192],"float16"), Tensor([192],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 148, 64],"float16"), Tensor([0, 192],"float16"), Tensor([192],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 148, 64],"float16"), Tensor([64, 0],"float16"), Tensor([192],"float16"), )
paddle.incubate.nn.functional.fused_linear(Tensor([4, 148, 64],"float16"), Tensor([64, 192],"float16"), Tensor([0],"float16"), )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([0, 4],"float64"), Tensor([4, 128],"float64"), Tensor([128],"float64"), False, False, "gelu", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([0, 4],"float64"), Tensor([4, 128],"float64"), Tensor([128],"float64"), False, False, "none", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([0, 4],"float64"), Tensor([4, 128],"float64"), Tensor([128],"float64"), False, False, "relu", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 0],"float64"), Tensor([4, 128],"float64"), Tensor([128],"float64"), False, False, "gelu", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 0],"float64"), Tensor([4, 128],"float64"), Tensor([128],"float64"), False, False, "none", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 0],"float64"), Tensor([4, 128],"float64"), Tensor([128],"float64"), False, False, "relu", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 4],"float64"), Tensor([0, 128],"float64"), Tensor([128],"float64"), False, False, "gelu", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 4],"float64"), Tensor([0, 128],"float64"), Tensor([128],"float64"), False, False, "none", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 4],"float64"), Tensor([0, 128],"float64"), Tensor([128],"float64"), False, False, "relu", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 4],"float64"), Tensor([4, 0],"float64"), Tensor([128],"float64"), False, False, "gelu", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 4],"float64"), Tensor([4, 0],"float64"), Tensor([128],"float64"), False, False, "none", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 4],"float64"), Tensor([4, 0],"float64"), Tensor([128],"float64"), False, False, "relu", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 4],"float64"), Tensor([4, 128],"float64"), Tensor([0],"float64"), False, False, "gelu", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 4],"float64"), Tensor([4, 128],"float64"), Tensor([0],"float64"), False, False, "none", )
paddle.incubate.nn.functional.fused_linear_activation(Tensor([8, 4],"float64"), Tensor([4, 128],"float64"), Tensor([0],"float64"), False, False, "relu", )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 30],"float32"), Tensor([0, 40],"float32"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 30],"float32"), Tensor([0, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 30],"float32"), Tensor([40, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 30],"float32"), Tensor([40, 50],"float32"), Tensor([40],"float32"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 30],"float32"), Tensor([50, 40],"float32"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 30],"float32"), Tensor([50, 40],"float32"), Tensor([40],"float32"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 4],"float16"), Tensor([0, 5],"float16"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 4],"float16"), Tensor([0, 7],"float16"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 4],"float16"), Tensor([5, 7],"float16"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 4],"float16"), Tensor([5, 7],"float16"), Tensor([5],"float16"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 4],"float16"), Tensor([7, 5],"float16"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 4],"float16"), Tensor([7, 5],"float16"), Tensor([5],"float16"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 50],"float32"), Tensor([0, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 50],"float32"), Tensor([0, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 50],"float32"), Tensor([40, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 50],"float32"), Tensor([40, 50],"float32"), Tensor([40],"float32"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 50],"float32"), Tensor([50, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 50],"float32"), Tensor([50, 40],"float32"), Tensor([40],"float32"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 7],"float16"), Tensor([0, 5],"float16"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 7],"float16"), Tensor([0, 7],"float16"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 7],"float16"), Tensor([5, 7],"float16"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 7],"float16"), Tensor([5, 7],"float16"), Tensor([5],"float16"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 7],"float16"), Tensor([7, 5],"float16"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([0, 7],"float16"), Tensor([7, 5],"float16"), Tensor([5],"float16"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 0],"float32"), Tensor([40, 0],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 0],"float32"), Tensor([40, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 0],"float32"), Tensor([40, 50],"float32"), Tensor([40],"float32"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 0],"float32"), Tensor([50, 0],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 0],"float32"), Tensor([50, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 0],"float32"), Tensor([50, 40],"float32"), Tensor([40],"float32"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([0, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([0, 40],"float32"), Tensor([40],"float32"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([0, 50],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([0, 50],"float32"), Tensor([40],"float32"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([40, 0],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([40, 0],"float32"), Tensor([40],"float32"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([40, 50],"float32"), Tensor([0],"float32"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 0],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 0],"float32"), Tensor([40],"float32"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 50],"float32"), Tensor([50, 40],"float32"), Tensor([0],"float32"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 0],"float16"), Tensor([5, 0],"float16"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 0],"float16"), Tensor([5, 7],"float16"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 0],"float16"), Tensor([5, 7],"float16"), Tensor([5],"float16"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 0],"float16"), Tensor([7, 0],"float16"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 0],"float16"), Tensor([7, 5],"float16"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 0],"float16"), Tensor([7, 5],"float16"), Tensor([5],"float16"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([0, 5],"float16"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([0, 5],"float16"), Tensor([5],"float16"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([0, 7],"float16"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([0, 7],"float16"), Tensor([5],"float16"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([5, 0],"float16"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([5, 0],"float16"), Tensor([5],"float16"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([5, 7],"float16"), Tensor([0],"float16"), False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([7, 0],"float16"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([7, 0],"float16"), Tensor([5],"float16"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([4, 7],"float16"), Tensor([7, 5],"float16"), Tensor([0],"float16"), False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 0],"float32"), Tensor([40, 0],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 0],"float32"), Tensor([40, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 0],"float32"), Tensor([40, 50],"float32"), Tensor([40],"float32"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 0],"float32"), Tensor([50, 0],"float32"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 0],"float32"), Tensor([50, 40],"float32"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 0],"float32"), Tensor([50, 40],"float32"), Tensor([40],"float32"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([0, 40],"float32"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([0, 40],"float32"), Tensor([40],"float32"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([0, 50],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([0, 50],"float32"), Tensor([40],"float32"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([40, 0],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([40, 0],"float32"), Tensor([40],"float32"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([40, 50],"float32"), Tensor([0],"float32"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([50, 0],"float32"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([50, 0],"float32"), Tensor([40],"float32"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([50, 30],"float32"), Tensor([50, 40],"float32"), Tensor([0],"float32"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 0],"float16"), Tensor([5, 0],"float16"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 0],"float16"), Tensor([5, 7],"float16"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 0],"float16"), Tensor([5, 7],"float16"), Tensor([5],"float16"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 0],"float16"), Tensor([7, 0],"float16"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 0],"float16"), Tensor([7, 5],"float16"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 0],"float16"), Tensor([7, 5],"float16"), Tensor([5],"float16"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([0, 5],"float16"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([0, 5],"float16"), Tensor([5],"float16"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([0, 7],"float16"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([0, 7],"float16"), Tensor([5],"float16"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([5, 0],"float16"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([5, 0],"float16"), Tensor([5],"float16"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([5, 7],"float16"), Tensor([0],"float16"), True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([7, 0],"float16"), None, True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([7, 0],"float16"), Tensor([5],"float16"), True, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([7, 4],"float16"), Tensor([7, 5],"float16"), Tensor([0],"float16"), True, False, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([0, 1, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([0, 1, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([0, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([0, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([1, 0, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([1, 0],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([1, 1, 0],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([1, 1, 64],"float16"), Tensor([0],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([1, 64],"float16"), Tensor([0],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([100, 0],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([100, 512],"float16"), Tensor([0],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([101, 0],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([101, 64],"float16"), Tensor([0],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([104, 0],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([104, 512],"float16"), Tensor([0],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 0, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 0, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 1, 0],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 1, 0],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 1, 512],"float16"), Tensor([0],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([2, 1, 64],"float16"), Tensor([0],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 1, 4, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 1, 4, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 4, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 4, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([0, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 0, 4, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 0, 4, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 0, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 0, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 0, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 0],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 0],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 0],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 0],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 0],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([0, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([0, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([1, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 0],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 0, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 0, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 0, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 0, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 0, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([0, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 0, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([0, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 0],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 4, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 4, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 0, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 0],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 0],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 0],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 0],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 0],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([0, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 0, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([0, 8, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 0, 8],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=Tensor([1, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([0, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 1, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=Tensor([1, 0],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([0, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 0, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([0, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 0, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 0],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([0, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 0],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 1000],"float16"), Tensor([0, 1, 1000],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 1000],"float16"), Tensor([1, 1, 1000],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 1000],"float32"), Tensor([0, 1, 1000],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 1, 1000],"float32"), Tensor([1, 1, 1000],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 101],"float16"), Tensor([0, 101],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 101],"float16"), Tensor([4, 101],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 11, 1024],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 202],"float16"), None, )
paddle.incubate.nn.functional.swiglu(Tensor([0, 202],"float32"), None, )
paddle.incubate.nn.functional.swiglu(Tensor([0, 4096, 22016],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 4096],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 4096],"float32"), Tensor([0, 4096],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 4096],"float32"), Tensor([300, 4096],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 1000],"float16"), Tensor([1, 0, 1000],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 1000],"float16"), Tensor([1, 1, 1000],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 1000],"float32"), Tensor([1, 0, 1000],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 1000],"float32"), Tensor([1, 1, 1000],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 1024],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 0, 22016],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 0],"float16"), Tensor([1, 1, 0],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 0],"float16"), Tensor([1, 1, 1000],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 0],"float32"), Tensor([1, 1, 1000],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 1000],"float16"), Tensor([0, 1, 1000],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 1000],"float16"), Tensor([1, 0, 1000],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 1000],"float16"), Tensor([1, 1, 0],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 1000],"float32"), Tensor([0, 1, 1000],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 1000],"float32"), Tensor([1, 0, 1000],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 1000],"float32"), Tensor([1, 1, 0],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 11, 0],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 4096, 0],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([300, 0],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([300, 0],"float32"), Tensor([300, 0],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([300, 0],"float32"), Tensor([300, 4096],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([300, 4096],"float32"), Tensor([0, 4096],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([300, 4096],"float32"), Tensor([300, 0],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([4, 0],"float16"), None, )
paddle.incubate.nn.functional.swiglu(Tensor([4, 0],"float16"), Tensor([4, 0],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([4, 0],"float16"), Tensor([4, 101],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([4, 0],"float32"), None, )
paddle.incubate.nn.functional.swiglu(Tensor([4, 101],"float16"), Tensor([0, 101],"float16"), )
paddle.incubate.nn.functional.swiglu(Tensor([4, 101],"float16"), Tensor([4, 0],"float16"), )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([0, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 0, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 0, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 0],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([0, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 0, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 0, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 0],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([0, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 0, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 0, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 0],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([0, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 0],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([0, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 0],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([0, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 0, 50, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 0, 50],"float16"), scale=0.125, )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 0],"float16"), scale=0.125, )
paddle.incubate.softmax_mask_fuse(Tensor([0, 1, 8, 32],"float32"), Tensor([0, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([0, 1, 8, 32],"float32"), Tensor([1, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 0, 8, 32],"float32"), Tensor([1, 0, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 0, 8, 32],"float32"), Tensor([1, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 0, 32],"float32"), Tensor([1, 1, 0, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 0, 32],"float32"), Tensor([1, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 8, 0],"float32"), Tensor([1, 1, 8, 0],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 8, 0],"float32"), Tensor([1, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 8, 32],"float32"), Tensor([0, 1, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 8, 32],"float32"), Tensor([1, 0, 8, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 8, 32],"float32"), Tensor([1, 1, 0, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 8, 32],"float32"), Tensor([1, 1, 8, 0],"float32"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([0, 8, 8, 1020],"float16"), mask=Tensor([0, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([0, 8, 8, 1020],"float16"), mask=Tensor([2, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([0, 8, 8, 32],"float16"), mask=Tensor([0, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([0, 8, 8, 32],"float16"), mask=Tensor([2, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 0, 8, 1020],"float16"), mask=Tensor([2, 0, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 0, 8, 1020],"float16"), mask=Tensor([2, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 0, 8, 32],"float16"), mask=Tensor([2, 0, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 0, 8, 32],"float16"), mask=Tensor([2, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 0, 1020],"float16"), mask=Tensor([2, 1, 0, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 0, 1020],"float16"), mask=Tensor([2, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 0, 32],"float16"), mask=Tensor([2, 1, 0, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 0, 32],"float16"), mask=Tensor([2, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 0],"float16"), mask=Tensor([2, 1, 8, 0],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 0],"float16"), mask=Tensor([2, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 0],"float16"), mask=Tensor([2, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 1020],"float16"), mask=Tensor([0, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 1020],"float16"), mask=Tensor([2, 0, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 1020],"float16"), mask=Tensor([2, 1, 0, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 1020],"float16"), mask=Tensor([2, 1, 8, 0],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 32],"float16"), mask=Tensor([0, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 32],"float16"), mask=Tensor([2, 0, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 32],"float16"), mask=Tensor([2, 1, 0, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8, 32],"float16"), mask=Tensor([2, 1, 8, 0],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([0, 16, 1024, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([0, 4, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 0, 1024, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 0, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 16, 0, 1024],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 16, 1024, 0],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 0, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4, 32, 0],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([0, 1, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([0, 1, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 0, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 0, 32, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 0, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 0, 32],"float32"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 0],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 1, 32, 0],"float32"), )
paddle.index_fill(Tensor([0, 40],"float32"), Tensor([2],"int64"), 1, -1, )
paddle.index_fill(Tensor([0],"int64"), Tensor([0],"int64"), 0, 2, )
paddle.index_fill(Tensor([0],"int64"), Tensor([0],"int64"), 0, 5, )
paddle.index_fill(Tensor([0],"int64"), Tensor([0],"int64"), 0, 6, )
paddle.index_fill(Tensor([0],"int64"), Tensor([0],"int64"), 0, 7, )
paddle.index_fill(Tensor([0],"int64"), Tensor([28],"int64"), 0, 5, )
paddle.index_fill(Tensor([0],"int64"), Tensor([30],"int64"), 0, 7, )
paddle.index_fill(Tensor([0],"int64"), Tensor([38],"int64"), 0, 6, )
paddle.index_fill(Tensor([0],"int64"), Tensor([4],"int64"), 0, 2, )
paddle.index_fill(Tensor([0],"int64"), Tensor([5],"int64"), 0, 2, )
paddle.index_fill(Tensor([128],"int64"), Tensor([0],"int64"), 0, 5, )
paddle.index_fill(Tensor([128],"int64"), Tensor([0],"int64"), 0, 6, )
paddle.index_fill(Tensor([128],"int64"), Tensor([0],"int64"), 0, 7, )
paddle.index_fill(Tensor([20, 0],"float32"), Tensor([2],"int64"), 1, -1, )
paddle.index_fill(Tensor([20, 40],"float32"), Tensor([0],"int64"), 1, -1, )
paddle.index_fill(Tensor([4],"int64"), Tensor([0],"int64"), 0, 2, )
paddle.index_fill(Tensor([8],"int64"), Tensor([0],"int64"), 0, 2, )
paddle.is_empty(Tensor([0, 3],"float32"), )
paddle.is_empty(Tensor([0],"int64"), )
paddle.is_empty(Tensor([2, 0],"float32"), )
paddle.is_empty(x=Tensor([0, 32, 32],"float32"), )
paddle.is_empty(x=Tensor([4, 0, 32],"float32"), )
paddle.is_empty(x=Tensor([4, 32, 0],"float32"), )
paddle.isin(Tensor([0, 5, 10],"bfloat16"), Tensor([100],"bfloat16"), True, False, )
paddle.isin(Tensor([0, 5, 10],"bfloat16"), Tensor([100],"bfloat16"), True, True, )
paddle.isin(Tensor([0, 64],"bfloat16"), Tensor([0, 256],"bfloat16"), False, False, )
paddle.isin(Tensor([0, 64],"bfloat16"), Tensor([0, 256],"bfloat16"), False, True, )
paddle.isin(Tensor([0, 64],"bfloat16"), Tensor([4, 256],"bfloat16"), False, False, )
paddle.isin(Tensor([0, 64],"bfloat16"), Tensor([4, 256],"bfloat16"), False, True, )
paddle.isin(Tensor([0, 8],"bfloat16"), Tensor([0, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([0, 8],"bfloat16"), Tensor([0, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([0, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([0, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([2, 0, 10],"bfloat16"), Tensor([100],"bfloat16"), True, False, )
paddle.isin(Tensor([2, 0, 10],"bfloat16"), Tensor([100],"bfloat16"), True, True, )
paddle.isin(Tensor([2, 5, 0],"bfloat16"), Tensor([100],"bfloat16"), True, False, )
paddle.isin(Tensor([2, 5, 0],"bfloat16"), Tensor([100],"bfloat16"), True, True, )
paddle.isin(Tensor([2, 5, 10],"bfloat16"), Tensor([0],"bfloat16"), True, False, )
paddle.isin(Tensor([2, 5, 10],"bfloat16"), Tensor([0],"bfloat16"), True, True, )
paddle.isin(Tensor([4, 0],"bfloat16"), Tensor([2, 0],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 0],"bfloat16"), Tensor([2, 0],"bfloat16"), False, True, )
paddle.isin(Tensor([4, 0],"bfloat16"), Tensor([2, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 0],"bfloat16"), Tensor([2, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([0, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([0, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([2, 0],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([2, 0],"bfloat16"), False, True, )
paddle.isin(Tensor([8, 0],"bfloat16"), Tensor([4, 0],"bfloat16"), False, False, )
paddle.isin(Tensor([8, 0],"bfloat16"), Tensor([4, 0],"bfloat16"), False, True, )
paddle.isin(Tensor([8, 0],"bfloat16"), Tensor([4, 256],"bfloat16"), False, False, )
paddle.isin(Tensor([8, 0],"bfloat16"), Tensor([4, 256],"bfloat16"), False, True, )
paddle.isin(Tensor([8, 64],"bfloat16"), Tensor([0, 256],"bfloat16"), False, False, )
paddle.isin(Tensor([8, 64],"bfloat16"), Tensor([0, 256],"bfloat16"), False, True, )
paddle.isin(Tensor([8, 64],"bfloat16"), Tensor([4, 0],"bfloat16"), False, False, )
paddle.isin(Tensor([8, 64],"bfloat16"), Tensor([4, 0],"bfloat16"), False, True, )
paddle.kthvalue(Tensor([0, 128, 10],"float64"), 2, -1, )
paddle.kthvalue(Tensor([0, 128, 10],"float64"), 2, 2, )
paddle.kthvalue(Tensor([0, 200, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([0, 200, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([0, 200, 40],"float32"), k=2, )
paddle.kthvalue(Tensor([0, 30, 250],"float64"), 244, -1, )
paddle.kthvalue(Tensor([0, 30, 250],"float64"), 244, 2, )
paddle.kthvalue(Tensor([0],"float32"), 1, )
paddle.kthvalue(Tensor([0],"float32"), k=2, )
paddle.kthvalue(Tensor([2, 0, 10],"float64"), 2, -1, )
paddle.kthvalue(Tensor([2, 0, 10],"float64"), 2, 2, )
paddle.kthvalue(Tensor([2, 0, 250],"float64"), 244, -1, )
paddle.kthvalue(Tensor([2, 0, 250],"float64"), 244, 2, )
paddle.kthvalue(Tensor([2, 128, 0],"float64"), 2, -1, )
paddle.kthvalue(Tensor([2, 128, 0],"float64"), 2, 2, )
paddle.kthvalue(Tensor([2, 30, 0],"float64"), 244, -1, )
paddle.kthvalue(Tensor([2, 30, 0],"float64"), 244, 2, )
paddle.kthvalue(Tensor([30, 0, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 0, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 0, 40],"float32"), k=2, )
paddle.kthvalue(Tensor([30, 200, 0],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 200, 0],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 200, 0],"float32"), k=2, )
paddle.kthvalue(x=Tensor([0, 2, 4],"float32"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([0, 2, 4],"float64"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([0, 2, 4],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([0, 2, 4],"float64"), k=4, axis=2, keepdim=True, )
paddle.kthvalue(x=Tensor([3, 0, 4],"float32"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([3, 0, 4],"float64"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([3, 0, 4],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([3, 0, 4],"float64"), k=4, axis=2, keepdim=True, )
paddle.kthvalue(x=Tensor([3, 2, 0],"float32"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([3, 2, 0],"float64"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([3, 2, 0],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([3, 2, 0],"float64"), k=4, axis=2, keepdim=True, )
paddle.ldexp(Tensor([0, 20, 1],"float32"), Tensor([1],"int32"), )
paddle.ldexp(Tensor([0, 6, 6],"float64"), Tensor([6],"int32"), )
paddle.ldexp(Tensor([0],"float32"), Tensor([0],"int32"), )
paddle.ldexp(Tensor([0],"float32"), Tensor([207],"int32"), )
paddle.ldexp(Tensor([0],"int64"), Tensor([0],"int32"), )
paddle.ldexp(Tensor([0],"int64"), Tensor([209],"int32"), )
paddle.ldexp(Tensor([10, 0, 1],"float32"), Tensor([1],"int32"), )
paddle.ldexp(Tensor([10, 20, 0],"float32"), Tensor([1],"int32"), )
paddle.ldexp(Tensor([10, 20, 1],"float32"), Tensor([0],"int32"), )
paddle.ldexp(Tensor([207],"float32"), Tensor([0],"int32"), )
paddle.ldexp(Tensor([209],"int64"), Tensor([0],"int32"), )
paddle.ldexp(Tensor([5, 0, 6],"float64"), Tensor([6],"int32"), )
paddle.ldexp(Tensor([5, 6, 0],"float64"), Tensor([6],"int32"), )
paddle.ldexp(Tensor([5, 6, 6],"float64"), Tensor([0],"int32"), )
paddle.less(Tensor([0, 1024],"float32"), Tensor([0, 1024],"float32"), )
paddle.less(Tensor([0, 1024],"float32"), Tensor([10, 1024],"float32"), )
paddle.less(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.less(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.less(Tensor([0],"float32"), Tensor([6],"float32"), )
paddle.less(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.less(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.less(Tensor([10, 0],"float32"), Tensor([10, 1024],"float32"), )
paddle.less(Tensor([10, 1024],"float32"), Tensor([0, 1024],"float32"), )
paddle.less(Tensor([10, 1024],"float32"), Tensor([10, 0],"float32"), )
paddle.less(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.less(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.less(Tensor([6],"float32"), Tensor([0],"float32"), )
paddle.less(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
paddle.less(x=Tensor([0],"int64"), y=Tensor([3],"int64"), )
paddle.less(x=Tensor([3],"int64"), y=Tensor([0],"int64"), )
paddle.less_equal(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.less_equal(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_equal(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.less_equal(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.less_equal(Tensor([0],"float16"), Tensor([0],"float16"), )
paddle.less_equal(Tensor([0],"float16"), Tensor([4],"float16"), )
paddle.less_equal(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.less_equal(Tensor([0],"int32"), Tensor([1],"int32"), )
paddle.less_equal(Tensor([1],"int32"), Tensor([0],"int32"), )
paddle.less_equal(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.less_equal(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_equal(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.less_equal(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.less_equal(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.less_equal(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.less_equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.less_equal(Tensor([4],"float16"), Tensor([0],"float16"), )
paddle.less_equal(x=Tensor([0, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_equal(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.less_equal(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_equal(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.less_equal(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_equal(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.less_equal(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.less_equal(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
paddle.less_equal(x=Tensor([0],"int64"), y=Tensor([3],"int64"), )
paddle.less_equal(x=Tensor([1, 0, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_equal(x=Tensor([1, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.less_equal(x=Tensor([1, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_equal(x=Tensor([1, 2, 0, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_equal(x=Tensor([1, 2, 1, 0],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.less_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.less_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 0],"float64"), )
paddle.less_equal(x=Tensor([1, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.less_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.less_equal(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.less_equal(x=Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.less_equal(x=Tensor([3, 0],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_equal(x=Tensor([3, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.less_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.less_equal(x=Tensor([3],"int64"), y=Tensor([0],"int64"), )
paddle.less_than(Tensor([0, 1, 128, 128],"float32"), Tensor([0, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([0, 1, 128, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([0, 128, 128],"float32"), Tensor([0, 128, 128],"float32"), )
paddle.less_than(Tensor([0, 128, 128],"float32"), Tensor([1, 128, 128],"float32"), )
paddle.less_than(Tensor([0, 128, 128],"int64"), Tensor([0, 128, 128],"int64"), )
paddle.less_than(Tensor([0, 128, 128],"int64"), Tensor([1, 128, 128],"int64"), )
paddle.less_than(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.less_than(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.less_than(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.less_than(Tensor([0],"int64"), Tensor([1],"int64"), )
paddle.less_than(Tensor([1, 0, 128],"float32"), Tensor([1, 0, 128],"float32"), )
paddle.less_than(Tensor([1, 0, 128],"float32"), Tensor([1, 128, 128],"float32"), )
paddle.less_than(Tensor([1, 0, 128],"int64"), Tensor([1, 0, 128],"int64"), )
paddle.less_than(Tensor([1, 0, 128],"int64"), Tensor([1, 128, 128],"int64"), )
paddle.less_than(Tensor([1, 128, 0],"float32"), Tensor([1, 128, 0],"float32"), )
paddle.less_than(Tensor([1, 128, 0],"float32"), Tensor([1, 128, 128],"float32"), )
paddle.less_than(Tensor([1, 128, 0],"int64"), Tensor([1, 128, 0],"int64"), )
paddle.less_than(Tensor([1, 128, 0],"int64"), Tensor([1, 128, 128],"int64"), )
paddle.less_than(Tensor([1, 128, 128],"float32"), Tensor([0, 128, 128],"float32"), )
paddle.less_than(Tensor([1, 128, 128],"float32"), Tensor([1, 0, 128],"float32"), )
paddle.less_than(Tensor([1, 128, 128],"float32"), Tensor([1, 128, 0],"float32"), )
paddle.less_than(Tensor([1, 128, 128],"int64"), Tensor([0, 128, 128],"int64"), )
paddle.less_than(Tensor([1, 128, 128],"int64"), Tensor([1, 0, 128],"int64"), )
paddle.less_than(Tensor([1, 128, 128],"int64"), Tensor([1, 128, 0],"int64"), )
paddle.less_than(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.less_than(Tensor([1],"int64"), Tensor([0],"int64"), )
paddle.less_than(Tensor([8, 0, 128, 128],"float32"), Tensor([8, 0, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 0, 128, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 1, 0, 128],"float32"), Tensor([8, 1, 0, 128],"float32"), )
paddle.less_than(Tensor([8, 1, 0, 128],"float32"), Tensor([8, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 0],"float32"), Tensor([8, 1, 128, 0],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 0],"float32"), Tensor([8, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([0, 1, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 0, 128, 128],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 1, 0, 128],"float32"), )
paddle.less_than(Tensor([8, 1, 128, 128],"float32"), Tensor([8, 1, 128, 0],"float32"), )
paddle.less_than(x=Tensor([0, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_than(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.less_than(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_than(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.less_than(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_than(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.less_than(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.less_than(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
paddle.less_than(x=Tensor([0],"int64"), y=Tensor([3],"int64"), )
paddle.less_than(x=Tensor([1, 0, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_than(x=Tensor([1, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.less_than(x=Tensor([1, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_than(x=Tensor([1, 2, 0, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_than(x=Tensor([1, 2, 1, 0],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.less_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.less_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 0],"float64"), )
paddle.less_than(x=Tensor([1, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.less_than(x=Tensor([1, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.less_than(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.less_than(x=Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.less_than(x=Tensor([3, 0],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_than(x=Tensor([3, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.less_than(x=Tensor([3, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.less_than(x=Tensor([3],"int64"), y=Tensor([0],"int64"), )
paddle.linalg.corrcoef(Tensor([0, 5],"float32"), )
paddle.linalg.corrcoef(Tensor([0, 5],"float32"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([0, 5],"float64"), )
paddle.linalg.corrcoef(Tensor([0, 5],"float64"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([0],"float32"), )
paddle.linalg.corrcoef(Tensor([0],"float32"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([0],"float64"), )
paddle.linalg.corrcoef(Tensor([0],"float64"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([4, 0],"float32"), )
paddle.linalg.corrcoef(Tensor([4, 0],"float32"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([4, 0],"float64"), )
paddle.linalg.corrcoef(Tensor([4, 0],"float64"), rowvar=False, )
paddle.linalg.cov(Tensor([0, 10],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0, 10],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 0],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 0],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 0],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(x=Tensor([0, 12],"float64"), rowvar=True, )
paddle.linalg.cov(x=Tensor([0, 12],"float64"), rowvar=True, ddof=True, )
paddle.linalg.cov(x=Tensor([4, 0],"float64"), rowvar=True, )
paddle.linalg.cov(x=Tensor([4, 0],"float64"), rowvar=True, ddof=True, )
paddle.linalg.eig(Tensor([0, 2],"float64"), )
paddle.linalg.eig(Tensor([0, 3, 3],"complex128"), )
paddle.linalg.eig(Tensor([0, 3],"complex128"), )
paddle.linalg.eig(Tensor([2, 0],"float64"), )
paddle.linalg.eig(Tensor([3, 0],"complex128"), )
paddle.linalg.eig(Tensor([4, 0, 3],"complex128"), )
paddle.linalg.eig(Tensor([4, 3, 0],"complex128"), )
paddle.linalg.eigh(Tensor([0, 2],"complex128"), "L", )
paddle.linalg.eigh(Tensor([0, 2],"complex128"), "U", )
paddle.linalg.eigh(Tensor([0, 2],"complex64"), "L", )
paddle.linalg.eigh(Tensor([0, 4, 4],"complex128"), "L", )
paddle.linalg.eigh(Tensor([0, 4, 4],"complex64"), "L", )
paddle.linalg.eigh(Tensor([0, 4],"complex128"), "U", )
paddle.linalg.eigh(Tensor([0, 5, 5],"complex64"), )
paddle.linalg.eigh(Tensor([0, 5, 5],"float32"), )
paddle.linalg.eigh(Tensor([0, 5],"complex64"), )
paddle.linalg.eigh(Tensor([0, 5],"float32"), )
paddle.linalg.eigh(Tensor([2, 0, 5],"complex64"), )
paddle.linalg.eigh(Tensor([2, 0, 5],"float32"), )
paddle.linalg.eigh(Tensor([2, 0],"complex128"), "L", )
paddle.linalg.eigh(Tensor([2, 0],"complex128"), "U", )
paddle.linalg.eigh(Tensor([2, 0],"complex64"), "L", )
paddle.linalg.eigh(Tensor([2, 5, 0],"complex64"), )
paddle.linalg.eigh(Tensor([2, 5, 0],"float32"), )
paddle.linalg.eigh(Tensor([4, 0, 4],"complex128"), "L", )
paddle.linalg.eigh(Tensor([4, 0, 4],"complex64"), "L", )
paddle.linalg.eigh(Tensor([4, 0],"complex128"), "U", )
paddle.linalg.eigh(Tensor([4, 4, 0],"complex128"), "L", )
paddle.linalg.eigh(Tensor([4, 4, 0],"complex64"), "L", )
paddle.linalg.eigh(Tensor([5, 0],"complex64"), )
paddle.linalg.eigh(Tensor([5, 0],"float32"), )
paddle.linalg.lu(Tensor([0, 3, 3, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([0, 3, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([0, 3, 5],"float32"), )
paddle.linalg.lu(Tensor([0, 3, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 3, 5],"float64"), )
paddle.linalg.lu(Tensor([0, 3, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 3],"float32"), )
paddle.linalg.lu(Tensor([0, 3],"float32"), get_infos=False, )
paddle.linalg.lu(Tensor([0, 3],"float64"), )
paddle.linalg.lu(Tensor([0, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([0, 5, 3, 5],"float32"), )
paddle.linalg.lu(Tensor([0, 5, 3, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5, 3, 5],"float64"), )
paddle.linalg.lu(Tensor([0, 5, 3, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([0, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 0, 3, 5],"float32"), )
paddle.linalg.lu(Tensor([2, 0, 3, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 0, 3, 5],"float64"), )
paddle.linalg.lu(Tensor([2, 0, 3, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 0, 5],"float32"), )
paddle.linalg.lu(Tensor([2, 0, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 0, 5],"float64"), )
paddle.linalg.lu(Tensor([2, 0, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 3, 0],"float32"), )
paddle.linalg.lu(Tensor([2, 3, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 3, 0],"float64"), )
paddle.linalg.lu(Tensor([2, 3, 0],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 5, 0, 5],"float32"), )
paddle.linalg.lu(Tensor([2, 5, 0, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 5, 0, 5],"float64"), )
paddle.linalg.lu(Tensor([2, 5, 0, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 5, 3, 0],"float32"), )
paddle.linalg.lu(Tensor([2, 5, 3, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 5, 3, 0],"float64"), )
paddle.linalg.lu(Tensor([2, 5, 3, 0],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 0, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([3, 0],"float32"), )
paddle.linalg.lu(Tensor([3, 0],"float32"), get_infos=False, )
paddle.linalg.lu(Tensor([3, 0],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 0],"float64"), )
paddle.linalg.lu(Tensor([3, 0],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([3, 0],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 3, 0],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([5, 0, 3, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([5, 3, 0, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([5, 3, 3, 0],"float64"), get_infos=False, )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), None, False, Tensor([0, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), None, True, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), None, True, Tensor([0, 200],"float64"), Tensor([0, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 3],"float64"), None, False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([1, 0],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), None, True, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), None, True, Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), None, True, Tensor([0, 200],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), None, True, Tensor([200, 0],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([0, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([200, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 0],"float64"), None, False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 6],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), None, False, Tensor([0, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), None, False, Tensor([3, 0],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([0, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([0, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 0],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), None, False, Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), None, False, Tensor([0, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), None, False, Tensor([1, 0],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([1, 0],"float64"), )
paddle.linalg.matrix_rank(x=Tensor([0, 4, 4, 4],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 5],"float32"), tol=None, hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([0, 5],"float64"), tol=None, hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 4],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 0, 4],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 0],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float32"), tol=None, hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=None, hermitian=False, )
paddle.linalg.matrix_transpose(Tensor([0, 3, 4],"float32"), )
paddle.linalg.matrix_transpose(Tensor([2, 0, 4],"float32"), )
paddle.linalg.matrix_transpose(Tensor([2, 3, 0],"float32"), )
paddle.linalg.norm(Tensor([0],"float32"), p="fro", axis=0, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([0],"float64"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.qr(Tensor([0, 100, 12],"float64"), )
paddle.linalg.qr(Tensor([0, 100, 2],"float64"), )
paddle.linalg.qr(Tensor([0, 12],"float64"), )
paddle.linalg.qr(Tensor([0, 21],"float64"), )
paddle.linalg.qr(Tensor([0, 3, 100, 12],"float64"), )
paddle.linalg.qr(Tensor([0, 3, 100, 2],"float64"), )
paddle.linalg.qr(Tensor([1, 0, 12],"float64"), )
paddle.linalg.qr(Tensor([1, 0, 2],"float64"), )
paddle.linalg.qr(Tensor([1, 100, 0],"float64"), )
paddle.linalg.qr(Tensor([100, 0],"float64"), )
paddle.linalg.qr(Tensor([2, 0, 100, 12],"float64"), )
paddle.linalg.qr(Tensor([2, 0, 100, 2],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 0, 12],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 0, 2],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 100, 0],"float64"), )
paddle.linalg.slogdet(Tensor([0, 3, 3],"float32"), )
paddle.linalg.slogdet(Tensor([0, 3, 5, 5],"complex64"), )
paddle.linalg.slogdet(Tensor([0, 3, 5, 5],"float32"), )
paddle.linalg.slogdet(Tensor([0, 3],"float32"), )
paddle.linalg.slogdet(Tensor([0, 5, 5],"complex128"), )
paddle.linalg.slogdet(Tensor([3, 0, 3],"float32"), )
paddle.linalg.slogdet(Tensor([3, 0, 5, 5],"complex64"), )
paddle.linalg.slogdet(Tensor([3, 0, 5, 5],"float32"), )
paddle.linalg.slogdet(Tensor([3, 0],"float32"), )
paddle.linalg.slogdet(Tensor([3, 3, 0, 5],"complex64"), )
paddle.linalg.slogdet(Tensor([3, 3, 0, 5],"float32"), )
paddle.linalg.slogdet(Tensor([3, 3, 0],"float32"), )
paddle.linalg.slogdet(Tensor([3, 3, 5, 0],"complex64"), )
paddle.linalg.slogdet(Tensor([3, 3, 5, 0],"float32"), )
paddle.linalg.slogdet(Tensor([6, 0, 5],"complex128"), )
paddle.linalg.slogdet(Tensor([6, 5, 0],"complex128"), )
paddle.linalg.slogdet(x=Tensor([0, 14],"float32"), )
paddle.linalg.slogdet(x=Tensor([0, 14],"float64"), )
paddle.linalg.slogdet(x=Tensor([0, 4, 4],"float64"), )
paddle.linalg.slogdet(x=Tensor([14, 0],"float32"), )
paddle.linalg.slogdet(x=Tensor([14, 0],"float64"), )
paddle.linalg.slogdet(x=Tensor([3, 0, 4],"float64"), )
paddle.linalg.slogdet(x=Tensor([3, 4, 0],"float64"), )
paddle.linalg.svd(Tensor([0, 1],"float64"), )
paddle.linalg.svd(Tensor([0, 100, 12],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([0, 100, 2],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([0, 100],"float64"), )
paddle.linalg.svd(Tensor([0, 12],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([0, 2, 3, 4],"float64"), full_matrices=True, )
paddle.linalg.svd(Tensor([0, 21],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([0, 3, 100, 12],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([0, 3, 100, 2],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([0, 3],"float64"), full_matrices=True, )
paddle.linalg.svd(Tensor([1, 0, 12],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([1, 0, 2],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([1, 0],"float64"), )
paddle.linalg.svd(Tensor([1, 100, 0],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([100, 0],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([2, 0, 100, 12],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([2, 0, 100, 2],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([2, 0],"float64"), full_matrices=True, )
paddle.linalg.svd(Tensor([2, 3, 0, 12],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([2, 3, 0, 2],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([2, 3, 100, 0],"float64"), full_matrices=False, )
paddle.linalg.svd(Tensor([3, 0, 3, 4],"float64"), full_matrices=True, )
paddle.linalg.svd(Tensor([3, 2, 0, 4],"float64"), full_matrices=True, )
paddle.linalg.svd(Tensor([3, 2, 3, 0],"float64"), full_matrices=True, )
paddle.linalg.svdvals(Tensor([0, 1],"float64"), )
paddle.linalg.svdvals(Tensor([0, 12],"float32"), )
paddle.linalg.svdvals(Tensor([0, 3, 6],"float64"), )
paddle.linalg.svdvals(Tensor([10, 0, 6],"float64"), )
paddle.linalg.svdvals(Tensor([10, 0],"float32"), )
paddle.linalg.svdvals(Tensor([10, 3, 0],"float64"), )
paddle.linalg.svdvals(Tensor([100, 0],"float64"), )
paddle.linalg.triangular_solve(Tensor([0, 2, 2],"float32"), Tensor([0, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([0, 2, 2],"float32"), Tensor([1, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), upper=False, )
paddle.linalg.triangular_solve(Tensor([0, 2],"float64"), Tensor([2, 2],"float64"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1, 0, 2],"float32"), Tensor([1, 0, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1, 0, 2],"float32"), Tensor([1, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1, 2, 0],"float32"), Tensor([1, 2, 0],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1, 2, 0],"float32"), Tensor([1, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1, 2, 2],"float32"), Tensor([0, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1, 2, 2],"float32"), Tensor([1, 0, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 0],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 0],"float64"), Tensor([2, 2],"float64"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 2],"float64"), Tensor([0, 2],"float64"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 2],"float64"), Tensor([2, 0],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([0, 3],"float32"), y=Tensor([0, 1],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([0, 3],"float32"), y=Tensor([3, 1],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([0, 3],"float64"), y=Tensor([0, 1],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([0, 3],"float64"), y=Tensor([3, 1],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), upper=False, transpose=True, )
paddle.linalg.triangular_solve(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), upper=False, transpose=True, unitriangular=True, )
paddle.linalg.triangular_solve(x=Tensor([0, 4],"float64"), y=Tensor([4, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([0, 4],"float64"), y=Tensor([4, 4],"float64"), upper=False, transpose=True, )
paddle.linalg.triangular_solve(x=Tensor([0, 4],"float64"), y=Tensor([4, 4],"float64"), upper=False, transpose=True, unitriangular=True, )
paddle.linalg.triangular_solve(x=Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([3, 0],"float32"), y=Tensor([3, 1],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([3, 0],"float64"), y=Tensor([3, 0],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([3, 0],"float64"), y=Tensor([3, 1],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([3, 3],"float32"), y=Tensor([0, 1],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([3, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([3, 3],"float64"), y=Tensor([0, 1],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([3, 3],"float64"), y=Tensor([3, 0],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), upper=False, transpose=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), upper=False, transpose=True, unitriangular=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), upper=False, transpose=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), upper=False, transpose=True, unitriangular=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([0, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([0, 4],"float64"), upper=False, transpose=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([0, 4],"float64"), upper=False, transpose=True, unitriangular=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 0],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 0],"float64"), upper=False, transpose=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 0],"float64"), upper=False, transpose=True, unitriangular=True, )
paddle.linspace(start=4.5, stop=8, num=Tensor([0],"int32"), )
paddle.linspace(start=Tensor([0],"float64"), stop=9.6, num=5, dtype="float64", )
paddle.linspace(start=Tensor([0],"float64"), stop=Tensor([0],"float64"), num=2, dtype="float64", )
paddle.linspace(start=Tensor([0],"float64"), stop=Tensor([1],"float64"), num=2, dtype="float64", )
paddle.linspace(start=Tensor([0],"int32"), stop=Tensor([0],"int32"), num=2, )
paddle.linspace(start=Tensor([0],"int32"), stop=Tensor([1],"int32"), num=2, )
paddle.linspace(start=Tensor([1],"float64"), stop=Tensor([0],"float64"), num=2, dtype="float64", )
paddle.linspace(start=Tensor([1],"int32"), stop=Tensor([0],"int32"), num=2, )
paddle.linspace(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"int32"), dtype="float32", )
paddle.linspace(Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), dtype="float32", )
paddle.linspace(Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"int32"), dtype="float32", )
paddle.linspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"int32"), dtype="float32", )
paddle.logaddexp(Tensor([0, 2, 3, 4],"float32"), Tensor([0, 2, 3, 1],"float32"), )
paddle.logaddexp(Tensor([0, 2, 3, 4],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.logaddexp(Tensor([0, 2, 3, 4],"float64"), Tensor([0, 2, 3, 4],"float64"), )
paddle.logaddexp(Tensor([0, 2, 3, 4],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.logaddexp(Tensor([0, 200, 300],"float32"), Tensor([0, 200, 300],"float32"), )
paddle.logaddexp(Tensor([0, 200, 300],"float32"), Tensor([10, 200, 300],"float32"), )
paddle.logaddexp(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.logaddexp(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logaddexp(Tensor([1, 0, 3, 4],"float32"), Tensor([1, 0, 3, 1],"float32"), )
paddle.logaddexp(Tensor([1, 0, 3, 4],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.logaddexp(Tensor([1, 0, 3, 4],"float64"), Tensor([1, 0, 3, 4],"float64"), )
paddle.logaddexp(Tensor([1, 0, 3, 4],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.logaddexp(Tensor([1, 2, 0, 4],"float32"), Tensor([1, 2, 0, 1],"float32"), )
paddle.logaddexp(Tensor([1, 2, 0, 4],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.logaddexp(Tensor([1, 2, 0, 4],"float64"), Tensor([1, 2, 0, 4],"float64"), )
paddle.logaddexp(Tensor([1, 2, 0, 4],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.logaddexp(Tensor([1, 2, 3, 0],"float32"), Tensor([1, 2, 3, 0],"float32"), )
paddle.logaddexp(Tensor([1, 2, 3, 0],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.logaddexp(Tensor([1, 2, 3, 0],"float64"), Tensor([1, 2, 3, 0],"float64"), )
paddle.logaddexp(Tensor([1, 2, 3, 0],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float32"), Tensor([0, 2, 3, 1],"float32"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 0, 3, 1],"float32"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 0, 1],"float32"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 3, 0],"float32"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float64"), Tensor([0, 2, 3, 4],"float64"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 0, 3, 4],"float64"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 2, 0, 4],"float64"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 2, 3, 0],"float64"), )
paddle.logaddexp(Tensor([10, 0, 300],"float32"), Tensor([10, 0, 300],"float32"), )
paddle.logaddexp(Tensor([10, 0, 300],"float32"), Tensor([10, 200, 300],"float32"), )
paddle.logaddexp(Tensor([10, 200, 0],"float32"), Tensor([10, 200, 0],"float32"), )
paddle.logaddexp(Tensor([10, 200, 0],"float32"), Tensor([10, 200, 300],"float32"), )
paddle.logaddexp(Tensor([10, 200, 300],"float32"), Tensor([0, 200, 300],"float32"), )
paddle.logaddexp(Tensor([10, 200, 300],"float32"), Tensor([10, 0, 300],"float32"), )
paddle.logaddexp(Tensor([10, 200, 300],"float32"), Tensor([10, 200, 0],"float32"), )
paddle.logaddexp(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.logaddexp(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logaddexp(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.logaddexp(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logaddexp(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.logaddexp(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.logaddexp(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.logcumsumexp(Tensor([0, 10, 10],"float32"), )
paddle.logcumsumexp(Tensor([0, 12],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([0, 12],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([0, 12],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([0, 12],"float32"), dtype="float32", axis=None, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), )
paddle.logcumsumexp(Tensor([0, 4],"float32"), dtype="float32", )
paddle.logcumsumexp(Tensor([0],"float32"), )
paddle.logcumsumexp(Tensor([10, 0, 10],"float32"), )
paddle.logcumsumexp(Tensor([10, 0],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([10, 0],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([10, 0],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([10, 0],"float32"), dtype="float32", axis=None, )
paddle.logcumsumexp(Tensor([10, 10, 0],"float32"), )
paddle.logcumsumexp(Tensor([3, 0],"float32"), )
paddle.logcumsumexp(Tensor([3, 0],"float32"), dtype="float32", )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([0, 5],"float32"), axis=None, )
paddle.logsumexp(Tensor([0, 5],"float32"), keepdim=True, )
paddle.logsumexp(Tensor([0],"float32"), )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), None, False, )
paddle.logsumexp(Tensor([3, 0],"float32"), axis=None, )
paddle.logsumexp(Tensor([3, 0],"float32"), keepdim=True, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), keepdim=False, )
paddle.masked_fill(Tensor([0, 3],"float32"), Tensor([1, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([0, 40],"float16"), Tensor([3, 1],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([40],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([0],"float16"), Tensor([0],"bool"), Tensor([0],"float16"), )
paddle.masked_fill(Tensor([0],"float16"), Tensor([168],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([0],"float32"), Tensor([0],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([0],"float32"), Tensor([168],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([0],"float32"), Tensor([300, 120],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([120],"float32"), Tensor([0, 120],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([120],"float32"), Tensor([300, 0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([168],"float16"), Tensor([0],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([168],"float16"), Tensor([168],"bool"), Tensor([0],"float16"), )
paddle.masked_fill(Tensor([168],"float32"), Tensor([0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([168],"float32"), Tensor([168],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([3, 0],"float16"), Tensor([3, 1],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([3, 0],"float32"), Tensor([1, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 3],"float32"), Tensor([0, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 3],"float32"), Tensor([1, 0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 3],"float32"), Tensor([1, 3],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([3, 40],"float16"), Tensor([0, 1],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([3, 40],"float16"), Tensor([3, 0],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([3, 40],"float16"), Tensor([3, 1],"bool"), Tensor([0],"float16"), )
paddle.masked_fill(Tensor([300, 0],"float32"), Tensor([40],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([300, 40],"float32"), Tensor([0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([0, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 0, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 0, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 9, 0],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([0],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([0],"float32"), )
paddle.masked_scatter(Tensor([0, 3],"float32"), Tensor([0, 3],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([0, 3],"float32"), Tensor([1, 3],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([0, 40],"float16"), Tensor([0, 1],"bool"), Tensor([0, 300],"float16"), )
paddle.masked_scatter(Tensor([0, 40],"float16"), Tensor([3, 1],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([0, 40],"float32"), Tensor([40],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([0, 8, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([0, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([0],"float16"), Tensor([168],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([0],"float32"), Tensor([168],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([0],"float32"), Tensor([300, 120],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([0, 120],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 0],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([300, 0],"float32"), )
paddle.masked_scatter(Tensor([168],"float16"), Tensor([0],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([168],"float16"), Tensor([168],"bool"), Tensor([0, 300],"float16"), )
paddle.masked_scatter(Tensor([168],"float16"), Tensor([168],"bool"), Tensor([300, 0],"float16"), )
paddle.masked_scatter(Tensor([168],"float32"), Tensor([0],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([168],"float32"), Tensor([168],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([168],"float32"), Tensor([168],"bool"), Tensor([300, 0],"float32"), )
paddle.masked_scatter(Tensor([3, 0],"float16"), Tensor([3, 0],"bool"), Tensor([300, 0],"float16"), )
paddle.masked_scatter(Tensor([3, 0],"float16"), Tensor([3, 1],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([3, 0],"float32"), Tensor([1, 0],"bool"), Tensor([300, 0],"float32"), )
paddle.masked_scatter(Tensor([3, 0],"float32"), Tensor([1, 3],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([3, 3],"float32"), Tensor([0, 3],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([3, 3],"float32"), Tensor([1, 0],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([3, 3],"float32"), Tensor([1, 3],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([3, 3],"float32"), Tensor([1, 3],"bool"), Tensor([300, 0],"float32"), )
paddle.masked_scatter(Tensor([3, 40],"float16"), Tensor([0, 1],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([3, 40],"float16"), Tensor([3, 0],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([3, 40],"float16"), Tensor([3, 1],"bool"), Tensor([0, 300],"float16"), )
paddle.masked_scatter(Tensor([3, 40],"float16"), Tensor([3, 1],"bool"), Tensor([300, 0],"float16"), )
paddle.masked_scatter(Tensor([300, 0],"float32"), Tensor([40],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([0],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([300, 0],"float32"), )
paddle.masked_scatter(Tensor([6, 0, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 0, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 0],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float16"), Tensor([0, 8, 9, 18],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 0, 9, 18],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 0, 18],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 9, 0],"bool"), Tensor([300, 300],"float16"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([0, 300],"float16"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 0],"float16"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 0],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([0, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([300, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 23],"float32"), Tensor([0, 1, 23, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 23],"float32"), Tensor([1, 1, 23, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 24],"float32"), Tensor([0, 1, 24, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 1, 24],"float32"), Tensor([1, 1, 24, 32],"float32"), )
paddle.matmul(Tensor([0, 1, 100],"complex128"), Tensor([100],"complex128"), )
paddle.matmul(Tensor([0, 1, 100],"complex64"), Tensor([100],"complex64"), )
paddle.matmul(Tensor([0, 1, 1024],"float32"), Tensor([50304, 1024],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 1, 32],"float32"), Tensor([100, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 1, 32],"float32"), Tensor([32, 200],"float32"), transpose_y=False, )
paddle.matmul(Tensor([0, 1, 32],"float32"), Tensor([32, 99],"float32"), transpose_y=False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float16"), Tensor([0, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float32"), Tensor([0, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float32"), Tensor([1, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([0, 1, 512],"float16"), Tensor([1024, 512],"float16"), False, True, )
paddle.matmul(Tensor([0, 1, 64],"float16"), Tensor([192, 64],"float16"), False, True, )
paddle.matmul(Tensor([0, 1],"float32"), Tensor([1],"float32"), )
paddle.matmul(Tensor([0, 1],"float32"), Tensor([1],"float32"), False, False, )
paddle.matmul(Tensor([0, 10, 64, 64, 2, 2],"float32"), Tensor([0, 10, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([0, 10, 64, 64, 2, 2],"float32"), Tensor([16, 10, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([10, 20],"float32"), )
paddle.matmul(Tensor([0, 100, 100],"float32"), Tensor([0, 100, 10],"float32"), )
paddle.matmul(Tensor([0, 100, 100],"float32"), Tensor([0, 100, 32],"float32"), )
paddle.matmul(Tensor([0, 100, 100],"float32"), Tensor([1, 100, 10],"float32"), )
paddle.matmul(Tensor([0, 100, 100],"float32"), Tensor([1, 100, 32],"float32"), )
paddle.matmul(Tensor([0, 100, 32],"float32"), Tensor([32, 10],"float32"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([0, 12],"float32"), Tensor([3],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([0, 16, 128, 16],"float64"), Tensor([0, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 128, 16],"float64"), Tensor([16, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 128, 32],"float64"), Tensor([0, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 128, 32],"float64"), Tensor([16, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([0, 18],"float32"), Tensor([1],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([0, 18],"float32"), Tensor([18],"float32"), )
paddle.matmul(Tensor([0, 18],"float64"), Tensor([0, 18],"float64"), )
paddle.matmul(Tensor([0, 18],"float64"), Tensor([18, 18],"float64"), )
paddle.matmul(Tensor([0, 2, 16, 4, 16],"float32"), Tensor([0, 2, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 2, 16, 4, 16],"float32"), Tensor([13, 2, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 2, 3],"float16"), Tensor([0, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float16"), Tensor([2, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float32"), Tensor([0, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([0, 2, 8, 4, 16],"float32"), Tensor([0, 2, 8, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 2, 8, 4, 16],"float32"), Tensor([13, 2, 8, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([12, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([16, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([50000, 2, 1],"float32"), )
paddle.matmul(Tensor([0, 23],"float16"), Tensor([512, 23, 2],"float16"), )
paddle.matmul(Tensor([0, 3, 2, 5, 4],"float32"), Tensor([0, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float16"), Tensor([0, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([0, 3, 4],"float16"), Tensor([0, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float16"), Tensor([2, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float16"), Tensor([4],"float16"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([0, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([2, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([4],"float32"), False, False, )
paddle.matmul(Tensor([0, 3, 5, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([0, 3, 5, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([0, 3],"float16"), Tensor([3],"float16"), False, False, )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), False, False, )
paddle.matmul(Tensor([0, 3],"float64"), Tensor([50000, 2, 3, 1],"float64"), )
paddle.matmul(Tensor([0, 32],"float16"), Tensor([0, 128],"float16"), transpose_x=True, )
paddle.matmul(Tensor([0, 32],"float16"), Tensor([12, 128],"float16"), transpose_x=True, )
paddle.matmul(Tensor([0, 32],"float32"), Tensor([0, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([0, 32],"float32"), Tensor([12, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([0, 4, 1, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([0, 4, 2, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([1, 4, 1, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 1, 8],"float32"), Tensor([1, 4, 2, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 3],"float16"), Tensor([0, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float16"), Tensor([0, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([0, 4, 3],"float16"), Tensor([2, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float16"), Tensor([2, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([0, 4, 3],"float32"), Tensor([0, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float32"), Tensor([0, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([0, 4, 3],"float32"), Tensor([2, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([0, 512],"float16"), Tensor([0, 512],"float16"), False, True, )
paddle.matmul(Tensor([0, 512],"float16"), Tensor([1024, 512],"float16"), False, True, )
paddle.matmul(Tensor([0, 6],"float32"), Tensor([0, 6],"float32"), transpose_x=False, transpose_y=True, )
paddle.matmul(Tensor([0, 6],"float32"), Tensor([18, 6],"float32"), transpose_x=False, transpose_y=True, )
paddle.matmul(Tensor([0, 64],"float16"), Tensor([0, 151936],"float16"), transpose_y=False, )
paddle.matmul(Tensor([0, 64],"float16"), Tensor([0, 64],"float16"), False, True, )
paddle.matmul(Tensor([0, 64],"float16"), Tensor([192, 64],"float16"), False, True, )
paddle.matmul(Tensor([0, 64],"float16"), Tensor([64, 151936],"float16"), transpose_y=False, )
paddle.matmul(Tensor([0, 7, 1],"float32"), Tensor([0, 14, 1],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 7, 1],"float32"), Tensor([13, 14, 1],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 7, 128],"float32"), Tensor([0, 7, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 7, 128],"float32"), Tensor([13, 7, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0],"float16"), Tensor([0],"float16"), False, False, )
paddle.matmul(Tensor([0],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.matmul(Tensor([0],"float16"), Tensor([2],"float16"), False, False, )
paddle.matmul(Tensor([0],"float16"), Tensor([3, 2],"float16"), False, True, )
paddle.matmul(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([0],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([0],"float32"), Tensor([0],"float32"), True, True, )
paddle.matmul(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.matmul(Tensor([0],"float32"), Tensor([10],"float32"), )
paddle.matmul(Tensor([0],"float32"), Tensor([10],"float32"), True, True, )
paddle.matmul(Tensor([0],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.matmul(Tensor([0],"float32"), Tensor([2],"float32"), False, False, )
paddle.matmul(Tensor([0],"float32"), Tensor([3, 2],"float32"), False, True, )
paddle.matmul(Tensor([1, 0, 1, 23],"float32"), Tensor([1, 0, 23, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 23],"float32"), Tensor([1, 1, 23, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 24],"float32"), Tensor([1, 0, 24, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 24],"float32"), Tensor([1, 1, 24, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 4, 1, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 1, 8],"float32"), Tensor([1, 4, 2, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 100],"float32"), Tensor([1, 0, 10],"float32"), )
paddle.matmul(Tensor([1, 0, 100],"float32"), Tensor([1, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 100],"float32"), Tensor([1, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 0, 100],"float32"), Tensor([1, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 1024],"float32"), Tensor([50304, 1024],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 2, 5, 4],"float32"), Tensor([1, 0, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 0, 2, 5, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 0, 2, 5, 5],"float16"), Tensor([1, 0, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 0, 2, 5, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 0, 32],"float32"), Tensor([100, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 32],"float32"), Tensor([32, 10],"float32"), )
paddle.matmul(Tensor([1, 0, 32],"float32"), Tensor([32, 200],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 0, 32],"float32"), Tensor([32, 99],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([1, 0, 5, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([1, 0, 5, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([1, 0, 64],"float16"), Tensor([192, 64],"float16"), False, True, )
paddle.matmul(Tensor([1, 0],"float16"), Tensor([64, 0],"float16"), transpose_y=False, )
paddle.matmul(Tensor([1, 0],"float16"), Tensor([64, 151936],"float16"), transpose_y=False, )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([1],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([1],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([10, 20],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([12, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([12, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([16, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([16, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([18],"float32"), )
paddle.matmul(Tensor([1, 0],"float64"), Tensor([18, 0],"float64"), )
paddle.matmul(Tensor([1, 0],"float64"), Tensor([18, 18],"float64"), )
paddle.matmul(Tensor([1, 1, 0, 23],"float32"), Tensor([1, 1, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 0, 23],"float32"), Tensor([1, 1, 23, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 0, 24],"float32"), Tensor([1, 1, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 0, 24],"float32"), Tensor([1, 1, 24, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 0],"float16"), Tensor([192, 64],"float16"), False, True, )
paddle.matmul(Tensor([1, 1, 0],"float32"), Tensor([100, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 0],"float32"), Tensor([32, 200],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 0],"float32"), Tensor([32, 99],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 0],"float32"), Tensor([50304, 1024],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 23, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 23, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 23],"float32"), Tensor([0, 1, 23, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 23],"float32"), Tensor([1, 0, 23, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 23],"float32"), Tensor([1, 1, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 23],"float32"), Tensor([1, 1, 23, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 24],"float32"), Tensor([0, 1, 24, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 24],"float32"), Tensor([1, 0, 24, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 24],"float32"), Tensor([1, 1, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 24],"float32"), Tensor([1, 1, 24, 0],"float32"), )
paddle.matmul(Tensor([1, 1, 1024],"float32"), Tensor([0, 1024],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 1024],"float32"), Tensor([50304, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 32],"float32"), Tensor([0, 200],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 32],"float32"), Tensor([0, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 32],"float32"), Tensor([0, 99],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 32],"float32"), Tensor([100, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 32],"float32"), Tensor([32, 0],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 64],"float16"), Tensor([0, 64],"float16"), False, True, )
paddle.matmul(Tensor([1, 1, 64],"float16"), Tensor([192, 0],"float16"), False, True, )
paddle.matmul(Tensor([1, 1],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([1, 10],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([1, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float32"), Tensor([1, 100, 0],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float32"), Tensor([1, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float32"), Tensor([1, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float32"), Tensor([32, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([0, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([0, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 0, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 100, 0],"float32"), )
paddle.matmul(Tensor([1, 100, 32],"float32"), Tensor([0, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 32],"float32"), Tensor([32, 0],"float32"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([40, 0],"float64"), )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([0],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([1, 18],"float64"), Tensor([0, 18],"float64"), )
paddle.matmul(Tensor([1, 18],"float64"), Tensor([18, 0],"float64"), )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([0, 2],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([12, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([16, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 3, 0, 5, 4],"float32"), Tensor([1, 3, 0, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 0, 5, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 0, 5, 5],"float16"), Tensor([1, 3, 0, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 0, 5, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 0, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([1, 3, 0, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 0, 4],"float32"), Tensor([1, 3, 2, 0, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 0, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 0, 5],"float16"), Tensor([1, 3, 2, 0, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 0, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float16"), Tensor([1, 3, 2, 5, 0],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float32"), Tensor([1, 3, 2, 4, 0],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([0, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 0, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 3, 0, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 3, 2, 0, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 3, 2, 4, 0],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([0, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 0, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 3, 0, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 3, 2, 0, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 3, 2, 5, 0],"float16"), )
paddle.matmul(Tensor([1, 3, 5, 0],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([1, 3, 5, 0],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float16"), Tensor([0, 8],"float16"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float16"), Tensor([6, 0],"float16"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float32"), Tensor([0, 8],"float32"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float32"), Tensor([6, 0],"float32"), )
paddle.matmul(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 4, 0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 4, 1, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 4, 2, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 1, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 1, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 2, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 0],"float32"), Tensor([1, 4, 2, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([0, 4, 1, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([0, 4, 2, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([1, 0, 1, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([1, 0, 2, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([1, 4, 0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([1, 4, 1, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 4, 1, 8],"float32"), Tensor([1, 4, 2, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 64],"float16"), Tensor([0, 151936],"float16"), transpose_y=False, )
paddle.matmul(Tensor([1, 64],"float16"), Tensor([64, 0],"float16"), transpose_y=False, )
paddle.matmul(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([10],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([10],"float32"), Tensor([0],"float32"), True, True, )
paddle.matmul(Tensor([100, 0],"float16"), Tensor([1024, 0],"float16"), False, True, )
paddle.matmul(Tensor([100, 0],"float16"), Tensor([1024, 512],"float16"), False, True, )
paddle.matmul(Tensor([100, 512],"float16"), Tensor([0, 512],"float16"), False, True, )
paddle.matmul(Tensor([100, 512],"float16"), Tensor([1024, 0],"float16"), False, True, )
paddle.matmul(Tensor([101, 0],"float16"), Tensor([192, 0],"float16"), False, True, )
paddle.matmul(Tensor([101, 0],"float16"), Tensor([192, 64],"float16"), False, True, )
paddle.matmul(Tensor([101, 64],"float16"), Tensor([0, 64],"float16"), False, True, )
paddle.matmul(Tensor([101, 64],"float16"), Tensor([192, 0],"float16"), False, True, )
paddle.matmul(Tensor([12, 0],"float16"), Tensor([12, 0],"float16"), transpose_x=True, )
paddle.matmul(Tensor([12, 0],"float16"), Tensor([12, 128],"float16"), transpose_x=True, )
paddle.matmul(Tensor([12, 0],"float32"), Tensor([12, 0],"float32"), transpose_x=True, )
paddle.matmul(Tensor([12, 0],"float32"), Tensor([12, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([12, 32],"float16"), Tensor([0, 128],"float16"), transpose_x=True, )
paddle.matmul(Tensor([12, 32],"float16"), Tensor([12, 0],"float16"), transpose_x=True, )
paddle.matmul(Tensor([12, 32],"float32"), Tensor([0, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([12, 32],"float32"), Tensor([12, 0],"float32"), transpose_x=True, )
paddle.matmul(Tensor([13, 0, 1],"float32"), Tensor([13, 0, 1],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 0, 1],"float32"), Tensor([13, 14, 1],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 0, 128],"float32"), Tensor([13, 0, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 0, 128],"float32"), Tensor([13, 7, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 0, 16, 4, 16],"float32"), Tensor([13, 0, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 0, 16, 4, 16],"float32"), Tensor([13, 2, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 0, 8, 4, 16],"float32"), Tensor([13, 0, 8, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 0, 8, 4, 16],"float32"), Tensor([13, 2, 8, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 0, 4, 16],"float32"), Tensor([13, 2, 0, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 0, 4, 16],"float32"), Tensor([13, 2, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 0, 4, 16],"float32"), Tensor([13, 2, 8, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 16, 0, 16],"float32"), Tensor([13, 2, 16, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 16, 0, 16],"float32"), Tensor([13, 2, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 16, 4, 0],"float32"), Tensor([13, 2, 16, 8, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 16, 4, 0],"float32"), Tensor([13, 2, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 16, 4, 16],"float32"), Tensor([0, 2, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 16, 4, 16],"float32"), Tensor([13, 0, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 16, 4, 16],"float32"), Tensor([13, 2, 0, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 16, 4, 16],"float32"), Tensor([13, 2, 16, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 16, 4, 16],"float32"), Tensor([13, 2, 16, 8, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 8, 0, 16],"float32"), Tensor([13, 2, 8, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 8, 0, 16],"float32"), Tensor([13, 2, 8, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 8, 4, 0],"float32"), Tensor([13, 2, 8, 8, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 8, 4, 0],"float32"), Tensor([13, 2, 8, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 8, 4, 16],"float32"), Tensor([0, 2, 8, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 8, 4, 16],"float32"), Tensor([13, 0, 8, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 8, 4, 16],"float32"), Tensor([13, 2, 0, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 8, 4, 16],"float32"), Tensor([13, 2, 8, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 2, 8, 4, 16],"float32"), Tensor([13, 2, 8, 8, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 0],"float32"), Tensor([13, 14, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 0],"float32"), Tensor([13, 14, 1],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 1],"float32"), Tensor([0, 14, 1],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 1],"float32"), Tensor([13, 0, 1],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 1],"float32"), Tensor([13, 14, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 128],"float32"), Tensor([0, 7, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 128],"float32"), Tensor([13, 0, 128],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 7, 128],"float32"), Tensor([13, 7, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([16, 0, 128, 16],"float64"), Tensor([16, 0, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 128, 16],"float64"), Tensor([16, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 128, 32],"float64"), Tensor([16, 0, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 128, 32],"float64"), Tensor([16, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 64, 64, 2, 2],"float32"), Tensor([16, 0, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 0, 64, 64, 2, 2],"float32"), Tensor([16, 10, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 0, 64, 2, 2],"float32"), Tensor([16, 10, 0, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 0, 64, 2, 2],"float32"), Tensor([16, 10, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 0, 2, 2],"float32"), Tensor([16, 10, 64, 0, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 0, 2, 2],"float32"), Tensor([16, 10, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 0, 2],"float32"), Tensor([16, 10, 64, 64, 0, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 0, 2],"float32"), Tensor([16, 10, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 2, 0],"float32"), Tensor([16, 10, 64, 64, 2, 0],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 2, 0],"float32"), Tensor([16, 10, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 2, 2],"float32"), Tensor([0, 10, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 2, 2],"float32"), Tensor([16, 0, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 2, 2],"float32"), Tensor([16, 10, 0, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 2, 2],"float32"), Tensor([16, 10, 64, 0, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 2, 2],"float32"), Tensor([16, 10, 64, 64, 0, 1],"float32"), )
paddle.matmul(Tensor([16, 10, 64, 64, 2, 2],"float32"), Tensor([16, 10, 64, 64, 2, 0],"float32"), )
paddle.matmul(Tensor([16, 16, 0, 16],"float64"), Tensor([16, 16, 0, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 16],"float64"), Tensor([16, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 32],"float64"), Tensor([16, 16, 0, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 32],"float64"), Tensor([16, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 0],"float64"), Tensor([16, 16, 128, 0],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 0],"float64"), Tensor([16, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 0],"float64"), Tensor([16, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([0, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([16, 0, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([16, 16, 0, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([16, 16, 128, 0],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([0, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([16, 0, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([16, 16, 0, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([16, 16, 128, 0],"float64"), False, True, )
paddle.matmul(Tensor([18, 0],"float32"), Tensor([18, 0],"float32"), transpose_x=False, transpose_y=True, )
paddle.matmul(Tensor([18, 0],"float32"), Tensor([18, 6],"float32"), transpose_x=False, transpose_y=True, )
paddle.matmul(Tensor([18, 6],"float32"), Tensor([0, 6],"float32"), transpose_x=False, transpose_y=True, )
paddle.matmul(Tensor([18, 6],"float32"), Tensor([18, 0],"float32"), transpose_x=False, transpose_y=True, )
paddle.matmul(Tensor([2, 0, 100],"complex128"), Tensor([100],"complex128"), )
paddle.matmul(Tensor([2, 0, 100],"complex64"), Tensor([100],"complex64"), )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 0, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 0, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 0, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 0, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 0, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 0, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 0, 4],"float16"), Tensor([2, 0, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float16"), Tensor([2, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float16"), Tensor([4],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([2, 0, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([2, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([4],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float16"), Tensor([1, 0, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float32"), Tensor([1, 0, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float32"), Tensor([1, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 512],"float16"), Tensor([1024, 512],"float16"), False, True, )
paddle.matmul(Tensor([2, 0],"float16"), Tensor([3],"float16"), False, False, )
paddle.matmul(Tensor([2, 0],"float16"), Tensor([64, 0],"float16"), transpose_y=False, )
paddle.matmul(Tensor([2, 0],"float16"), Tensor([64, 151936],"float16"), transpose_y=False, )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([1],"float32"), False, False, )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([50000, 2, 1],"float32"), )
paddle.matmul(Tensor([2, 1, 0, 2],"float16"), Tensor([1, 3, 0, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float32"), Tensor([1, 3, 0, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float32"), Tensor([1, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 0],"complex128"), Tensor([100],"complex128"), )
paddle.matmul(Tensor([2, 1, 0],"complex64"), Tensor([100],"complex64"), )
paddle.matmul(Tensor([2, 1, 0],"float16"), Tensor([1024, 512],"float16"), False, True, )
paddle.matmul(Tensor([2, 1, 100],"complex128"), Tensor([0],"complex128"), )
paddle.matmul(Tensor([2, 1, 100],"complex64"), Tensor([0],"complex64"), )
paddle.matmul(Tensor([2, 1, 5, 0],"float16"), Tensor([1, 3, 2, 0],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 0],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 0],"float32"), Tensor([1, 3, 2, 0],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 0],"float32"), Tensor([1, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([0, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 0, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 3, 0, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 3, 2, 0],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([0, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([1, 0, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([1, 3, 0, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([1, 3, 2, 0],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 512],"float16"), Tensor([0, 512],"float16"), False, True, )
paddle.matmul(Tensor([2, 1, 512],"float16"), Tensor([1024, 0],"float16"), False, True, )
paddle.matmul(Tensor([2, 1],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float16"), Tensor([2, 3, 0],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float16"), Tensor([2, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float32"), Tensor([2, 3, 0],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([0, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([2, 0, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([2, 3, 0],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float32"), Tensor([0, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float32"), Tensor([2, 0, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float32"), Tensor([2, 3, 0],"float32"), False, False, )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([0, 2, 1],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([50000, 0, 1],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([50000, 2, 0],"float32"), )
paddle.matmul(Tensor([2, 3, 0],"float16"), Tensor([2, 5, 0],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float16"), Tensor([2, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float16"), Tensor([4],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float32"), Tensor([2, 5, 0],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float32"), Tensor([2, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float32"), Tensor([4],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([0, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([0],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 0, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 5, 0],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([0, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 0, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 5, 0],"float32"), False, True, )
paddle.matmul(Tensor([2, 3],"float16"), Tensor([0],"float16"), False, False, )
paddle.matmul(Tensor([2, 4, 0],"float16"), Tensor([2, 4, 0],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float16"), Tensor([2, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float16"), Tensor([2, 5, 0],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 0],"float16"), Tensor([2, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 0],"float32"), Tensor([2, 4, 0],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float32"), Tensor([2, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float32"), Tensor([2, 5, 0],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 0],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([0, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([0, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 0, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 0, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 4, 0],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 5, 0],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([0, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([0, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 0, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 0, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 4, 0],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 5, 0],"float32"), True, True, )
paddle.matmul(Tensor([2, 64],"float16"), Tensor([0, 151936],"float16"), transpose_y=False, )
paddle.matmul(Tensor([2, 64],"float16"), Tensor([64, 0],"float16"), transpose_y=False, )
paddle.matmul(Tensor([2],"float16"), Tensor([0, 2],"float16"), False, True, )
paddle.matmul(Tensor([2],"float16"), Tensor([0, 3],"float16"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([0],"float16"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([2, 0],"float16"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([3, 0],"float16"), False, True, )
paddle.matmul(Tensor([2],"float32"), Tensor([0, 2],"float32"), False, True, )
paddle.matmul(Tensor([2],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([2, 0],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([3, 0],"float32"), False, True, )
paddle.matmul(Tensor([23, 0],"float16"), Tensor([512, 23, 2],"float16"), )
paddle.matmul(Tensor([23, 23],"float16"), Tensor([0, 23, 2],"float16"), )
paddle.matmul(Tensor([23, 23],"float16"), Tensor([512, 0, 2],"float16"), )
paddle.matmul(Tensor([23, 23],"float16"), Tensor([512, 23, 0],"float16"), )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), False, False, )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([3, 3],"float32"), False, False, )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([3],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([3, 0],"float64"), Tensor([50000, 2, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 12],"float32"), Tensor([0],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([3, 0],"float32"), False, False, )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([0, 2, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([50000, 0, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([50000, 2, 0, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([50000, 2, 3, 0],"float64"), )
paddle.matmul(x=Tensor([0, 1, 5, 2],"float64"), y=Tensor([0, 3, 2, 5],"float64"), )
paddle.matmul(x=Tensor([0, 1, 5, 2],"float64"), y=Tensor([1, 3, 2, 5],"float64"), )
paddle.matmul(x=Tensor([0, 12, 77, 64],"float32"), y=Tensor([0, 12, 77, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 12, 77, 64],"float32"), y=Tensor([1, 12, 77, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 140, 1],"float32"), y=Tensor([0, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 140, 1],"float32"), y=Tensor([58, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([0, 16, 100, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([1, 16, 100, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16],"float32"), y=Tensor([0, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16],"float32"), y=Tensor([0, 32],"float32"), )
paddle.matmul(x=Tensor([0, 16],"float32"), y=Tensor([10, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16],"float32"), y=Tensor([16, 32],"float32"), )
paddle.matmul(x=Tensor([0, 2, 1024, 128],"float16"), y=Tensor([0, 2, 1024, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([0, 2, 1024, 128],"float16"), y=Tensor([2, 2, 1024, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([0, 2, 2048, 128],"float16"), y=Tensor([0, 2, 2048, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([0, 2, 2048, 128],"float16"), y=Tensor([1, 2, 2048, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([0, 20],"float32"), y=Tensor([0, 40],"float32"), )
paddle.matmul(x=Tensor([0, 20],"float32"), y=Tensor([20, 40],"float32"), )
paddle.matmul(x=Tensor([0, 28, 512],"float32"), y=Tensor([33712, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 29, 512],"float32"), y=Tensor([33712, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 3],"float64"), y=Tensor([3],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([0, 4, 12, 12],"float32"), y=Tensor([0, 4, 12, 4],"float32"), )
paddle.matmul(x=Tensor([0, 4, 12, 12],"float32"), y=Tensor([13, 4, 12, 4],"float32"), )
paddle.matmul(x=Tensor([0, 5, 2],"float64"), y=Tensor([0, 2, 5],"float64"), )
paddle.matmul(x=Tensor([0, 5, 2],"float64"), y=Tensor([10, 2, 5],"float64"), )
paddle.matmul(x=Tensor([0, 5, 2],"float64"), y=Tensor([2],"float64"), )
paddle.matmul(x=Tensor([0, 5],"float64"), y=Tensor([5],"float64"), )
paddle.matmul(x=Tensor([0, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 512],"float32"), y=Tensor([10000, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 8, 16],"float32"), y=Tensor([0, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 8, 16],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0],"float32"), y=Tensor([0],"float32"), )
paddle.matmul(x=Tensor([0],"float32"), y=Tensor([10],"float32"), )
paddle.matmul(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.matmul(x=Tensor([0],"float64"), y=Tensor([10],"float64"), )
paddle.matmul(x=Tensor([1, 0, 1, 64],"float32"), y=Tensor([1, 0, 100, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 0, 1, 64],"float32"), y=Tensor([1, 16, 100, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 0, 2048, 128],"float16"), y=Tensor([1, 0, 2048, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 0, 2048, 128],"float16"), y=Tensor([1, 2, 2048, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 0, 77, 64],"float32"), y=Tensor([1, 0, 77, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 0, 77, 64],"float32"), y=Tensor([1, 12, 77, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 0, 64],"float32"), y=Tensor([1, 12, 0, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 0, 64],"float32"), y=Tensor([1, 12, 77, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 77, 0],"float32"), y=Tensor([1, 12, 77, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 77, 0],"float32"), y=Tensor([1, 12, 77, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 77, 64],"float32"), y=Tensor([0, 12, 77, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 77, 64],"float32"), y=Tensor([1, 0, 77, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 77, 64],"float32"), y=Tensor([1, 12, 0, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 12, 77, 64],"float32"), y=Tensor([1, 12, 77, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 0, 64],"float32"), y=Tensor([1, 16, 0, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 0, 64],"float32"), y=Tensor([1, 16, 100, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 0],"float32"), y=Tensor([1, 16, 100, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 0],"float32"), y=Tensor([1, 16, 100, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([0, 16, 100, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([1, 0, 100, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([1, 16, 0, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 16, 1, 64],"float32"), y=Tensor([1, 16, 100, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 0, 128],"float16"), y=Tensor([1, 2, 0, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 0, 128],"float16"), y=Tensor([1, 2, 2048, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 2048, 0],"float16"), y=Tensor([1, 2, 2048, 0],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 2048, 0],"float16"), y=Tensor([1, 2, 2048, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 2048, 128],"float16"), y=Tensor([0, 2, 2048, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 2048, 128],"float16"), y=Tensor([1, 0, 2048, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 2048, 128],"float16"), y=Tensor([1, 2, 0, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([1, 2, 2048, 128],"float16"), y=Tensor([1, 2, 2048, 0],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([10, 0, 2],"float64"), y=Tensor([10, 0, 5],"float64"), )
paddle.matmul(x=Tensor([10, 0, 2],"float64"), y=Tensor([10, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 0, 2],"float64"), y=Tensor([2],"float64"), )
paddle.matmul(x=Tensor([10, 0, 5, 2],"float64"), y=Tensor([1, 0, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 0, 5, 2],"float64"), y=Tensor([1, 3, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 0],"float32"), y=Tensor([10, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 0],"float32"), y=Tensor([10, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 0],"float64"), y=Tensor([5],"float64"), )
paddle.matmul(x=Tensor([10, 1, 0, 2],"float64"), y=Tensor([1, 3, 0, 5],"float64"), )
paddle.matmul(x=Tensor([10, 1, 0, 2],"float64"), y=Tensor([1, 3, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 1, 5, 0],"float64"), y=Tensor([1, 3, 2, 0],"float64"), )
paddle.matmul(x=Tensor([10, 1, 5, 0],"float64"), y=Tensor([1, 3, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 1, 5, 2],"float64"), y=Tensor([0, 3, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 1, 5, 2],"float64"), y=Tensor([1, 0, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 1, 5, 2],"float64"), y=Tensor([1, 3, 0, 5],"float64"), )
paddle.matmul(x=Tensor([10, 1, 5, 2],"float64"), y=Tensor([1, 3, 2, 0],"float64"), )
paddle.matmul(x=Tensor([10, 16],"float32"), y=Tensor([0, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 16],"float32"), y=Tensor([10, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 5, 0],"float64"), y=Tensor([10, 2, 0],"float64"), )
paddle.matmul(x=Tensor([10, 5, 0],"float64"), y=Tensor([10, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 5, 0],"float64"), y=Tensor([2],"float64"), )
paddle.matmul(x=Tensor([10, 5, 2],"float64"), y=Tensor([0, 2, 5],"float64"), )
paddle.matmul(x=Tensor([10, 5, 2],"float64"), y=Tensor([0],"float64"), )
paddle.matmul(x=Tensor([10, 5, 2],"float64"), y=Tensor([10, 0, 5],"float64"), )
paddle.matmul(x=Tensor([10, 5, 2],"float64"), y=Tensor([10, 2, 0],"float64"), )
paddle.matmul(x=Tensor([10, 5],"float64"), y=Tensor([0],"float64"), )
paddle.matmul(x=Tensor([10],"float32"), y=Tensor([0],"float32"), )
paddle.matmul(x=Tensor([10],"float64"), y=Tensor([0],"float64"), )
paddle.matmul(x=Tensor([104, 0, 512],"float32"), y=Tensor([33712, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 28, 0],"float32"), y=Tensor([33712, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 28, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 28, 512],"float32"), y=Tensor([33712, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 29, 0],"float32"), y=Tensor([33712, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 29, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([104, 29, 512],"float32"), y=Tensor([33712, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([128, 0],"float32"), y=Tensor([10000, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([128, 0],"float32"), y=Tensor([10000, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([128, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([128, 512],"float32"), y=Tensor([10000, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([13, 0, 12, 12],"float32"), y=Tensor([13, 0, 12, 4],"float32"), )
paddle.matmul(x=Tensor([13, 0, 12, 12],"float32"), y=Tensor([13, 4, 12, 4],"float32"), )
paddle.matmul(x=Tensor([13, 4, 0, 12],"float32"), y=Tensor([13, 4, 0, 4],"float32"), )
paddle.matmul(x=Tensor([13, 4, 0, 12],"float32"), y=Tensor([13, 4, 12, 4],"float32"), )
paddle.matmul(x=Tensor([13, 4, 12, 0],"float32"), y=Tensor([13, 4, 12, 0],"float32"), )
paddle.matmul(x=Tensor([13, 4, 12, 0],"float32"), y=Tensor([13, 4, 12, 4],"float32"), )
paddle.matmul(x=Tensor([13, 4, 12, 12],"float32"), y=Tensor([0, 4, 12, 4],"float32"), )
paddle.matmul(x=Tensor([13, 4, 12, 12],"float32"), y=Tensor([13, 0, 12, 4],"float32"), )
paddle.matmul(x=Tensor([13, 4, 12, 12],"float32"), y=Tensor([13, 4, 0, 4],"float32"), )
paddle.matmul(x=Tensor([13, 4, 12, 12],"float32"), y=Tensor([13, 4, 12, 0],"float32"), )
paddle.matmul(x=Tensor([2, 0, 1024, 128],"float16"), y=Tensor([2, 0, 1024, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 0, 1024, 128],"float16"), y=Tensor([2, 2, 1024, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 0, 16],"float32"), y=Tensor([2, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 0, 16],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 0, 128],"float16"), y=Tensor([2, 2, 0, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 0, 128],"float16"), y=Tensor([2, 2, 1024, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 1024, 0],"float16"), y=Tensor([2, 2, 1024, 0],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 1024, 0],"float16"), y=Tensor([2, 2, 1024, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 1024, 128],"float16"), y=Tensor([0, 2, 1024, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 1024, 128],"float16"), y=Tensor([2, 0, 1024, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 1024, 128],"float16"), y=Tensor([2, 2, 0, 128],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 2, 1024, 128],"float16"), y=Tensor([2, 2, 1024, 0],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 0],"float32"), y=Tensor([2, 8, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 0],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([0, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([2, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([2, 8, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([4, 0],"float32"), y=Tensor([20, 0],"float32"), )
paddle.matmul(x=Tensor([4, 0],"float32"), y=Tensor([20, 40],"float32"), )
paddle.matmul(x=Tensor([4, 0],"float64"), y=Tensor([3],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([4, 20],"float32"), y=Tensor([0, 40],"float32"), )
paddle.matmul(x=Tensor([4, 20],"float32"), y=Tensor([20, 0],"float32"), )
paddle.matmul(x=Tensor([4, 3],"float64"), y=Tensor([0],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([58, 0, 1],"float32"), y=Tensor([58, 0, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 0, 1],"float32"), y=Tensor([58, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 0],"float32"), y=Tensor([58, 140, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 0],"float32"), y=Tensor([58, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 1],"float32"), y=Tensor([0, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 1],"float32"), y=Tensor([58, 0, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 1],"float32"), y=Tensor([58, 140, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 0],"float32"), y=Tensor([16, 0],"float32"), )
paddle.matmul(x=Tensor([8, 0],"float32"), y=Tensor([16, 32],"float32"), )
paddle.matmul(x=Tensor([8, 16],"float32"), y=Tensor([0, 32],"float32"), )
paddle.matmul(x=Tensor([8, 16],"float32"), y=Tensor([16, 0],"float32"), )
paddle.matrix_transpose(Tensor([0, 3, 4],"float16"), )
paddle.matrix_transpose(Tensor([0, 3, 4],"float32"), )
paddle.matrix_transpose(Tensor([2, 0, 4],"float16"), )
paddle.matrix_transpose(Tensor([2, 0, 4],"float32"), )
paddle.matrix_transpose(Tensor([2, 3, 0],"float16"), )
paddle.matrix_transpose(Tensor([2, 3, 0],"float32"), )
paddle.max(Tensor([0, 1, 128],"float32"), axis=2, )
paddle.max(Tensor([0, 1, 192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([0, 1, 2],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 1, 32, 32],"float32"), )
paddle.max(Tensor([0, 1],"int32"), )
paddle.max(Tensor([0, 1024],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([0, 11008],"float16"), axis=tuple(0,), )
paddle.max(Tensor([0, 120],"float32"), )
paddle.max(Tensor([0, 124],"float16"), axis=1, keepdim=True, )
paddle.max(Tensor([0, 124],"float32"), axis=1, keepdim=True, )
paddle.max(Tensor([0, 128, 96],"float32"), axis=list[0,1,], )
paddle.max(Tensor([0, 128, 96],"float32"), axis=list[2,], )
paddle.max(Tensor([0, 128, 96],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([0, 128],"float32"), axis=-1, )
paddle.max(Tensor([0, 128],"int32"), axis=0, )
paddle.max(Tensor([0, 16, 12, 12],"float32"), )
paddle.max(Tensor([0, 16, 32],"float32"), axis=list[0,1,2,], keepdim=False, )
paddle.max(Tensor([0, 18432],"float16"), axis=1, )
paddle.max(Tensor([0, 192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([0, 19328],"float16"), axis=1, )
paddle.max(Tensor([0, 2, 2, 2, 2, 2, 2],"float32"), axis=-1, )
paddle.max(Tensor([0, 2, 2, 2, 2, 2, 2],"float32"), axis=6, )
paddle.max(Tensor([0, 2, 2],"int32"), tuple(0,1,), False, )
paddle.max(Tensor([0, 2, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 2, 64, 64],"float16"), axis=list[0,2,3,], )
paddle.max(Tensor([0, 2],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 2],"float32"), axis=tuple(-2,-1,), )
paddle.max(Tensor([0, 20],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([0, 200, 40],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([0, 200, 40],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.max(Tensor([0, 200, 40],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([0, 200, 40],"float32"), keepdim=False, )
paddle.max(Tensor([0, 200, 40],"float32"), keepdim=True, )
paddle.max(Tensor([0, 256, 16, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([0, 256, 16, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([0, 257, 192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([0, 3, 14, 14],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([0, 3, 3],"float32"), 2, )
paddle.max(Tensor([0, 3],"float32"), 1, )
paddle.max(Tensor([0, 32, 128],"float32"), axis=-1, )
paddle.max(Tensor([0, 32, 64],"float32"), axis=0, )
paddle.max(Tensor([0, 32, 8],"float32"), axis=list[0,], )
paddle.max(Tensor([0, 32, 8],"float32"), axis=list[2,], )
paddle.max(Tensor([0, 4, 2],"float32"), )
paddle.max(Tensor([0, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([0, 4],"float64"), 0, False, )
paddle.max(Tensor([0, 4],"float64"), 1, True, )
paddle.max(Tensor([0, 4],"float64"), None, False, )
paddle.max(Tensor([0, 5],"float32"), axis=None, )
paddle.max(Tensor([0, 5],"float32"), keepdim=True, )
paddle.max(Tensor([0, 512],"int32"), axis=0, )
paddle.max(Tensor([0, 64, 128],"float32"), axis=0, )
paddle.max(Tensor([0, 64, 16],"float32"), )
paddle.max(Tensor([0, 64],"float16"), axis=tuple(0,), )
paddle.max(Tensor([0, 8, 64, 64],"float16"), axis=list[0,2,3,], )
paddle.max(Tensor([0],"float32"), axis=0, )
paddle.max(Tensor([0],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([0],"float32"), axis=list[0,], keepdim=False, )
paddle.max(Tensor([0],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([0],"float32"), keepdim=True, )
paddle.max(Tensor([0],"float64"), )
paddle.max(Tensor([0],"float64"), axis=0, )
paddle.max(Tensor([0],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([0],"int64"), )
paddle.max(Tensor([1, 0, 12, 12],"float32"), )
paddle.max(Tensor([1, 0, 192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([1, 0, 32, 32],"float32"), )
paddle.max(Tensor([1, 0, 8],"float32"), axis=list[0,], )
paddle.max(Tensor([1, 0, 8],"float32"), axis=list[2,], )
paddle.max(Tensor([1, 0],"float32"), )
paddle.max(Tensor([1, 0],"int32"), )
paddle.max(Tensor([1, 1, 0, 32],"float32"), )
paddle.max(Tensor([1, 1, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([1, 1, 32, 0],"float32"), )
paddle.max(Tensor([1, 16, 0, 12],"float32"), )
paddle.max(Tensor([1, 16, 12, 0],"float32"), )
paddle.max(Tensor([1, 257, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([1, 32, 0],"float32"), axis=list[0,], )
paddle.max(Tensor([1, 32, 0],"float32"), axis=list[2,], )
paddle.max(Tensor([10, 0, 60],"int32"), axis=1, )
paddle.max(Tensor([10, 0],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([10, 4, 0],"int32"), axis=1, )
paddle.max(Tensor([11008, 0],"float16"), axis=tuple(0,), )
paddle.max(Tensor([128, 0, 128],"float32"), axis=2, )
paddle.max(Tensor([128, 0],"float16"), axis=1, keepdim=True, )
paddle.max(Tensor([128, 0],"float32"), axis=1, keepdim=True, )
paddle.max(Tensor([128, 0],"int32"), axis=0, )
paddle.max(Tensor([128, 1, 0],"float32"), axis=2, )
paddle.max(Tensor([13, 0, 2],"float32"), )
paddle.max(Tensor([13, 0, 3],"float32"), 2, )
paddle.max(Tensor([13, 0],"float32"), 1, )
paddle.max(Tensor([13, 3, 0],"float32"), 2, )
paddle.max(Tensor([13, 4, 0],"float32"), )
paddle.max(Tensor([14, 0, 16],"float32"), )
paddle.max(Tensor([14, 64, 0],"float32"), )
paddle.max(Tensor([16, 0, 64],"float32"), axis=0, )
paddle.max(Tensor([16, 32, 0],"float32"), axis=0, )
paddle.max(Tensor([192, 0, 14, 14],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([192, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([192, 3, 0, 14],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([192, 3, 14, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([2, 0, 2, 2, 2, 2, 2],"float32"), axis=-1, )
paddle.max(Tensor([2, 0, 2, 2, 2, 2, 2],"float32"), axis=6, )
paddle.max(Tensor([2, 0, 2],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 0, 2],"int32"), tuple(0,1,), False, )
paddle.max(Tensor([2, 0, 60],"int32"), axis=1, )
paddle.max(Tensor([2, 0, 64, 64],"float16"), axis=list[0,2,3,], )
paddle.max(Tensor([2, 0],"float16"), axis=1, )
paddle.max(Tensor([2, 0],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 0],"float32"), axis=tuple(-2,-1,), )
paddle.max(Tensor([2, 0],"float64"), 0, False, )
paddle.max(Tensor([2, 0],"float64"), 1, True, )
paddle.max(Tensor([2, 0],"float64"), None, False, )
paddle.max(Tensor([2, 1, 0],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 2, 0, 2, 2, 2, 2],"float32"), axis=-1, )
paddle.max(Tensor([2, 2, 0, 2, 2, 2, 2],"float32"), axis=6, )
paddle.max(Tensor([2, 2, 0, 64],"float16"), axis=list[0,2,3,], )
paddle.max(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.max(Tensor([2, 2, 2, 0, 2, 2, 2],"float32"), axis=-1, )
paddle.max(Tensor([2, 2, 2, 0, 2, 2, 2],"float32"), axis=6, )
paddle.max(Tensor([2, 2, 2, 2, 0, 2, 2],"float32"), axis=-1, )
paddle.max(Tensor([2, 2, 2, 2, 0, 2, 2],"float32"), axis=6, )
paddle.max(Tensor([2, 2, 2, 2, 2, 0, 2],"float32"), axis=-1, )
paddle.max(Tensor([2, 2, 2, 2, 2, 0, 2],"float32"), axis=6, )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 0],"float32"), axis=-1, )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 0],"float32"), axis=6, )
paddle.max(Tensor([2, 2, 64, 0],"float16"), axis=list[0,2,3,], )
paddle.max(Tensor([2, 4, 0],"int32"), axis=1, )
paddle.max(Tensor([2, 8, 0, 64],"float16"), axis=list[0,2,3,], )
paddle.max(Tensor([2, 8, 64, 0],"float16"), axis=list[0,2,3,], )
paddle.max(Tensor([3, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([3, 0, 96],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([3, 0],"float32"), axis=None, )
paddle.max(Tensor([3, 0],"float32"), keepdim=True, )
paddle.max(Tensor([3, 128, 0],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([3, 2, 0],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([30, 0, 40],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([30, 0, 40],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.max(Tensor([30, 0, 40],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([30, 0, 40],"float32"), keepdim=False, )
paddle.max(Tensor([30, 0, 40],"float32"), keepdim=True, )
paddle.max(Tensor([30, 200, 0],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([30, 200, 0],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.max(Tensor([30, 200, 0],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([30, 200, 0],"float32"), keepdim=False, )
paddle.max(Tensor([30, 200, 0],"float32"), keepdim=True, )
paddle.max(Tensor([32, 0, 128],"float32"), axis=0, )
paddle.max(Tensor([32, 0, 128],"float32"), axis=-1, )
paddle.max(Tensor([32, 0],"float32"), axis=-1, )
paddle.max(Tensor([32, 32, 0],"float32"), axis=-1, )
paddle.max(Tensor([32, 64, 0],"float32"), axis=0, )
paddle.max(Tensor([4, 0, 16, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 0, 16, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([4, 256, 0, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 256, 0, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([4, 256, 16, 0],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 256, 16, 0],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([64, 0, 96],"float32"), axis=list[0,1,], )
paddle.max(Tensor([64, 0, 96],"float32"), axis=list[2,], )
paddle.max(Tensor([64, 0],"float16"), axis=tuple(0,), )
paddle.max(Tensor([64, 128, 0],"float32"), axis=list[0,1,], )
paddle.max(Tensor([64, 128, 0],"float32"), axis=list[2,], )
paddle.max(Tensor([8, 0, 32],"float32"), axis=list[0,1,2,], keepdim=False, )
paddle.max(Tensor([8, 16, 0],"float32"), axis=list[0,1,2,], keepdim=False, )
paddle.max(x=Tensor([0, 2],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.max(x=Tensor([0, 3],"float32"), )
paddle.max(x=Tensor([0, 3],"float32"), axis=0, keepdim=True, )
paddle.max(x=Tensor([0, 3],"float32"), axis=1, )
paddle.max(x=Tensor([0, 3],"float32"), axis=-2, )
paddle.max(x=Tensor([2, 0],"float32"), )
paddle.max(x=Tensor([2, 0],"float32"), axis=0, keepdim=True, )
paddle.max(x=Tensor([2, 0],"float32"), axis=1, )
paddle.max(x=Tensor([2, 0],"float32"), axis=-2, )
paddle.max(x=Tensor([2, 0],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.mean(Tensor([0, 10],"float32"), keepdim=True, )
paddle.mean(Tensor([0, 5],"float32"), keepdim=True, )
paddle.mean(Tensor([10, 0],"float32"), keepdim=True, )
paddle.mean(Tensor([3, 0],"float32"), keepdim=True, )
paddle.median(Tensor([0, 10],"float32"), axis=1, mode="min", )
paddle.median(Tensor([0, 100],"float32"), axis=1, mode="min", )
paddle.median(Tensor([0, 4, 2],"float32"), 0, False, )
paddle.median(Tensor([0, 4, 2],"float32"), 0, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"float32"), 0, True, )
paddle.median(Tensor([0, 4, 2],"float32"), 0, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"float32"), 1, False, )
paddle.median(Tensor([0, 4, 2],"float32"), -1, False, )
paddle.median(Tensor([0, 4, 2],"float32"), 1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"float32"), -1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"float32"), 1, True, )
paddle.median(Tensor([0, 4, 2],"float32"), -1, True, )
paddle.median(Tensor([0, 4, 2],"float32"), 1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"float32"), -1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"float32"), 2, False, )
paddle.median(Tensor([0, 4, 2],"float32"), 2, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"float32"), 2, True, )
paddle.median(Tensor([0, 4, 2],"float32"), 2, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"float32"), None, False, )
paddle.median(Tensor([0, 4, 2],"float32"), None, True, )
paddle.median(Tensor([0, 4, 2],"float64"), 0, False, )
paddle.median(Tensor([0, 4, 2],"float64"), 0, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"float64"), 0, True, )
paddle.median(Tensor([0, 4, 2],"float64"), 0, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"float64"), 1, False, )
paddle.median(Tensor([0, 4, 2],"float64"), -1, False, )
paddle.median(Tensor([0, 4, 2],"float64"), 1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"float64"), -1, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"float64"), 1, True, )
paddle.median(Tensor([0, 4, 2],"float64"), -1, True, )
paddle.median(Tensor([0, 4, 2],"float64"), 1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"float64"), -1, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"float64"), 2, False, )
paddle.median(Tensor([0, 4, 2],"float64"), 2, False, mode="min", )
paddle.median(Tensor([0, 4, 2],"float64"), 2, True, )
paddle.median(Tensor([0, 4, 2],"float64"), 2, True, mode="min", )
paddle.median(Tensor([0, 4, 2],"float64"), None, False, )
paddle.median(Tensor([0, 4, 2],"float64"), None, True, )
paddle.median(Tensor([0, 4, 5],"float32"), mode="avg", )
paddle.median(Tensor([0, 4, 5],"float32"), mode="min", )
paddle.median(Tensor([0, 4, 5],"float64"), mode="avg", )
paddle.median(Tensor([0, 4, 5],"float64"), mode="min", )
paddle.median(Tensor([0, 4],"float16"), 0, False, )
paddle.median(Tensor([0, 4],"float16"), 0, False, mode="min", )
paddle.median(Tensor([0, 4],"float16"), 0, True, )
paddle.median(Tensor([0, 4],"float16"), 0, True, mode="min", )
paddle.median(Tensor([0, 4],"float16"), 1, False, )
paddle.median(Tensor([0, 4],"float16"), -1, False, )
paddle.median(Tensor([0, 4],"float16"), 1, False, mode="min", )
paddle.median(Tensor([0, 4],"float16"), -1, False, mode="min", )
paddle.median(Tensor([0, 4],"float16"), 1, True, )
paddle.median(Tensor([0, 4],"float16"), -1, True, )
paddle.median(Tensor([0, 4],"float16"), 1, True, mode="min", )
paddle.median(Tensor([0, 4],"float16"), -1, True, mode="min", )
paddle.median(Tensor([0, 4],"float16"), None, False, )
paddle.median(Tensor([0, 4],"float16"), None, False, mode="min", )
paddle.median(Tensor([0, 4],"float16"), None, True, )
paddle.median(Tensor([0, 4],"float16"), None, True, mode="min", )
paddle.median(Tensor([0, 4],"float32"), 0, False, )
paddle.median(Tensor([0, 4],"float32"), 0, False, mode="min", )
paddle.median(Tensor([0, 4],"float32"), 0, True, )
paddle.median(Tensor([0, 4],"float32"), 0, True, mode="min", )
paddle.median(Tensor([0, 4],"float32"), 1, False, )
paddle.median(Tensor([0, 4],"float32"), -1, False, )
paddle.median(Tensor([0, 4],"float32"), 1, False, mode="min", )
paddle.median(Tensor([0, 4],"float32"), -1, False, mode="min", )
paddle.median(Tensor([0, 4],"float32"), 1, True, )
paddle.median(Tensor([0, 4],"float32"), -1, True, )
paddle.median(Tensor([0, 4],"float32"), 1, True, mode="min", )
paddle.median(Tensor([0, 4],"float32"), -1, True, mode="min", )
paddle.median(Tensor([0, 4],"float32"), None, False, )
paddle.median(Tensor([0, 4],"float32"), None, False, mode="min", )
paddle.median(Tensor([0, 4],"float32"), None, True, )
paddle.median(Tensor([0, 4],"float32"), None, True, mode="min", )
paddle.median(Tensor([0, 4],"float64"), 0, )
paddle.median(Tensor([0, 5],"float32"), axis=None, )
paddle.median(Tensor([0, 5],"float32"), keepdim=True, )
paddle.median(Tensor([0],"float32"), axis=0, )
paddle.median(Tensor([2, 0, 5],"float32"), mode="avg", )
paddle.median(Tensor([2, 0, 5],"float32"), mode="min", )
paddle.median(Tensor([2, 0, 5],"float64"), mode="avg", )
paddle.median(Tensor([2, 0, 5],"float64"), mode="min", )
paddle.median(Tensor([2, 0],"float32"), axis=1, mode="min", )
paddle.median(Tensor([2, 4, 0],"float32"), mode="avg", )
paddle.median(Tensor([2, 4, 0],"float32"), mode="min", )
paddle.median(Tensor([2, 4, 0],"float64"), mode="avg", )
paddle.median(Tensor([2, 4, 0],"float64"), mode="min", )
paddle.median(Tensor([3, 0, 2],"float32"), 0, False, )
paddle.median(Tensor([3, 0, 2],"float32"), 0, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"float32"), 0, True, )
paddle.median(Tensor([3, 0, 2],"float32"), 0, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"float32"), 1, False, )
paddle.median(Tensor([3, 0, 2],"float32"), -1, False, )
paddle.median(Tensor([3, 0, 2],"float32"), 1, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"float32"), -1, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"float32"), 1, True, )
paddle.median(Tensor([3, 0, 2],"float32"), -1, True, )
paddle.median(Tensor([3, 0, 2],"float32"), 1, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"float32"), -1, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"float32"), 2, False, )
paddle.median(Tensor([3, 0, 2],"float32"), 2, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"float32"), 2, True, )
paddle.median(Tensor([3, 0, 2],"float32"), 2, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"float32"), None, False, )
paddle.median(Tensor([3, 0, 2],"float32"), None, True, )
paddle.median(Tensor([3, 0, 2],"float64"), 0, False, )
paddle.median(Tensor([3, 0, 2],"float64"), 0, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"float64"), 0, True, )
paddle.median(Tensor([3, 0, 2],"float64"), 0, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"float64"), 1, False, )
paddle.median(Tensor([3, 0, 2],"float64"), -1, False, )
paddle.median(Tensor([3, 0, 2],"float64"), 1, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"float64"), -1, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"float64"), 1, True, )
paddle.median(Tensor([3, 0, 2],"float64"), -1, True, )
paddle.median(Tensor([3, 0, 2],"float64"), 1, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"float64"), -1, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"float64"), 2, False, )
paddle.median(Tensor([3, 0, 2],"float64"), 2, False, mode="min", )
paddle.median(Tensor([3, 0, 2],"float64"), 2, True, )
paddle.median(Tensor([3, 0, 2],"float64"), 2, True, mode="min", )
paddle.median(Tensor([3, 0, 2],"float64"), None, False, )
paddle.median(Tensor([3, 0, 2],"float64"), None, True, )
paddle.median(Tensor([3, 0],"float16"), 0, False, )
paddle.median(Tensor([3, 0],"float16"), 0, False, mode="min", )
paddle.median(Tensor([3, 0],"float16"), 0, True, )
paddle.median(Tensor([3, 0],"float16"), 0, True, mode="min", )
paddle.median(Tensor([3, 0],"float16"), 1, False, )
paddle.median(Tensor([3, 0],"float16"), -1, False, )
paddle.median(Tensor([3, 0],"float16"), 1, False, mode="min", )
paddle.median(Tensor([3, 0],"float16"), -1, False, mode="min", )
paddle.median(Tensor([3, 0],"float16"), 1, True, )
paddle.median(Tensor([3, 0],"float16"), -1, True, )
paddle.median(Tensor([3, 0],"float16"), 1, True, mode="min", )
paddle.median(Tensor([3, 0],"float16"), -1, True, mode="min", )
paddle.median(Tensor([3, 0],"float16"), None, False, )
paddle.median(Tensor([3, 0],"float16"), None, False, mode="min", )
paddle.median(Tensor([3, 0],"float16"), None, True, )
paddle.median(Tensor([3, 0],"float16"), None, True, mode="min", )
paddle.median(Tensor([3, 0],"float32"), 0, False, )
paddle.median(Tensor([3, 0],"float32"), 0, True, )
paddle.median(Tensor([3, 0],"float32"), 1, False, )
paddle.median(Tensor([3, 0],"float32"), -1, False, )
paddle.median(Tensor([3, 0],"float32"), 1, True, )
paddle.median(Tensor([3, 0],"float32"), -1, True, )
paddle.median(Tensor([3, 0],"float32"), axis=1, mode="min", )
paddle.median(Tensor([3, 0],"float32"), axis=None, )
paddle.median(Tensor([3, 0],"float32"), keepdim=True, )
paddle.median(Tensor([3, 0],"float32"), None, False, )
paddle.median(Tensor([3, 0],"float32"), None, True, )
paddle.median(Tensor([3, 0],"float64"), 0, )
paddle.median(Tensor([3, 4, 0],"float32"), 0, False, )
paddle.median(Tensor([3, 4, 0],"float32"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"float32"), 0, True, )
paddle.median(Tensor([3, 4, 0],"float32"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"float32"), 1, False, )
paddle.median(Tensor([3, 4, 0],"float32"), -1, False, )
paddle.median(Tensor([3, 4, 0],"float32"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"float32"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"float32"), 1, True, )
paddle.median(Tensor([3, 4, 0],"float32"), -1, True, )
paddle.median(Tensor([3, 4, 0],"float32"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"float32"), -1, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"float32"), 2, False, )
paddle.median(Tensor([3, 4, 0],"float32"), 2, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"float32"), 2, True, )
paddle.median(Tensor([3, 4, 0],"float32"), 2, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"float32"), None, False, )
paddle.median(Tensor([3, 4, 0],"float32"), None, True, )
paddle.median(Tensor([3, 4, 0],"float64"), 0, False, )
paddle.median(Tensor([3, 4, 0],"float64"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"float64"), 0, True, )
paddle.median(Tensor([3, 4, 0],"float64"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"float64"), 1, False, )
paddle.median(Tensor([3, 4, 0],"float64"), -1, False, )
paddle.median(Tensor([3, 4, 0],"float64"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"float64"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"float64"), 1, True, )
paddle.median(Tensor([3, 4, 0],"float64"), -1, True, )
paddle.median(Tensor([3, 4, 0],"float64"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"float64"), -1, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"float64"), 2, False, )
paddle.median(Tensor([3, 4, 0],"float64"), 2, False, mode="min", )
paddle.median(Tensor([3, 4, 0],"float64"), 2, True, )
paddle.median(Tensor([3, 4, 0],"float64"), 2, True, mode="min", )
paddle.median(Tensor([3, 4, 0],"float64"), None, False, )
paddle.median(Tensor([3, 4, 0],"float64"), None, True, )
paddle.median(Tensor([5, 0],"float32"), 0, False, mode="min", )
paddle.median(Tensor([5, 0],"float32"), 0, True, mode="min", )
paddle.median(Tensor([5, 0],"float32"), 1, False, mode="min", )
paddle.median(Tensor([5, 0],"float32"), -1, False, mode="min", )
paddle.median(Tensor([5, 0],"float32"), 1, True, mode="min", )
paddle.median(Tensor([5, 0],"float32"), -1, True, mode="min", )
paddle.median(Tensor([5, 0],"float32"), None, False, mode="min", )
paddle.median(Tensor([5, 0],"float32"), None, True, mode="min", )
paddle.median(x=Tensor([0, 4, 4],"float32"), axis=0, keepdim=False, )
paddle.median(x=Tensor([0, 4, 4],"float32"), axis=1, keepdim=False, )
paddle.median(x=Tensor([0, 4, 4],"float32"), axis=1, keepdim=True, )
paddle.median(x=Tensor([0, 4, 4],"float32"), axis=-2, keepdim=True, )
paddle.median(x=Tensor([4, 0, 4],"float32"), axis=0, keepdim=False, )
paddle.median(x=Tensor([4, 0, 4],"float32"), axis=1, keepdim=False, )
paddle.median(x=Tensor([4, 0, 4],"float32"), axis=1, keepdim=True, )
paddle.median(x=Tensor([4, 0, 4],"float32"), axis=-2, keepdim=True, )
paddle.median(x=Tensor([4, 4, 0],"float32"), axis=0, keepdim=False, )
paddle.median(x=Tensor([4, 4, 0],"float32"), axis=1, keepdim=False, )
paddle.median(x=Tensor([4, 4, 0],"float32"), axis=1, keepdim=True, )
paddle.median(x=Tensor([4, 4, 0],"float32"), axis=-2, keepdim=True, )
paddle.meshgrid(list[Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.meshgrid(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.meshgrid(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.meshgrid(list[Tensor([0],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([0],"float32"),Tensor([140],"float32"),], )
paddle.meshgrid(list[Tensor([0],"float32"),Tensor([188],"float32"),Tensor([1],"float32"),], )
paddle.meshgrid(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.meshgrid(list[Tensor([0],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),], )
paddle.meshgrid(list[Tensor([0],"int64"),Tensor([0],"int64"),], indexing="ij", )
paddle.meshgrid(list[Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),], )
paddle.meshgrid(list[Tensor([0],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),], )
paddle.meshgrid(list[Tensor([0],"int64"),Tensor([4],"int64"),], indexing="ij", )
paddle.meshgrid(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.meshgrid(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.meshgrid(list[Tensor([10],"float64"),Tensor([0],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),], )
paddle.meshgrid(list[Tensor([10],"float64"),Tensor([10],"float64"),Tensor([0],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),], )
paddle.meshgrid(list[Tensor([10],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),Tensor([0],"float64"),Tensor([10],"float64"),], )
paddle.meshgrid(list[Tensor([10],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),Tensor([10],"float64"),Tensor([0],"float64"),], )
paddle.meshgrid(list[Tensor([10],"int64"),Tensor([0],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),], )
paddle.meshgrid(list[Tensor([10],"int64"),Tensor([10],"int64"),Tensor([0],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),], )
paddle.meshgrid(list[Tensor([10],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),Tensor([0],"int64"),Tensor([10],"int64"),], )
paddle.meshgrid(list[Tensor([10],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),Tensor([10],"int64"),Tensor([0],"int64"),], )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([0],"float32"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([188],"float32"),Tensor([0],"float32"),], )
paddle.meshgrid(list[Tensor([4],"int64"),Tensor([0],"int64"),], indexing="ij", )
paddle.meshgrid(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.meshgrid(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.meshgrid(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.meshgrid(Tensor([0],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([0],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([0],"float32"), Tensor([248],"float32"), Tensor([1],"float32"), Tensor([2],"float32"), )
paddle.meshgrid(Tensor([0],"float32"), Tensor([4],"float32"), Tensor([6],"float32"), )
paddle.meshgrid(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.meshgrid(Tensor([0],"float64"), Tensor([4],"float64"), Tensor([6],"float64"), )
paddle.meshgrid(Tensor([0],"int64"), Tensor([0],"int64"), indexing="ij", )
paddle.meshgrid(Tensor([0],"int64"), Tensor([5],"int64"), indexing="ij", )
paddle.meshgrid(Tensor([100],"float32"), Tensor([0],"float32"), )
paddle.meshgrid(Tensor([2],"float32"), Tensor([0],"float32"), Tensor([6],"float32"), )
paddle.meshgrid(Tensor([2],"float32"), Tensor([4],"float32"), Tensor([0],"float32"), )
paddle.meshgrid(Tensor([2],"float64"), Tensor([0],"float64"), Tensor([6],"float64"), )
paddle.meshgrid(Tensor([2],"float64"), Tensor([4],"float64"), Tensor([0],"float64"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), Tensor([2],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([248],"float32"), Tensor([0],"float32"), Tensor([2],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([248],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.meshgrid(Tensor([5],"int64"), Tensor([0],"int64"), indexing="ij", )
paddle.min(Tensor([0, 1, 28, 28],"float32"), )
paddle.min(Tensor([0, 2, 2],"int32"), tuple(0,1,), False, )
paddle.min(Tensor([0, 2],"float64"), axis=0, )
paddle.min(Tensor([0, 245],"float32"), axis=0, )
paddle.min(Tensor([0, 3],"float32"), )
paddle.min(Tensor([0, 32],"float32"), list[0,], )
paddle.min(Tensor([0, 32],"float32"), list[1,], )
paddle.min(Tensor([0, 4],"float16"), axis=1, keepdim=True, )
paddle.min(Tensor([0, 4],"float32"), axis=1, keepdim=True, )
paddle.min(Tensor([0, 4],"float64"), 0, False, )
paddle.min(Tensor([0, 4],"float64"), 1, True, )
paddle.min(Tensor([0, 4],"float64"), None, False, )
paddle.min(Tensor([0, 5],"float32"), axis=None, )
paddle.min(Tensor([0, 5],"float32"), keepdim=True, )
paddle.min(Tensor([0],"float32"), axis=0, )
paddle.min(Tensor([0],"float64"), axis=0, )
paddle.min(Tensor([0],"float64"), axis=tuple(0,), )
paddle.min(Tensor([0],"int64"), )
paddle.min(Tensor([128, 0],"float16"), axis=1, keepdim=True, )
paddle.min(Tensor([128, 0],"float32"), axis=1, keepdim=True, )
paddle.min(Tensor([16, 0],"float32"), list[0,], )
paddle.min(Tensor([16, 0],"float32"), list[1,], )
paddle.min(Tensor([2, 0, 2],"int32"), tuple(0,1,), False, )
paddle.min(Tensor([2, 0],"float32"), )
paddle.min(Tensor([2, 0],"float32"), axis=0, )
paddle.min(Tensor([2, 0],"float64"), 0, False, )
paddle.min(Tensor([2, 0],"float64"), 1, True, )
paddle.min(Tensor([2, 0],"float64"), None, False, )
paddle.min(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.min(Tensor([3, 0],"float32"), axis=None, )
paddle.min(Tensor([3, 0],"float32"), keepdim=True, )
paddle.min(Tensor([4, 0],"float64"), axis=0, )
paddle.min(Tensor([64, 0, 28, 28],"float32"), )
paddle.min(Tensor([64, 1, 0, 28],"float32"), )
paddle.min(Tensor([64, 1, 28, 0],"float32"), )
paddle.min(x=Tensor([0, 2],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.min(x=Tensor([0, 3],"float32"), )
paddle.min(x=Tensor([0, 3],"float32"), axis=0, keepdim=True, )
paddle.min(x=Tensor([0, 3],"float32"), axis=1, )
paddle.min(x=Tensor([0, 3],"float32"), axis=-2, )
paddle.min(x=Tensor([2, 0],"float32"), )
paddle.min(x=Tensor([2, 0],"float32"), axis=0, keepdim=True, )
paddle.min(x=Tensor([2, 0],"float32"), axis=1, )
paddle.min(x=Tensor([2, 0],"float32"), axis=-2, )
paddle.min(x=Tensor([2, 0],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.mm(input=Tensor([0, 3, 1, 2],"float64"), mat2=Tensor([0, 3, 2, 3],"float64"), )
paddle.mm(input=Tensor([0, 3, 1, 2],"float64"), mat2=Tensor([2, 3, 2, 3],"float64"), )
paddle.mm(input=Tensor([0, 3, 4],"float64"), mat2=Tensor([0, 4, 2],"float64"), )
paddle.mm(input=Tensor([0, 3, 4],"float64"), mat2=Tensor([2, 4, 2],"float64"), )
paddle.mm(input=Tensor([0, 3, 4],"float64"), mat2=Tensor([4, 5],"float64"), )
paddle.mm(input=Tensor([0, 3, 4],"float64"), mat2=Tensor([4],"float64"), )
paddle.mm(input=Tensor([0],"float64"), mat2=Tensor([0],"float64"), )
paddle.mm(input=Tensor([0],"float64"), mat2=Tensor([7],"float64"), )
paddle.mm(input=Tensor([2, 0, 1, 2],"float64"), mat2=Tensor([2, 0, 2, 3],"float64"), )
paddle.mm(input=Tensor([2, 0, 1, 2],"float64"), mat2=Tensor([2, 3, 2, 3],"float64"), )
paddle.mm(input=Tensor([2, 0, 4],"float64"), mat2=Tensor([2, 0, 2],"float64"), )
paddle.mm(input=Tensor([2, 0, 4],"float64"), mat2=Tensor([2, 4, 2],"float64"), )
paddle.mm(input=Tensor([2, 0, 4],"float64"), mat2=Tensor([4, 5],"float64"), )
paddle.mm(input=Tensor([2, 0, 4],"float64"), mat2=Tensor([4],"float64"), )
paddle.mm(input=Tensor([2, 3, 0, 2],"float64"), mat2=Tensor([2, 3, 0, 3],"float64"), )
paddle.mm(input=Tensor([2, 3, 0, 2],"float64"), mat2=Tensor([2, 3, 2, 3],"float64"), )
paddle.mm(input=Tensor([2, 3, 0],"float64"), mat2=Tensor([2, 4, 0],"float64"), )
paddle.mm(input=Tensor([2, 3, 0],"float64"), mat2=Tensor([2, 4, 2],"float64"), )
paddle.mm(input=Tensor([2, 3, 0],"float64"), mat2=Tensor([4, 5],"float64"), )
paddle.mm(input=Tensor([2, 3, 0],"float64"), mat2=Tensor([4],"float64"), )
paddle.mm(input=Tensor([2, 3, 1, 0],"float64"), mat2=Tensor([2, 3, 2, 0],"float64"), )
paddle.mm(input=Tensor([2, 3, 1, 0],"float64"), mat2=Tensor([2, 3, 2, 3],"float64"), )
paddle.mm(input=Tensor([2, 3, 1, 2],"float64"), mat2=Tensor([0, 3, 2, 3],"float64"), )
paddle.mm(input=Tensor([2, 3, 1, 2],"float64"), mat2=Tensor([2, 0, 2, 3],"float64"), )
paddle.mm(input=Tensor([2, 3, 1, 2],"float64"), mat2=Tensor([2, 3, 0, 3],"float64"), )
paddle.mm(input=Tensor([2, 3, 1, 2],"float64"), mat2=Tensor([2, 3, 2, 0],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([0, 4, 2],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([0, 5],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([0],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([2, 0, 2],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([2, 4, 0],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([4, 0],"float64"), )
paddle.mm(input=Tensor([7],"float64"), mat2=Tensor([0],"float64"), )
paddle.mm(Tensor([0, 1, 256],"float32"), Tensor([0, 256, 576],"float32"), )
paddle.mm(Tensor([0, 1, 256],"float32"), Tensor([0, 256, 96],"float32"), )
paddle.mm(Tensor([0, 1, 256],"float32"), Tensor([24, 256, 96],"float32"), )
paddle.mm(Tensor([0, 1, 256],"float32"), Tensor([32, 256, 576],"float32"), )
paddle.mm(Tensor([0, 4, 49, 32],"float32"), Tensor([0, 4, 32, 49],"float32"), )
paddle.mm(Tensor([0, 4, 49, 32],"float32"), Tensor([1024, 4, 32, 49],"float32"), )
paddle.mm(Tensor([0, 4, 49, 49],"float32"), Tensor([0, 4, 49, 32],"float32"), )
paddle.mm(Tensor([0, 4, 49, 49],"float32"), Tensor([1024, 4, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 0, 49, 32],"float32"), Tensor([1024, 0, 32, 49],"float32"), )
paddle.mm(Tensor([1024, 0, 49, 32],"float32"), Tensor([1024, 4, 32, 49],"float32"), )
paddle.mm(Tensor([1024, 0, 49, 49],"float32"), Tensor([1024, 0, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 0, 49, 49],"float32"), Tensor([1024, 4, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 4, 0, 32],"float32"), Tensor([1024, 4, 0, 49],"float32"), )
paddle.mm(Tensor([1024, 4, 0, 32],"float32"), Tensor([1024, 4, 32, 49],"float32"), )
paddle.mm(Tensor([1024, 4, 0, 49],"float32"), Tensor([1024, 4, 0, 32],"float32"), )
paddle.mm(Tensor([1024, 4, 0, 49],"float32"), Tensor([1024, 4, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 0],"float32"), Tensor([1024, 4, 32, 0],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 0],"float32"), Tensor([1024, 4, 32, 49],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 0],"float32"), Tensor([1024, 4, 49, 0],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 0],"float32"), Tensor([1024, 4, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 32],"float32"), Tensor([0, 4, 32, 49],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 32],"float32"), Tensor([1024, 0, 32, 49],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 32],"float32"), Tensor([1024, 4, 0, 49],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 32],"float32"), Tensor([1024, 4, 32, 0],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 49],"float32"), Tensor([0, 4, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 49],"float32"), Tensor([1024, 0, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 49],"float32"), Tensor([1024, 4, 0, 32],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 49],"float32"), Tensor([1024, 4, 49, 0],"float32"), )
paddle.mm(Tensor([24, 0, 256],"float32"), Tensor([24, 0, 96],"float32"), )
paddle.mm(Tensor([24, 0, 256],"float32"), Tensor([24, 256, 96],"float32"), )
paddle.mm(Tensor([24, 1, 0],"float32"), Tensor([24, 256, 0],"float32"), )
paddle.mm(Tensor([24, 1, 0],"float32"), Tensor([24, 256, 96],"float32"), )
paddle.mm(Tensor([24, 1, 256],"float32"), Tensor([0, 256, 96],"float32"), )
paddle.mm(Tensor([24, 1, 256],"float32"), Tensor([24, 0, 96],"float32"), )
paddle.mm(Tensor([24, 1, 256],"float32"), Tensor([24, 256, 0],"float32"), )
paddle.mm(Tensor([32, 0, 256],"float32"), Tensor([32, 0, 576],"float32"), )
paddle.mm(Tensor([32, 0, 256],"float32"), Tensor([32, 256, 576],"float32"), )
paddle.mm(Tensor([32, 1, 0],"float32"), Tensor([32, 256, 0],"float32"), )
paddle.mm(Tensor([32, 1, 0],"float32"), Tensor([32, 256, 576],"float32"), )
paddle.mm(Tensor([32, 1, 256],"float32"), Tensor([0, 256, 576],"float32"), )
paddle.mm(Tensor([32, 1, 256],"float32"), Tensor([32, 0, 576],"float32"), )
paddle.mm(Tensor([32, 1, 256],"float32"), Tensor([32, 256, 0],"float32"), )
paddle.mod(Tensor([0, 1024],"int64"), Tensor([0, 1024],"int64"), )
paddle.mod(Tensor([0, 1024],"int64"), Tensor([10, 1024],"int64"), )
paddle.mod(Tensor([0, 2, 4, 5],"int32"), Tensor([0, 2, 4, 5],"int32"), )
paddle.mod(Tensor([0, 2, 4, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.mod(Tensor([0, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.mod(Tensor([0, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.mod(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.mod(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.mod(Tensor([0, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), )
paddle.mod(Tensor([0, 4, 5],"int32"), Tensor([2, 4, 5],"int32"), )
paddle.mod(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.mod(Tensor([0],"int32"), Tensor([1],"int32"), )
paddle.mod(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.mod(Tensor([0],"int64"), Tensor([1],"int64"), )
paddle.mod(Tensor([1],"int32"), Tensor([0],"int32"), )
paddle.mod(Tensor([1],"int64"), Tensor([0],"int64"), )
paddle.mod(Tensor([10, 0],"int32"), Tensor([10, 0],"int32"), )
paddle.mod(Tensor([10, 0],"int32"), Tensor([10, 20],"int32"), )
paddle.mod(Tensor([10, 0],"int64"), Tensor([10, 0],"int64"), )
paddle.mod(Tensor([10, 0],"int64"), Tensor([10, 1024],"int64"), )
paddle.mod(Tensor([10, 1024],"int64"), Tensor([0, 1024],"int64"), )
paddle.mod(Tensor([10, 1024],"int64"), Tensor([10, 0],"int64"), )
paddle.mod(Tensor([10, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.mod(Tensor([10, 20],"int32"), Tensor([10, 0],"int32"), )
paddle.mod(Tensor([2, 0, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.mod(Tensor([2, 0, 5],"int32"), Tensor([2, 4, 5],"int32"), )
paddle.mod(Tensor([2, 4, 0],"int32"), Tensor([2, 4, 0],"int32"), )
paddle.mod(Tensor([2, 4, 0],"int32"), Tensor([2, 4, 5],"int32"), )
paddle.mod(Tensor([2, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), )
paddle.mod(Tensor([2, 4, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.mod(Tensor([2, 4, 5],"int32"), Tensor([2, 4, 0],"int32"), )
paddle.mod(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.mod(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.mod(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.mod(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.mod(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.mod(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.mod(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.mod(Tensor([6, 0, 4, 5],"int32"), Tensor([6, 0, 4, 5],"int32"), )
paddle.mod(Tensor([6, 0, 4, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.mod(Tensor([6, 2, 0, 5],"int32"), Tensor([6, 2, 0, 5],"int32"), )
paddle.mod(Tensor([6, 2, 0, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.mod(Tensor([6, 2, 4, 0],"int32"), Tensor([6, 2, 4, 0],"int32"), )
paddle.mod(Tensor([6, 2, 4, 0],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.mod(Tensor([6, 2, 4, 5],"int32"), Tensor([0, 2, 4, 5],"int32"), )
paddle.mod(Tensor([6, 2, 4, 5],"int32"), Tensor([6, 0, 4, 5],"int32"), )
paddle.mod(Tensor([6, 2, 4, 5],"int32"), Tensor([6, 2, 0, 5],"int32"), )
paddle.mod(Tensor([6, 2, 4, 5],"int32"), Tensor([6, 2, 4, 0],"int32"), )
paddle.mode(Tensor([0, 10, 10],"float64"), 1, )
paddle.mode(Tensor([0, 10, 10],"float64"), -1, )
paddle.mode(Tensor([0, 10, 10],"float64"), 1, keepdim=True, )
paddle.mode(Tensor([0, 10, 10],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([0],"float32"), )
paddle.mode(Tensor([2, 0, 10],"float64"), 1, )
paddle.mode(Tensor([2, 0, 10],"float64"), -1, )
paddle.mode(Tensor([2, 0, 10],"float64"), 1, keepdim=True, )
paddle.mode(Tensor([2, 0, 10],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([2, 10, 0],"float64"), 1, )
paddle.mode(Tensor([2, 10, 0],"float64"), -1, )
paddle.mode(Tensor([2, 10, 0],"float64"), 1, keepdim=True, )
paddle.mode(Tensor([2, 10, 0],"float64"), -1, keepdim=True, )
paddle.mode(x=Tensor([0, 2, 3],"float32"), )
paddle.mode(x=Tensor([0, 2, 3],"float64"), )
paddle.mode(x=Tensor([0, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.mode(x=Tensor([0, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.mode(x=Tensor([3, 0, 3],"float32"), )
paddle.mode(x=Tensor([3, 0, 3],"float64"), )
paddle.mode(x=Tensor([3, 0, 3],"float64"), axis=1, keepdim=False, )
paddle.mode(x=Tensor([3, 0, 3],"float64"), axis=2, keepdim=True, )
paddle.mode(x=Tensor([3, 2, 0],"float32"), )
paddle.mode(x=Tensor([3, 2, 0],"float64"), )
paddle.mode(x=Tensor([3, 2, 0],"float64"), axis=1, keepdim=False, )
paddle.mode(x=Tensor([3, 2, 0],"float64"), axis=2, keepdim=True, )
paddle.multiply(Tensor([0, 1, 1, 2, 3],"float32"), Tensor([0, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([0, 1, 1, 2, 3],"float32"), Tensor([2, 1, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([0, 1, 1, 2, 3],"float64"), Tensor([0, 1, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([0, 1, 1, 2, 3],"float64"), Tensor([2, 1, 1, 1, 1],"float64"), name=None, )
paddle.multiply(Tensor([0, 1, 10],"float32"), Tensor([0, 1, 10],"float32"), )
paddle.multiply(Tensor([0, 1, 10],"float32"), Tensor([10, 1, 10],"float32"), )
paddle.multiply(Tensor([0, 1, 2, 3],"float32"), Tensor([0, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([0, 1, 2, 3],"float32"), Tensor([2, 1, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([0, 1, 256],"float32"), Tensor([0, 1, 256],"float32"), name=None, )
paddle.multiply(Tensor([0, 1, 256],"float32"), Tensor([1, 1, 256],"float32"), name=None, )
paddle.multiply(Tensor([0, 1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.multiply(Tensor([0, 1, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.multiply(Tensor([0, 1],"float32"), Tensor([1],"float32"), )
paddle.multiply(Tensor([0, 10, 256],"float32"), Tensor([0, 10, 256],"float32"), name=None, )
paddle.multiply(Tensor([0, 10, 256],"float32"), Tensor([1, 10, 256],"float32"), name=None, )
paddle.multiply(Tensor([0, 122, 512],"complex128"), Tensor([512],"complex128"), )
paddle.multiply(Tensor([0, 1247, 512],"float64"), Tensor([512],"float64"), )
paddle.multiply(Tensor([0, 128],"float16"), Tensor([128],"float16"), )
paddle.multiply(Tensor([0, 2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), )
paddle.multiply(Tensor([0, 2, 8, 8],"float32"), Tensor([0, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([0, 2, 8, 8],"float32"), Tensor([1, 1, 8, 8],"float32"), )
paddle.multiply(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.multiply(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), name=None, )
paddle.multiply(Tensor([0, 2],"float32"), Tensor([1, 2],"float32"), )
paddle.multiply(Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), name=None, )
paddle.multiply(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), name=None, )
