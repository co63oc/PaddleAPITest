paddle.stack(list[Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 0, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 16],"float32"),Tensor([13, 7, 16],"float32"),Tensor([13, 7, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 64],"float32"),Tensor([13, 0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0, 64],"float32"),Tensor([13, 7, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),Tensor([13, 0],"int64"),], )
paddle.stack(list[Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),Tensor([13, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([0, 1, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 0, 16],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 16],"float32"),Tensor([13, 1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),Tensor([13, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([0, 3],"float32"),], )
paddle.stack(list[Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 3],"float32"),Tensor([13, 0],"float32"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),Tensor([13, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([0, 3],"int64"),], )
paddle.stack(list[Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 3],"int64"),Tensor([13, 0],"int64"),], )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([0, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),], axis=-1, )
paddle.stack(list[Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 64],"float32"),Tensor([13, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([0, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),Tensor([14, 14],"int32"),], )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([28, 28],"int32"),Tensor([0, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),Tensor([28, 28],"int32"),], )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 0, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 0],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 0, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 8, 0],"float32"),], axis=-4, )
paddle.stack(list[Tensor([64, 0, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 0, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 0],"float32"),Tensor([64, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([0, 64, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 0, 64, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 0, 64],"float32"),], axis=1, )
paddle.stack(list[Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 64],"float32"),Tensor([64, 64, 64, 0],"float32"),], axis=1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 0, 1],"float32"),Tensor([140, 188, 1],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 188, 0],"float32"),Tensor([140, 188, 1],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 188, 1],"float32"),Tensor([0, 188, 1],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 188, 1],"float32"),Tensor([140, 0, 1],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([140, 188, 1],"float32"),Tensor([140, 188, 1],"float32"),Tensor([140, 188, 0],"float32"),), axis=-1, )
paddle.stack(tuple(Tensor([16, 0],"int64"),Tensor([16, 0],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([16, 0],"int64"),Tensor([16, 16],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([16, 16],"int64"),Tensor([0, 16],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([16, 16],"int64"),Tensor([16, 0],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),), axis=1, )
paddle.stack(tuple(Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2, 0],"int64"),Tensor([2, 10],"int64"),), axis=1, )
paddle.stack(tuple(Tensor([2, 0],"int64"),Tensor([2, 2],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2, 10],"int64"),Tensor([0, 10],"int64"),), axis=1, )
paddle.stack(tuple(Tensor([2, 10],"int64"),Tensor([2, 0],"int64"),), axis=1, )
paddle.stack(tuple(Tensor([2, 2],"int64"),Tensor([0, 2],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2, 2],"int64"),Tensor([2, 0],"int64"),), axis=2, )
paddle.stack(tuple(Tensor([2],"float32"),Tensor([0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([2],"float64"),Tensor([0],"float64"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224],"float32"),Tensor([3, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224],"float32"),Tensor([3, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 0],"float32"),Tensor([3, 224, 0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 0],"float32"),Tensor([3, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([0, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([3, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([3, 224, 0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),Tensor([3, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([0, 8, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 0, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 224],"float32"),Tensor([3, 8, 224, 0],"float32"),), axis=0, )
paddle.stack(x=list[Tensor([0, 140, 140],"float32"),Tensor([0, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([0, 140, 140],"float32"),Tensor([58, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 0, 140],"float32"),Tensor([58, 0, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 0, 140],"float32"),Tensor([58, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 0],"float32"),Tensor([58, 140, 0],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 0],"float32"),Tensor([58, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 140],"float32"),Tensor([0, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 140],"float32"),Tensor([58, 0, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 140],"float32"),Tensor([58, 140, 0],"float32"),], axis=1, )
paddle.stack(x=tuple(Tensor([0, 16, 256, 32],"float32"),Tensor([0, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([0, 16, 256, 32],"float32"),Tensor([1, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([0, 3, 576, 32],"float32"),Tensor([0, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([0, 3, 576, 32],"float32"),Tensor([128, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 0, 256, 32],"float32"),Tensor([1, 0, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 0, 256, 32],"float32"),Tensor([1, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 0, 32],"float32"),Tensor([1, 16, 0, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 0, 32],"float32"),Tensor([1, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 0],"float32"),Tensor([1, 16, 256, 0],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 0],"float32"),Tensor([1, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 32],"float32"),Tensor([0, 16, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 32],"float32"),Tensor([1, 0, 256, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 32],"float32"),Tensor([1, 16, 0, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([1, 16, 256, 32],"float32"),Tensor([1, 16, 256, 0],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 0, 576, 32],"float32"),Tensor([128, 0, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 0, 576, 32],"float32"),Tensor([128, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 0, 32],"float32"),Tensor([128, 3, 0, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 0, 32],"float32"),Tensor([128, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 0],"float32"),Tensor([128, 3, 576, 0],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 0],"float32"),Tensor([128, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 32],"float32"),Tensor([0, 3, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 32],"float32"),Tensor([128, 0, 576, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 32],"float32"),Tensor([128, 3, 0, 32],"float32"),), axis=-1, )
paddle.stack(x=tuple(Tensor([128, 3, 576, 32],"float32"),Tensor([128, 3, 576, 0],"float32"),), axis=-1, )
paddle.std(Tensor([0, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([0, 32],"float32"), )
paddle.std(Tensor([0, 5],"float32"), )
paddle.std(Tensor([0, 9],"float32"), axis=1, )
paddle.std(Tensor([0],"float32"), )
paddle.std(Tensor([1, 0, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([3, 0],"float32"), )
paddle.std(Tensor([32, 0],"float32"), )
paddle.std(Tensor([6, 0],"float32"), axis=1, )
paddle.std(x=Tensor([0, 3, 3],"float64"), )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=0, )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([0, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.std(x=Tensor([0, 3],"float32"), )
paddle.std(x=Tensor([0, 3],"float64"), )
paddle.std(x=Tensor([2, 0],"float32"), )
paddle.std(x=Tensor([2, 0],"float64"), )
paddle.std(x=Tensor([3, 0, 3],"float64"), )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=0, )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([3, 0, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.std(x=Tensor([3, 3, 0],"float64"), )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=0, )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([3, 3, 0],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.sum(Tensor([0, 1, 1],"float32"), 1, )
paddle.sum(Tensor([0, 1, 1],"float32"), None, None, False, None, )
paddle.sum(Tensor([0, 1, 1],"float64"), None, None, False, None, )
paddle.sum(Tensor([0, 1, 2],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 1, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 1, 45],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 1],"float32"), )
paddle.sum(Tensor([0, 1],"float32"), axis=-1, )
paddle.sum(Tensor([0, 1],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 1],"int32"), )
paddle.sum(Tensor([0, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([0, 10, 4],"float32"), axis=2, )
paddle.sum(Tensor([0, 10, 5],"float64"), name=None, )
paddle.sum(Tensor([0, 10],"float32"), 1, )
paddle.sum(Tensor([0, 10],"float32"), axis=list[], keepdim=False, )
paddle.sum(Tensor([0, 10],"float32"), name=None, )
paddle.sum(Tensor([0, 100],"float32"), 1, )
paddle.sum(Tensor([0, 1000],"float32"), axis=1, )
paddle.sum(Tensor([0, 1024, 1],"float32"), )
paddle.sum(Tensor([0, 1024, 1024],"int64"), )
paddle.sum(Tensor([0, 1024, 8],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 1024, 8],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 128, 32, 32],"float32"), 1, )
paddle.sum(Tensor([0, 128, 32, 32],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([0, 128],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 13, 4],"float32"), axis=2, )
paddle.sum(Tensor([0, 14, 5, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 14, 5, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 15, 20, 100],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([0, 16, 3, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 16],"int64"), axis=0, )
paddle.sum(Tensor([0, 18],"float32"), 0, )
paddle.sum(Tensor([0, 196608],"float32"), axis=1, )
paddle.sum(Tensor([0, 2, 1, 512, 4, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 2, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 2, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 4, 16, 16],"float32"), axis=2, )
paddle.sum(Tensor([0, 2, 4],"float32"), axis=1, )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([0, 2, 7, 32],"float32"), axis=-2, )
paddle.sum(Tensor([0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 2],"float32"), name=None, )
paddle.sum(Tensor([0, 20, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 20, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 200, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([0, 200, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([0, 200, 40],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([0, 25, 1, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 25, 21504, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 256, 16, 16],"float32"), 1, )
paddle.sum(Tensor([0, 256, 16, 16],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([0, 256],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 256],"float64"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 26, 512, 1, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([0, 26, 512, 1, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([0, 28, 28, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([0, 3, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([0, 3, 2, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([0, 3, 2, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([0, 3, 2],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([0, 3, 20, 20],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([0, 3, 3, 2],"float64"), )
paddle.sum(Tensor([0, 3, 3, 3, 3],"float32"), )
paddle.sum(Tensor([0, 3, 3, 4],"float64"), name=None, )
paddle.sum(Tensor([0, 3, 3, 5],"float32"), )
paddle.sum(Tensor([0, 3, 3],"float32"), 2, )
paddle.sum(Tensor([0, 3, 3],"float64"), list[0,1,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 3],"float64"), tuple(0,1,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 3],"float64"), tuple(0,1,), keepdim=True, name=None, )
paddle.sum(Tensor([0, 3, 4, 1, 1, 1],"int64"), )
paddle.sum(Tensor([0, 3, 4, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([0, 3, 4],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([0, 3],"bool"), axis=1, keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=list[0,], keepdim=True, )
paddle.sum(Tensor([0, 3],"bool"), axis=list[1,], keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([0, 3],"bool"), axis=tuple(0,1,), keepdim=False, )
paddle.sum(Tensor([0, 3],"float32"), axis=0, )
paddle.sum(Tensor([0, 3],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 3],"float64"), axis=list[1,], )
paddle.sum(Tensor([0, 3],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 300, 20, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([0, 32, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 32, 128],"float32"), axis=0, )
paddle.sum(Tensor([0, 32, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 32, 32],"float32"), axis=0, )
paddle.sum(Tensor([0, 4, 2, 2],"float32"), axis=-2, )
paddle.sum(Tensor([0, 4, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 4, 4, 5, 7],"int64"), )
paddle.sum(Tensor([0, 4],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([0, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([0, 5],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0, 5],"float32"), axis=None, )
paddle.sum(Tensor([0, 5],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0, 5],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([0, 784],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 8, 14, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([0, 8, 16],"float32"), axis=1, )
paddle.sum(Tensor([0, 81, 94, 311],"float32"), axis=1, )
paddle.sum(Tensor([0, 9],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([0, 93431],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 96, 1],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([0],"bool"), axis=list[0,], keepdim=False, )
paddle.sum(Tensor([0],"float16"), axis=0, keepdim=True, )
paddle.sum(Tensor([0],"float32"), )
paddle.sum(Tensor([0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"float32"), axis=0, )
paddle.sum(Tensor([0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0],"float32"), axis=-1, )
paddle.sum(Tensor([0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0],"float32"), name=None, )
paddle.sum(Tensor([0],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"float64"), name=None, )
paddle.sum(Tensor([0],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"int64"), )
paddle.sum(Tensor([0],"int64"), axis=list[0,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 1, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0, 1],"float32"), )
paddle.sum(Tensor([1, 0, 1],"float32"), 1, )
paddle.sum(Tensor([1, 0, 1024],"int64"), )
paddle.sum(Tensor([1, 0, 16, 16],"float32"), 1, )
paddle.sum(Tensor([1, 0, 16, 16],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0, 21504, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0, 3, 5],"float32"), )
paddle.sum(Tensor([1, 0, 32, 32],"float32"), 1, )
paddle.sum(Tensor([1, 0, 32, 32],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 0, 36],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 45],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 0, 5, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 5, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 0],"float32"), )
paddle.sum(Tensor([1, 0],"float32"), 1, )
paddle.sum(Tensor([1, 0],"float32"), axis=0, )
paddle.sum(Tensor([1, 0],"float32"), axis=1, )
paddle.sum(Tensor([1, 0],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([1, 0],"float64"), axis=list[1,], )
paddle.sum(Tensor([1, 0],"int32"), )
paddle.sum(Tensor([1, 0],"int64"), axis=0, )
paddle.sum(Tensor([1, 1, 0],"float32"), 1, )
paddle.sum(Tensor([1, 1, 0],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([1, 1024, 0],"float32"), )
paddle.sum(Tensor([1, 1024, 0],"int64"), )
paddle.sum(Tensor([1, 128, 0, 32],"float32"), 1, )
paddle.sum(Tensor([1, 128, 0, 32],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 128, 32, 0],"float32"), 1, )
paddle.sum(Tensor([1, 128, 32, 0],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 14, 0, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 14, 0, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 14, 5, 0],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 14, 5, 0],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 2, 0],"float32"), axis=-1, )
paddle.sum(Tensor([1, 25, 0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 25, 1, 0],"float32"), axis=-1, )
paddle.sum(Tensor([1, 25, 21504, 0],"float32"), axis=-1, )
paddle.sum(Tensor([1, 256, 0, 16],"float32"), 1, )
paddle.sum(Tensor([1, 256, 0, 16],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 256, 16, 0],"float32"), 1, )
paddle.sum(Tensor([1, 256, 16, 0],"float32"), 1, keepdim=True, )
paddle.sum(Tensor([1, 3, 0, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 5],"float32"), )
paddle.sum(Tensor([1, 3, 3, 0],"float32"), )
paddle.sum(Tensor([1, 3, 4, 0],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([10, 0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([10, 0, 5],"float64"), name=None, )
paddle.sum(Tensor([10, 0],"float32"), axis=list[], keepdim=False, )
paddle.sum(Tensor([10, 0],"float32"), name=None, )
paddle.sum(Tensor([10, 10, 0],"float64"), name=None, )
paddle.sum(Tensor([10, 20, 0],"float32"), axis=-1, )
paddle.sum(Tensor([100, 0, 1],"float32"), None, None, False, None, )
paddle.sum(Tensor([100, 0, 1],"float64"), None, None, False, None, )
paddle.sum(Tensor([100, 0, 304],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 0, 312],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([100, 1, 0],"float32"), None, None, False, None, )
paddle.sum(Tensor([100, 1, 0],"float64"), None, None, False, None, )
paddle.sum(Tensor([100, 200, 0],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([1000, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 0, 3],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 0, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 2, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 2, 0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([100000, 0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 0, 8],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 0, 8],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 1024, 0],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 1024, 0],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([104, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([12, 0, 4],"float32"), axis=2, )
paddle.sum(Tensor([12, 10, 0],"float32"), axis=2, )
paddle.sum(Tensor([12, 13, 0],"float32"), axis=2, )
paddle.sum(Tensor([128, 0, 32],"float32"), axis=0, )
paddle.sum(Tensor([128, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([128, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([128, 32, 0],"float32"), axis=0, )
paddle.sum(Tensor([12988, 0, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([12988, 32, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([13, 0, 1],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([13, 0, 2, 2],"float32"), axis=-2, )
paddle.sum(Tensor([13, 0, 3],"float32"), 2, )
paddle.sum(Tensor([13, 0, 4, 16, 16],"float32"), axis=2, )
paddle.sum(Tensor([13, 0, 7, 32],"float32"), axis=-2, )
paddle.sum(Tensor([13, 2, 0, 16, 16],"float32"), axis=2, )
paddle.sum(Tensor([13, 2, 0, 32],"float32"), axis=-2, )
paddle.sum(Tensor([13, 2, 4, 0, 16],"float32"), axis=2, )
paddle.sum(Tensor([13, 2, 4, 16, 0],"float32"), axis=2, )
paddle.sum(Tensor([13, 2, 7, 0],"float32"), axis=-2, )
paddle.sum(Tensor([13, 3, 0],"float32"), 2, )
paddle.sum(Tensor([13, 4, 0, 2],"float32"), axis=-2, )
paddle.sum(Tensor([13, 4, 2, 0],"float32"), axis=-2, )
paddle.sum(Tensor([13, 96, 0],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([16, 0, 1, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 0, 1],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([16, 0, 128],"float32"), axis=0, )
paddle.sum(Tensor([16, 0, 3, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 0],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 0],"float64"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 16, 0, 3],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 16, 3, 0],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 32, 0, 1],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 32, 0],"float32"), axis=0, )
paddle.sum(Tensor([16, 32, 1, 0],"float32"), list[1,2,3,], keepdim=True, name=None, )
paddle.sum(Tensor([16, 96, 0],"float32"), tuple(1,), keepdim=True, name=None, )
paddle.sum(Tensor([170628, 0, 3],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([170628, 20, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([18, 0],"float32"), 0, )
paddle.sum(Tensor([2, 0, 10],"float32"), name=None, )
paddle.sum(Tensor([2, 0, 16],"float32"), axis=1, )
paddle.sum(Tensor([2, 0, 2],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 0, 3, 2],"float64"), )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([2, 0, 4],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([2, 0],"bool"), axis=1, keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=list[0,], keepdim=True, )
paddle.sum(Tensor([2, 0],"bool"), axis=list[1,], keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 0],"bool"), axis=tuple(0,1,), keepdim=False, )
paddle.sum(Tensor([2, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 0],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 0],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 1, 0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 10, 0],"float32"), name=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 0, 2],"float64"), )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([2, 3, 0],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([2, 3, 3, 0],"float64"), )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"int64"), )
paddle.sum(Tensor([2, 8, 0],"float32"), axis=1, )
paddle.sum(Tensor([256, 0, 28, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([256, 28, 0, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([256, 28, 28, 0],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([3, 0, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([3, 0, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 0, 3, 3, 3],"float32"), )
paddle.sum(Tensor([3, 0, 3],"float64"), list[0,1,], keepdim=False, name=None, )
paddle.sum(Tensor([3, 0, 3],"float64"), tuple(0,1,), keepdim=False, name=None, )
paddle.sum(Tensor([3, 0, 3],"float64"), tuple(0,1,), keepdim=True, name=None, )
paddle.sum(Tensor([3, 0, 4, 5, 7],"int64"), )
paddle.sum(Tensor([3, 0, 4],"float32"), axis=1, )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([3, 0],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([3, 0],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([3, 0],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 0],"float32"), axis=None, )
paddle.sum(Tensor([3, 0],"float64"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 0],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([3, 0],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=1, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([3, 3, 0, 10],"float32"), name=None, )
paddle.sum(Tensor([3, 3, 0, 3, 3],"float32"), )
paddle.sum(Tensor([3, 3, 0],"float64"), list[0,1,], keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 0],"float64"), tuple(0,1,), keepdim=False, name=None, )
paddle.sum(Tensor([3, 3, 0],"float64"), tuple(0,1,), keepdim=True, name=None, )
paddle.sum(Tensor([3, 3, 10, 0],"float32"), name=None, )
paddle.sum(Tensor([3, 3, 3, 0, 3],"float32"), )
paddle.sum(Tensor([3, 3, 3, 3, 0],"float32"), )
paddle.sum(Tensor([3, 4, 0, 5, 7],"int64"), )
paddle.sum(Tensor([3, 4, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 4, 0, 7],"int64"), )
paddle.sum(Tensor([3, 4, 4, 5, 0],"int64"), )
paddle.sum(Tensor([30, 0, 40],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([30, 200, 0],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([4, 0, 1, 512, 4, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 0, 2, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 0, 2, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 0, 2],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([4, 0, 3, 4],"float64"), name=None, )
paddle.sum(Tensor([4, 0, 94, 311],"float32"), axis=1, )
paddle.sum(Tensor([4, 0],"float64"), axis=list[1,], )
paddle.sum(Tensor([4, 2, 0, 512, 4, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 2, 1, 0, 4, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 2, 1, 512, 0, 4],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 2, 1, 512, 4, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([4, 3, 0, 4],"float64"), name=None, )
paddle.sum(Tensor([4, 3, 0, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 3, 0, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 3, 0],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([4, 3, 2, 0],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 3, 2, 0],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 3, 3, 0],"float64"), name=None, )
paddle.sum(Tensor([4, 81, 0, 311],"float32"), axis=1, )
paddle.sum(Tensor([4, 81, 94, 0],"float32"), axis=1, )
paddle.sum(Tensor([400, 0, 20, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([400, 300, 0, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([400, 300, 20, 0],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([500, 0, 20, 20],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([500, 3, 0, 20],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([500, 3, 20, 0],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 0, 14, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 8, 0, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 8, 14, 0],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([6, 0, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([64, 0, 512, 1, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 0, 512, 1, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 0, 1, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 0, 1, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 512, 0, 40],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 512, 0, 40],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 512, 1, 0],"float16"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([64, 26, 512, 1, 0],"float32"), tuple(3,4,), keepdim=False, )
paddle.sum(Tensor([8, 0, 4, 1, 1, 1],"int64"), )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 1, 1, 1],"int64"), )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 1, 1],"int64"), )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 1, 0, 1],"int64"), )
paddle.sum(Tensor([8, 3, 4, 1, 1, 0],"int64"), )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([96, 0, 20, 100],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([96, 15, 0, 100],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([96, 15, 20, 0],"float32"), axis=tuple(0,1,2,), )
paddle.sum(x=Tensor([0, 2],"float32"), )
paddle.sum(x=Tensor([0, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([0, 2],"float64"), )
paddle.sum(x=Tensor([0, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([0, 2],"float64"), axis=1, )
paddle.sum(x=Tensor([0, 2],"float64"), axis=-1, )
paddle.sum(x=Tensor([0, 2],"float64"), axis=list[0,1,], )
paddle.sum(x=Tensor([2, 0],"float32"), )
paddle.sum(x=Tensor([2, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([2, 0],"float64"), )
paddle.sum(x=Tensor([2, 0],"float64"), axis=0, keepdim=True, )
paddle.sum(x=Tensor([2, 0],"float64"), axis=1, )
paddle.sum(x=Tensor([2, 0],"float64"), axis=-1, )
paddle.sum(x=Tensor([2, 0],"float64"), axis=list[0,1,], )
paddle.t(Tensor([0, 20],"float32"), )
paddle.t(Tensor([0, 5],"float64"), )
paddle.t(Tensor([0],"float64"), )
paddle.t(Tensor([1, 0],"float64"), )
paddle.t(Tensor([10, 0],"float32"), )
paddle.take_along_axis(Tensor([0, 114, 64],"bfloat16"), axis=1, indices=Tensor([0, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([0, 114, 64],"bfloat16"), axis=1, indices=Tensor([2, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([0, 302, 768],"bfloat16"), axis=1, indices=Tensor([0, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([0, 302, 768],"bfloat16"), axis=1, indices=Tensor([2, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([0, 4, 7, 14],"float32"), axis=-1, indices=Tensor([0, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([0, 4, 7, 14],"float32"), axis=-1, indices=Tensor([13, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([0, 4, 7, 14],"float32"), axis=-1, indices=Tensor([52, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 0, 7, 14],"float32"), axis=-1, indices=Tensor([13, 0, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 0, 7, 14],"float32"), axis=-1, indices=Tensor([13, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 0, 14],"float32"), axis=-1, indices=Tensor([13, 4, 0, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 0, 14],"float32"), axis=-1, indices=Tensor([13, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 0],"float32"), axis=-1, indices=Tensor([13, 4, 7, 0],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 0],"float32"), axis=-1, indices=Tensor([13, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 14],"float32"), axis=-1, indices=Tensor([0, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 14],"float32"), axis=-1, indices=Tensor([13, 0, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 14],"float32"), axis=-1, indices=Tensor([13, 4, 0, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 4, 7, 14],"float32"), axis=-1, indices=Tensor([13, 4, 7, 0],"int64"), )
paddle.take_along_axis(Tensor([2, 0, 64],"bfloat16"), axis=1, indices=Tensor([2, 0, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 0, 64],"bfloat16"), axis=1, indices=Tensor([2, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 0, 768],"bfloat16"), axis=1, indices=Tensor([2, 0, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 0, 768],"bfloat16"), axis=1, indices=Tensor([2, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 0],"bfloat16"), axis=1, indices=Tensor([2, 14, 0],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 0],"bfloat16"), axis=1, indices=Tensor([2, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 64],"bfloat16"), axis=1, indices=Tensor([0, 14, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 64],"bfloat16"), axis=1, indices=Tensor([2, 0, 64],"int64"), )
paddle.take_along_axis(Tensor([2, 114, 64],"bfloat16"), axis=1, indices=Tensor([2, 14, 0],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 0],"bfloat16"), axis=1, indices=Tensor([2, 14, 0],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 0],"bfloat16"), axis=1, indices=Tensor([2, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 768],"bfloat16"), axis=1, indices=Tensor([0, 14, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 768],"bfloat16"), axis=1, indices=Tensor([2, 0, 768],"int64"), )
paddle.take_along_axis(Tensor([2, 302, 768],"bfloat16"), axis=1, indices=Tensor([2, 14, 0],"int64"), )
paddle.take_along_axis(Tensor([52, 0, 7, 14],"float32"), axis=-1, indices=Tensor([52, 0, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 0, 7, 14],"float32"), axis=-1, indices=Tensor([52, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 0, 14],"float32"), axis=-1, indices=Tensor([52, 4, 0, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 0, 14],"float32"), axis=-1, indices=Tensor([52, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 0],"float32"), axis=-1, indices=Tensor([52, 4, 7, 0],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 0],"float32"), axis=-1, indices=Tensor([52, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 14],"float32"), axis=-1, indices=Tensor([0, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 14],"float32"), axis=-1, indices=Tensor([52, 0, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 14],"float32"), axis=-1, indices=Tensor([52, 4, 0, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 4, 7, 14],"float32"), axis=-1, indices=Tensor([52, 4, 7, 0],"int64"), )
paddle.tan(Tensor([0, 1, 2, 2],"float32"), )
paddle.tan(Tensor([0, 1, 2],"float32"), )
paddle.tan(Tensor([0, 1],"float32"), )
paddle.tan(Tensor([0, 1],"float64"), )
paddle.tan(Tensor([0, 2, 3, 1],"float32"), )
paddle.tan(Tensor([0, 20, 1],"float32"), )
paddle.tan(Tensor([0],"float32"), )
paddle.tan(Tensor([10, 0, 1],"float32"), )
paddle.tan(Tensor([10, 20, 0],"float32"), )
paddle.tan(Tensor([100, 0, 2, 2],"float32"), )
paddle.tan(Tensor([100, 0, 2],"float32"), )
paddle.tan(Tensor([100, 0, 3, 1],"float32"), )
paddle.tan(Tensor([100, 0],"float32"), )
paddle.tan(Tensor([100, 0],"float64"), )
paddle.tan(Tensor([100, 1, 0, 2],"float32"), )
paddle.tan(Tensor([100, 1, 0],"float32"), )
paddle.tan(Tensor([100, 1, 2, 0],"float32"), )
paddle.tan(Tensor([100, 2, 0, 1],"float32"), )
paddle.tan(Tensor([100, 2, 3, 0],"float32"), )
paddle.tan(x=Tensor([0, 3, 3],"float32"), )
paddle.tan(x=Tensor([0, 3, 3],"float64"), )
paddle.tan(x=Tensor([3, 0, 3],"float32"), )
paddle.tan(x=Tensor([3, 0, 3],"float64"), )
paddle.tan(x=Tensor([3, 3, 0],"float32"), )
paddle.tan(x=Tensor([3, 3, 0],"float64"), )
paddle.Tensor.amax(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amax(Tensor([0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([0],"float64"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 0, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 0, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 2, 0, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 4, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([0, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([0],"float64"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([2, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 0, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 0, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 0, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 0, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 0, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 0, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 0, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 4, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 5, 0],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.argmax(Tensor([0, 1, 10285],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 1, 24276],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([0, 10],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([0, 100, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 101, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([0, 157920, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 3, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([0, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([0, 4],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 7],"int32"), -1, )
paddle.Tensor.argmax(Tensor([0, 77],"int64"), axis=-1, )
paddle.Tensor.argmax(Tensor([0, 90, 22400],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([1, 0, 10285],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([1, 0, 24276],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([1, 0],"int64"), axis=-1, )
paddle.Tensor.argmax(Tensor([1, 1, 0],"float32"), axis=-2, )
paddle.Tensor.argmax(Tensor([13, 0, 3],"float32"), 1, )
paddle.Tensor.argmax(Tensor([13, 0],"float32"), 1, )
paddle.Tensor.argmax(Tensor([13, 0],"int32"), -1, )
paddle.Tensor.argmax(Tensor([13, 3, 0],"float32"), 1, )
paddle.Tensor.argmax(Tensor([2, 0],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([30, 0, 8000],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 100, 0],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([30, 101, 0],"float32"), axis=2, )
paddle.Tensor.argmax(Tensor([4, 0, 2],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([4, 0, 22400],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([4, 0],"float32"), axis=1, )
paddle.Tensor.argmax(Tensor([4, 157920, 0],"float32"), axis=-1, )
paddle.Tensor.argmax(Tensor([4, 90, 0],"float32"), axis=1, )
paddle.Tensor.argsort(Tensor([0, 22400],"float32"), axis=1, descending=True, )
paddle.Tensor.argsort(Tensor([0, 22400],"int64"), axis=1, )
paddle.Tensor.argsort(Tensor([0],"float32"), )
paddle.Tensor.argsort(Tensor([4, 0],"float32"), axis=1, descending=True, )
paddle.Tensor.argsort(Tensor([4, 0],"int64"), axis=1, )
paddle.Tensor.bmm(Tensor([0, 108472, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 108472, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 1156, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([0, 1156, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 0, 3],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 0, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 0],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 0],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 3],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 0],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 0],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 3],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.Tensor.broadcast_to(Tensor([0],"float32"), list[3,2,], )
paddle.Tensor.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([0, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([0, 4],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 0],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 0, 4],"float64"), )
paddle.Tensor.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 4, 0],"float64"), )
paddle.Tensor.chunk(Tensor([0, 1, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 10164, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 10285, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 1, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 10, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 10, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 100, 4],"float32"), 4, )
paddle.Tensor.chunk(Tensor([0, 128, 10],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 128, 1007],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 160, 16, 12],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 160, 8, 6],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 196, 768],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 300, 1],"float32"), 1, )
paddle.Tensor.chunk(Tensor([0, 300, 101],"float32"), 16, )
paddle.Tensor.chunk(Tensor([0, 300, 16],"float32"), 2, )
paddle.Tensor.chunk(Tensor([0, 300, 2],"float32"), 2, )
paddle.Tensor.chunk(Tensor([0, 300, 4],"float32"), 4, )
paddle.Tensor.chunk(Tensor([0, 300, 5],"float32"), 1, )
paddle.Tensor.chunk(Tensor([0, 300, 8],"float32"), 8, )
paddle.Tensor.chunk(Tensor([0, 3136, 192],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([0, 4],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([0, 8, 32],"float32"), 8, axis=1, )
paddle.Tensor.chunk(Tensor([1, 0, 1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 1],"float32"), 1, )
paddle.Tensor.chunk(Tensor([1, 0, 10164, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 10285, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 2048],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 0, 5],"float32"), 1, )
paddle.Tensor.chunk(Tensor([1, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([1, 1, 0, 2],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 10164, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 1, 10285, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 10, 0, 4],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 10, 0],"float32"), 2, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 10, 1, 0],"float32"), 4, axis=-1, )
paddle.Tensor.chunk(Tensor([1, 300, 0],"float32"), 1, )
paddle.Tensor.chunk(Tensor([128, 0, 192],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 0, 768],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 196, 0],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([128, 3136, 0],"float32"), 3, axis=-1, )
paddle.Tensor.chunk(Tensor([13, 0, 10],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 0, 1007],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 0, 32],"float32"), 8, axis=1, )
paddle.Tensor.chunk(Tensor([13, 128, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([13, 8, 0],"float32"), 8, axis=1, )
paddle.Tensor.chunk(Tensor([16, 0, 101],"float32"), 16, )
paddle.Tensor.chunk(Tensor([16, 0, 16, 12],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 0, 8, 6],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 0, 12],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 0, 6],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 16, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 160, 8, 0],"float32"), 2, axis=1, )
paddle.Tensor.chunk(Tensor([16, 300, 0],"float32"), 16, )
paddle.Tensor.chunk(Tensor([2, 0, 16],"float32"), 2, )
paddle.Tensor.chunk(Tensor([2, 0, 2],"float32"), 2, )
paddle.Tensor.chunk(Tensor([2, 300, 0],"float32"), 2, )
paddle.Tensor.chunk(Tensor([4, 0, 4],"float32"), 4, )
paddle.Tensor.chunk(Tensor([4, 100, 0],"float32"), 4, )
paddle.Tensor.chunk(Tensor([4, 300, 0],"float32"), 4, )
paddle.Tensor.chunk(Tensor([8, 0, 8],"float32"), 8, )
paddle.Tensor.chunk(Tensor([8, 300, 0],"float32"), 8, )
paddle.Tensor.clip(Tensor([0, 1, 1, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 1, 10285, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 1, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 1, 2],"float32"), max=0, )
paddle.Tensor.clip(Tensor([0, 1, 28, 28],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([0, 1, 3, 3],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([0, 1, 32, 32],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([0, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 100, 4],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([0, 100, 4],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([0, 1001, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([0, 1002, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([0, 10164, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 10164, 4],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([0, 10164, 4],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([0, 11, 4],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([0, 11, 4],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([0, 11, 4],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([0, 1100, 4],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([0, 11109, 4],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([0, 120],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([0, 120],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([0, 16, 12, 12],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([0, 18, 4],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([0, 2, 1],"float32"), min=1e-07, )
paddle.Tensor.clip(Tensor([0, 2, 300, 2],"float16"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([0, 2, 300, 2],"float16"), min=1e-05, )
paddle.Tensor.clip(Tensor([0, 2, 300, 2],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([0, 2, 300, 2],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([0, 2],"float32"), max=0, )
paddle.Tensor.clip(Tensor([0, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([0, 2],"int64"), 1, 2, )
paddle.Tensor.clip(Tensor([0, 20, 1],"float32"), 0.6, 1.5, )
paddle.Tensor.clip(Tensor([0, 20],"float64"), max=0, )
paddle.Tensor.clip(Tensor([0, 20],"float64"), min=0, )
paddle.Tensor.clip(Tensor([0, 21504, 4],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([0, 24276, 4],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([0, 28, 28],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([0, 3, 10, 10, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 3, 20, 20, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([0, 3, 8, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([0, 3],"int32"), 2, )
paddle.Tensor.clip(Tensor([0, 300, 4],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([0, 33],"float32"), max=1, )
paddle.Tensor.clip(Tensor([0, 33],"float32"), min=1e-08, )
paddle.Tensor.clip(Tensor([0, 576],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([0, 6, 5, 5],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([0, 6],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([0, 7],"int32"), 2, )
paddle.Tensor.clip(Tensor([0, 7],"int64"), 3, )
paddle.Tensor.clip(Tensor([0, 8, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([0, 84],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([0, 8400, 4],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([0],"float32"), 0, )
paddle.Tensor.clip(Tensor([0],"float32"), 0, 4.605170185988092, )
paddle.Tensor.clip(Tensor([0],"float32"), 0, 89.99, )
paddle.Tensor.clip(Tensor([0],"float32"), -100.0, 100.0, )
paddle.Tensor.clip(Tensor([0],"float32"), max=0, )
paddle.Tensor.clip(Tensor([0],"float32"), min=0, )
paddle.Tensor.clip(Tensor([0],"float32"), min=0, max=15.9, )
paddle.Tensor.clip(Tensor([0],"float32"), min=0, max=6.9, )
paddle.Tensor.clip(Tensor([0],"float32"), min=0.0001, )
paddle.Tensor.clip(Tensor([0],"float64"), max=0, )
paddle.Tensor.clip(Tensor([0],"float64"), min=0, )
paddle.Tensor.clip(Tensor([0],"int32"), 0, 7, )
paddle.Tensor.clip(Tensor([0],"int32"), 0, 8, )
paddle.Tensor.clip(Tensor([0],"int64"), 0, 512, )
paddle.Tensor.clip(Tensor([1, 0, 1, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 0, 10285, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 0, 12, 12],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 0, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 0, 2],"float32"), min=0, )
paddle.Tensor.clip(Tensor([1, 0, 300, 2],"float16"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 0, 300, 2],"float16"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 0, 300, 2],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 0, 300, 2],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 0, 32, 32],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([1, 0, 4],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 0],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 1, 0, 2],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 1, 0, 32],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 1, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 1, 1, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 1, 10285, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 1, 32, 0],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 100, 0],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 100, 0],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 1001, 0],"float32"), min=0, )
paddle.Tensor.clip(Tensor([1, 1002, 0],"float32"), min=0, )
paddle.Tensor.clip(Tensor([1, 10164, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([1, 11, 0],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([1, 11, 0],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 11, 0],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 1100, 0],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([1, 16, 0, 12],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 16, 12, 0],"float32"), -57344, 57344, )
paddle.Tensor.clip(Tensor([1, 18, 0],"float32"), min=0.001, )
paddle.Tensor.clip(Tensor([1, 2, 0, 2],"float16"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 2, 0, 2],"float16"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 2, 0, 2],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 2, 0, 2],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 2, 300, 0],"float16"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 2, 300, 0],"float16"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 2, 300, 0],"float32"), min=0.0, max=1.0, )
paddle.Tensor.clip(Tensor([1, 2, 300, 0],"float32"), min=1e-05, )
paddle.Tensor.clip(Tensor([1, 21504, 0],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([1, 24276, 0],"float32"), -2, 18.99, )
paddle.Tensor.clip(Tensor([1, 300, 0],"float32"), min=0, max=1, )
paddle.Tensor.clip(Tensor([1, 8400, 0],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([10, 0, 1],"float32"), 0.6, 1.5, )
paddle.Tensor.clip(Tensor([10, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([10, 0],"float64"), max=0, )
paddle.Tensor.clip(Tensor([10, 0],"float64"), min=0, )
paddle.Tensor.clip(Tensor([10, 20, 0],"float32"), 0.6, 1.5, )
paddle.Tensor.clip(Tensor([12, 0, 10, 10, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 0, 20, 20, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 0],"int64"), 3, )
paddle.Tensor.clip(Tensor([12, 3, 0, 10, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 0, 20, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 10, 0, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 10, 10, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 20, 0, 1],"float32"), 0, )
paddle.Tensor.clip(Tensor([12, 3, 20, 20, 0],"float32"), 0, )
paddle.Tensor.clip(Tensor([120, 0],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([13, 0, 1],"float32"), min=1e-07, )
paddle.Tensor.clip(Tensor([13, 0],"int32"), 2, )
paddle.Tensor.clip(Tensor([13, 2, 0],"float32"), min=1e-07, )
paddle.Tensor.clip(Tensor([16, 0, 4],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([16, 0, 5, 5],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([16, 0],"float32"), max=1, )
paddle.Tensor.clip(Tensor([16, 0],"float32"), min=1e-08, )
paddle.Tensor.clip(Tensor([16, 10164, 0],"float32"), 0, 15.99, )
paddle.Tensor.clip(Tensor([16, 6, 0, 5],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([16, 6, 5, 0],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([2, 0, 2],"float32"), max=0, )
paddle.Tensor.clip(Tensor([2, 0, 4],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([2, 0, 8, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([2, 0],"float32"), max=0, )
paddle.Tensor.clip(Tensor([2, 0],"float32"), min=0, )
paddle.Tensor.clip(Tensor([2, 0],"int64"), 1, 2, )
paddle.Tensor.clip(Tensor([2, 1, 0],"float32"), max=0, )
paddle.Tensor.clip(Tensor([2, 10164, 0],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([2, 11109, 0],"float32"), -2, 6.99, )
paddle.Tensor.clip(Tensor([2, 3, 0, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([2, 3, 8, 0],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([23, 0],"float32"), max=1, )
paddle.Tensor.clip(Tensor([23, 0],"float32"), min=1e-08, )
paddle.Tensor.clip(Tensor([3, 0, 28],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([3, 0, 8],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([3, 28, 0],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([3, 8, 0],"float32"), 0, 1.0, )
paddle.Tensor.clip(Tensor([576, 0],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([6, 0, 3, 3],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([6, 1, 0, 3],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([6, 1, 3, 0],"float32"), -448, 448, )
paddle.Tensor.clip(Tensor([64, 0, 28, 28],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([64, 1, 0, 28],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([64, 1, 28, 0],"float32"), -128, 127, )
paddle.Tensor.clip(Tensor([9, 0],"float32"), -128, 127, )
paddle.Tensor.clone(Tensor([0, 1],"int64"), )
paddle.Tensor.clone(Tensor([0, 100, 256],"float32"), )
paddle.Tensor.clone(Tensor([0, 100, 4],"float32"), )
paddle.Tensor.clone(Tensor([0, 1024, 48, 72],"float32"), )
paddle.Tensor.clone(Tensor([0, 12, 1, 64],"float32"), )
paddle.Tensor.clone(Tensor([0, 19],"int64"), )
paddle.Tensor.clone(Tensor([0, 3, 96, 96, 1],"float32"), )
paddle.Tensor.clone(Tensor([0],"float32"), )
paddle.Tensor.clone(Tensor([0],"int32"), )
paddle.Tensor.clone(Tensor([1, 0, 1, 64],"float32"), )
paddle.Tensor.clone(Tensor([1, 0, 256],"float32"), )
paddle.Tensor.clone(Tensor([1, 0, 4],"float32"), )
paddle.Tensor.clone(Tensor([1, 0, 48, 72],"float32"), )
paddle.Tensor.clone(Tensor([1, 0, 96, 96, 1],"float32"), )
paddle.Tensor.clone(Tensor([1, 0],"int64"), )
paddle.Tensor.clone(Tensor([1, 100, 0],"float32"), )
paddle.Tensor.clone(Tensor([1, 1024, 0, 72],"float32"), )
paddle.Tensor.clone(Tensor([1, 1024, 48, 0],"float32"), )
paddle.Tensor.clone(Tensor([1, 12, 0, 64],"float32"), )
paddle.Tensor.clone(Tensor([1, 12, 1, 0],"float32"), )
paddle.Tensor.clone(Tensor([1, 3, 0, 96, 1],"float32"), )
paddle.Tensor.clone(Tensor([1, 3, 96, 0, 1],"float32"), )
paddle.Tensor.clone(Tensor([1, 3, 96, 96, 0],"float32"), )
paddle.Tensor.cumsum(Tensor([0, 1],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([0, 10, 8],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([0, 10, 8],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([0, 10],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([0, 100],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([0, 12, 9],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([0, 12, 9],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([0, 14],"int32"), -1, )
paddle.Tensor.cumsum(Tensor([0, 2],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([0, 4, 2],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([0, 4, 2],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([0, 4, 2],"int64"), axis=2, )
paddle.Tensor.cumsum(Tensor([0, 4],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([0],"float32"), -1, )
paddle.Tensor.cumsum(Tensor([0],"float64"), -1, )
paddle.Tensor.cumsum(Tensor([0],"int64"), 0, )
paddle.Tensor.cumsum(Tensor([1, 0, 8],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 0, 8],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 0, 9],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 0, 9],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 0],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 10, 0],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 10, 0],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 12, 0],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 12, 0],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([13, 0],"int32"), -1, )
paddle.Tensor.cumsum(Tensor([2, 0],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([3, 0, 2],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([3, 0, 2],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([3, 0, 2],"int64"), axis=2, )
paddle.Tensor.cumsum(Tensor([3, 0],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([3, 0],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([3, 4, 0],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([3, 4, 0],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([3, 4, 0],"int64"), axis=2, )
paddle.Tensor.cumsum(Tensor([5, 0],"int64"), axis=0, )
paddle.Tensor.diag_embed(Tensor([0, 1, 2],"float32"), )
paddle.Tensor.diag_embed(Tensor([1, 0, 2],"float32"), )
paddle.Tensor.diag_embed(Tensor([1, 1, 0],"float32"), )
paddle.Tensor.diagonal(Tensor([0, 2],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([0, 3],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([2, 0],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([3, 0],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diff(Tensor([0],"float32"), )
paddle.Tensor.diff(Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4, 4, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([0, 4, 4, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4],"float64"), axis=0, prepend=Tensor([0, 4],"float64"), append=Tensor([0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float32"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), prepend=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), prepend=Tensor([0],"float64"), append=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), prepend=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([0],"float64"), prepend=Tensor([4],"float64"), append=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 0],"float64"), axis=0, prepend=Tensor([4, 0],"float64"), append=Tensor([4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 0],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([0, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 0],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([0],"float64"), append=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), append=Tensor([0],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 0, 4, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 0, 4, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 0, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 0, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 4, 0, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 0],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 0],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 0],"float64"), axis=-2, )
paddle.Tensor.dot(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.Tensor.dot(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.Tensor.dot(Tensor([0],"float32"), Tensor([2],"float32"), )
paddle.Tensor.dot(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.Tensor.dot(Tensor([2],"float32"), Tensor([0],"float32"), )
paddle.Tensor.equal(Tensor([0, 10],"int64"), 3, )
paddle.Tensor.equal(Tensor([0, 128],"int64"), Tensor([0, 128],"int64"), )
paddle.Tensor.equal(Tensor([0, 128],"int64"), Tensor([128, 128],"int64"), )
paddle.Tensor.equal(Tensor([128, 0],"int64"), Tensor([128, 0],"int64"), )
paddle.Tensor.equal(Tensor([128, 0],"int64"), Tensor([128, 128],"int64"), )
paddle.Tensor.equal(Tensor([128, 128],"int64"), Tensor([0, 128],"int64"), )
paddle.Tensor.equal(Tensor([128, 128],"int64"), Tensor([128, 0],"int64"), )
paddle.Tensor.equal(Tensor([2, 0],"int64"), 3, )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 1, 1],"float32"), Tensor([1, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 32],"float32"), Tensor([0, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1, 32],"float32"), Tensor([2, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([0, 1],"int32"), Tensor([0, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 1],"int32"), Tensor([5, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 128],"int32"), Tensor([0, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([0, 128],"int32"), Tensor([5, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 0, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0, 1, 1],"float32"), Tensor([1, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int32"), Tensor([5, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 0],"int32"), Tensor([5, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 0, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 0, 1],"float32"), Tensor([1, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 28, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 280, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([0, 3, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 28, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 0, 280, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 28],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 0, 350],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 28, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 280, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([0, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 128],"int32"), Tensor([0, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 128],"int32"), Tensor([5, 0],"int64"), )
paddle.Tensor.expand_as(Tensor([2, 0, 32],"float32"), Tensor([2, 0, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 0, 32],"float32"), Tensor([2, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 0],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 0],"float32"), Tensor([2, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 32],"float32"), Tensor([0, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 32],"float32"), Tensor([2, 0, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 32],"float32"), Tensor([2, 4, 0],"float32"), )
paddle.Tensor.fill_(Tensor([0, 10],"float32"), 1, )
paddle.Tensor.fill_(Tensor([0, 2, 3],"float32"), 0, )
paddle.Tensor.fill_(Tensor([0, 30],"float32"), 1, )
paddle.Tensor.fill_(Tensor([0, 32],"float16"), 1.0, )
paddle.Tensor.fill_(Tensor([0, 32],"float32"), 1.0, )
paddle.Tensor.fill_(Tensor([0, 77],"float32"), value=-math.inf, )
paddle.Tensor.fill_(Tensor([0],"float16"), 1.0, )
paddle.Tensor.fill_(Tensor([0],"float32"), 0, )
paddle.Tensor.fill_(Tensor([0],"float32"), 1, )
paddle.Tensor.fill_(Tensor([0],"float32"), 1.0, )
paddle.Tensor.fill_(Tensor([10, 0],"float32"), 1, )
paddle.Tensor.fill_(Tensor([20, 0],"float32"), 1, )
paddle.Tensor.fill_(Tensor([32, 0],"float16"), 1.0, )
paddle.Tensor.fill_(Tensor([32, 0],"float32"), 1.0, )
paddle.Tensor.fill_(Tensor([4, 0, 3],"float32"), 0, )
paddle.Tensor.fill_(Tensor([4, 2, 0],"float32"), 0, )
paddle.Tensor.fill_(Tensor([77, 0],"float32"), value=-math.inf, )
paddle.Tensor.fill_(x=Tensor([0, 16, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([0, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([0, 4],"float32"), value=4, )
paddle.Tensor.fill_(x=Tensor([0, 4],"float64"), value=4, )
paddle.Tensor.fill_(x=Tensor([0],"float64"), value=4.2, )
paddle.Tensor.fill_(x=Tensor([10, 0, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([10, 16, 0],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([16, 0],"float64"), value=41.2, )
paddle.Tensor.fill_(x=Tensor([4, 0],"float32"), value=4, )
paddle.Tensor.fill_(x=Tensor([4, 0],"float64"), value=4, )
paddle.Tensor.fill_diagonal_(Tensor([0, 128],"float32"), 0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([128, 0],"float32"), 0, wrap=False, )
paddle.Tensor.flatten(Tensor([0, 1, 1],"int32"), )
paddle.Tensor.flatten(Tensor([0, 1, 10285],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([0, 1, 12, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([0, 1, 16, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([0, 1, 2, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([0, 1, 3598],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([0, 1, 4, 2, 2],"float32"), -2, )
paddle.Tensor.flatten(Tensor([0, 1, 4, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([0, 1],"int32"), )
paddle.Tensor.flatten(Tensor([0, 10, 1],"int32"), )
paddle.Tensor.flatten(Tensor([0, 10, 100, 100],"float32"), 2, )
paddle.Tensor.flatten(Tensor([0, 10, 104, 104],"float32"), 2, )
paddle.Tensor.flatten(Tensor([0, 10, 15, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([0, 10, 8],"float32"), 1, )
paddle.Tensor.flatten(Tensor([0, 10],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 100],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 11, 4, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([0, 12, 9],"float32"), 1, )
paddle.Tensor.flatten(Tensor([0, 12544],"float32"), 1, )
paddle.Tensor.flatten(Tensor([0, 16, 16],"int64"), start_axis=1, )
paddle.Tensor.flatten(Tensor([0, 18, 4, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([0, 19, 29, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([0, 19, 34, 1],"float32"), )
paddle.Tensor.flatten(Tensor([0, 2, 16, 4, 1],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 2, 16, 4, 16],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 2, 4, 16],"int64"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 24, 24, 192],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([0, 3, 6, 6, 4],"float32"), )
paddle.Tensor.flatten(Tensor([0, 300, 11],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 300, 12544],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 300, 176, 176],"float32"), -2, )
paddle.Tensor.flatten(Tensor([0, 300, 184, 184],"float32"), -2, )
paddle.Tensor.flatten(Tensor([0, 32, 476, 3, 4],"float32"), -2, )
paddle.Tensor.flatten(Tensor([0, 33, 1, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([0, 38, 68, 1],"float32"), )
paddle.Tensor.flatten(Tensor([0, 4, 7, 4, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([0, 6, 10, 3, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([0, 6, 4, 4],"float16"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 6, 4, 4],"float32"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([0, 64, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([0, 64, 56, 56],"float32"), start_axis=2, stop_axis=-1, )
paddle.Tensor.flatten(Tensor([0, 7, 64, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([0, 8, 11, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0, 8, 1100, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([0],"bfloat16"), )
paddle.Tensor.flatten(Tensor([0],"int32"), )
paddle.Tensor.flatten(Tensor([1, 0, 1],"int32"), )
paddle.Tensor.flatten(Tensor([1, 0, 100, 100],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 0, 10285],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([1, 0, 104, 104],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 0, 11, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 0, 11],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 0, 1100, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 0, 12, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 0, 12544],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 0, 16, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 0, 176, 176],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 0, 184, 184],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 0, 2, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 0, 24, 192],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([1, 0, 3598],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 2, 2],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 4],"float16"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 4],"float32"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 0, 4, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 0, 8],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 0, 9],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 0],"int32"), )
paddle.Tensor.flatten(Tensor([1, 1, 0, 2, 2],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 1, 0, 2, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 1, 0, 64],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 1, 0],"float32"), stop_axis=-2, )
paddle.Tensor.flatten(Tensor([1, 1, 0],"int32"), )
paddle.Tensor.flatten(Tensor([1, 1, 12, 0],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 1, 16, 0],"float32"), start_axis=2, )
paddle.Tensor.flatten(Tensor([1, 1, 2, 0, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 1, 2, 2, 0],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 1, 4, 0, 2],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 1, 4, 0, 2],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 1, 4, 2, 0],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 1, 4, 2, 0],"float32"), 3, )
paddle.Tensor.flatten(Tensor([1, 10, 0, 100],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 10, 0, 104],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 10, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 10, 0],"int32"), )
paddle.Tensor.flatten(Tensor([1, 10, 100, 0],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 10, 104, 0],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 11, 0, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 11, 4, 0, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 11, 4, 64, 0],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 12, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([1, 18, 0, 64, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 18, 4, 0, 2],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 18, 4, 64, 0],"float32"), 2, )
paddle.Tensor.flatten(Tensor([1, 24, 0, 192],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([1, 24, 24, 0],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([1, 300, 0, 176],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 300, 0, 184],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 300, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 300, 176, 0],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 300, 184, 0],"float32"), -2, )
paddle.Tensor.flatten(Tensor([1, 6, 0, 4],"float16"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 6, 0, 4],"float32"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 6, 4, 0],"float16"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 6, 4, 0],"float32"), start_axis=1, stop_axis=3, )
paddle.Tensor.flatten(Tensor([1, 8, 0, 4, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 8, 11, 0, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 8, 11, 4, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 8, 1100, 0, 2],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([1, 8, 1100, 4, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([10, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([100, 0],"float32"), 0, 1, )
paddle.Tensor.flatten(Tensor([100, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([12, 0, 34, 1],"float32"), )
paddle.Tensor.flatten(Tensor([12, 0, 68, 1],"float32"), )
paddle.Tensor.flatten(Tensor([12, 19, 0, 1],"float32"), )
paddle.Tensor.flatten(Tensor([12, 19, 34, 0],"float32"), )
paddle.Tensor.flatten(Tensor([12, 38, 0, 1],"float32"), )
paddle.Tensor.flatten(Tensor([12, 38, 68, 0],"float32"), )
paddle.Tensor.flatten(Tensor([128, 0, 476, 3, 4],"float32"), -2, )
paddle.Tensor.flatten(Tensor([128, 0, 56, 56],"float32"), start_axis=2, stop_axis=-1, )
paddle.Tensor.flatten(Tensor([128, 32, 0, 3, 4],"float32"), -2, )
paddle.Tensor.flatten(Tensor([128, 32, 476, 0, 4],"float32"), -2, )
paddle.Tensor.flatten(Tensor([128, 32, 476, 3, 0],"float32"), -2, )
paddle.Tensor.flatten(Tensor([128, 64, 0, 56],"float32"), start_axis=2, stop_axis=-1, )
paddle.Tensor.flatten(Tensor([128, 64, 56, 0],"float32"), start_axis=2, stop_axis=-1, )
paddle.Tensor.flatten(Tensor([13, 0, 16, 4, 1],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 0, 16, 4, 16],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 0, 4, 16],"int64"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 0, 64, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 0, 7, 4, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 2, 0, 16],"int64"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 0, 4, 1],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 0, 4, 16],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 16, 0, 1],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 16, 0, 16],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 16, 4, 0],"float32"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 2, 4, 0],"int64"), start_axis=2, stop_axis=3, )
paddle.Tensor.flatten(Tensor([13, 4, 0, 4, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 4, 7, 0, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 4, 7, 4, 0],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 7, 0, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([13, 7, 64, 0],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([16, 0, 1, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([16, 33, 0, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([16, 33, 1, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([2, 0, 10, 3, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([2, 0, 15, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 0, 16],"int64"), start_axis=1, )
paddle.Tensor.flatten(Tensor([2, 0, 29, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 0, 6, 6, 4],"float32"), )
paddle.Tensor.flatten(Tensor([2, 10, 0, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 10, 15, 0],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 16, 0],"int64"), start_axis=1, )
paddle.Tensor.flatten(Tensor([2, 19, 0, 256],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 19, 29, 0],"float32"), 1, 2, )
paddle.Tensor.flatten(Tensor([2, 3, 0, 6, 4],"float32"), )
paddle.Tensor.flatten(Tensor([2, 3, 6, 0, 4],"float32"), )
paddle.Tensor.flatten(Tensor([2, 3, 6, 6, 0],"float32"), )
paddle.Tensor.flatten(Tensor([2, 6, 0, 3, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([2, 6, 10, 0, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([2, 6, 10, 3, 0],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([23, 0, 1, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([23, 33, 0, 1],"float32"), 1, )
paddle.Tensor.flatten(Tensor([23, 33, 1, 0],"float32"), 1, )
paddle.Tensor.flatten(Tensor([4, 0, 25, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([4, 64, 0, 376, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([4, 64, 25, 0, 280],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([4, 64, 25, 376, 0],"float32"), start_axis=1, stop_axis=2, )
paddle.Tensor.flatten(Tensor([52, 0, 64, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([52, 7, 0, 2],"float32"), -2, -1, )
paddle.Tensor.flatten(Tensor([52, 7, 64, 0],"float32"), -2, -1, )
paddle.Tensor.flip(Tensor([0, 14],"int32"), list[-1,], )
paddle.Tensor.flip(Tensor([0, 2],"int64"), list[1,], )
paddle.Tensor.flip(Tensor([0, 224, 224],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([0, 280, 350],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([0, 280, 350],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([0, 400, 300],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([13, 0],"int32"), list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 224],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 300],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 0, 350],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 0, 350],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 224, 0],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 280, 0],"float32"), axis=list[-1,], )
paddle.Tensor.flip(Tensor([3, 280, 0],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([3, 400, 0],"float32"), axis=list[-2,], )
paddle.Tensor.flip(Tensor([4, 0],"int64"), list[1,], )
paddle.Tensor.flip(Tensor([5, 0],"int64"), list[1,], )
paddle.Tensor.gcd(x=Tensor([0, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 5],"int32"), y=Tensor([0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0, 5],"int32"), y=Tensor([4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([0],"int32"), y=Tensor([0],"int32"), )
paddle.Tensor.gcd(x=Tensor([0],"int32"), y=Tensor([1],"int32"), )
paddle.Tensor.gcd(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
paddle.Tensor.gcd(x=Tensor([0],"int64"), y=Tensor([1],"int64"), )
paddle.Tensor.gcd(x=Tensor([1],"int32"), y=Tensor([0],"int32"), )
paddle.Tensor.gcd(x=Tensor([1],"int64"), y=Tensor([0],"int64"), )
paddle.Tensor.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 5],"int32"), y=Tensor([0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 5],"int32"), y=Tensor([4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 0, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 0],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([0, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 0],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 0],"int32"), )
paddle.Tensor.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 4],"float64"), y=Tensor([5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.inner(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float32"), y=Tensor([4, 0],"float32"), )
paddle.Tensor.inner(x=Tensor([4],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.Tensor.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([0],"float32"), y=Tensor([0],"float32"), )
paddle.Tensor.isclose(x=Tensor([0],"float32"), y=Tensor([2],"float32"), )
paddle.Tensor.isclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.isclose(x=Tensor([0],"float64"), y=Tensor([2],"float64"), )
paddle.Tensor.isclose(x=Tensor([2],"float32"), y=Tensor([0],"float32"), )
paddle.Tensor.isclose(x=Tensor([2],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 0, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 0],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 0, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 0],"float64"), )
paddle.Tensor.kthvalue(Tensor([0, 200, 10],"float32"), k=200, axis=1, )
paddle.Tensor.kthvalue(Tensor([2, 0, 10],"float32"), k=200, axis=1, )
paddle.Tensor.kthvalue(Tensor([2, 200, 0],"float32"), k=200, axis=1, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([0, 5],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float32"), y=Tensor([4],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([0],"float64"), y=Tensor([4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.Tensor.logical_and(Tensor([0, 3],"bool"), Tensor([0, 3],"bool"), )
paddle.Tensor.logical_and(Tensor([0, 3],"bool"), Tensor([2, 3],"bool"), )
paddle.Tensor.logical_and(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_and(Tensor([0],"bool"), Tensor([1038],"bool"), )
paddle.Tensor.logical_and(Tensor([0],"bool"), Tensor([1697],"bool"), )
paddle.Tensor.logical_and(Tensor([1038],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_and(Tensor([1697],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_and(Tensor([2, 0],"bool"), Tensor([2, 0],"bool"), )
paddle.Tensor.logical_and(Tensor([2, 0],"bool"), Tensor([2, 3],"bool"), )
paddle.Tensor.logical_and(Tensor([2, 3],"bool"), Tensor([0, 3],"bool"), )
paddle.Tensor.logical_and(Tensor([2, 3],"bool"), Tensor([2, 0],"bool"), )
paddle.Tensor.logical_or(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_or(Tensor([0],"bool"), Tensor([1038],"bool"), )
paddle.Tensor.logical_or(Tensor([0],"bool"), Tensor([1697],"bool"), )
paddle.Tensor.logical_or(Tensor([1038],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logical_or(Tensor([1697],"bool"), Tensor([0],"bool"), )
paddle.Tensor.logit(x=Tensor([0, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([0, 3, 2, 5],"float64"), )
paddle.Tensor.logit(x=Tensor([0, 3, 2, 5],"float64"), eps=0.2, )
paddle.Tensor.logit(x=Tensor([0, 3, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([0],"float32"), )
paddle.Tensor.logit(x=Tensor([0],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 0, 2, 5],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 0, 2, 5],"float64"), eps=0.2, )
paddle.Tensor.logit(x=Tensor([4, 0, 2],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 0],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 0, 5],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 0, 5],"float64"), eps=0.2, )
paddle.Tensor.logit(x=Tensor([4, 3, 0],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2, 0],"float64"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2, 0],"float64"), eps=0.2, )
paddle.Tensor.lu(Tensor([0, 3, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([0, 3, 3],"float64"), )
paddle.Tensor.lu(Tensor([0, 3],"float32"), )
paddle.Tensor.lu(Tensor([0, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.lu(Tensor([3, 0],"float32"), )
paddle.Tensor.lu(Tensor([3, 0],"float64"), )
paddle.Tensor.lu(Tensor([3, 3, 0],"float64"), )
paddle.Tensor.lu(Tensor([4, 0, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 0, 2],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 2, 0],"float64"), )
paddle.Tensor.masked_fill(Tensor([0, 25, 25],"float32"), Tensor([0, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([0, 25, 25],"float32"), Tensor([10, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([0, 25, 25],"float32"), Tensor([27, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([0, 32],"float32"), Tensor([0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 32],"float32"), Tensor([13, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 32],"float32"), Tensor([52, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 256],"float32"), Tensor([0, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 256],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 4],"float32"), Tensor([0, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 36828, 4],"float32"), Tensor([1, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 256],"float32"), Tensor([0, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 256],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 4],"float32"), Tensor([0, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 38367, 4],"float32"), Tensor([1, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([0, 4, 7, 7],"float32"), Tensor([0, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 4, 7, 7],"float32"), Tensor([13, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 4, 7, 7],"float32"), Tensor([52, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 7, 32],"float32"), Tensor([0, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 7, 32],"float32"), Tensor([13, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([0, 7, 32],"float32"), Tensor([52, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([1, 0, 256],"float32"), Tensor([1, 0, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 0, 256],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 0, 256],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 0, 4],"float32"), Tensor([1, 0, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 0, 4],"float32"), Tensor([1, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 0, 4],"float32"), Tensor([1, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 0],"float32"), Tensor([1, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 256],"float32"), Tensor([0, 36828, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 256],"float32"), Tensor([1, 0, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 256],"float32"), Tensor([1, 36828, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 4],"float32"), Tensor([0, 36828, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 4],"float32"), Tensor([1, 0, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 36828, 4],"float32"), Tensor([1, 36828, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 0],"float32"), Tensor([1, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 256],"float32"), Tensor([0, 38367, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 256],"float32"), Tensor([1, 0, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 256],"float32"), Tensor([1, 38367, 0],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 4],"float32"), Tensor([0, 38367, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 4],"float32"), Tensor([1, 0, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 38367, 4],"float32"), Tensor([1, 38367, 0],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([10, 0, 25],"float32"), Tensor([10, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 0, 25],"float32"), Tensor([10, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 0],"float32"), Tensor([10, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 0],"float32"), Tensor([10, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 25],"float32"), Tensor([0, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 25],"float32"), Tensor([10, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([10, 25, 25],"float32"), Tensor([10, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 32],"float32"), Tensor([13, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 32],"float32"), Tensor([13, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 7, 7],"float32"), Tensor([13, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0, 7, 7],"float32"), Tensor([13, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0],"float32"), Tensor([13, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 0],"float32"), Tensor([13, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 32],"float32"), Tensor([0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 32],"float32"), Tensor([13, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 0, 7],"float32"), Tensor([13, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 0, 7],"float32"), Tensor([13, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 0],"float32"), Tensor([13, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 0],"float32"), Tensor([13, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 7],"float32"), Tensor([0, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 7],"float32"), Tensor([13, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 7],"float32"), Tensor([13, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 4, 7, 7],"float32"), Tensor([13, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 32],"float32"), Tensor([0, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 32],"float32"), Tensor([13, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([13, 7, 32],"float32"), Tensor([13, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([27, 0, 25],"float32"), Tensor([27, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 0, 25],"float32"), Tensor([27, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 0],"float32"), Tensor([27, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 0],"float32"), Tensor([27, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 25],"float32"), Tensor([0, 25, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 25],"float32"), Tensor([27, 0, 25],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([27, 25, 25],"float32"), Tensor([27, 25, 0],"bool"), -100.0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 32],"float32"), Tensor([52, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 32],"float32"), Tensor([52, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 7, 7],"float32"), Tensor([52, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0, 7, 7],"float32"), Tensor([52, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0],"float32"), Tensor([52, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 0],"float32"), Tensor([52, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 32],"float32"), Tensor([0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 32],"float32"), Tensor([52, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 0, 7],"float32"), Tensor([52, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 0, 7],"float32"), Tensor([52, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 0],"float32"), Tensor([52, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 0],"float32"), Tensor([52, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 7],"float32"), Tensor([0, 4, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 7],"float32"), Tensor([52, 0, 7, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 7],"float32"), Tensor([52, 4, 0, 7],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 4, 7, 7],"float32"), Tensor([52, 4, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 0],"float32"), Tensor([52, 7, 0],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 0],"float32"), Tensor([52, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 32],"float32"), Tensor([0, 7, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 32],"float32"), Tensor([52, 0, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([52, 7, 32],"float32"), Tensor([52, 7, 0],"bool"), 0, )
paddle.Tensor.masked_select(Tensor([0, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 1],"float32"), Tensor([1, 1],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 10, 10, 10, 10],"float64"), Tensor([0, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 10, 10, 10, 10],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 2],"float32"), Tensor([0, 2],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 2],"float32"), Tensor([15000, 2],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 22, 16],"float32"), Tensor([0, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 22, 16],"float32"), Tensor([1, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 7, 16],"float32"), Tensor([0, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([0, 7, 16],"float32"), Tensor([13, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([0],"int32"), Tensor([0],"bool"), )
paddle.Tensor.masked_select(Tensor([0],"int32"), Tensor([10],"bool"), )
paddle.Tensor.masked_select(Tensor([0],"int64"), Tensor([0],"bool"), )
paddle.Tensor.masked_select(Tensor([0],"int64"), Tensor([128],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 0, 16],"float32"), Tensor([1, 0, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 0, 16],"float32"), Tensor([1, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 0],"float32"), Tensor([1, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 0],"float32"), Tensor([1, 1],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 1],"float32"), Tensor([1, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 0],"float32"), Tensor([1, 22, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 0],"float32"), Tensor([1, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 16],"float32"), Tensor([0, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 16],"float32"), Tensor([1, 0, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 16],"float32"), Tensor([1, 22, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 0, 10, 10, 10],"float64"), Tensor([10, 0, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 0, 10, 10, 10],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 0, 10, 10],"float64"), Tensor([10, 10, 0, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 0, 10, 10],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 0, 10],"float64"), Tensor([10, 10, 10, 0, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 0, 10],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 0],"float64"), Tensor([10, 10, 10, 10, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 0],"float64"), Tensor([10, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([0, 10, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([10, 0, 10, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([10, 10, 0, 10, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([10, 10, 10, 0, 10],"bool"), )
paddle.Tensor.masked_select(Tensor([10, 10, 10, 10, 10],"float64"), Tensor([10, 10, 10, 10, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([10],"int32"), Tensor([0],"bool"), )
paddle.Tensor.masked_select(Tensor([128],"int64"), Tensor([0],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 0, 16],"float32"), Tensor([13, 0, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 0, 16],"float32"), Tensor([13, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 0],"float32"), Tensor([13, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 16],"float32"), Tensor([0, 7, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 16],"float32"), Tensor([13, 0, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([13, 7, 16],"float32"), Tensor([13, 7, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 0],"float32"), Tensor([15000, 0],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 0],"float32"), Tensor([15000, 2],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 2],"float32"), Tensor([0, 2],"bool"), )
paddle.Tensor.masked_select(Tensor([15000, 2],"float32"), Tensor([15000, 0],"bool"), )
paddle.Tensor.matmul(Tensor([0, 1, 100],"complex128"), Tensor([100],"complex128"), )
paddle.Tensor.matmul(Tensor([0, 1, 100],"complex64"), Tensor([100],"complex64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([0, 100],"float64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([0, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([0, 100, 1],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float16"), Tensor([0, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float16"), Tensor([112, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float32"), Tensor([0, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([0, 12, 197, 197],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([0, 21504, 1, 91],"float32"), Tensor([91],"float32"), )
paddle.Tensor.matmul(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.Tensor.matmul(Tensor([0],"float32"), Tensor([4],"float32"), )
paddle.Tensor.matmul(Tensor([1, 0, 1, 91],"float32"), Tensor([91],"float32"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 0, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0, 1],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.matmul(Tensor([1, 0],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([0, 100],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([0, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 0, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([1, 21504, 0, 91],"float32"), Tensor([91],"float32"), )
paddle.Tensor.matmul(Tensor([1, 21504, 1, 0],"float32"), Tensor([91],"float32"), )
paddle.Tensor.matmul(Tensor([1, 21504, 1, 91],"float32"), Tensor([0],"float32"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float16"), Tensor([112, 0, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float16"), Tensor([112, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float32"), Tensor([112, 0, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 0, 197, 197],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float16"), Tensor([112, 12, 0, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float16"), Tensor([112, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float32"), Tensor([112, 12, 0, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 0, 197],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 0],"float16"), Tensor([112, 12, 197, 0],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 0],"float16"), Tensor([112, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 0],"float32"), Tensor([112, 12, 197, 0],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 0],"float32"), Tensor([112, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float16"), Tensor([0, 12, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float16"), Tensor([112, 0, 197, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float16"), Tensor([112, 12, 0, 64],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float16"), Tensor([112, 12, 197, 0],"float16"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([0, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([112, 0, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([112, 12, 0, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 197],"float32"), Tensor([112, 12, 197, 0],"float32"), )
paddle.Tensor.matmul(Tensor([2, 0, 100],"complex128"), Tensor([100],"complex128"), )
paddle.Tensor.matmul(Tensor([2, 0, 100],"complex64"), Tensor([100],"complex64"), )
paddle.Tensor.matmul(Tensor([2, 1, 0],"complex128"), Tensor([100],"complex128"), )
paddle.Tensor.matmul(Tensor([2, 1, 0],"complex64"), Tensor([100],"complex64"), )
paddle.Tensor.matmul(Tensor([2, 1, 100],"complex128"), Tensor([0],"complex128"), )
paddle.Tensor.matmul(Tensor([2, 1, 100],"complex64"), Tensor([0],"complex64"), )
paddle.Tensor.matmul(Tensor([4],"float32"), Tensor([0],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 1, 12, 1, 64],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 192],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 32],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 32],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1, 32],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1, 50, 50],"float32"), )
paddle.Tensor.mean(Tensor([0, 1, 512, 4, 4],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1, 64],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1],"float16"), )
paddle.Tensor.mean(Tensor([0, 1],"float32"), )
paddle.Tensor.mean(Tensor([0, 100, 2],"float32"), 1, )
paddle.Tensor.mean(Tensor([0, 100, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 100, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 1000],"float32"), axis=-1, )
paddle.Tensor.mean(Tensor([0, 1024, 12, 12],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([0, 1024, 7, 7],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([0, 12, 8, 14],"float32"), )
paddle.Tensor.mean(Tensor([0, 12544],"float32"), 1, )
paddle.Tensor.mean(Tensor([0, 128, 16, 16],"float16"), -1, )
paddle.Tensor.mean(Tensor([0, 128, 16, 16],"float16"), -2, )
paddle.Tensor.mean(Tensor([0, 128, 16, 16],"float32"), -1, )
paddle.Tensor.mean(Tensor([0, 128, 16, 16],"float32"), -2, )
paddle.Tensor.mean(Tensor([0, 128, 56, 56],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 128, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 160, 160],"float32"), axis=tuple(1,2,), )
paddle.Tensor.mean(Tensor([0, 192, 11],"float32"), 1, )
paddle.Tensor.mean(Tensor([0, 192, 128, 128],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([0, 192, 136, 136],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([0, 2, 2, 2, 2],"float32"), )
paddle.Tensor.mean(Tensor([0, 2, 3, 10, 10, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([0, 2, 3, 4, 10],"float64"), )
paddle.Tensor.mean(Tensor([0, 2, 3],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([0, 2, 3],"float64"), axis=0, )
paddle.Tensor.mean(Tensor([0, 256, 7],"float32"), -1, )
paddle.Tensor.mean(Tensor([0, 3, 100, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 3, 100, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 300, 4096],"float32"), tuple(0,1,), keepdim=True, )
paddle.Tensor.mean(Tensor([0, 4, 2, 4, 8],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([0, 4],"complex128"), axis=0, )
paddle.Tensor.mean(Tensor([0, 4],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 4],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([0, 49, 512],"float16"), axis=1, )
paddle.Tensor.mean(Tensor([0, 49, 512],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([0, 5],"float64"), axis=-1, )
paddle.Tensor.mean(Tensor([0, 768],"float32"), 0, )
paddle.Tensor.mean(Tensor([0, 784],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([0, 8, 151936],"float32"), -1, )
paddle.Tensor.mean(Tensor([0],"float32"), )
paddle.Tensor.mean(Tensor([0],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([0],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([0],"float64"), axis=0, )
paddle.Tensor.mean(Tensor([1, 0, 1, 12, 1, 64],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 11],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 0, 128, 128],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 136, 136],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 151936],"float32"), -1, )
paddle.Tensor.mean(Tensor([1, 0, 192],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 2, 2, 2],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 2],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 0, 32],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 32],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 32],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 4096],"float32"), tuple(0,1,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 50, 50],"float32"), )
paddle.Tensor.mean(Tensor([1, 0, 64],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 0, 8, 14],"float32"), )
paddle.Tensor.mean(Tensor([1, 0],"float16"), )
paddle.Tensor.mean(Tensor([1, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 0],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 1, 0, 12, 1, 64],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 0, 50],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 1, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 1, 1, 0, 1, 64],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 1, 12, 0, 64],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 1, 12, 1, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 1, 50, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 100, 0],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 100, 0],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([1, 12, 0, 14],"float32"), )
paddle.Tensor.mean(Tensor([1, 12, 8, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 192, 0, 128],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 192, 0, 136],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 192, 0],"float32"), 1, )
paddle.Tensor.mean(Tensor([1, 192, 128, 0],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 192, 136, 0],"float32"), tuple(2,3,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 2, 0, 2, 2],"float32"), )
paddle.Tensor.mean(Tensor([1, 2, 2, 0, 2],"float32"), )
paddle.Tensor.mean(Tensor([1, 2, 2, 2, 0],"float32"), )
paddle.Tensor.mean(Tensor([1, 300, 0],"float32"), tuple(0,1,), keepdim=True, )
paddle.Tensor.mean(Tensor([1, 8, 0],"float32"), -1, )
paddle.Tensor.mean(Tensor([10, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.mean(Tensor([100, 0],"float32"), 1, )
paddle.Tensor.mean(Tensor([100, 0],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([1000, 0],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([10000, 0, 3],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([10000, 0, 3],"float64"), axis=0, )
paddle.Tensor.mean(Tensor([10000, 2, 0],"float32"), axis=0, )
paddle.Tensor.mean(Tensor([10000, 2, 0],"float64"), axis=0, )
paddle.Tensor.mean(Tensor([100000, 0],"complex128"), axis=0, )
paddle.Tensor.mean(Tensor([11, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 0, 12, 12],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 0, 56, 56],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 0, 7, 7],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 0, 96, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 1024, 0, 12],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 1024, 0, 7],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 1024, 12, 0],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 1024, 7, 0],"float32"), list[-2,-1,], )
paddle.Tensor.mean(Tensor([124, 128, 0, 56],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 128, 0, 96],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 128, 56, 0],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([124, 128, 96, 0],"float32"), 1, keepdim=True, )
paddle.Tensor.mean(Tensor([128, 0, 512],"float16"), axis=1, )
paddle.Tensor.mean(Tensor([128, 0, 512],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([128, 0],"float32"), axis=-1, )
paddle.Tensor.mean(Tensor([128, 49, 0],"float16"), axis=1, )
paddle.Tensor.mean(Tensor([128, 49, 0],"float32"), axis=1, )
paddle.Tensor.mean(Tensor([13, 0, 160],"float32"), axis=tuple(1,2,), )
paddle.Tensor.mean(Tensor([13, 0, 2, 4, 8],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([13, 160, 0],"float32"), axis=tuple(1,2,), )
paddle.Tensor.mean(Tensor([13, 4, 0, 4, 8],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([13, 4, 2, 0, 8],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([13, 4, 2, 4, 0],"float32"), axis=-2, )
paddle.Tensor.mean(Tensor([18, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 0, 100, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 0, 100, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 0, 512, 4, 4],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([2, 1, 0, 4, 4],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([2, 1, 512, 0, 4],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([2, 1, 512, 4, 0],"float32"), list[2,3,4,], keepdim=True, )
paddle.Tensor.mean(Tensor([2, 3, 0, 4],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 3, 0, 40],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([2, 3, 100, 0],"float64"), axis=-2, keepdim=True, )
paddle.Tensor.mean(Tensor([3, 0, 3, 10, 10, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 0, 3, 4, 10],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 0, 10, 10, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 0, 4, 10],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 0, 10, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 0, 10],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 10, 0, 12, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 10, 10, 0, 4],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 10, 10, 12, 0],"float64"), )
paddle.Tensor.mean(Tensor([3, 2, 3, 4, 0],"float64"), )
paddle.Tensor.mean(Tensor([4, 0, 16, 16],"float16"), -1, )
paddle.Tensor.mean(Tensor([4, 0, 16, 16],"float16"), -2, )
paddle.Tensor.mean(Tensor([4, 0, 16, 16],"float32"), -1, )
paddle.Tensor.mean(Tensor([4, 0, 16, 16],"float32"), -2, )
paddle.Tensor.mean(Tensor([4, 128, 0, 16],"float16"), -1, )
paddle.Tensor.mean(Tensor([4, 128, 0, 16],"float16"), -2, )
paddle.Tensor.mean(Tensor([4, 128, 0, 16],"float32"), -1, )
paddle.Tensor.mean(Tensor([4, 128, 0, 16],"float32"), -2, )
paddle.Tensor.mean(Tensor([4, 128, 16, 0],"float16"), -1, )
paddle.Tensor.mean(Tensor([4, 128, 16, 0],"float16"), -2, )
paddle.Tensor.mean(Tensor([4, 128, 16, 0],"float32"), -1, )
paddle.Tensor.mean(Tensor([4, 128, 16, 0],"float32"), -2, )
paddle.Tensor.mean(Tensor([5, 0],"float64"), axis=-1, )
paddle.Tensor.mean(Tensor([512, 0, 7],"float32"), -1, )
paddle.Tensor.mean(Tensor([512, 256, 0],"float32"), -1, )
paddle.Tensor.mean(Tensor([80, 0],"float32"), 0, )
paddle.Tensor.median(Tensor([0, 784],"float32"), )
paddle.Tensor.median(Tensor([1000, 0],"float32"), )
paddle.Tensor.mm(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.Tensor.mm(Tensor([0, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.Tensor.mm(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.Tensor.mm(Tensor([10, 0],"float32"), Tensor([10, 10],"float32"), )
paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([0, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([3, 0, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.mode(Tensor([3, 2, 0],"float64"), )
paddle.Tensor.mode(Tensor([3, 2, 0],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([3, 2, 0],"float64"), axis=2, keepdim=True, )
paddle.Tensor.moveaxis(Tensor([0, 2],"complex64"), 0, 1, )
paddle.Tensor.moveaxis(Tensor([0, 3, 5],"float64"), -2, -1, )
paddle.Tensor.moveaxis(Tensor([2, 0, 5],"float64"), -2, -1, )
paddle.Tensor.moveaxis(Tensor([2, 3, 0],"float64"), -2, -1, )
paddle.Tensor.moveaxis(Tensor([3, 0],"complex64"), 0, 1, )
paddle.Tensor.moveaxis(x=Tensor([0, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([0, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([0, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([0, 2, 3],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([0, 2],"complex128"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([0, 2],"complex64"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 0, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 0, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 0, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 0, 3],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 0],"complex128"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 0],"complex64"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 0, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 0, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 0, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 0],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 0, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 0, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 0],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 0],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 0],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.multigammaln(Tensor([0],"float32"), 3, )
paddle.Tensor.nansum(Tensor([0, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float32"), )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float64"), )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float64"), axis=0, keepdim=True, )
paddle.Tensor.nansum(Tensor([0, 3, 3],"float64"), axis=-1, )
paddle.Tensor.nansum(Tensor([3, 0, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float32"), )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float64"), )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float64"), axis=0, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 0, 3],"float64"), axis=-1, )
paddle.Tensor.nansum(Tensor([3, 2, 0, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 0, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 0, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 0, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 1, 0],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float32"), )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float64"), )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float64"), axis=0, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 3, 0],"float64"), axis=-1, )
paddle.Tensor.outer(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.outer(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.Tensor.outer(x=Tensor([4],"float64"), y=Tensor([0],"float64"), )
paddle.Tensor.quantile(Tensor([0, 3, 3],"float64"), q=0.5, axis=0, )
paddle.Tensor.quantile(Tensor([0, 6, 3, 4, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([0, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([0, 6, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 0, 3, 4, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 0, 3, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 0, 3, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 0, 3],"float64"), q=0.5, axis=0, )
paddle.Tensor.quantile(Tensor([3, 3, 0],"float64"), q=0.5, axis=0, )
paddle.Tensor.quantile(Tensor([3, 6, 0, 4, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 0, 4, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 0, 4, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 0, 2, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 0, 2, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 0, 2, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 0, 5],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 0, 5],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 0, 5],"float64"), q=0.75, axis=5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 0],"float64"), q=0.5, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 0],"float64"), q=0.75, axis=3, keepdim=True, )
paddle.Tensor.quantile(Tensor([3, 6, 3, 4, 2, 0],"float64"), q=0.75, axis=5, )
paddle.Tensor.remainder(Tensor([0, 3, 4],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([0, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 0, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 0, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 4],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 1, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 1, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 1, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 10, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 10, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1, 10, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 1],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 16],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 16],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 16],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 32],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 32],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([0, 3, 32],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 1, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 1, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 1, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 10, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 10, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 10, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 16],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 16],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 16],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 32],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 32],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0, 32],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 0],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 0, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 0],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 0],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 0],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 0],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 0],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 0],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 0],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 0],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 0],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2, 4],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0, 2],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([0],"float32"), repeats=3, )
paddle.Tensor.repeat_interleave(x=Tensor([0],"float64"), repeats=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0, 4],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 0],"int32"), repeats=2, axis=3, )
paddle.Tensor.rot90(Tensor([0, 2],"float32"), 1, axes=list[0,1,], )
paddle.Tensor.rot90(Tensor([3, 0],"float32"), 1, axes=list[0,1,], )
paddle.Tensor.rot90(x=Tensor([0, 2],"float64"), k=-4, )
paddle.Tensor.rot90(x=Tensor([0, 4, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([0, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([0, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"float32"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([0, 4],"float64"), k=-1, )
paddle.Tensor.rot90(x=Tensor([0, 4],"float64"), k=4, )
paddle.Tensor.rot90(x=Tensor([2, 0],"float64"), k=-4, )
paddle.Tensor.rot90(x=Tensor([3, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 0, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 0, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 0],"float32"), )
paddle.Tensor.rot90(x=Tensor([4, 0],"float64"), k=-1, )
paddle.Tensor.rot90(x=Tensor([4, 0],"float64"), k=4, )
paddle.Tensor.rot90(x=Tensor([4, 4, 0, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 0, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 4, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 0],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 0],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.signbit(Tensor([0, 20, 2],"float32"), )
paddle.Tensor.signbit(Tensor([0, 20, 2],"float64"), )
paddle.Tensor.signbit(Tensor([12, 0, 2],"float32"), )
paddle.Tensor.signbit(Tensor([12, 0, 2],"float64"), )
paddle.Tensor.signbit(Tensor([12, 20, 0],"float32"), )
paddle.Tensor.signbit(Tensor([12, 20, 0],"float64"), )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 1, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 12544],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 20],"int64"), -2, )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 37632],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([0, 1, 1, 8],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([0, 1, 1],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 1, 1],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1, 10, 8],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 1, 12, 9],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 1, 1792],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 1, 21504, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1, 24276, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1, 32, 32],"float32"), axis=1, )
paddle.Tensor.squeeze(Tensor([0, 1, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1, 64],"float16"), )
paddle.Tensor.squeeze(Tensor([0, 1, 64],"float32"), )
paddle.Tensor.squeeze(Tensor([0, 1, 96, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 1],"float32"), )
paddle.Tensor.squeeze(Tensor([0, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 1],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 1],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([0, 1],"int64"), axis=1, )
paddle.Tensor.squeeze(Tensor([0, 10, 1, 256],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([0, 10, 1],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 10, 64, 64, 2, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 100, 4],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 1000, 1, 1],"float16"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 1000, 1, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 108],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 108],"int32"), 0, )
paddle.Tensor.squeeze(Tensor([0, 120, 1, 40],"float16"), axis=2, )
paddle.Tensor.squeeze(Tensor([0, 120, 1, 40],"float32"), axis=2, )
paddle.Tensor.squeeze(Tensor([0, 17, 128, 128],"float16"), )
paddle.Tensor.squeeze(Tensor([0, 17, 128, 128],"float32"), )
paddle.Tensor.squeeze(Tensor([0, 2, 32, 32, 128],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([0, 2, 64, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([0, 20, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 20],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 2048, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([0, 300, 1, 12544],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([0, 4, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([0, 512, 1, 40],"float16"), 2, )
paddle.Tensor.squeeze(Tensor([0, 512, 1, 40],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([0, 7, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0, 7, 126, 1, 1024],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([0, 7],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 12544],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 12544],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 20],"int64"), -2, )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 256],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 37632],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 0, 1, 8],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 0, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([1, 0, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([1, 0, 1],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 0, 10, 8],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 12, 9],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 128, 128],"float16"), )
paddle.Tensor.squeeze(Tensor([1, 0, 128, 128],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 0, 1792],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 21504, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 0, 24276, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 0, 32, 32, 128],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0, 4],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([1, 0],"int32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 0],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 0],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 12544],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 20],"int64"), -2, )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 37632],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 8],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 8],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 0, 9],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 0],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 1, 1, 0],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 1, 0],"float32"), list[1,2,], )
paddle.Tensor.squeeze(Tensor([1, 1, 1, 0],"int64"), -2, )
paddle.Tensor.squeeze(Tensor([1, 1, 10, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 12, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 1, 21504, 0],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 1, 24276, 0],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([1, 10, 0, 256],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 10, 0],"int32"), -1, )
paddle.Tensor.squeeze(Tensor([1, 10, 1, 0],"float32"), axis=list[0,2,], )
paddle.Tensor.squeeze(Tensor([1, 100, 0],"float32"), 0, )
paddle.Tensor.squeeze(Tensor([1, 17, 0, 128],"float16"), )
paddle.Tensor.squeeze(Tensor([1, 17, 0, 128],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 17, 128, 0],"float16"), )
paddle.Tensor.squeeze(Tensor([1, 17, 128, 0],"float32"), )
paddle.Tensor.squeeze(Tensor([1, 2, 0, 32, 128],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([1, 2, 32, 0, 128],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([1, 2, 32, 32, 0],"float16"), 0, )
paddle.Tensor.squeeze(Tensor([1, 20, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([1, 2048, 0],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([1, 300, 0, 12544],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([1, 300, 1, 0],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([11, 0, 4],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([11, 1, 0],"float32"), 1, )
paddle.Tensor.squeeze(Tensor([128, 0, 1, 40],"float16"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 0, 1, 40],"float32"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 120, 0, 40],"float16"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 120, 0, 40],"float32"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 120, 1, 0],"float16"), axis=2, )
paddle.Tensor.squeeze(Tensor([128, 120, 1, 0],"float32"), axis=2, )
paddle.Tensor.squeeze(Tensor([12988, 0, 64],"float16"), )
paddle.Tensor.squeeze(Tensor([12988, 0, 64],"float32"), )
paddle.Tensor.squeeze(Tensor([12988, 1, 0],"float16"), )
paddle.Tensor.squeeze(Tensor([12988, 1, 0],"float32"), )
paddle.Tensor.squeeze(Tensor([13, 0, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([13, 0, 64, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 0, 96, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([13, 1, 0, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 1, 96, 0],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 2, 0, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 2, 64, 0],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([13, 7, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([16, 0, 64, 64, 2, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([16, 10, 0, 64, 2, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([16, 10, 64, 0, 2, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([16, 10, 64, 64, 0, 1],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([16, 10, 64, 64, 2, 0],"float32"), -1, )
paddle.Tensor.squeeze(Tensor([2, 0, 1, 1, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([2, 0, 1],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([2, 0, 32, 32],"float32"), axis=1, )
paddle.Tensor.squeeze(Tensor([2, 0],"int64"), axis=1, )
paddle.Tensor.squeeze(Tensor([2, 1, 0, 1, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([2, 1, 0, 32],"float32"), axis=1, )
paddle.Tensor.squeeze(Tensor([2, 1, 0],"int64"), 1, )
paddle.Tensor.squeeze(Tensor([2, 1, 1, 0, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([2, 1, 1, 1, 0],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([2, 1, 32, 0],"float32"), axis=1, )
paddle.Tensor.squeeze(Tensor([3, 0, 1],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([3, 0, 126, 1, 1024],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([3, 4, 0],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([3, 7, 0, 1, 1024],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([3, 7, 126, 0, 1024],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([3, 7, 126, 1, 0],"float32"), -2, )
paddle.Tensor.squeeze(Tensor([64, 0, 1, 1],"float16"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 0, 1, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 0, 1, 40],"float16"), 2, )
paddle.Tensor.squeeze(Tensor([64, 0, 1, 40],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([64, 1000, 0, 1],"float16"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 1000, 0, 1],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 1000, 1, 0],"float16"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 1000, 1, 0],"float32"), axis=-1, )
paddle.Tensor.squeeze(Tensor([64, 512, 0, 40],"float16"), 2, )
paddle.Tensor.squeeze(Tensor([64, 512, 0, 40],"float32"), 2, )
paddle.Tensor.squeeze(Tensor([64, 512, 1, 0],"float16"), 2, )
paddle.Tensor.squeeze(Tensor([64, 512, 1, 0],"float32"), 2, )
paddle.Tensor.std(Tensor([0, 1, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([0, 1, 45],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([0, 1024, 8],"float32"), )
paddle.Tensor.std(Tensor([0, 1024, 8],"float64"), )
paddle.Tensor.std(Tensor([1, 0, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 0, 45],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 1, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1024, 0, 8],"float32"), )
paddle.Tensor.std(Tensor([1024, 0, 8],"float64"), )
paddle.Tensor.std(Tensor([1024, 1024, 0],"float32"), )
paddle.Tensor.std(Tensor([1024, 1024, 0],"float64"), )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"bool"), )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"float64"), 1, )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"float64"), 2, )
paddle.Tensor.sum(Tensor([0, 1, 1, 1],"float64"), 3, )
paddle.Tensor.sum(Tensor([0, 1, 1, 5],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 1, 1, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([0, 1, 1, 5],"float64"), 2, )
paddle.Tensor.sum(Tensor([0, 1, 1, 5],"float64"), 3, )
paddle.Tensor.sum(Tensor([0, 1, 10285],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 1, 13, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 1, 13, 27216],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 1, 17, 17],"float64"), )
paddle.Tensor.sum(Tensor([0, 1, 2, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 1, 2, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 1, 2, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 1, 24276],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 1, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 1, 27216],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 1],"bool"), )
paddle.Tensor.sum(Tensor([0, 1],"float32"), )
paddle.Tensor.sum(Tensor([0, 1],"float32"), 0, )
paddle.Tensor.sum(Tensor([0, 1],"float32"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([0, 10, 20],"float64"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 10, 25],"float32"), 2, )
paddle.Tensor.sum(Tensor([0, 10, 4, 3364],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 10, 58, 58, 2],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([0, 10, 64, 64, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 10],"float32"), 0, )
paddle.Tensor.sum(Tensor([0, 10],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([0, 10],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([0, 105840],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 107136],"float32"), 1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 107136],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 11, 2, 64, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([0, 12],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 123904],"float32"), 1, )
paddle.Tensor.sum(Tensor([0, 12544],"float32"), 1, )
paddle.Tensor.sum(Tensor([0, 12544],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 128, 128, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([0, 128, 256, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([0, 128, 8, 4, 4, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([0, 128],"float16"), axis=0, )
paddle.Tensor.sum(Tensor([0, 128],"float32"), axis=0, )
paddle.Tensor.sum(Tensor([0, 138120],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 157920],"bool"), 1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 2, 1, 2, 1, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([0, 2, 1, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 2, 1, 3, 1, 4],"float32"), )
paddle.Tensor.sum(Tensor([0, 2, 1],"float32"), -2, )
paddle.Tensor.sum(Tensor([0, 2, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0, 2, 2, 3],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([0, 2, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 2, 2],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([0, 2, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 2, 2],"float64"), -1, )
paddle.Tensor.sum(Tensor([0, 2, 3],"float32"), )
paddle.Tensor.sum(Tensor([0, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 2, 4, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 2],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 2],"float32"), list[-1,], )
paddle.Tensor.sum(Tensor([0, 2],"float32"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([0, 2],"float64"), list[-1,], )
paddle.Tensor.sum(Tensor([0, 20],"float64"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 21504, 10],"float32"), )
paddle.Tensor.sum(Tensor([0, 22400],"float32"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 28, 28],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 280, 350],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3, 1, 4, 1],"float32"), )
paddle.Tensor.sum(Tensor([0, 3, 10, 10, 1],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([0, 3, 10, 10, 80],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([0, 3, 3, 3],"float32"), list[1,2,3,], )
paddle.Tensor.sum(Tensor([0, 3, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3, 3],"float64"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([0, 3, 4, 4, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([0, 3, 4],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3, 4],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([0, 3, 8, 8],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 3],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 3],"float64"), list[0,-1,], )
paddle.Tensor.sum(Tensor([0, 4, 4, 4, 4, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([0, 4, 5],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([0, 4],"float64"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 40],"float64"), axis=-2, )
paddle.Tensor.sum(Tensor([0, 500, 4],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([0, 500, 8],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([0, 5000, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([0, 6, 3, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 6, 3, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 6, 3, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 65536, 25, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([0, 65536, 25],"float32"), 2, )
paddle.Tensor.sum(Tensor([0, 7, 6],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 7, 6],"bool"), axis=2, keepdim=True, )
paddle.Tensor.sum(Tensor([0, 8, 7, 7],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([0],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([0],"float32"), )
paddle.Tensor.sum(Tensor([0],"float32"), -1, )
paddle.Tensor.sum(Tensor([0],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([0],"float32"), list[-1,], )
paddle.Tensor.sum(Tensor([0],"float64"), )
paddle.Tensor.sum(Tensor([0],"float64"), 0, )
paddle.Tensor.sum(Tensor([0],"float64"), -1, )
paddle.Tensor.sum(Tensor([0],"float64"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"bool"), )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 0, 1, 1],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 0, 1, 3, 1, 4],"float32"), )
paddle.Tensor.sum(Tensor([1, 0, 1, 5],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 0, 1, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 0, 1, 5],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 0, 1, 5],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 0, 1],"float32"), -2, )
paddle.Tensor.sum(Tensor([1, 0, 10],"float32"), )
paddle.Tensor.sum(Tensor([1, 0, 10285],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 0, 128, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 0, 13, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 0, 13, 27216],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 0, 17, 17],"float64"), )
paddle.Tensor.sum(Tensor([1, 0, 2, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 0, 2],"float64"), -1, )
paddle.Tensor.sum(Tensor([1, 0, 24276],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 0, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 0, 25, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 0, 256, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 0, 27216],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 0, 3],"float32"), )
paddle.Tensor.sum(Tensor([1, 0, 4, 4, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 0],"bool"), )
paddle.Tensor.sum(Tensor([1, 0],"bool"), axis=-1, )
paddle.Tensor.sum(Tensor([1, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 0],"float32"), 1, )
paddle.Tensor.sum(Tensor([1, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 0],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([1, 0],"float32"), list[-1,], )
paddle.Tensor.sum(Tensor([1, 0],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([1, 0],"float64"), list[-1,], )
paddle.Tensor.sum(Tensor([1, 0],"int32"), 0, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"bool"), )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 1, 0, 1],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 1, 0, 17],"float64"), )
paddle.Tensor.sum(Tensor([1, 1, 0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 1, 0, 24276],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 1, 0, 27216],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 1, 0, 5],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 1, 0, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 1, 0, 5],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 1, 0, 5],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 1, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([1, 1, 0],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"bool"), )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"float64"), 0, )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"float64"), 1, )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"float64"), 2, )
paddle.Tensor.sum(Tensor([1, 1, 1, 0],"float64"), 3, )
paddle.Tensor.sum(Tensor([1, 1, 13, 0],"float32"), axis=-2, )
paddle.Tensor.sum(Tensor([1, 1, 17, 0],"float64"), )
paddle.Tensor.sum(Tensor([1, 1, 2, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 128, 0, 3, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 128, 128, 0, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 128, 128, 3, 0],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 128, 256, 0, 3],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 128, 256, 3, 0],"float32"), list[2,3,4,], )
paddle.Tensor.sum(Tensor([1, 2, 0, 3, 1, 4],"float32"), )
paddle.Tensor.sum(Tensor([1, 2, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 2, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 2, 0],"float32"), -2, )
paddle.Tensor.sum(Tensor([1, 2, 0],"float64"), -1, )
paddle.Tensor.sum(Tensor([1, 2, 1, 0, 1, 4],"float32"), )
paddle.Tensor.sum(Tensor([1, 2, 1, 3, 0, 4],"float32"), )
paddle.Tensor.sum(Tensor([1, 2, 1, 3, 1, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 21504, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 3, 0, 4, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 3, 4, 0, 1, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 3, 4, 4, 0, 1],"float32"), )
paddle.Tensor.sum(Tensor([1, 3, 4, 4, 1, 0],"float32"), )
paddle.Tensor.sum(Tensor([1, 65536, 0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([1, 65536, 25, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([10, 0, 1, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 0, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 0, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([10, 0, 4],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([10, 0, 8],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([10, 0],"float32"), 0, )
paddle.Tensor.sum(Tensor([10, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.sum(Tensor([10, 0],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 0],"float64"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([10, 0],"float64"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 2, 0, 2],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 2, 0],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 2, 0],"float64"), 0, )
paddle.Tensor.sum(Tensor([10, 2, 1, 0],"float32"), list[0,-1,], )
paddle.Tensor.sum(Tensor([10, 500, 0],"float32"), axis=2, )
paddle.Tensor.sum(Tensor([10, 5000, 0],"float64"), 0, )
paddle.Tensor.sum(Tensor([100, 0],"float64"), axis=-2, )
paddle.Tensor.sum(Tensor([1000, 0, 2, 3],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([1000, 0, 2],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([1000, 2, 0, 3],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([1000, 2, 0],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([1000, 2, 2, 0],"float32"), list[0,1,], )
paddle.Tensor.sum(Tensor([12, 0, 10, 10, 1],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 0, 10, 10, 80],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 0],"float16"), axis=0, )
paddle.Tensor.sum(Tensor([12, 0],"float32"), axis=0, )
paddle.Tensor.sum(Tensor([12, 3, 0, 10, 1],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 3, 0, 10, 80],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 3, 10, 0, 1],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 3, 10, 0, 80],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([12, 3, 10, 10, 0],"float32"), list[1,2,3,4,], )
paddle.Tensor.sum(Tensor([126, 0, 7, 7],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([126, 8, 0, 7],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([126, 8, 7, 0],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([128, 0, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([128, 2, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([14, 0, 4, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([14, 2, 0, 2, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([14, 2, 4, 0, 3],"float64"), 0, )
paddle.Tensor.sum(Tensor([14, 2, 4, 2, 0],"float64"), 0, )
paddle.Tensor.sum(Tensor([16, 0, 2, 64, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([16, 0, 25],"float32"), 2, )
paddle.Tensor.sum(Tensor([16, 0, 4, 3364],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([16, 0, 58, 58, 2],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([16, 0, 64, 64, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([16, 10, 0, 3364],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([16, 10, 0, 58, 2],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([16, 10, 0, 64, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([16, 10, 0],"float32"), 2, )
paddle.Tensor.sum(Tensor([16, 10, 4, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([16, 10, 58, 0, 2],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([16, 10, 58, 58, 0],"float32"), axis=tuple(2,3,), )
paddle.Tensor.sum(Tensor([16, 10, 64, 0, 2],"float32"), -1, )
paddle.Tensor.sum(Tensor([16, 10, 64, 64, 0],"float32"), -1, )
paddle.Tensor.sum(Tensor([16, 11, 0, 64, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([16, 11, 2, 0, 64],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([16, 11, 2, 64, 0],"float32"), axis=1, )
paddle.Tensor.sum(Tensor([16, 65536, 0],"float32"), 2, )
paddle.Tensor.sum(Tensor([2, 0, 1, 2, 1, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 0, 1, 4, 1],"float32"), )
paddle.Tensor.sum(Tensor([2, 0, 2, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2, 0, 3],"float64"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([2, 0, 4],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0, 8, 8],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"float32"), 1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"float32"), -1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 0],"float32"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([2, 1, 0, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2, 1, 2, 0, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2, 1, 2, 1, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([2, 2, 0, 2, 1, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 0, 1, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 0, 1, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 1, 0, 2, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 1, 1, 0, 3, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 1, 1, 2, 0, 5],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 2, 1, 2, 1, 1, 2, 3, 0],"bool"), 2, )
paddle.Tensor.sum(Tensor([2, 3, 0, 4, 1],"float32"), )
paddle.Tensor.sum(Tensor([2, 3, 0, 8],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 3, 0],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([2, 3, 0],"float64"), list[-2,-1,], )
paddle.Tensor.sum(Tensor([2, 3, 1, 0, 1],"float32"), )
paddle.Tensor.sum(Tensor([2, 3, 1, 4, 0],"float32"), )
paddle.Tensor.sum(Tensor([2, 3, 8, 0],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 2, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 0, 2, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 0, 28],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 3, 3],"float32"), list[1,2,3,], )
paddle.Tensor.sum(Tensor([3, 0, 3, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 3, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 3, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 350],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 0, 5],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([3, 1, 0, 1, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 1, 0, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 1, 2, 0, 1],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 1, 2, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 1, 2, 1, 0],"float32"), axis=-1, )
paddle.Tensor.sum(Tensor([3, 28, 0],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 280, 0],"float32"), axis=-3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 3, 0, 3],"float32"), list[1,2,3,], )
paddle.Tensor.sum(Tensor([3, 3, 0],"bool"), axis=0, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 3, 3, 0],"float32"), list[1,2,3,], )
paddle.Tensor.sum(Tensor([3, 4, 0],"float64"), axis=1, )
paddle.Tensor.sum(Tensor([3, 6, 0, 4, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 0, 4, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 0, 4, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 0, 2, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 0, 2, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 0, 2, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 0, 5],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 0, 5],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 0, 5],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 2, 0],"bool"), axis=3, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 2, 0],"bool"), axis=4, keepdim=True, )
paddle.Tensor.sum(Tensor([3, 6, 3, 4, 2, 0],"bool"), axis=5, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 0, 5],"float64"), 1, )
paddle.Tensor.sum(Tensor([4, 0, 6],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 0, 6],"bool"), axis=2, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 0],"bool"), 1, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 0],"float32"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 3, 0],"float64"), 1, )
paddle.Tensor.sum(Tensor([4, 7, 0],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([4, 7, 0],"bool"), axis=2, keepdim=True, )
paddle.Tensor.sum(Tensor([5, 0, 4],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([5, 3, 0],"bool"), axis=1, keepdim=True, )
paddle.Tensor.sum(Tensor([80, 0, 4, 4, 4, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 0, 8, 4, 4, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 0, 4, 4, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 8, 0, 4, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 8, 4, 0, 4, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 8, 4, 4, 0, 4],"float32"), )
paddle.Tensor.sum(Tensor([80, 128, 8, 4, 4, 4, 0],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 0, 4, 4, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 4, 0, 4, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 4, 4, 0, 4, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 4, 4, 4, 0, 128],"float32"), )
paddle.Tensor.sum(Tensor([80, 4, 4, 4, 4, 4, 0],"float32"), )
paddle.Tensor.sum(Tensor([9, 0, 20],"float64"), list[0,-1,], )
paddle.Tensor.sum(Tensor([9, 10, 0],"float64"), list[0,-1,], )
paddle.Tensor.take_along_axis(Tensor([0, 1000],"float32"), indices=Tensor([0, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([0, 1000],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([0, 1000],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 0],"float32"), indices=Tensor([128, 0],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 0],"float32"), indices=Tensor([128, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 1000],"float32"), indices=Tensor([0, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([128, 1000],"float32"), indices=Tensor([128, 0],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 0],"float32"), indices=Tensor([80, 0],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 0],"float32"), indices=Tensor([80, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 1000],"float32"), indices=Tensor([0, 1],"int32"), axis=-1, )
paddle.Tensor.take_along_axis(Tensor([80, 1000],"float32"), indices=Tensor([80, 0],"int32"), axis=-1, )
paddle.Tensor.topk(Tensor([0, 1000],"float32"), 5, 1, True, True, )
paddle.Tensor.topk(Tensor([0],"float32"), 100083, )
paddle.Tensor.topk(Tensor([0],"float32"), 10173, )
paddle.Tensor.topk(Tensor([0],"float32"), 101931, )
paddle.Tensor.topk(Tensor([0],"float32"), 101946, )
paddle.Tensor.topk(Tensor([0],"float32"), 102327, )
paddle.Tensor.topk(Tensor([0],"float32"), 102396, )
paddle.Tensor.topk(Tensor([0],"float32"), 104598, )
paddle.Tensor.topk(Tensor([0],"float32"), 104646, )
paddle.Tensor.topk(Tensor([0],"float32"), 104883, )
paddle.Tensor.topk(Tensor([0],"float32"), 105876, )
paddle.Tensor.topk(Tensor([0],"float32"), 107739, )
paddle.Tensor.topk(Tensor([0],"float32"), 108291, )
paddle.Tensor.topk(Tensor([0],"float32"), 108540, )
paddle.Tensor.topk(Tensor([0],"float32"), 110289, )
paddle.Tensor.topk(Tensor([0],"float32"), 110832, )
paddle.Tensor.topk(Tensor([0],"float32"), 111645, )
paddle.Tensor.topk(Tensor([0],"float32"), 112293, )
paddle.Tensor.topk(Tensor([0],"float32"), 113463, )
paddle.Tensor.topk(Tensor([0],"float32"), 113676, )
paddle.Tensor.topk(Tensor([0],"float32"), 113790, )
paddle.Tensor.topk(Tensor([0],"float32"), 114213, )
paddle.Tensor.topk(Tensor([0],"float32"), 114261, )
paddle.Tensor.topk(Tensor([0],"float32"), 114330, )
paddle.Tensor.topk(Tensor([0],"float32"), 114561, )
paddle.Tensor.topk(Tensor([0],"float32"), 114750, )
paddle.Tensor.topk(Tensor([0],"float32"), 115383, )
paddle.Tensor.topk(Tensor([0],"float32"), 115494, )
paddle.Tensor.topk(Tensor([0],"float32"), 115920, )
paddle.Tensor.topk(Tensor([0],"float32"), 116010, )
paddle.Tensor.topk(Tensor([0],"float32"), 116085, )
paddle.Tensor.topk(Tensor([0],"float32"), 120090, )
paddle.Tensor.topk(Tensor([0],"float32"), 120693, )
paddle.Tensor.topk(Tensor([0],"float32"), 120765, )
paddle.Tensor.topk(Tensor([0],"float32"), 121008, )
paddle.Tensor.topk(Tensor([0],"float32"), 121383, )
paddle.Tensor.topk(Tensor([0],"float32"), 121500, )
paddle.Tensor.topk(Tensor([0],"float32"), 121539, )
paddle.Tensor.topk(Tensor([0],"float32"), 121758, )
paddle.Tensor.topk(Tensor([0],"float32"), 122073, )
paddle.Tensor.topk(Tensor([0],"float32"), 122982, )
paddle.Tensor.topk(Tensor([0],"float32"), 123516, )
paddle.Tensor.topk(Tensor([0],"float32"), 124155, )
paddle.Tensor.topk(Tensor([0],"float32"), 124257, )
paddle.Tensor.topk(Tensor([0],"float32"), 129726, )
paddle.Tensor.topk(Tensor([0],"float32"), 131643, )
paddle.Tensor.topk(Tensor([0],"float32"), 131952, )
paddle.Tensor.topk(Tensor([0],"float32"), 131961, )
paddle.Tensor.topk(Tensor([0],"float32"), 132105, )
paddle.Tensor.topk(Tensor([0],"float32"), 132522, )
paddle.Tensor.topk(Tensor([0],"float32"), 134115, )
paddle.Tensor.topk(Tensor([0],"float32"), 136164, )
paddle.Tensor.topk(Tensor([0],"float32"), 137484, )
paddle.Tensor.topk(Tensor([0],"float32"), 138210, )
paddle.Tensor.topk(Tensor([0],"float32"), 138852, )
paddle.Tensor.topk(Tensor([0],"float32"), 145707, )
paddle.Tensor.topk(Tensor([0],"float32"), 146148, )
paddle.Tensor.topk(Tensor([0],"float32"), 147111, )
paddle.Tensor.topk(Tensor([0],"float32"), 147315, )
paddle.Tensor.topk(Tensor([0],"float32"), 150507, )
paddle.Tensor.topk(Tensor([0],"float32"), 150945, )
paddle.Tensor.topk(Tensor([0],"float32"), 151971, )
paddle.Tensor.topk(Tensor([0],"float32"), 158844, )
paddle.Tensor.topk(Tensor([0],"float32"), 160434, )
paddle.Tensor.topk(Tensor([0],"float32"), 16623, )
paddle.Tensor.topk(Tensor([0],"float32"), 16704, )
paddle.Tensor.topk(Tensor([0],"float32"), 173505, )
paddle.Tensor.topk(Tensor([0],"float32"), 17520, )
paddle.Tensor.topk(Tensor([0],"float32"), 17526, )
paddle.Tensor.topk(Tensor([0],"float32"), 175965, )
paddle.Tensor.topk(Tensor([0],"float32"), 17598, )
paddle.Tensor.topk(Tensor([0],"float32"), 17601, )
paddle.Tensor.topk(Tensor([0],"float32"), 176061, )
paddle.Tensor.topk(Tensor([0],"float32"), 178701, )
paddle.Tensor.topk(Tensor([0],"float32"), 17988, )
paddle.Tensor.topk(Tensor([0],"float32"), 18054, )
paddle.Tensor.topk(Tensor([0],"float32"), 18081, )
paddle.Tensor.topk(Tensor([0],"float32"), 182052, )
paddle.Tensor.topk(Tensor([0],"float32"), 18795, )
paddle.Tensor.topk(Tensor([0],"float32"), 18969, )
paddle.Tensor.topk(Tensor([0],"float32"), 192987, )
paddle.Tensor.topk(Tensor([0],"float32"), 19461, )
paddle.Tensor.topk(Tensor([0],"float32"), 195024, )
paddle.Tensor.topk(Tensor([0],"float32"), 206889, )
paddle.Tensor.topk(Tensor([0],"float32"), 20913, )
paddle.Tensor.topk(Tensor([0],"float32"), 21504, )
paddle.Tensor.topk(Tensor([0],"float32"), 21621, )
paddle.Tensor.topk(Tensor([0],"float32"), 21639, )
paddle.Tensor.topk(Tensor([0],"float32"), 22047, )
paddle.Tensor.topk(Tensor([0],"float32"), 222156, )
paddle.Tensor.topk(Tensor([0],"float32"), 22458, )
paddle.Tensor.topk(Tensor([0],"float32"), 22485, )
paddle.Tensor.topk(Tensor([0],"float32"), 22938, )
paddle.Tensor.topk(Tensor([0],"float32"), 23199, )
paddle.Tensor.topk(Tensor([0],"float32"), 23337, )
