paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=tuple(1,3,), )
paddle.fft.fftshift(x=Tensor([0],"float32"), )
paddle.fft.fftshift(x=Tensor([2, 0, 2],"float64"), )
paddle.fft.fftshift(x=Tensor([2, 4, 0],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), )
paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=tuple(1,3,), )
paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), )
paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=tuple(1,3,), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=tuple(1,3,), )
paddle.fft.hfft(x=Tensor([0, 2, 2, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([0, 2, 2, 3],"complex128"), n=2, )
paddle.fft.hfft(x=Tensor([0, 2, 2, 3],"complex128"), n=2, axis=1, )
paddle.fft.hfft(x=Tensor([0, 4, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([0, 4],"complex128"), )
paddle.fft.hfft(x=Tensor([0, 4],"complex128"), norm="forward", )
paddle.fft.hfft(x=Tensor([0, 4],"complex128"), norm="ortho", )
paddle.fft.hfft(x=Tensor([0],"complex128"), )
paddle.fft.hfft(x=Tensor([2, 0, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([2, 0],"complex128"), )
paddle.fft.hfft(x=Tensor([2, 0],"complex128"), norm="forward", )
paddle.fft.hfft(x=Tensor([2, 0],"complex128"), norm="ortho", )
paddle.fft.hfft(x=Tensor([2, 4, 0],"complex128"), )
paddle.fft.hfft(x=Tensor([3, 0, 2, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([3, 0, 2, 3],"complex128"), n=2, )
paddle.fft.hfft(x=Tensor([3, 0, 2, 3],"complex128"), n=2, axis=1, )
paddle.fft.hfft(x=Tensor([3, 2, 0, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([3, 2, 0, 3],"complex128"), n=2, )
paddle.fft.hfft(x=Tensor([3, 2, 0, 3],"complex128"), n=2, axis=1, )
paddle.fft.hfft(x=Tensor([3, 2, 2, 0],"complex128"), )
paddle.fft.hfft(x=Tensor([3, 2, 2, 0],"complex128"), n=2, )
paddle.fft.hfft(x=Tensor([3, 2, 2, 0],"complex128"), n=2, axis=1, )
paddle.fft.hfft2(x=Tensor([0, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.hfft2(x=Tensor([0, 3, 3, 3],"complex128"), )
paddle.fft.hfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfft2(x=Tensor([0, 4, 5],"complex128"), )
paddle.fft.hfft2(x=Tensor([0, 4],"complex128"), )
paddle.fft.hfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfft2(x=Tensor([3, 0, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.hfft2(x=Tensor([3, 0, 3, 3],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 0, 5],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 0],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 1, 0],"complex128"), s=tuple(1,2,), )
paddle.fft.hfft2(x=Tensor([3, 3, 0, 3],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 3, 3, 0],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4, 0],"complex128"), )
paddle.fft.hfftn(Tensor([0, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([0, 3, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.hfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.hfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.hfftn(Tensor([0, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.hfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.hfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.hfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.hfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.hfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.hfftn(Tensor([3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 0, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 0, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 1, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 3, 0, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 3, 3, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(x=Tensor([0, 3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.hfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfftn(x=Tensor([0, 3, 4, 2],"complex128"), )
paddle.fft.hfftn(x=Tensor([0, 4, 5],"complex128"), )
paddle.fft.hfftn(x=Tensor([0, 4],"complex128"), )
paddle.fft.hfftn(x=Tensor([0],"complex128"), )
paddle.fft.hfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfftn(x=Tensor([2, 0, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.hfftn(x=Tensor([2, 0, 4, 2],"complex128"), )
paddle.fft.hfftn(x=Tensor([2, 3, 0, 2],"complex128"), )
paddle.fft.hfftn(x=Tensor([2, 3, 0, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.hfftn(x=Tensor([2, 3, 1, 0],"complex128"), s=tuple(1,2,), )
paddle.fft.hfftn(x=Tensor([2, 3, 4, 0],"complex128"), )
paddle.fft.hfftn(x=Tensor([3, 0, 5],"complex128"), )
paddle.fft.hfftn(x=Tensor([3, 0],"complex128"), )
paddle.fft.hfftn(x=Tensor([3, 4, 0],"complex128"), )
paddle.fft.ifft(x=Tensor([0, 3],"complex128"), norm="ortho", )
paddle.fft.ifft(x=Tensor([0],"complex128"), )
paddle.fft.ifft(x=Tensor([0],"complex128"), axis=0, )
paddle.fft.ifft(x=Tensor([0],"complex128"), n=1, )
paddle.fft.ifft(x=Tensor([0],"complex128"), norm="forward", )
paddle.fft.ifft(x=Tensor([0],"complex128"), norm="ortho", )
paddle.fft.ifft(x=Tensor([2, 0],"complex128"), norm="ortho", )
paddle.fft.ifft2(x=Tensor([0, 2, 4, 2],"complex128"), )
paddle.fft.ifft2(x=Tensor([0, 2, 4],"complex128"), )
paddle.fft.ifft2(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="forward", )
paddle.fft.ifft2(x=Tensor([0, 4, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.ifft2(x=Tensor([0, 4],"float64"), )
paddle.fft.ifft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="forward", )
paddle.fft.ifft2(x=Tensor([2, 0, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.ifft2(x=Tensor([2, 0, 4],"complex128"), )
paddle.fft.ifft2(x=Tensor([2, 0],"float64"), )
paddle.fft.ifft2(x=Tensor([2, 2, 0],"complex128"), )
paddle.fft.ifft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="forward", )
paddle.fft.ifft2(x=Tensor([2, 4, 0],"complex128"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.ifft2(x=Tensor([3, 0, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([3, 0, 4, 2],"complex128"), )
paddle.fft.ifft2(x=Tensor([3, 2, 0, 2],"complex128"), )
paddle.fft.ifft2(x=Tensor([3, 2, 4, 0],"complex128"), )
paddle.fft.ifft2(x=Tensor([3, 3, 0, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([3, 3, 2, 0],"complex128"), s=tuple(1,2,), )
paddle.fft.ifftn(Tensor([0, 2, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([0, 2, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([0, 3, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "backward", None, )
paddle.fft.ifftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "forward", None, )
paddle.fft.ifftn(Tensor([0, 4, 2],"complex128"), None, tuple(1,2,), "ortho", None, )
paddle.fft.ifftn(Tensor([0, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "forward", None, )
paddle.fft.ifftn(Tensor([2, 0, 2],"complex128"), None, tuple(1,2,), "ortho", None, )
paddle.fft.ifftn(Tensor([2, 0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 0],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 2, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "forward", None, )
paddle.fft.ifftn(Tensor([2, 4, 0],"complex128"), None, tuple(1,2,), "ortho", None, )
paddle.fft.ifftn(Tensor([3, 0, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 0, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 2, 0, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 2, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 3, 2, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(x=Tensor([0, 4, 2],"float64"), )
paddle.fft.ifftn(x=Tensor([0, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftn(x=Tensor([0, 4, 6],"float64"), s=list[1,], )
paddle.fft.ifftn(x=Tensor([0, 4, 6],"float64"), s=list[2,4,], )
paddle.fft.ifftn(x=Tensor([0, 4],"complex128"), norm="forward", )
paddle.fft.ifftn(x=Tensor([0, 4],"complex128"), norm="ortho", )
paddle.fft.ifftn(x=Tensor([0, 4],"float32"), )
paddle.fft.ifftn(x=Tensor([2, 0, 2],"float64"), )
paddle.fft.ifftn(x=Tensor([2, 4, 0],"float64"), )
paddle.fft.ifftn(x=Tensor([3, 0],"complex128"), norm="forward", )
paddle.fft.ifftn(x=Tensor([3, 0],"complex128"), norm="ortho", )
paddle.fft.ifftn(x=Tensor([4, 0, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftn(x=Tensor([4, 0, 6],"float64"), s=list[1,], )
paddle.fft.ifftn(x=Tensor([4, 0, 6],"float64"), s=list[2,4,], )
paddle.fft.ifftn(x=Tensor([4, 0],"float32"), )
paddle.fft.ifftn(x=Tensor([4, 4, 0, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftn(x=Tensor([4, 4, 0],"float64"), s=list[1,], )
paddle.fft.ifftn(x=Tensor([4, 4, 0],"float64"), s=list[2,4,], )
paddle.fft.ifftn(x=Tensor([4, 4, 6, 0],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftshift(x=Tensor([0, 4, 2],"float64"), )
paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([0, 5, 4, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ifftshift(x=Tensor([0],"float32"), )
paddle.fft.ifftshift(x=Tensor([2, 0, 2],"float64"), )
paddle.fft.ifftshift(x=Tensor([2, 4, 0],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 0, 4, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 5, 0, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 0],"complex128"), axes=tuple(0,3,), )
paddle.fft.ihfft(x=Tensor([0, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([0, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([0, 4, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([0, 4, 3, 3],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([0, 4, 3, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([0, 4],"float64"), norm="forward", )
paddle.fft.ihfft(x=Tensor([0, 4],"float64"), norm="ortho", )
paddle.fft.ihfft(x=Tensor([0],"float32"), )
paddle.fft.ihfft(x=Tensor([2, 0, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 0, 3, 3],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 0, 3, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([2, 0],"float64"), norm="forward", )
paddle.fft.ihfft(x=Tensor([2, 0],"float64"), norm="ortho", )
paddle.fft.ihfft(x=Tensor([2, 4, 0, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 0, 3],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 4, 0, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 0],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 0],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 0],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([4, 0, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([4, 0],"float64"), )
paddle.fft.ihfft(x=Tensor([4, 3, 0],"float64"), )
paddle.fft.ihfft2(x=Tensor([0, 3, 3, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), )
paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfft2(x=Tensor([0, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfft2(x=Tensor([0, 4, 5],"float64"), )
paddle.fft.ihfft2(x=Tensor([0, 4],"float32"), )
paddle.fft.ihfft2(x=Tensor([3, 0, 5],"float64"), )
paddle.fft.ihfft2(x=Tensor([3, 0],"float32"), )
paddle.fft.ihfft2(x=Tensor([3, 4, 0],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 0, 3, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), )
paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfft2(x=Tensor([4, 0, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfft2(x=Tensor([4, 3, 0, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), )
paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfft2(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfft2(x=Tensor([4, 3, 3, 0],"float64"), )
paddle.fft.ihfftn(Tensor([0, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.ihfftn(Tensor([0, 3, 3],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([0, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([0, 4],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 0, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 0],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 4, 0],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 0, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.ihfftn(Tensor([4, 0, 3],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 0, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.ihfftn(Tensor([4, 3, 0],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 3, 0],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), )
paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfftn(x=Tensor([0, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfftn(x=Tensor([0, 3, 5, 2],"float64"), )
paddle.fft.ihfftn(x=Tensor([0, 3, 5],"float64"), )
paddle.fft.ihfftn(x=Tensor([0, 3],"float64"), )
paddle.fft.ihfftn(x=Tensor([0],"float32"), )
paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), )
paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfftn(x=Tensor([4, 0, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfftn(x=Tensor([4, 0, 5, 2],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 0, 5],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 0],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 3, 0, 2],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), )
paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfftn(x=Tensor([4, 3, 0],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfftn(x=Tensor([4, 3, 5, 0],"float64"), )
paddle.fft.irfft(x=Tensor([0, 2, 4],"complex128"), n=2, axis=1, )
paddle.fft.irfft(x=Tensor([0, 4, 2],"complex128"), n=2, )
paddle.fft.irfft(x=Tensor([0, 4, 4, 2],"complex128"), )
paddle.fft.irfft(x=Tensor([0, 4, 4],"complex128"), )
paddle.fft.irfft(x=Tensor([0, 4, 4],"complex128"), norm="forward", )
paddle.fft.irfft(x=Tensor([0, 4, 4],"complex128"), norm="ortho", )
paddle.fft.irfft(x=Tensor([0, 4],"complex128"), )
paddle.fft.irfft(x=Tensor([0],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 0, 4, 2],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), n=2, axis=1, )
paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), norm="forward", )
paddle.fft.irfft(x=Tensor([3, 0, 4],"complex128"), norm="ortho", )
paddle.fft.irfft(x=Tensor([3, 0],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 2, 0],"complex128"), n=2, axis=1, )
paddle.fft.irfft(x=Tensor([3, 4, 0, 2],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 4, 0],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 4, 0],"complex128"), norm="forward", )
paddle.fft.irfft(x=Tensor([3, 4, 0],"complex128"), norm="ortho", )
paddle.fft.irfft(x=Tensor([3, 4, 4, 0],"complex128"), )
paddle.fft.irfft(x=Tensor([4, 0, 2],"complex128"), n=2, )
paddle.fft.irfft(x=Tensor([4, 4, 0],"complex128"), n=2, )
paddle.fft.irfft2(x=Tensor([0, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.irfft2(x=Tensor([0, 2, 4, 5],"complex128"), )
paddle.fft.irfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfft2(x=Tensor([0, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfft2(x=Tensor([0, 4, 5],"complex128"), )
paddle.fft.irfft2(x=Tensor([0, 4],"complex128"), )
paddle.fft.irfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfft2(x=Tensor([1, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfft2(x=Tensor([1, 4, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfft2(x=Tensor([3, 0, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.irfft2(x=Tensor([3, 0, 4, 5],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 0, 5],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 0],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 1, 0],"complex128"), s=tuple(1,2,), )
paddle.fft.irfft2(x=Tensor([3, 2, 0, 5],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 2, 4, 0],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 4, 0],"complex128"), )
paddle.fft.irfftn(Tensor([0, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([0, 2, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.irfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.irfftn(Tensor([0, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.irfftn(Tensor([0, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([0, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.irfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.irfftn(Tensor([1, 0, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.irfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.irfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.irfftn(Tensor([1, 4, 0],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.irfftn(Tensor([3, 0, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 0, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 0, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 1, 0],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 2, 0, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 2, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 4, 0],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(x=Tensor([0, 3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.irfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfftn(x=Tensor([0, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfftn(x=Tensor([0, 3, 4, 2],"complex128"), )
paddle.fft.irfftn(x=Tensor([0, 4, 5],"complex128"), )
paddle.fft.irfftn(x=Tensor([0, 4],"complex128"), )
paddle.fft.irfftn(x=Tensor([0],"complex128"), )
paddle.fft.irfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfftn(x=Tensor([1, 0, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfftn(x=Tensor([1, 3, 0, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfftn(x=Tensor([1, 3, 2, 0],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfftn(x=Tensor([2, 0, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.irfftn(x=Tensor([2, 0, 4, 2],"complex128"), )
paddle.fft.irfftn(x=Tensor([2, 3, 0, 2],"complex128"), )
paddle.fft.irfftn(x=Tensor([2, 3, 0, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.irfftn(x=Tensor([2, 3, 1, 0],"complex128"), s=tuple(1,2,), )
paddle.fft.irfftn(x=Tensor([2, 3, 4, 0],"complex128"), )
paddle.fft.irfftn(x=Tensor([3, 0, 5],"complex128"), )
paddle.fft.irfftn(x=Tensor([3, 0],"complex128"), )
paddle.fft.irfftn(x=Tensor([3, 4, 0],"complex128"), )
paddle.fft.rfft(x=Tensor([0, 2, 2],"float32"), )
paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, )
paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="backward", )
paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="forward", )
paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="ortho", )
paddle.fft.rfft(x=Tensor([0, 2, 2],"float64"), n=1, norm="ortho", axis=2, )
paddle.fft.rfft(x=Tensor([2, 0, 2],"float32"), )
paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, )
paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="backward", )
paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="forward", )
paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="ortho", )
paddle.fft.rfft(x=Tensor([2, 0, 2],"float64"), n=1, norm="ortho", axis=2, )
paddle.fft.rfft(x=Tensor([2, 2, 0],"float32"), )
paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, )
paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="backward", )
paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="forward", )
paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="ortho", )
paddle.fft.rfft(x=Tensor([2, 2, 0],"float64"), n=1, norm="ortho", axis=2, )
paddle.fft.rfft2(x=Tensor([0, 2, 2],"float32"), )
paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], )
paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="backward", )
paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="forward", )
paddle.fft.rfft2(x=Tensor([0, 2, 2],"float64"), s=list[1,2,], norm="ortho", )
paddle.fft.rfft2(x=Tensor([2, 0, 2],"float32"), )
paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], )
paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="backward", )
paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="forward", )
paddle.fft.rfft2(x=Tensor([2, 0, 2],"float64"), s=list[1,2,], norm="ortho", )
paddle.fft.rfft2(x=Tensor([2, 2, 0],"float32"), )
paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], )
paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="backward", )
paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="forward", )
paddle.fft.rfft2(x=Tensor([2, 2, 0],"float64"), s=list[1,2,], norm="ortho", )
paddle.fft.rfftn(Tensor([0, 2, 2],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], None, "ortho", None, )
paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )
paddle.fft.rfftn(Tensor([0, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )
paddle.fft.rfftn(Tensor([2, 0, 2],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], None, "ortho", None, )
paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )
paddle.fft.rfftn(Tensor([2, 0, 2],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )
paddle.fft.rfftn(Tensor([2, 2, 0],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], None, "ortho", None, )
paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )
paddle.fft.rfftn(Tensor([2, 2, 0],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )
paddle.fft.rfftn(x=Tensor([0, 2, 2],"float32"), )
paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], )
paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], axes=list[0,], norm="ortho", )
paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], norm="backward", )
paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], norm="forward", )
paddle.fft.rfftn(x=Tensor([0, 2, 2],"float64"), s=list[1,], norm="ortho", )
paddle.fft.rfftn(x=Tensor([2, 0, 2],"float32"), )
paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], )
paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], axes=list[0,], norm="ortho", )
paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], norm="backward", )
paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], norm="forward", )
paddle.fft.rfftn(x=Tensor([2, 0, 2],"float64"), s=list[1,], norm="ortho", )
paddle.fft.rfftn(x=Tensor([2, 2, 0],"float32"), )
paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], )
paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], axes=list[0,], norm="ortho", )
paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], norm="backward", )
paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], norm="forward", )
paddle.fft.rfftn(x=Tensor([2, 2, 0],"float64"), s=list[1,], norm="ortho", )
paddle.flatten(Tensor([0, 1, 16, 12],"float32"), start_axis=-2, stop_axis=-1, )
paddle.flatten(Tensor([0, 10, 7, 1],"float32"), start_axis=0, stop_axis=2, )
paddle.flatten(Tensor([0, 100, 120],"float64"), 1, 2, )
paddle.flatten(Tensor([0, 1024, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([0, 1024, 1, 40],"float16"), start_axis=2, stop_axis=-1, )
paddle.flatten(Tensor([0, 1024, 1],"float32"), 1, )
paddle.flatten(Tensor([0, 16, 5, 5],"float32"), 1, -1, )
paddle.flatten(Tensor([0, 2, 26, 26],"float32"), start_axis=1, )
paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=1, )
paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=-1, )
paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=2, )
paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=-1, stop_axis=-1, )
paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=1, )
paddle.flatten(Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=-3, )
paddle.flatten(Tensor([0, 2, 4, 4, 5],"float64"), )
paddle.flatten(Tensor([0, 2, 4, 5],"float64"), )
paddle.flatten(Tensor([0, 3, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(Tensor([0, 3, 4],"float64"), start_axis=-2, stop_axis=1, )
paddle.flatten(Tensor([0, 512],"float16"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([0, 6, 3, 4, 2, 5],"float64"), )
paddle.flatten(Tensor([0, 768, 28, 28],"float32"), 2, )
paddle.flatten(Tensor([0, 784],"float32"), )
paddle.flatten(Tensor([0, 8, 14, 12],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([0, 8, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([1, 0, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 0, 14, 12],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([1, 0, 28, 28],"float32"), 2, )
paddle.flatten(Tensor([1, 0, 3],"float64"), start_axis=0, stop_axis=1, )
paddle.flatten(Tensor([1, 0, 3],"float64"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([1, 0, 3],"float64"), start_axis=-3, stop_axis=-3, )
paddle.flatten(Tensor([1, 0, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([1, 1024, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 1024, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([1, 2, 0],"float64"), start_axis=0, stop_axis=1, )
paddle.flatten(Tensor([1, 2, 0],"float64"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([1, 2, 0],"float64"), start_axis=-3, stop_axis=-3, )
paddle.flatten(Tensor([1, 768, 0, 28],"float32"), 2, )
paddle.flatten(Tensor([1, 768, 28, 0],"float32"), 2, )
paddle.flatten(Tensor([1, 8, 0, 12],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([1, 8, 0, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([1, 8, 14, 0],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([1, 8, 7, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([1000, 0],"float32"), )
paddle.flatten(Tensor([12, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([12, 1024, 0],"float32"), 1, )
paddle.flatten(Tensor([128, 0, 1, 40],"float16"), start_axis=2, stop_axis=-1, )
paddle.flatten(Tensor([128, 0],"float16"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([128, 1024, 0, 40],"float16"), start_axis=2, stop_axis=-1, )
paddle.flatten(Tensor([128, 1024, 1, 0],"float16"), start_axis=2, stop_axis=-1, )
paddle.flatten(Tensor([13, 0, 16, 12],"float32"), start_axis=-2, stop_axis=-1, )
paddle.flatten(Tensor([13, 1, 0, 12],"float32"), start_axis=-2, stop_axis=-1, )
paddle.flatten(Tensor([13, 1, 16, 0],"float32"), start_axis=-2, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=2, )
paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=-1, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 3],"float64"), start_axis=-3, stop_axis=1, )
paddle.flatten(Tensor([2, 0, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 4],"float64"), start_axis=-2, stop_axis=1, )
paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=-1, )
paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=2, )
paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=-1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2, 0],"float64"), start_axis=-3, stop_axis=1, )
paddle.flatten(Tensor([2, 3, 0, 5],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(Tensor([2, 3, 0],"float64"), start_axis=-2, stop_axis=1, )
paddle.flatten(Tensor([2, 3, 4, 0],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(Tensor([3, 0, 120],"float64"), 1, 2, )
paddle.flatten(Tensor([3, 0, 3, 4, 2, 5],"float64"), )
paddle.flatten(Tensor([3, 100, 0],"float64"), 1, 2, )
paddle.flatten(Tensor([3, 6, 0, 4, 2, 5],"float64"), )
paddle.flatten(Tensor([3, 6, 3, 0, 2, 5],"float64"), )
paddle.flatten(Tensor([3, 6, 3, 4, 0, 5],"float64"), )
paddle.flatten(Tensor([3, 6, 3, 4, 2, 0],"float64"), )
paddle.flatten(Tensor([32, 0, 26, 26],"float32"), start_axis=1, )
paddle.flatten(Tensor([32, 2, 0, 26],"float32"), start_axis=1, )
paddle.flatten(Tensor([32, 2, 26, 0],"float32"), start_axis=1, )
paddle.flatten(Tensor([4, 0, 4, 4, 5],"float64"), )
paddle.flatten(Tensor([4, 0, 4, 5],"float64"), )
paddle.flatten(Tensor([4, 0, 7, 1],"float32"), start_axis=0, stop_axis=2, )
paddle.flatten(Tensor([4, 10, 0, 1],"float32"), start_axis=0, stop_axis=2, )
paddle.flatten(Tensor([4, 10, 7, 0],"float32"), start_axis=0, stop_axis=2, )
paddle.flatten(Tensor([4, 2, 0, 4, 5],"float64"), )
paddle.flatten(Tensor([4, 2, 0, 5],"float64"), )
paddle.flatten(Tensor([4, 2, 4, 0, 5],"float64"), )
paddle.flatten(Tensor([4, 2, 4, 0],"float64"), )
paddle.flatten(Tensor([4, 2, 4, 4, 0],"float64"), )
paddle.flatten(Tensor([64, 0, 5, 5],"float32"), 1, -1, )
paddle.flatten(Tensor([64, 16, 0, 5],"float32"), 1, -1, )
paddle.flatten(Tensor([64, 16, 5, 0],"float32"), 1, -1, )
paddle.flatten(x=Tensor([0, 1280, 1, 1],"float32"), start_axis=1, )
paddle.flatten(x=Tensor([0, 2, 3],"float32"), )
paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, )
paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=1, )
paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=-1, )
paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=0, stop_axis=2, )
paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=1, stop_axis=2, )
paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=1, )
paddle.flatten(x=Tensor([0, 2, 3],"float64"), start_axis=-3, stop_axis=-3, )
paddle.flatten(x=Tensor([0, 2, 3],"float64"), stop_axis=-1, )
paddle.flatten(x=Tensor([0, 3, 3],"float64"), name="test_name", )
paddle.flatten(x=Tensor([0, 3, 4, 5],"float64"), start_axis=-2, stop_axis=-1, )
paddle.flatten(x=Tensor([0, 3, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(x=Tensor([0, 3, 4],"float64"), start_axis=-2, stop_axis=1, )
paddle.flatten(x=Tensor([0],"float64"), )
paddle.flatten(x=Tensor([1, 0, 3],"float64"), start_axis=0, stop_axis=1, )
paddle.flatten(x=Tensor([1, 0, 3],"float64"), start_axis=1, stop_axis=2, )
paddle.flatten(x=Tensor([1, 0, 3],"float64"), start_axis=-3, stop_axis=-3, )
paddle.flatten(x=Tensor([1, 2, 0],"float64"), start_axis=0, stop_axis=1, )
paddle.flatten(x=Tensor([1, 2, 0],"float64"), start_axis=1, stop_axis=2, )
paddle.flatten(x=Tensor([1, 2, 0],"float64"), start_axis=-3, stop_axis=-3, )
paddle.flatten(x=Tensor([124, 0, 1, 1],"float32"), start_axis=1, )
paddle.flatten(x=Tensor([124, 1280, 0, 1],"float32"), start_axis=1, )
paddle.flatten(x=Tensor([124, 1280, 1, 0],"float32"), start_axis=1, )
paddle.flatten(x=Tensor([2, 0, 3],"float32"), )
paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=0, )
paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=0, stop_axis=2, )
paddle.flatten(x=Tensor([2, 0, 3],"float64"), start_axis=-3, stop_axis=1, )
paddle.flatten(x=Tensor([2, 0, 3],"float64"), stop_axis=-1, )
paddle.flatten(x=Tensor([2, 0, 4, 5],"float64"), start_axis=-2, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 0, 4, 5],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 0, 4],"float64"), start_axis=-2, stop_axis=1, )
paddle.flatten(x=Tensor([2, 2, 0],"float32"), )
paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=0, )
paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=0, stop_axis=2, )
paddle.flatten(x=Tensor([2, 2, 0],"float64"), start_axis=-3, stop_axis=1, )
paddle.flatten(x=Tensor([2, 2, 0],"float64"), stop_axis=-1, )
paddle.flatten(x=Tensor([2, 3, 0, 5],"float64"), start_axis=-2, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 3, 0, 5],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 3, 0],"float64"), start_axis=-2, stop_axis=1, )
paddle.flatten(x=Tensor([2, 3, 4, 0],"float64"), start_axis=-2, stop_axis=-1, )
paddle.flatten(x=Tensor([2, 3, 4, 0],"float64"), start_axis=-3, stop_axis=-1, )
paddle.flatten(x=Tensor([3, 0, 3],"float64"), name="test_name", )
paddle.flatten(x=Tensor([3, 3, 0],"float64"), name="test_name", )
paddle.flip(Tensor([0, 2, 2],"float32"), list[0,1,], )
paddle.flip(Tensor([0, 2],"float32"), tuple(-2,-1,), )
paddle.flip(Tensor([0, 3],"float32"), list[0,], )
paddle.flip(Tensor([0, 4],"float32"), list[0,1,], )
paddle.flip(Tensor([0, 8, 224, 224],"float32"), axis=list[3,], )
paddle.flip(Tensor([0],"int32"), axis=list[0,], )
paddle.flip(Tensor([2, 0],"float32"), list[0,], )
paddle.flip(Tensor([2, 0],"float32"), tuple(-2,-1,), )
paddle.flip(Tensor([3, 0, 2],"float32"), list[0,1,], )
paddle.flip(Tensor([3, 0, 224, 224],"float32"), axis=list[3,], )
paddle.flip(Tensor([3, 2, 0],"float32"), list[0,1,], )
paddle.flip(Tensor([3, 8, 0, 224],"float32"), axis=list[3,], )
paddle.flip(Tensor([3, 8, 224, 0],"float32"), axis=list[3,], )
paddle.flip(Tensor([4, 0],"float32"), list[0,1,], )
paddle.flip(x=Tensor([0, 3, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([0, 3, 3],"bool"), axis=list[0,], )
paddle.flip(x=Tensor([0, 3, 3],"float64"), axis=list[0,1,2,], )
paddle.flip(x=Tensor([0, 3, 3],"float64"), axis=list[-1,0,1,], )
paddle.flip(x=Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 0, 3],"bool"), axis=list[0,], )
paddle.flip(x=Tensor([3, 0, 3],"float64"), axis=list[0,1,2,], )
paddle.flip(x=Tensor([3, 0, 3],"float64"), axis=list[-1,0,1,], )
paddle.flip(x=Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 3, 0],"bool"), axis=list[0,], )
paddle.flip(x=Tensor([3, 3, 0],"float64"), axis=list[0,1,2,], )
paddle.flip(x=Tensor([3, 3, 0],"float64"), axis=list[-1,0,1,], )
paddle.flip(x=Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=list[-1,0,3,4,2,], )
paddle.floor(Tensor([0, 1, 1, 1, 1],"float32"), )
paddle.floor(Tensor([0, 1, 1, 1],"float32"), )
paddle.floor(Tensor([0, 1, 1],"float32"), )
paddle.floor(Tensor([0, 3],"float64"), )
paddle.floor(Tensor([0, 6, 3, 1, 2, 5],"float64"), )
paddle.floor(Tensor([0],"float32"), )
paddle.floor(Tensor([1, 0, 1, 1, 1],"float32"), )
paddle.floor(Tensor([1, 0, 1],"float32"), )
paddle.floor(Tensor([1, 0],"float64"), )
paddle.floor(Tensor([1, 1, 0, 1, 1],"float32"), )
paddle.floor(Tensor([1, 1, 0],"float32"), )
paddle.floor(Tensor([1, 1, 1, 0, 1],"float32"), )
paddle.floor(Tensor([1, 1, 1, 1, 0],"float32"), )
paddle.floor(Tensor([124, 0, 1, 1],"float32"), )
paddle.floor(Tensor([124, 1, 0, 1],"float32"), )
paddle.floor(Tensor([124, 1, 1, 0],"float32"), )
paddle.floor(Tensor([3, 0, 3, 1, 2, 5],"float64"), )
paddle.floor(Tensor([3, 6, 0, 1, 2, 5],"float64"), )
paddle.floor(Tensor([3, 6, 3, 0, 2, 5],"float64"), )
paddle.floor(Tensor([3, 6, 3, 1, 0, 5],"float64"), )
paddle.floor(Tensor([3, 6, 3, 1, 2, 0],"float64"), )
paddle.floor(x=Tensor([0, 3, 3],"float32"), )
paddle.floor(x=Tensor([3, 0, 3],"float32"), )
paddle.floor(x=Tensor([3, 3, 0],"float32"), )
paddle.fmax(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmax(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmax(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.fmax(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmax(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmax(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.fmax(Tensor([0],"int64"), Tensor([3],"int64"), )
paddle.fmax(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.fmax(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), )
paddle.fmax(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), )
paddle.fmax(Tensor([3],"int64"), Tensor([0],"int64"), )
paddle.fmax(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmax(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.fmax(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.fmin(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmin(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmin(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmin(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmin(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.fmin(Tensor([0],"int64"), Tensor([1],"int64"), )
paddle.fmin(Tensor([1],"int64"), Tensor([0],"int64"), )
paddle.fmin(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.fmin(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), )
paddle.fmin(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), )
paddle.fmin(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmin(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.fmin(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.frac(Tensor([0, 20, 1],"float32"), )
paddle.frac(Tensor([0, 3],"float32"), )
paddle.frac(Tensor([10, 0, 1],"float32"), )
paddle.frac(Tensor([10, 20, 0],"float32"), )
paddle.frac(Tensor([2, 0],"float32"), )
paddle.full_like(Tensor([0, 1, 1, 1],"float32"), -3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 1, 6],"float64"), fill_value=6, )
paddle.full_like(Tensor([0, 1],"float32"), 0.5, )
paddle.full_like(Tensor([0, 1],"float32"), fill_value=2, )
paddle.full_like(Tensor([0, 1],"float32"), fill_value=6, )
paddle.full_like(Tensor([0, 1],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([0, 1],"float64"), -2.220446049250313e-16, )
paddle.full_like(Tensor([0, 1],"float64"), fill_value=11, )
paddle.full_like(Tensor([0, 1],"float64"), fill_value=23, )
paddle.full_like(Tensor([0, 1],"float64"), fill_value=41, )
paddle.full_like(Tensor([0, 1],"float64"), math.inf, )
paddle.full_like(Tensor([0, 1],"int64"), 0, )
paddle.full_like(Tensor([0, 1],"int64"), 1, )
paddle.full_like(Tensor([0, 1],"int64"), -1, )
paddle.full_like(Tensor([0, 1],"int64"), 151643, )
paddle.full_like(Tensor([0, 1],"int64"), 2, )
paddle.full_like(Tensor([0, 1],"int64"), 255, )
paddle.full_like(Tensor([0, 1],"int64"), 3, )
paddle.full_like(Tensor([0, 1],"int64"), 7, )
paddle.full_like(Tensor([0, 1],"int64"), 98, )
paddle.full_like(Tensor([0, 10164],"int32"), 80, )
paddle.full_like(Tensor([0, 1024],"float32"), 0.334840825619673, )
paddle.full_like(Tensor([0, 10285],"int32"), 11, )
paddle.full_like(Tensor([0, 2],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([0, 2],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 200],"float32"), 0.0, )
paddle.full_like(Tensor([0, 21504],"int32"), 10, )
paddle.full_like(Tensor([0, 21504],"int32"), 15, )
paddle.full_like(Tensor([0, 232],"float16"), 0.0, None, None, )
paddle.full_like(Tensor([0, 232],"int32"), 1.0, None, None, )
paddle.full_like(Tensor([0, 232],"int32"), 1e-10, None, None, )
paddle.full_like(Tensor([0, 232],"int32"), 1e-100, None, None, )
paddle.full_like(Tensor([0, 3, 3],"float32"), fill_value=2, )
paddle.full_like(Tensor([0, 3, 4],"float64"), fill_value=1, )
paddle.full_like(Tensor([0, 3],"float32"), -10.0, )
paddle.full_like(Tensor([0, 3],"float32"), 100.0, )
paddle.full_like(Tensor([0, 3],"float32"), 2.0, )
paddle.full_like(Tensor([0, 3],"float32"), -3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 3],"float32"), fill_value=math.inf, )
paddle.full_like(Tensor([0, 3],"float32"), fill_value=nan, )
paddle.full_like(Tensor([0, 3],"float64"), 0.9999998807907104, )
paddle.full_like(Tensor([0, 3],"float64"), 1.1754943508222875e-38, )
paddle.full_like(Tensor([0, 300, 4096],"float32"), 1, )
paddle.full_like(Tensor([0, 36858],"int32"), 4, )
paddle.full_like(Tensor([0, 40],"float32"), -1.0, )
paddle.full_like(Tensor([0, 5, 2],"float32"), 0, )
paddle.full_like(Tensor([0, 5, 3],"float32"), 0.0, )
paddle.full_like(Tensor([0, 5, 3],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([0, 5, 3],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 5, 3],"float32"), math.inf, )
paddle.full_like(Tensor([0, 5, 3],"float32"), -math.inf, )
paddle.full_like(Tensor([0, 512],"float16"), 127, )
paddle.full_like(Tensor([0, 512],"float16"), -127, )
paddle.full_like(Tensor([0, 56, 56],"int64"), 15, )
paddle.full_like(Tensor([0, 56, 56],"int64"), 31, )
paddle.full_like(Tensor([0, 6, 3, 1, 2, 5],"float64"), fill_value=3, )
paddle.full_like(Tensor([0, 6, 3, 4, 1, 5],"float64"), fill_value=1, )
paddle.full_like(Tensor([0, 6, 3, 4, 2, 1],"float64"), fill_value=4, )
paddle.full_like(Tensor([0, 64],"float32"), 1.0, )
paddle.full_like(Tensor([0, 64],"float32"), 1e-20, )
paddle.full_like(Tensor([0, 7, 1],"float64"), fill_value=5, )
paddle.full_like(Tensor([0, 8, 64, 64],"float16"), 127, )
paddle.full_like(Tensor([0, 8, 64, 64],"float16"), -127, )
paddle.full_like(Tensor([0, 8000],"float32"), -math.inf, )
paddle.full_like(Tensor([0],"float32"), 0.5, )
paddle.full_like(Tensor([0],"float32"), 1.0, )
paddle.full_like(Tensor([0],"float32"), 1e-20, )
paddle.full_like(Tensor([0],"float32"), fill_value=0, )
paddle.full_like(Tensor([0],"float32"), fill_value=1023, )
paddle.full_like(Tensor([0],"float32"), fill_value=1183, )
paddle.full_like(Tensor([0],"float32"), fill_value=16383, )
paddle.full_like(Tensor([0],"float32"), fill_value=19, )
paddle.full_like(Tensor([0],"float32"), fill_value=2, )
paddle.full_like(Tensor([0],"float32"), fill_value=31, )
paddle.full_like(Tensor([0],"float32"), fill_value=35967, )
paddle.full_like(Tensor([0],"float32"), fill_value=36, )
paddle.full_like(Tensor([0],"float32"), fill_value=5, )
paddle.full_like(Tensor([0],"float32"), fill_value=511, )
paddle.full_like(Tensor([0],"float32"), fill_value=7, )
paddle.full_like(Tensor([0],"float64"), 0.0, )
paddle.full_like(Tensor([0],"float64"), 0.9999998807907104, )
paddle.full_like(Tensor([0],"float64"), 1.1754943508222875e-38, )
paddle.full_like(Tensor([0],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([0],"float64"), -2.220446049250313e-16, )
paddle.full_like(Tensor([0],"float64"), fill_value=167, )
paddle.full_like(Tensor([0],"float64"), fill_value=2159, )
paddle.full_like(Tensor([0],"float64"), math.inf, )
paddle.full_like(Tensor([0],"float64"), -math.inf, )
paddle.full_like(Tensor([0],"int64"), 0, )
paddle.full_like(Tensor([0],"int64"), 1, )
paddle.full_like(Tensor([0],"int64"), 10, )
paddle.full_like(Tensor([0],"int64"), 11, )
paddle.full_like(Tensor([0],"int64"), 12, )
paddle.full_like(Tensor([0],"int64"), 13, )
paddle.full_like(Tensor([0],"int64"), 14, )
paddle.full_like(Tensor([0],"int64"), 15, )
paddle.full_like(Tensor([0],"int64"), 2, )
paddle.full_like(Tensor([0],"int64"), 3, )
paddle.full_like(Tensor([0],"int64"), 4, )
paddle.full_like(Tensor([0],"int64"), 5, )
paddle.full_like(Tensor([0],"int64"), 6, )
paddle.full_like(Tensor([0],"int64"), 7, )
paddle.full_like(Tensor([0],"int64"), 8, )
paddle.full_like(Tensor([0],"int64"), 9, )
paddle.full_like(Tensor([1, 0, 1, 1],"float32"), -3.4028234663852886e+38, )
paddle.full_like(Tensor([1, 0, 3],"float32"), fill_value=2, )
paddle.full_like(Tensor([1, 0, 4],"float64"), fill_value=1, )
paddle.full_like(Tensor([1, 0, 4096],"float32"), 1, )
paddle.full_like(Tensor([1, 0],"float32"), 0.0, )
paddle.full_like(Tensor([1, 0],"float32"), -math.inf, )
paddle.full_like(Tensor([1, 0],"int32"), 10, )
paddle.full_like(Tensor([1, 0],"int32"), 11, )
paddle.full_like(Tensor([1, 0],"int32"), 15, )
paddle.full_like(Tensor([1, 0],"int32"), 4, )
paddle.full_like(Tensor([1, 0],"int64"), 0, )
paddle.full_like(Tensor([1, 0],"int64"), 1, )
paddle.full_like(Tensor([1, 0],"int64"), -1, )
paddle.full_like(Tensor([1, 0],"int64"), 2, )
paddle.full_like(Tensor([1, 0],"int64"), 255, )
paddle.full_like(Tensor([1, 0],"int64"), 3, )
paddle.full_like(Tensor([1, 0],"int64"), 7, )
paddle.full_like(Tensor([1, 0],"int64"), 98, )
paddle.full_like(Tensor([1, 1, 0, 1],"float32"), -3.4028234663852886e+38, )
paddle.full_like(Tensor([1, 1, 1, 0],"float32"), -3.4028234663852886e+38, )
paddle.full_like(Tensor([1, 3, 0],"float32"), fill_value=2, )
paddle.full_like(Tensor([1, 3, 0],"float64"), fill_value=1, )
paddle.full_like(Tensor([1, 300, 0],"float32"), 1, )
paddle.full_like(Tensor([1024, 0],"float32"), 0.334840825619673, )
paddle.full_like(Tensor([114, 0],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([114, 0],"float64"), -2.220446049250313e-16, )
paddle.full_like(Tensor([114, 0],"float64"), math.inf, )
paddle.full_like(Tensor([128, 0],"float16"), 127, )
paddle.full_like(Tensor([128, 0],"float16"), -127, )
paddle.full_like(Tensor([13, 0, 56],"int64"), 15, )
paddle.full_like(Tensor([13, 0, 56],"int64"), 31, )
paddle.full_like(Tensor([13, 56, 0],"int64"), 15, )
paddle.full_like(Tensor([13, 56, 0],"int64"), 31, )
paddle.full_like(Tensor([148, 0, 3],"float32"), 0.0, )
paddle.full_like(Tensor([148, 0, 3],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([148, 0, 3],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([148, 0, 3],"float32"), math.inf, )
paddle.full_like(Tensor([148, 0, 3],"float32"), -math.inf, )
paddle.full_like(Tensor([148, 5, 0],"float32"), 0.0, )
paddle.full_like(Tensor([148, 5, 0],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([148, 5, 0],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([148, 5, 0],"float32"), math.inf, )
paddle.full_like(Tensor([148, 5, 0],"float32"), -math.inf, )
paddle.full_like(Tensor([16, 0],"float32"), 1.0, )
paddle.full_like(Tensor([16, 0],"float32"), 1e-20, )
paddle.full_like(Tensor([16, 0],"int32"), 80, )
paddle.full_like(Tensor([1948, 0],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([1948, 0],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([2, 0, 64, 64],"float16"), 127, )
paddle.full_like(Tensor([2, 0, 64, 64],"float16"), -127, )
paddle.full_like(Tensor([2, 0],"float32"), 0.5, )
paddle.full_like(Tensor([2, 0],"float32"), -10.0, )
paddle.full_like(Tensor([2, 0],"float32"), 100.0, )
paddle.full_like(Tensor([2, 0],"float32"), 2.0, )
paddle.full_like(Tensor([2, 0],"float32"), -3.4028234663852886e+38, )
paddle.full_like(Tensor([2, 0],"float32"), fill_value=2, )
paddle.full_like(Tensor([2, 0],"float32"), fill_value=math.inf, )
paddle.full_like(Tensor([2, 0],"float32"), fill_value=nan, )
paddle.full_like(Tensor([2, 0],"int64"), 151643, )
paddle.full_like(Tensor([2, 8, 0, 64],"float16"), 127, )
paddle.full_like(Tensor([2, 8, 0, 64],"float16"), -127, )
paddle.full_like(Tensor([2, 8, 64, 0],"float16"), 127, )
paddle.full_like(Tensor([2, 8, 64, 0],"float16"), -127, )
paddle.full_like(Tensor([219, 0],"float16"), 0.0, None, None, )
paddle.full_like(Tensor([219, 0],"int32"), 1.0, None, None, )
paddle.full_like(Tensor([219, 0],"int32"), 1e-10, None, None, )
paddle.full_like(Tensor([219, 0],"int32"), 1e-100, None, None, )
paddle.full_like(Tensor([3, 0, 3, 1, 2, 5],"float64"), fill_value=3, )
paddle.full_like(Tensor([3, 0, 3, 4, 1, 5],"float64"), fill_value=1, )
paddle.full_like(Tensor([3, 0, 3, 4, 2, 1],"float64"), fill_value=4, )
paddle.full_like(Tensor([3, 0],"float32"), -1.0, )
paddle.full_like(Tensor([3, 6, 0, 1, 2, 5],"float64"), fill_value=3, )
paddle.full_like(Tensor([3, 6, 0, 4, 1, 5],"float64"), fill_value=1, )
paddle.full_like(Tensor([3, 6, 0, 4, 2, 1],"float64"), fill_value=4, )
paddle.full_like(Tensor([3, 6, 3, 0, 1, 5],"float64"), fill_value=1, )
paddle.full_like(Tensor([3, 6, 3, 0, 2, 1],"float64"), fill_value=4, )
paddle.full_like(Tensor([3, 6, 3, 0, 2, 5],"float64"), fill_value=3, )
paddle.full_like(Tensor([3, 6, 3, 1, 0, 5],"float64"), fill_value=3, )
paddle.full_like(Tensor([3, 6, 3, 1, 2, 0],"float64"), fill_value=3, )
paddle.full_like(Tensor([3, 6, 3, 4, 0, 1],"float64"), fill_value=4, )
paddle.full_like(Tensor([3, 6, 3, 4, 0, 5],"float64"), fill_value=1, )
paddle.full_like(Tensor([3, 6, 3, 4, 1, 0],"float64"), fill_value=1, )
paddle.full_like(Tensor([3, 6, 3, 4, 2, 0],"float64"), fill_value=4, )
paddle.full_like(Tensor([4, 0, 1],"float64"), fill_value=5, )
paddle.full_like(Tensor([4, 0, 2],"float32"), 0, )
paddle.full_like(Tensor([4, 0, 6],"float64"), fill_value=6, )
paddle.full_like(Tensor([4, 0],"float32"), fill_value=6, )
paddle.full_like(Tensor([4, 0],"float64"), fill_value=41, )
paddle.full_like(Tensor([4, 1, 0],"float64"), fill_value=6, )
paddle.full_like(Tensor([4, 5, 0],"float32"), 0, )
paddle.full_like(Tensor([4, 7, 0],"float64"), fill_value=5, )
paddle.full_like(Tensor([5, 0],"float64"), 0.9999998807907104, )
paddle.full_like(Tensor([5, 0],"float64"), 1.1754943508222875e-38, )
paddle.full_like(Tensor([5, 0],"float64"), fill_value=11, )
paddle.full_like(Tensor([7, 0],"float64"), fill_value=23, )
paddle.full_like(x=Tensor([0],"bool"), fill_value=1, )
paddle.full_like(x=Tensor([0],"float64"), fill_value=math.inf, )
paddle.full_like(x=Tensor([0],"float64"), fill_value=-math.inf, )
paddle.gcd(Tensor([0, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.gcd(Tensor([0, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.gcd(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.gcd(Tensor([0],"int64"), Tensor([1],"int64"), )
paddle.gcd(Tensor([1],"int64"), Tensor([0],"int64"), )
paddle.gcd(Tensor([10, 0],"int32"), Tensor([10, 0],"int32"), )
paddle.gcd(Tensor([10, 0],"int32"), Tensor([10, 20],"int32"), )
paddle.gcd(Tensor([10, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.gcd(Tensor([10, 20],"int32"), Tensor([10, 0],"int32"), )
paddle.gcd(x=Tensor([0, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([0, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), )
paddle.gcd(x=Tensor([0, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([0, 5],"int32"), y=Tensor([0, 5],"int32"), )
paddle.gcd(x=Tensor([0, 5],"int32"), y=Tensor([4, 5],"int32"), )
paddle.gcd(x=Tensor([0],"int32"), y=Tensor([0],"int32"), )
paddle.gcd(x=Tensor([0],"int32"), y=Tensor([1],"int32"), )
paddle.gcd(x=Tensor([1],"int32"), y=Tensor([0],"int32"), )
paddle.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )
paddle.gcd(x=Tensor([2, 0, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 0],"int32"), )
paddle.gcd(x=Tensor([2, 4, 0],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([0, 4, 5],"int32"), )
paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )
paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 0],"int32"), )
paddle.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 0],"int32"), )
paddle.gcd(x=Tensor([4, 0],"int32"), y=Tensor([4, 5],"int32"), )
paddle.gcd(x=Tensor([4, 5],"int32"), y=Tensor([0, 5],"int32"), )
paddle.gcd(x=Tensor([4, 5],"int32"), y=Tensor([4, 0],"int32"), )
paddle.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), )
paddle.gcd(x=Tensor([6, 0, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 0, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 0],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([0, 1, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 0, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 0],"int32"), )
paddle.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), )
paddle.gcd(x=Tensor([6, 2, 0, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 0],"int32"), )
paddle.gcd(x=Tensor([6, 2, 4, 0],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([0, 2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 0, 4, 5],"int32"), )
paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 0, 5],"int32"), )
paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 0],"int32"), )
paddle.heaviside(Tensor([0, 100, 13, 17],"float32"), Tensor([100, 13, 17],"float32"), )
paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([0, 13, 1],"float32"), )
paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([100, 13, 1],"float32"), )
paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([0, 17],"float32"), Tensor([0, 17],"float32"), )
paddle.heaviside(Tensor([0, 17],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([0, 17],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([0],"float32"), Tensor([300, 2048],"float32"), )
paddle.heaviside(Tensor([1],"float32"), Tensor([0, 2048],"float32"), )
paddle.heaviside(Tensor([1],"float32"), Tensor([300, 0],"float32"), )
paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([100, 0, 1],"float32"), )
paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([100, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([100, 13, 0],"float32"), )
paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([100, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([0, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([0, 17],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([100, 0, 1],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([100, 13, 0],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([13, 0],"float32"), )
paddle.heaviside(Tensor([13, 0],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([13, 0],"float32"), Tensor([13, 0],"float32"), )
paddle.heaviside(Tensor([13, 0],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([0, 17],"float32"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([0],"float32"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([13, 0],"float32"), )
paddle.heaviside(Tensor([2, 0, 13, 17],"float32"), Tensor([100, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 0, 17],"float32"), Tensor([100, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 0],"float32"), Tensor([100, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([0, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([100, 0, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([100, 13, 0],"float32"), )
paddle.hsplit(Tensor([0, 6, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([0, 6, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([0, 6, 3],"int64"), list[2,4,], )
paddle.hsplit(Tensor([0, 6, 3],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([0, 6],"int64"), list[-1,], )
paddle.hsplit(Tensor([0, 6],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([0, 6],"int64"), list[2,4,], )
paddle.hsplit(Tensor([0, 6],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([0],"int64"), list[-1,], )
paddle.hsplit(Tensor([0],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([0],"int64"), list[2,4,], )
paddle.hsplit(Tensor([0],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([4, 0, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 0, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 0, 3],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 0, 3],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([4, 0],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 0],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 0],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 0],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([4, 6, 0],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 6, 0],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 6, 0],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 6, 0],"int64"), tuple(2,1,3,), )
paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.hstack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.hstack(list[Tensor([0],"float64"),], )
paddle.hstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.hstack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )
paddle.hstack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.hstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )
paddle.hypot(Tensor([0, 10],"float32"), Tensor([0, 1],"float32"), )
paddle.hypot(Tensor([0, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.hypot(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.hypot(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.hypot(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.hypot(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.hypot(Tensor([10, 0],"float32"), Tensor([10, 1],"float32"), )
paddle.hypot(Tensor([10, 10],"float32"), Tensor([0, 1],"float32"), )
paddle.hypot(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.i0(Tensor([0, 20, 1],"float32"), )
paddle.i0(Tensor([0],"float32"), )
paddle.i0(Tensor([10, 0, 1],"float32"), )
paddle.i0(Tensor([10, 20, 0],"float32"), )
paddle.i0e(Tensor([0],"float32"), )
paddle.i1(Tensor([0],"float64"), )
paddle.i1e(Tensor([0],"float64"), )
paddle.imag(Tensor([0, 10, 10, 20],"complex128"), )
paddle.imag(Tensor([0, 3],"complex128"), )
paddle.imag(Tensor([10, 0, 10, 20],"complex128"), )
paddle.imag(Tensor([10, 10, 0, 20],"complex128"), )
paddle.imag(Tensor([10, 10, 10, 0],"complex128"), )
paddle.imag(Tensor([2, 0],"complex128"), )
paddle.imag(x=Tensor([0, 10],"complex64"), )
paddle.imag(x=Tensor([1, 0],"complex64"), )
paddle.inner(Tensor([0, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.inner(Tensor([0, 10, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.inner(Tensor([0, 50],"complex128"), Tensor([50],"complex128"), )
paddle.inner(Tensor([0, 50],"float64"), Tensor([50],"float64"), )
paddle.inner(Tensor([20, 0],"complex128"), Tensor([50],"complex128"), )
paddle.inner(Tensor([20, 0],"float64"), Tensor([50],"float64"), )
paddle.inner(Tensor([20, 50],"complex128"), Tensor([0],"complex128"), )
paddle.inner(Tensor([20, 50],"float64"), Tensor([0],"float64"), )
paddle.inner(Tensor([5, 0, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.inner(Tensor([5, 0, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.inner(Tensor([5, 10, 0],"complex128"), Tensor([2, 10],"complex128"), )
paddle.inner(Tensor([5, 10, 0],"float64"), Tensor([2, 10],"float64"), )
paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([0, 10],"complex128"), )
paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([2, 0],"complex128"), )
paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([2, 0],"float64"), )
paddle.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.inner(x=Tensor([0, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.inner(x=Tensor([0, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.inner(x=Tensor([0, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([0, 4],"float64"), y=Tensor([5, 4],"float64"), )
paddle.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([0, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.inner(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.inner(x=Tensor([2, 0, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 0, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 0],"float64"), )
paddle.inner(x=Tensor([3, 0],"float64"), y=Tensor([5, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([0, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 0, 5, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 0],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 0],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([5, 0],"float64"), )
paddle.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.inner(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([0, 4],"float32"), )
paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([4, 0],"float32"), )
paddle.inner(x=Tensor([4],"float64"), y=Tensor([0],"float64"), )
paddle.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.inner(x=Tensor([5, 0, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.inner(x=Tensor([5, 3, 0],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([0, 5, 4],"float64"), )
paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 0, 4],"float64"), )
paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 0],"float64"), )
paddle.is_complex(Tensor([0, 10285, 2],"float32"), )
paddle.is_complex(Tensor([0, 14, 5, 14],"complex128"), )
paddle.is_complex(Tensor([0, 2, 2],"float32"), )
paddle.is_complex(Tensor([0, 2],"float32"), )
paddle.is_complex(Tensor([0, 3, 4, 5],"bfloat16"), )
paddle.is_complex(Tensor([0, 4, 5, 6, 8],"float32"), )
paddle.is_complex(Tensor([0],"float32"), )
paddle.is_complex(Tensor([0],"int64"), )
paddle.is_complex(Tensor([1, 0, 2],"float32"), )
paddle.is_complex(Tensor([1, 0, 5, 14],"complex128"), )
paddle.is_complex(Tensor([1, 0],"float32"), )
paddle.is_complex(Tensor([1, 10285, 0],"float32"), )
paddle.is_complex(Tensor([1, 14, 0, 14],"complex128"), )
paddle.is_complex(Tensor([1, 14, 5, 0],"complex128"), )
paddle.is_complex(Tensor([1, 2, 0],"float32"), )
paddle.is_complex(Tensor([2, 0, 4, 5],"bfloat16"), )
paddle.is_complex(Tensor([2, 3, 0, 5],"bfloat16"), )
paddle.is_complex(Tensor([2, 3, 4, 0],"bfloat16"), )
paddle.is_complex(Tensor([3, 0, 5, 6, 8],"float32"), )
paddle.is_complex(Tensor([3, 4, 0, 6, 8],"float32"), )
paddle.is_complex(Tensor([3, 4, 5, 0, 8],"float32"), )
paddle.is_complex(Tensor([3, 4, 5, 6, 0],"float32"), )
paddle.isclose(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), )
paddle.isclose(x=Tensor([0, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.isclose(x=Tensor([0],"float32"), y=Tensor([0],"float32"), )
paddle.isclose(x=Tensor([0],"float32"), y=Tensor([2],"float32"), )
paddle.isclose(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.isclose(x=Tensor([0],"float64"), y=Tensor([2],"float64"), )
paddle.isclose(x=Tensor([2],"float32"), y=Tensor([0],"float32"), )
paddle.isclose(x=Tensor([2],"float64"), y=Tensor([0],"float64"), )
paddle.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 0, 5],"float64"), )
paddle.isclose(x=Tensor([3, 0, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 0],"float64"), )
paddle.isclose(x=Tensor([3, 4, 0],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([0, 4, 5],"float64"), )
paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 0, 5],"float64"), )
paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 0],"float64"), )
paddle.isfinite(Tensor([0, 17, 10],"int32"), )
paddle.isfinite(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isfinite(Tensor([0, 17],"float32"), )
paddle.isfinite(Tensor([0, 280, 376, 25, 3],"float32"), )
paddle.isfinite(Tensor([0, 3, 4, 5],"float64"), )
paddle.isfinite(Tensor([0, 94, 311],"float32"), )
paddle.isfinite(Tensor([0],"int64"), )
paddle.isfinite(Tensor([11, 0, 10],"int32"), )
paddle.isfinite(Tensor([11, 0],"float32"), )
paddle.isfinite(Tensor([11, 17, 0],"int32"), )
paddle.isfinite(Tensor([2, 0, 4, 5],"float64"), )
paddle.isfinite(Tensor([2, 3, 0, 5],"float64"), )
paddle.isfinite(Tensor([2, 3, 4, 0],"float64"), )
paddle.isfinite(Tensor([4, 0, 311],"float32"), )
paddle.isfinite(Tensor([4, 0, 376, 25, 3],"float32"), )
paddle.isfinite(Tensor([4, 280, 0, 25, 3],"float32"), )
paddle.isfinite(Tensor([4, 280, 376, 0, 3],"float32"), )
paddle.isfinite(Tensor([4, 280, 376, 25, 0],"float32"), )
paddle.isfinite(Tensor([4, 94, 0],"float32"), )
paddle.isfinite(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isfinite(x=Tensor([0],"float64"), )
paddle.isin(Tensor([0, 2, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([0, 2, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([0, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([0, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([0, 5, 100],"float16"), Tensor([500],"float16"), True, False, )
paddle.isin(Tensor([0, 5, 100],"float16"), Tensor([500],"float16"), True, True, )
paddle.isin(Tensor([0, 5, 100],"float32"), Tensor([500],"float32"), True, False, )
paddle.isin(Tensor([0, 5, 100],"float32"), Tensor([500],"float32"), True, True, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, False, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, True, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, True, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, True, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, True, )
paddle.isin(Tensor([2, 0, 100],"float16"), Tensor([500],"float16"), True, False, )
paddle.isin(Tensor([2, 0, 100],"float16"), Tensor([500],"float16"), True, True, )
paddle.isin(Tensor([2, 0, 100],"float32"), Tensor([500],"float32"), True, False, )
paddle.isin(Tensor([2, 0, 100],"float32"), Tensor([500],"float32"), True, True, )
paddle.isin(Tensor([2, 0, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 0, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 0, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 0, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 0, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 0, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 0, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 0, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 0],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 5, 0],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 5, 0],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 0],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, True, )
paddle.isin(Tensor([2, 5, 0],"float16"), Tensor([500],"float16"), True, False, )
paddle.isin(Tensor([2, 5, 0],"float16"), Tensor([500],"float16"), True, True, )
paddle.isin(Tensor([2, 5, 0],"float32"), Tensor([500],"float32"), True, False, )
paddle.isin(Tensor([2, 5, 0],"float32"), Tensor([500],"float32"), True, True, )
paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, False, )
paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, True, )
paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, False, )
paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, True, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, False, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, True, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, True, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, False, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, True, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, True, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, False, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, True, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, False, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, True, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, True, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, False, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, True, )
paddle.isinf(Tensor([0, 12],"float32"), )
paddle.isinf(Tensor([0, 12],"float64"), )
paddle.isinf(Tensor([0, 17, 10],"int16"), )
paddle.isinf(Tensor([0, 17, 10],"int32"), )
paddle.isinf(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isinf(Tensor([0, 3, 4, 5],"float64"), )
paddle.isinf(Tensor([0, 3, 4, 5],"int8"), )
paddle.isinf(Tensor([0],"int64"), )
paddle.isinf(Tensor([0],"uint8"), )
paddle.isinf(Tensor([10, 0],"float32"), )
paddle.isinf(Tensor([10, 0],"float64"), )
paddle.isinf(Tensor([11, 0, 10],"int16"), )
paddle.isinf(Tensor([11, 0, 10],"int32"), )
paddle.isinf(Tensor([11, 17, 0],"int16"), )
paddle.isinf(Tensor([11, 17, 0],"int32"), )
paddle.isinf(Tensor([2, 0, 4, 5],"float64"), )
paddle.isinf(Tensor([2, 0, 4, 5],"int8"), )
paddle.isinf(Tensor([2, 3, 0, 5],"float64"), )
paddle.isinf(Tensor([2, 3, 0, 5],"int8"), )
paddle.isinf(Tensor([2, 3, 4, 0],"float64"), )
paddle.isinf(Tensor([2, 3, 4, 0],"int8"), )
paddle.isinf(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isinf(x=Tensor([0],"float64"), )
paddle.isnan(Tensor([0, 17, 10],"int32"), )
paddle.isnan(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isnan(Tensor([0, 17],"float32"), )
paddle.isnan(Tensor([0, 3, 4, 5],"float32"), )
paddle.isnan(Tensor([0, 3, 4, 5],"float64"), )
paddle.isnan(Tensor([0, 512],"float16"), )
paddle.isnan(Tensor([0, 64, 16],"float32"), )
paddle.isnan(Tensor([0],"float16"), )
paddle.isnan(Tensor([0],"float32"), )
paddle.isnan(Tensor([1024, 0],"float16"), )
paddle.isnan(Tensor([11, 0, 10],"int32"), )
paddle.isnan(Tensor([11, 0],"float32"), )
paddle.isnan(Tensor([11, 17, 0],"int32"), )
paddle.isnan(Tensor([14, 0, 16],"float32"), )
paddle.isnan(Tensor([14, 64, 0],"float32"), )
paddle.isnan(Tensor([2, 0, 4, 5],"float32"), )
paddle.isnan(Tensor([2, 0, 4, 5],"float64"), )
paddle.isnan(Tensor([2, 3, 0, 5],"float32"), )
paddle.isnan(Tensor([2, 3, 0, 5],"float64"), )
paddle.isnan(Tensor([2, 3, 4, 0],"float32"), )
paddle.isnan(Tensor([2, 3, 4, 0],"float64"), )
paddle.isnan(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isnan(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isnan(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isnan(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isnan(x=Tensor([0],"float64"), )
paddle.isneginf(Tensor([0, 17, 10],"int16"), )
paddle.isneginf(Tensor([0, 17, 10],"int32"), )
paddle.isneginf(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isneginf(Tensor([0, 17],"float32"), )
paddle.isneginf(Tensor([0, 3, 4, 5],"float64"), )
paddle.isneginf(Tensor([0, 3, 4, 5],"int8"), )
paddle.isneginf(Tensor([0],"int64"), )
paddle.isneginf(Tensor([0],"uint8"), )
paddle.isneginf(Tensor([11, 0, 10],"int16"), )
paddle.isneginf(Tensor([11, 0, 10],"int32"), )
paddle.isneginf(Tensor([11, 0],"float32"), )
paddle.isneginf(Tensor([11, 17, 0],"int16"), )
paddle.isneginf(Tensor([11, 17, 0],"int32"), )
paddle.isneginf(Tensor([2, 0, 4, 5],"float64"), )
paddle.isneginf(Tensor([2, 0, 4, 5],"int8"), )
paddle.isneginf(Tensor([2, 3, 0, 5],"float64"), )
paddle.isneginf(Tensor([2, 3, 0, 5],"int8"), )
paddle.isneginf(Tensor([2, 3, 4, 0],"float64"), )
paddle.isneginf(Tensor([2, 3, 4, 0],"int8"), )
paddle.isneginf(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isneginf(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isneginf(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isneginf(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isposinf(Tensor([0, 17, 10],"int16"), )
paddle.isposinf(Tensor([0, 17, 10],"int32"), )
paddle.isposinf(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isposinf(Tensor([0, 17],"float32"), )
paddle.isposinf(Tensor([0, 3, 4, 5],"float64"), )
paddle.isposinf(Tensor([0, 3, 4, 5],"int8"), )
paddle.isposinf(Tensor([0],"int64"), )
paddle.isposinf(Tensor([0],"uint8"), )
paddle.isposinf(Tensor([11, 0, 10],"int16"), )
paddle.isposinf(Tensor([11, 0, 10],"int32"), )
paddle.isposinf(Tensor([11, 0],"float32"), )
paddle.isposinf(Tensor([11, 17, 0],"int16"), )
paddle.isposinf(Tensor([11, 17, 0],"int32"), )
paddle.isposinf(Tensor([2, 0, 4, 5],"float64"), )
paddle.isposinf(Tensor([2, 0, 4, 5],"int8"), )
paddle.isposinf(Tensor([2, 3, 0, 5],"float64"), )
paddle.isposinf(Tensor([2, 3, 0, 5],"int8"), )
paddle.isposinf(Tensor([2, 3, 4, 0],"float64"), )
paddle.isposinf(Tensor([2, 3, 4, 0],"int8"), )
paddle.isposinf(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isposinf(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isposinf(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isposinf(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isreal(Tensor([0, 3],"bfloat16"), )
paddle.isreal(Tensor([0, 3],"bool"), )
paddle.isreal(Tensor([2, 0],"bfloat16"), )
paddle.isreal(Tensor([2, 0],"bool"), )
paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4],"float32"), )
paddle.kron(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.kron(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([2, 2, 3],"float64"), )
paddle.kron(Tensor([0, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([0, 8],"float16"), Tensor([0, 8],"float16"), )
paddle.kron(Tensor([0, 8],"float16"), Tensor([16, 8],"float16"), )
paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4],"float32"), )
paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 0, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 0],"float32"), )
paddle.kron(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.kron(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.kron(Tensor([12, 0],"float16"), Tensor([16, 0],"float16"), )
paddle.kron(Tensor([12, 0],"float16"), Tensor([16, 8],"float16"), )
paddle.kron(Tensor([12, 8],"float16"), Tensor([0, 8],"float16"), )
paddle.kron(Tensor([12, 8],"float16"), Tensor([16, 0],"float16"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([2, 2, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 2, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 0, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 2, 0],"float64"), )
paddle.kron(Tensor([5, 0, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 0, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 0, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 0, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 0],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([0, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 0, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 0],"float32"), )
paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([0, 3],"float64"), )
paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([3, 3, 2],"float64"), )
paddle.kron(x=Tensor([0, 2],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([0, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.kron(x=Tensor([0, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.kron(x=Tensor([0],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([1],"float64"), y=Tensor([0, 3],"float64"), )
paddle.kron(x=Tensor([1],"float64"), y=Tensor([3, 0],"float64"), )
paddle.kron(x=Tensor([2, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.kron(x=Tensor([2, 0],"float32"), y=Tensor([3, 3],"float32"), )
paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 0],"float64"), )
paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 3, 2],"float64"), )
paddle.kron(x=Tensor([2, 0],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([0, 3, 2],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([0, 3],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 0, 2],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 0],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 3, 0],"float64"), )
paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([0, 3],"float32"), )
paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([3, 0],"float32"), )
paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.lerp(Tensor([0, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([0, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([0, 2, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([0, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), )
paddle.lerp(Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.lerp(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.lerp(Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([0, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([0, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.lerp(Tensor([0],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), Tensor([1, 0, 3],"float32"), )
paddle.lerp(Tensor([1, 0, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.lerp(Tensor([1, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 28, 0],"float32"), 1.0, )
paddle.lerp(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.lerp(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 0, 3],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 0],"float32"), Tensor([1, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([0, 3, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 0, 3],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float32"), Tensor([1, 3, 3],"float32"), Tensor([1, 3, 0],"float32"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.lerp(Tensor([1, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 0],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 0],"float64"), )
paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([1],"float64"), Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.lerp(Tensor([10, 0, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 0, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 0, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 1, 0, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 0, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 0],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([0, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 0, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 0, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 0, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([10, 10, 0, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 0],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([0, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 0, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 0, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 0],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([10, 5, 0, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 0, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 0],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([0, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 0, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 0, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 0, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 0, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([0, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), )
paddle.lerp(Tensor([2, 2, 0],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([0, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 0, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 0, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 1, 0],"float32"), 0.5, )
paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([0, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 0, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 0],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([0, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 0, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 0, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 0],"float32"), )
paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 28, 0],"float32"), 1.2, )
paddle.lerp(Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([0, 6, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 0, 3, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 0, 1, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 0, 2, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 5],"float64"), Tensor([3, 6, 3, 1, 2, 0],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([0, 6, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 0, 3, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 0, 4, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 0, 1, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 0, 5],"float64"), )
paddle.lerp(Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 5],"float64"), Tensor([3, 6, 3, 4, 1, 0],"float64"), )
paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([300, 0],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([300, 2048],"float32"), Tensor([0, 2048],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([0],"float32"), )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.lerp(x=Tensor([0, 5],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.lerp(x=Tensor([0],"float32"), y=Tensor([4],"float32"), weight=0.5, )
paddle.lerp(x=Tensor([0],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([0],"float64"), y=Tensor([4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 0],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 0, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 0],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 0],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([0, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 0, 4, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 0, 3],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.0, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 0],"float64"), weight=1.0, )
paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([0, 5, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 0, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 5, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0, 5],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([0],"float64"), weight=0.2, )
paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([4, 0],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4],"float32"), y=Tensor([0],"float32"), weight=0.5, )
paddle.lerp(x=Tensor([4],"float64"), y=Tensor([0],"float64"), weight=0.5, )
paddle.lgamma(Tensor([0, 1, 1, 1],"float32"), )
paddle.lgamma(Tensor([0, 1, 1],"float32"), )
paddle.lgamma(Tensor([0, 1],"float32"), )
paddle.lgamma(Tensor([0, 10, 10, 2],"float64"), )
paddle.lgamma(Tensor([0, 2, 2],"float32"), )
paddle.lgamma(Tensor([0, 2],"float32"), )
paddle.lgamma(Tensor([0],"float32"), )
paddle.lgamma(Tensor([0],"float64"), )
paddle.lgamma(Tensor([1, 0, 2],"float32"), )
paddle.lgamma(Tensor([1, 0],"float32"), )
paddle.lgamma(Tensor([1, 2, 0],"float32"), )
paddle.lgamma(Tensor([10, 0, 1, 1],"float32"), )
paddle.lgamma(Tensor([10, 0, 1],"float32"), )
paddle.lgamma(Tensor([10, 0, 10, 2],"float64"), )
paddle.lgamma(Tensor([10, 1, 0, 1],"float32"), )
paddle.lgamma(Tensor([10, 1, 0],"float32"), )
paddle.lgamma(Tensor([10, 1, 1, 0],"float32"), )
paddle.lgamma(Tensor([10, 10, 0, 2],"float64"), )
paddle.lgamma(Tensor([10, 10, 10, 0],"float64"), )
paddle.lgamma(x=Tensor([0, 3],"float32"), )
paddle.lgamma(x=Tensor([0, 3],"float64"), )
paddle.lgamma(x=Tensor([0, 6, 6],"float64"), )
paddle.lgamma(x=Tensor([3, 0],"float32"), )
paddle.lgamma(x=Tensor([3, 0],"float64"), )
paddle.lgamma(x=Tensor([6, 0, 6],"float64"), )
paddle.lgamma(x=Tensor([6, 6, 0],"float64"), )
paddle.linalg.cholesky_solve(Tensor([0, 2],"float64"), Tensor([0, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([0, 2],"float64"), Tensor([20, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 0, 2],"float64"), Tensor([2, 0, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 0, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 0],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 0, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 30, 0],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([0, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([20, 0],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([0, 4],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float32"), y=Tensor([4, 4],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([0, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([0, 1],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([0, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([0, 4, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 0],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float32"), y=Tensor([4, 4],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 0],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 0],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([0, 4],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float32"), y=Tensor([4, 0],"float32"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([0, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([4, 1],"float64"), y=Tensor([4, 0],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 0, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 3],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 0, 4, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 0, 3],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 0],"float64"), y=Tensor([5, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([0, 2, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 0, 4, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 0, 4],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 2, 4, 3],"float64"), y=Tensor([5, 2, 4, 0],"float64"), upper=True, )
paddle.linalg.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 0],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 4, 0],"float64"), y=Tensor([5, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([0, 4, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 0, 4],"float64"), )
paddle.linalg.cholesky_solve(x=Tensor([5, 4, 3],"float64"), y=Tensor([5, 4, 0],"float64"), )
paddle.linalg.cond(Tensor([0, 3],"float32"), )
paddle.linalg.cond(Tensor([0, 3],"float32"), p="fro", )
paddle.linalg.cond(Tensor([0, 3],"float32"), p="nuc", )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=1, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=-1, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=2, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), "nuc", )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), None, )
paddle.linalg.cond(Tensor([0, 4, 4],"float32"), p="fro", )
paddle.linalg.cond(Tensor([0, 5],"float32"), "fro", )
paddle.linalg.cond(Tensor([0, 5],"float32"), "nuc", )
paddle.linalg.cond(Tensor([0, 5],"float32"), 1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), None, )
paddle.linalg.cond(Tensor([0, 7],"float64"), 2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), -2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), None, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), "nuc", )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 0, 4],"float32"), p="fro", )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), "nuc", )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 0],"float32"), p="fro", )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), "nuc", )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), None, )
paddle.linalg.cond(Tensor([3, 0],"float32"), )
paddle.linalg.cond(Tensor([3, 0],"float32"), p="fro", )
paddle.linalg.cond(Tensor([3, 0],"float32"), p="nuc", )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=-1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=2, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), "fro", )
paddle.linalg.cond(Tensor([5, 0],"float32"), "nuc", )
paddle.linalg.cond(Tensor([5, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), None, )
paddle.linalg.cond(Tensor([9, 0],"float64"), 2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), -2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), None, )
paddle.linalg.cond(x=Tensor([0, 2, 4, 3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([0, 2, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([0, 2, 4, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([0, 2, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([0, 3],"float32"), )
paddle.linalg.cond(x=Tensor([0, 3],"float64"), )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p="fro", )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p="nuc", )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([0, 4],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([3, 0],"float32"), )
paddle.linalg.cond(x=Tensor([3, 0],"float64"), )
paddle.linalg.cond(x=Tensor([4, 0, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 0, 4, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 0, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p="fro", )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p="nuc", )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([4, 0],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 0, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 0],"float64"), p=-math.inf, )
paddle.linalg.cond(x=Tensor([6, 0, 4, 3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([6, 0],"float64"), p=-2, )
paddle.linalg.cond(x=Tensor([6, 2, 0, 3, 4],"float64"), )
paddle.linalg.cond(x=Tensor([6, 2, 4, 0, 4],"float64"), )
paddle.linalg.cond(x=Tensor([6, 2, 4, 3, 0],"float64"), )
paddle.linalg.cov(Tensor([0, 4],"float32"), )
paddle.linalg.cov(Tensor([0],"float32"), )
paddle.linalg.cov(Tensor([3, 0],"float32"), )
paddle.linalg.cov(x=Tensor([0, 12],"float64"), )
paddle.linalg.cov(x=Tensor([0, 2],"float32"), )
paddle.linalg.cov(x=Tensor([4, 0],"float32"), )
paddle.linalg.cov(x=Tensor([4, 0],"float64"), )
paddle.linalg.det(Tensor([0, 1, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([0, 3, 3],"float32"), )
paddle.linalg.det(Tensor([0, 3, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([0, 3, 5, 5],"float32"), )
paddle.linalg.det(Tensor([0, 3],"float32"), )
paddle.linalg.det(Tensor([2, 0, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 0, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 0, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 3, 0, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 3, 6, 0],"complex64"), )
paddle.linalg.det(Tensor([3, 0, 3],"float32"), )
paddle.linalg.det(Tensor([3, 0, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 0, 5, 5],"float32"), )
paddle.linalg.det(Tensor([3, 0],"float32"), )
paddle.linalg.det(Tensor([3, 3, 0, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 3, 0, 5],"float32"), )
paddle.linalg.det(Tensor([3, 3, 0],"float32"), )
paddle.linalg.det(Tensor([3, 3, 5, 0],"complex128"), )
paddle.linalg.det(Tensor([3, 3, 5, 0],"float32"), )
paddle.linalg.det(x=Tensor([0, 4, 4],"float64"), )
paddle.linalg.det(x=Tensor([0, 4],"float32"), )
paddle.linalg.det(x=Tensor([0, 4],"float64"), )
paddle.linalg.det(x=Tensor([3, 0, 4],"float64"), )
paddle.linalg.det(x=Tensor([3, 4, 0],"float64"), )
paddle.linalg.det(x=Tensor([4, 0],"float32"), )
paddle.linalg.det(x=Tensor([4, 0],"float64"), )
paddle.linalg.inv(Tensor([0, 5],"float64"), )
paddle.linalg.inv(Tensor([5, 0],"float64"), )
paddle.linalg.inv(x=Tensor([0, 2, 2],"float64"), )
paddle.linalg.inv(x=Tensor([0, 3, 4, 4],"float64"), )
paddle.linalg.inv(x=Tensor([0, 4],"float32"), )
paddle.linalg.inv(x=Tensor([0, 4],"float64"), )
paddle.linalg.inv(x=Tensor([2, 0, 2],"float64"), )
paddle.linalg.inv(x=Tensor([2, 2, 0],"float64"), )
paddle.linalg.inv(x=Tensor([4, 0],"float32"), )
paddle.linalg.inv(x=Tensor([4, 0],"float64"), )
paddle.linalg.inv(x=Tensor([5, 0, 4, 4],"float64"), )
paddle.linalg.inv(x=Tensor([5, 3, 0, 4],"float64"), )
paddle.linalg.inv(x=Tensor([5, 3, 4, 0],"float64"), )
paddle.linalg.lstsq(Tensor([0, 10],"float64"), Tensor([0, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 10],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 2, 8],"float32"), Tensor([0, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 2, 8],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 5],"float32"), Tensor([0, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 5],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 7, 3],"float64"), Tensor([0, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 7, 3],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 8, 6],"float64"), Tensor([0, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 8, 6],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 9],"float32"), Tensor([0, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 9],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 3],"float64"), Tensor([10, 0, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 3],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 6],"float64"), Tensor([10, 0, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 6],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([0, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([0, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 0, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([0, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 0, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 0, 8],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([0, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 0, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([0, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 0],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([0, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([9, 0],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_power(Tensor([0, 4],"float64"), -2, )
paddle.linalg.matrix_power(Tensor([4, 0],"float64"), -2, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 10, 10],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 3, 2, 1, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 32, 32],"float64"), n=0, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 4, 4],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([0, 2, 4, 4],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([0, 4, 4],"float32"), n=3, )
paddle.linalg.matrix_power(x=Tensor([0, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 10, 10],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 2, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 3, 2, 1, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 3, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 3, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 32, 32],"float64"), n=0, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4, 4],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4, 4],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4],"float32"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 0, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 10],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 2, 1, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 2, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 2, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 32],"float64"), n=0, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 4],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 4],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 0, 7, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 10, 0],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 0, 6, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 0, 1, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 0, 11, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 0, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 11, 0, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 2, 7, 6, 1, 11, 4, 0],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 0, 1, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 0, 1, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 0, 1, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 0, 32, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 0, 32, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 0, 32, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 0, 32],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 0, 32],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 0, 32],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 0],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 0],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 3, 2, 1, 32, 0],"float64"), n=-2, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 32, 0],"float64"), n=0, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 32, 0],"float64"), n=10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 32, 0],"float64"), n=-10, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 4, 0],"float64"), n=64, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 4, 0],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([3, 4, 0],"float32"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 4, 0],"float64"), n=3, )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([0, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([0, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 3],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 5],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), tol=Tensor([0],"float32"), )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([0, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([200, 0],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 5],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 0],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([0, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 0],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), Tensor([0, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), Tensor([3, 0],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([0, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([0, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 0],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 0],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([0, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([0, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), Tensor([0, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), Tensor([3, 0],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 0],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), Tensor([0, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), Tensor([1, 0],"float64"), False, )
paddle.linalg.matrix_rank(x=Tensor([0, 2, 4, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 3, 4, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 3, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 4, 4, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([0, 4],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([0, 5],"float64"), tol=4.4, hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 0, 4, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 0, 4],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 0],"float64"), tol=Tensor([1, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 4],"float64"), tol=Tensor([0, 1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 2, 4, 4],"float64"), tol=Tensor([1, 0],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 0, 4],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 0, 4],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 0],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 0],"float64"), tol=Tensor([2, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([0, 3],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([0],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 3, 4, 4],"float64"), tol=Tensor([2, 0],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 0, 5],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 0],"float64"), tol=Tensor([2, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 5],"float64"), tol=Tensor([0, 1],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([2, 4, 4, 5],"float64"), tol=Tensor([2, 0],"float64"), hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=4.4, hermitian=False, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=4.4, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 0],"float64"), tol=Tensor([1],"float64"), hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 4],"float64"), tol=Tensor([0],"float64"), hermitian=True, )
paddle.linalg.multi_dot(list[Tensor([0, 10],"float64"),Tensor([0, 4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 10],"float64"),Tensor([10, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 3],"float64"),Tensor([3, 2],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([0, 8],"float64"),Tensor([0, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([4, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 4],"float64"),Tensor([4, 8],"float64"),Tensor([8, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 6],"float64"),Tensor([0, 3],"float64"),Tensor([0, 4],"float64"),Tensor([0, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 6],"float64"),Tensor([6],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0, 8],"float16"),Tensor([0, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([0, 8],"float16"),Tensor([8, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float32"),Tensor([4, 5],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([3, 4],"float64"),Tensor([4, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 3],"float64"),Tensor([3, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4, 5],"float64"),Tensor([5, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([0],"float64"),Tensor([6, 4],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float16"),Tensor([8, 0],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float16"),Tensor([8, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([10, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([10, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([3, 2],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 0],"float64"),Tensor([4, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([0, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([10, 0],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([10, 4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([10, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([0, 2],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([3, 0],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([3, 2],"float64"),Tensor([0, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([3, 2],"float64"),Tensor([2, 0],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([3, 2],"float64"),Tensor([2, 3],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([0, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 0],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 3],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float16"),Tensor([0, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float16"),Tensor([8, 0],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 0],"float64"),Tensor([4, 0],"float64"),Tensor([8, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 0],"float64"),Tensor([4, 8],"float64"),Tensor([8, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 0],"float64"),Tensor([6],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([0, 8],"float64"),Tensor([8, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),Tensor([8, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 8],"float64"),Tensor([0, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 8],"float64"),Tensor([8, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 6],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([0, 4],"float64"),Tensor([4, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([3, 0],"float64"),Tensor([4, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([3, 4],"float64"),Tensor([0, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 2],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([0, 5],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([4, 0],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([4, 5],"float32"),Tensor([0],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 3],"float64"),Tensor([3, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0, 5],"float64"),Tensor([5, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),Tensor([3, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 0],"float64"),Tensor([5, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([0, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([0, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 0],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 4],"float64"),Tensor([0, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 5],"float64"),Tensor([0, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 5],"float64"),Tensor([5, 0],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 5],"float64"),Tensor([5, 2],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([6],"float64"),Tensor([0, 4],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([6],"float64"),Tensor([6, 0],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([6],"float64"),Tensor([6, 4],"float64"),Tensor([0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 0],"float64"),Tensor([6, 0],"float64"),Tensor([3, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 0],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([0, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 0],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([0, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 0],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([0, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 0],"float64"),], )
paddle.linalg.norm(Tensor([0, 1, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([0, 2],"float32"), 2.0, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([0, 3, 4, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([0, 3, 4, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([0, 5, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([0, 50, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 6],"float32"), )
paddle.linalg.norm(Tensor([0, 6],"float32"), p=1, axis=list[0,1,], )
paddle.linalg.norm(Tensor([0, 6],"float32"), p=2, axis=list[0,1,], )
paddle.linalg.norm(Tensor([0, 6],"float32"), p=-math.inf, axis=list[0,1,], )
paddle.linalg.norm(Tensor([0],"float32"), )
paddle.linalg.norm(Tensor([0],"float32"), 2.0, )
paddle.linalg.norm(Tensor([0],"float32"), p=1, )
paddle.linalg.norm(Tensor([0],"float32"), p=1, axis=0, )
paddle.linalg.norm(Tensor([1, 0],"float32"), 2.0, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([2, 0, 4, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 0, 4, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([2, 3, 0, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 3, 0, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([2, 3, 4, 0],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 3, 4, 0],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([300, 0, 4],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([300, 1, 0],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([4, 0],"float32"), )
paddle.linalg.norm(Tensor([4, 0],"float32"), p=1, axis=list[0,1,], )
paddle.linalg.norm(Tensor([4, 0],"float32"), p=2, axis=list[0,1,], )
paddle.linalg.norm(Tensor([4, 0],"float32"), p=-math.inf, axis=list[0,1,], )
paddle.linalg.norm(Tensor([5, 0, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([5, 5, 0],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([50, 0, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50, 50, 0],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=1, p=0, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([0, 3, 3],"float64"), axis=None, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3],"float64"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=1, p=0, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 0, 3],"float64"), axis=None, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=1, p=0, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([3, 3, 0],"float64"), axis=None, )
paddle.linalg.pinv(Tensor([0, 200, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 0, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 200, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([0, 2, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.pinv(x=Tensor([0, 4, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([0, 4, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([0, 4],"float32"), )
paddle.linalg.pinv(x=Tensor([0, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 0, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 0, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([2, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 4, 0],"float64"), )
paddle.linalg.pinv(x=Tensor([2, 4, 0],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([3, 0],"float32"), )
paddle.linalg.pinv(x=Tensor([4, 0, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.pinv(x=Tensor([4, 2, 0],"float64"), rcond=5, hermitian=True, )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([0, 4],"float32"), )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([10, 4],"float32"), )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([6, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([10, 4],"float64"), )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([4, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3],"float64"), Tensor([3],"float64"), )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([10, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([6, 0],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([6, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([10, 4],"float64"), )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([4, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([4, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([0, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([6, 0],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([4, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([3, 0],"float64"), Tensor([3],"float64"), )
paddle.linalg.solve(Tensor([3, 3],"float64"), Tensor([0],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14, 14],"float64"), y=Tensor([0, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14, 14],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14],"float64"), y=Tensor([0, 2],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14],"float64"), y=Tensor([14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([0, 14],"float64"), y=Tensor([14],"float64"), )
paddle.linalg.solve(x=Tensor([0, 4],"float32"), y=Tensor([4],"float32"), )
paddle.linalg.solve(x=Tensor([14, 0],"float64"), y=Tensor([14, 0],"float64"), )
paddle.linalg.solve(x=Tensor([14, 0],"float64"), y=Tensor([14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 0],"float64"), y=Tensor([14],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([0, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([0],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 0],"float64"), )
paddle.linalg.solve(x=Tensor([4, 0, 14],"float64"), y=Tensor([4, 0, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 0, 14],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 0],"float32"), y=Tensor([4],"float32"), )
paddle.linalg.solve(x=Tensor([4, 14, 0],"float64"), y=Tensor([4, 14, 0],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 0],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([0, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 0, 2],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 0],"float64"), )
paddle.linalg.solve(x=Tensor([4, 4],"float32"), y=Tensor([0],"float32"), )
paddle.linalg.svd_lowrank(Tensor([0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([4, 0],"float64"), q=4, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 0],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 0],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=True, )
paddle.log(Tensor([0, 1],"float32"), )
paddle.log(Tensor([0, 100, 4],"float32"), )
paddle.log(Tensor([0, 10164, 4],"float32"), )
paddle.log(Tensor([0, 16],"float32"), )
paddle.log(Tensor([0, 2, 3],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 2, 300, 2],"float16"), )
paddle.log(Tensor([0, 2, 300, 2],"float32"), )
paddle.log(Tensor([0, 2],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 3],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 6],"float32"), name="Uniform_entropy", )
paddle.log(Tensor([0, 6],"float64"), name="Uniform_entropy", )
paddle.log(Tensor([0],"float32"), )
paddle.log(Tensor([0],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0],"float64"), )
paddle.log(Tensor([1, 0, 300, 2],"float16"), )
paddle.log(Tensor([1, 0, 300, 2],"float32"), )
paddle.log(Tensor([1, 0, 4],"float32"), )
paddle.log(Tensor([1, 0],"float32"), )
paddle.log(Tensor([1, 100, 0],"float32"), )
paddle.log(Tensor([1, 10164, 0],"float32"), )
paddle.log(Tensor([1, 2, 0, 2],"float16"), )
paddle.log(Tensor([1, 2, 0, 2],"float32"), )
paddle.log(Tensor([1, 2, 300, 0],"float16"), )
paddle.log(Tensor([1, 2, 300, 0],"float32"), )
paddle.log(Tensor([3, 0, 3],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([3, 0],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([3, 2, 0],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([5, 0],"float32"), name="Uniform_entropy", )
paddle.log(Tensor([5, 0],"float64"), name="Uniform_entropy", )
paddle.log(x=Tensor([0, 2, 3],"float64"), )
paddle.log(x=Tensor([0, 2, 3],"float64"), name="test_log", )
paddle.log(x=Tensor([0, 2],"float32"), )
paddle.log(x=Tensor([0, 2],"float64"), )
paddle.log(x=Tensor([0],"float64"), )
paddle.log(x=Tensor([2, 0, 3],"float64"), )
paddle.log(x=Tensor([2, 0, 3],"float64"), name="test_log", )
paddle.log(x=Tensor([2, 0],"float32"), )
paddle.log(x=Tensor([2, 0],"float64"), )
paddle.log(x=Tensor([2, 2, 0],"float64"), )
paddle.log(x=Tensor([2, 2, 0],"float64"), name="test_log", )
paddle.log10(Tensor([0, 20, 1],"float32"), )
paddle.log10(Tensor([10, 0, 1],"float32"), )
paddle.log10(Tensor([10, 20, 0],"float32"), )
paddle.log10(x=Tensor([0, 2],"float32"), )
paddle.log10(x=Tensor([0, 2],"float64"), )
paddle.log10(x=Tensor([0, 3, 2, 2],"float64"), )
paddle.log10(x=Tensor([0],"float64"), )
paddle.log10(x=Tensor([1, 0],"float32"), )
paddle.log10(x=Tensor([1, 0],"float64"), )
paddle.log10(x=Tensor([2, 0, 2, 2],"float64"), )
paddle.log10(x=Tensor([2, 3, 0, 2],"float64"), )
paddle.log10(x=Tensor([2, 3, 2, 0],"float64"), )
paddle.log1p(Tensor([0, 12],"float64"), )
paddle.log1p(Tensor([0, 2, 3, 4],"float32"), )
paddle.log1p(Tensor([0, 2, 3, 4],"float64"), )
paddle.log1p(Tensor([0, 20, 1],"float32"), )
paddle.log1p(Tensor([0, 20],"float64"), )
paddle.log1p(Tensor([0, 200, 300],"float32"), )
paddle.log1p(Tensor([0],"float32"), )
paddle.log1p(Tensor([0],"float64"), )
paddle.log1p(Tensor([1, 0, 3, 4],"float32"), )
paddle.log1p(Tensor([1, 0, 3, 4],"float64"), )
paddle.log1p(Tensor([1, 2, 0, 4],"float32"), )
paddle.log1p(Tensor([1, 2, 0, 4],"float64"), )
paddle.log1p(Tensor([1, 2, 3, 0],"float32"), )
paddle.log1p(Tensor([1, 2, 3, 0],"float64"), )
paddle.log1p(Tensor([10, 0, 1],"float32"), )
paddle.log1p(Tensor([10, 0, 300],"float32"), )
paddle.log1p(Tensor([10, 0],"float64"), )
paddle.log1p(Tensor([10, 20, 0],"float32"), )
paddle.log1p(Tensor([10, 200, 0],"float32"), )
paddle.log1p(x=Tensor([0, 2],"float32"), )
paddle.log1p(x=Tensor([0, 2],"float64"), )
paddle.log1p(x=Tensor([0, 3, 2, 2],"float64"), )
paddle.log1p(x=Tensor([0],"float64"), )
paddle.log1p(x=Tensor([1, 0],"float32"), )
paddle.log1p(x=Tensor([1, 0],"float64"), )
paddle.log1p(x=Tensor([2, 0, 2, 2],"float64"), )
paddle.log1p(x=Tensor([2, 3, 0, 2],"float64"), )
paddle.log1p(x=Tensor([2, 3, 2, 0],"float64"), )
paddle.log2(Tensor([0, 12],"float32"), )
paddle.log2(Tensor([0, 12],"float64"), )
paddle.log2(Tensor([0, 20, 1],"float32"), )
paddle.log2(Tensor([0, 5, 2],"float32"), )
paddle.log2(Tensor([10, 0, 1],"float32"), )
paddle.log2(Tensor([10, 0],"float32"), )
paddle.log2(Tensor([10, 0],"float64"), )
paddle.log2(Tensor([10, 20, 0],"float32"), )
paddle.log2(Tensor([4, 0, 2],"float32"), )
paddle.log2(Tensor([4, 5, 0],"float32"), )
paddle.log2(x=Tensor([0, 2],"float32"), )
paddle.log2(x=Tensor([0, 2],"float64"), )
paddle.log2(x=Tensor([0, 3, 2, 2],"float64"), )
paddle.log2(x=Tensor([0],"float64"), )
paddle.log2(x=Tensor([1, 0],"float32"), )
paddle.log2(x=Tensor([1, 0],"float64"), )
paddle.log2(x=Tensor([2, 0, 2, 2],"float64"), )
paddle.log2(x=Tensor([2, 3, 0, 2],"float64"), )
paddle.log2(x=Tensor([2, 3, 2, 0],"float64"), )
paddle.logcumsumexp(Tensor([0, 10, 10],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([0, 10, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([0, 4],"float32"), axis=-2, )
paddle.logcumsumexp(Tensor([10, 0, 10],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([10, 0, 10],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([10, 10, 0],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([10, 10, 0],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([3, 0],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([3, 0],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([3, 0],"float32"), axis=-2, )
paddle.logical_and(Tensor([0, 1, 499, 1],"float32"), Tensor([499, 499],"float32"), )
paddle.logical_and(Tensor([0, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_and(Tensor([0, 1],"bool"), Tensor([1, 1],"bool"), )
paddle.logical_and(Tensor([0, 1001],"bool"), Tensor([0, 1001],"bool"), )
paddle.logical_and(Tensor([0, 1001],"bool"), Tensor([1, 1001],"bool"), )
paddle.logical_and(Tensor([0, 1024, 1024],"bool"), Tensor([0, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([0, 1024, 1024],"bool"), Tensor([1, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([0, 17, 5, 6, 7],"bool"), Tensor([0, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([0, 17, 5, 6, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([0, 3, 4, 5],"bool"), Tensor([0, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([0, 3, 4, 5],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([0, 496, 512],"bool"), Tensor([0, 496, 512],"bool"), )
paddle.logical_and(Tensor([0, 496, 512],"bool"), Tensor([1, 496, 512],"bool"), )
paddle.logical_and(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.logical_and(Tensor([0],"bool"), Tensor([1001],"bool"), )
paddle.logical_and(Tensor([0],"bool"), Tensor([1002],"bool"), )
paddle.logical_and(Tensor([1, 0, 1024],"bool"), Tensor([1, 0, 1024],"bool"), )
paddle.logical_and(Tensor([1, 0, 1024],"bool"), Tensor([1, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([1, 0, 512],"bool"), Tensor([1, 0, 512],"bool"), )
paddle.logical_and(Tensor([1, 0, 512],"bool"), Tensor([1, 496, 512],"bool"), )
paddle.logical_and(Tensor([1, 0],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_and(Tensor([1, 0],"bool"), Tensor([1, 1],"bool"), )
paddle.logical_and(Tensor([1, 0],"bool"), Tensor([1, 1001],"bool"), )
paddle.logical_and(Tensor([1, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_and(Tensor([1, 1],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_and(Tensor([1, 1001],"bool"), Tensor([0, 1001],"bool"), )
paddle.logical_and(Tensor([1, 1001],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_and(Tensor([1, 1024, 0],"bool"), Tensor([1, 1024, 0],"bool"), )
paddle.logical_and(Tensor([1, 1024, 0],"bool"), Tensor([1, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([1, 1024, 1024],"bool"), Tensor([0, 1024, 1024],"bool"), )
paddle.logical_and(Tensor([1, 1024, 1024],"bool"), Tensor([1, 0, 1024],"bool"), )
paddle.logical_and(Tensor([1, 1024, 1024],"bool"), Tensor([1, 1024, 0],"bool"), )
paddle.logical_and(Tensor([1, 496, 0],"bool"), Tensor([1, 496, 0],"bool"), )
paddle.logical_and(Tensor([1, 496, 0],"bool"), Tensor([1, 496, 512],"bool"), )
paddle.logical_and(Tensor([1, 496, 512],"bool"), Tensor([0, 496, 512],"bool"), )
paddle.logical_and(Tensor([1, 496, 512],"bool"), Tensor([1, 0, 512],"bool"), )
paddle.logical_and(Tensor([1, 496, 512],"bool"), Tensor([1, 496, 0],"bool"), )
paddle.logical_and(Tensor([10, 0, 499, 1],"float32"), Tensor([499, 499],"float32"), )
paddle.logical_and(Tensor([10, 1, 0, 1],"float32"), Tensor([499, 499],"float32"), )
paddle.logical_and(Tensor([10, 1, 499, 0],"float32"), Tensor([499, 499],"float32"), )
paddle.logical_and(Tensor([10, 1, 499, 1],"float32"), Tensor([0, 499],"float32"), )
paddle.logical_and(Tensor([10, 1, 499, 1],"float32"), Tensor([499, 0],"float32"), )
paddle.logical_and(Tensor([1001],"bool"), Tensor([0],"bool"), )
paddle.logical_and(Tensor([1002],"bool"), Tensor([0],"bool"), )
paddle.logical_and(Tensor([2, 0, 4, 5],"bool"), Tensor([2, 0, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 0, 4, 5],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 0, 5],"bool"), Tensor([2, 3, 0, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 0, 5],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 0],"bool"), Tensor([2, 3, 4, 0],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 0],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([0, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([2, 0, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([2, 3, 0, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([2, 3, 4, 0],"bool"), )
paddle.logical_and(Tensor([8, 0, 5, 6, 7],"bool"), Tensor([8, 0, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 0, 5, 6, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 0, 6, 7],"bool"), Tensor([8, 17, 0, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 0, 6, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 0, 7],"bool"), Tensor([8, 17, 5, 0, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 0, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 0],"bool"), Tensor([8, 17, 5, 6, 0],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 0],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([0, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 0, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 17, 0, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 17, 5, 0, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 17, 5, 6, 0],"bool"), )
paddle.logical_and(x=Tensor([0, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([0, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_and(x=Tensor([0, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_and(x=Tensor([0],"bool"), y=Tensor([0],"bool"), )
paddle.logical_and(x=Tensor([0],"bool"), y=Tensor([4],"bool"), )
paddle.logical_and(x=Tensor([1, 0, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 0],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_and(x=Tensor([1, 0],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 0, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 0],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([0, 2, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 0, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 0],"bool"), )
paddle.logical_and(x=Tensor([1, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_and(x=Tensor([1, 2],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_and(x=Tensor([1],"bool"), y=Tensor([0],"bool"), )
paddle.logical_not(Tensor([0, 1, 1, 1],"bool"), )
paddle.logical_not(Tensor([0, 1, 1, 109],"bool"), )
paddle.logical_not(Tensor([0, 3],"bool"), )
paddle.logical_not(Tensor([0, 36828, 1],"bool"), )
paddle.logical_not(Tensor([0, 38367, 1],"bool"), )
paddle.logical_not(Tensor([0, 4],"int64"), )
paddle.logical_not(Tensor([0],"bool"), )
paddle.logical_not(Tensor([1, 0, 1, 1],"bool"), )
paddle.logical_not(Tensor([1, 0, 1, 109],"bool"), )
paddle.logical_not(Tensor([1, 0, 1],"bool"), )
paddle.logical_not(Tensor([1, 0],"bool"), )
paddle.logical_not(Tensor([1, 0],"int64"), )
paddle.logical_not(Tensor([1, 1, 0, 1],"bool"), )
paddle.logical_not(Tensor([1, 1, 0, 109],"bool"), )
paddle.logical_not(Tensor([1, 1, 1, 0],"bool"), )
paddle.logical_not(Tensor([1, 36828, 0],"bool"), )
paddle.logical_not(Tensor([1, 38367, 0],"bool"), )
paddle.logical_not(x=Tensor([0, 2, 1, 3],"bool"), )
paddle.logical_not(x=Tensor([0, 2],"bool"), )
paddle.logical_not(x=Tensor([0],"bool"), )
paddle.logical_not(x=Tensor([1, 0, 1, 3],"bool"), )
paddle.logical_not(x=Tensor([1, 0],"bool"), )
paddle.logical_not(x=Tensor([1, 2, 0, 3],"bool"), )
paddle.logical_not(x=Tensor([1, 2, 1, 0],"bool"), )
paddle.logical_or(Tensor([0, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_or(Tensor([0, 1],"bool"), Tensor([1, 1],"bool"), )
paddle.logical_or(Tensor([0, 1],"bool"), Tensor([2, 1],"bool"), )
paddle.logical_or(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_or(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([0, 7, 1],"bool"), Tensor([0, 1, 7],"bool"), )
paddle.logical_or(Tensor([0, 7, 1],"bool"), Tensor([13, 1, 7],"bool"), )
paddle.logical_or(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.logical_or(Tensor([0],"bool"), Tensor([1],"bool"), )
paddle.logical_or(Tensor([0],"bool"), Tensor([10105],"bool"), )
paddle.logical_or(Tensor([1, 0],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_or(Tensor([1, 0],"bool"), Tensor([1, 1],"bool"), )
paddle.logical_or(Tensor([1, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_or(Tensor([1, 1],"bool"), Tensor([1, 0],"bool"), )
paddle.logical_or(Tensor([1],"bool"), Tensor([0],"bool"), )
paddle.logical_or(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_or(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_or(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_or(Tensor([10105],"bool"), Tensor([0],"bool"), )
paddle.logical_or(Tensor([13, 0, 1],"bool"), Tensor([13, 0, 7],"bool"), )
paddle.logical_or(Tensor([13, 0, 1],"bool"), Tensor([13, 1, 7],"bool"), )
paddle.logical_or(Tensor([13, 7, 0],"bool"), Tensor([13, 1, 0],"bool"), )
paddle.logical_or(Tensor([13, 7, 0],"bool"), Tensor([13, 1, 7],"bool"), )
paddle.logical_or(Tensor([13, 7, 1],"bool"), Tensor([0, 1, 7],"bool"), )
paddle.logical_or(Tensor([13, 7, 1],"bool"), Tensor([13, 0, 7],"bool"), )
paddle.logical_or(Tensor([13, 7, 1],"bool"), Tensor([13, 1, 0],"bool"), )
paddle.logical_or(Tensor([2, 0],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_or(Tensor([2, 0],"bool"), Tensor([2, 1],"bool"), )
paddle.logical_or(Tensor([2, 1],"bool"), Tensor([0, 1],"bool"), )
paddle.logical_or(Tensor([2, 1],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_or(x=Tensor([0, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([0, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_or(x=Tensor([0, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_or(x=Tensor([0],"bool"), y=Tensor([0],"bool"), )
paddle.logical_or(x=Tensor([0],"bool"), y=Tensor([4],"bool"), )
paddle.logical_or(x=Tensor([1, 0, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 0],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_or(x=Tensor([1, 0],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 0, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 0],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([0, 2, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 0, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 0],"bool"), )
paddle.logical_or(x=Tensor([1, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_or(x=Tensor([1, 2],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_or(x=Tensor([1],"bool"), y=Tensor([0],"bool"), )
paddle.logical_xor(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_xor(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_xor(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_xor(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(x=Tensor([0, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([0, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_xor(x=Tensor([0, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_xor(x=Tensor([0],"bool"), y=Tensor([0],"bool"), )
paddle.logical_xor(x=Tensor([0],"bool"), y=Tensor([4],"bool"), )
paddle.logical_xor(x=Tensor([1, 0, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 0],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_xor(x=Tensor([1, 0],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 0, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 0],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([0, 2, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 0, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 0],"bool"), )
paddle.logical_xor(x=Tensor([1, 2],"bool"), y=Tensor([0, 2],"bool"), )
paddle.logical_xor(x=Tensor([1, 2],"bool"), y=Tensor([2, 0],"bool"), )
paddle.logical_xor(x=Tensor([1],"bool"), y=Tensor([0],"bool"), )
paddle.logit(Tensor([0, 20, 1],"float32"), 0.001, )
paddle.logit(Tensor([0],"float32"), 1e-08, )
paddle.logit(Tensor([10, 0, 1],"float32"), 0.001, )
paddle.logit(Tensor([10, 20, 0],"float32"), 0.001, )
paddle.logit(x=Tensor([0, 2],"float64"), )
paddle.logit(x=Tensor([0, 3, 2, 5],"float64"), )
paddle.logit(x=Tensor([0, 3, 2, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([0, 3, 2],"float64"), )
paddle.logit(x=Tensor([0],"float32"), )
paddle.logit(x=Tensor([0],"float64"), )
paddle.logit(x=Tensor([4, 0, 2, 5],"float64"), )
paddle.logit(x=Tensor([4, 0, 2, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([4, 0, 2],"float64"), )
paddle.logit(x=Tensor([4, 0],"float64"), )
paddle.logit(x=Tensor([4, 3, 0, 5],"float64"), )
paddle.logit(x=Tensor([4, 3, 0, 5],"float64"), eps=0.2, )
paddle.logit(x=Tensor([4, 3, 0],"float64"), )
paddle.logit(x=Tensor([4, 3, 2, 0],"float64"), )
paddle.logit(x=Tensor([4, 3, 2, 0],"float64"), eps=0.2, )
paddle.logsumexp(Tensor([0, 16, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([0, 4, 16, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([0, 5, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 60],"float32"), axis=1, )
paddle.logsumexp(Tensor([0, 8, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([0],"float32"), axis=0, )
paddle.logsumexp(Tensor([10, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 0],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([26, 0, 16, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 0, 4, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 16, 0, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 16, 4, 0],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 4, 0, 1],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 4, 16, 0],"float32"), axis=1, keepdim=True, )
paddle.logsumexp(Tensor([26, 8, 0, 8],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([26, 8, 4, 0],"float32"), axis=3, keepdim=True, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([4, 0, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([4, 5, 0],"float64"), list[-1,], False, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([0, 3, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([2, 0, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=list[0,1,], )
paddle.logsumexp(x=Tensor([2, 3, 0],"float64"), axis=list[0,1,], keepdim=True, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([0, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([0, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([300, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([300, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([40],"bool"), -0.29328805208206177, )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([40],"bool"), 0.9238947033882141, )
paddle.masked_fill(Tensor([0, 60, 10],"int32"), Tensor([0, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 10],"int32"), Tensor([10, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 2],"int32"), Tensor([0, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60, 2],"int32"), Tensor([2, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60],"int32"), Tensor([0, 60],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60],"int32"), Tensor([10, 60],"bool"), 0, )
paddle.masked_fill(Tensor([0, 60],"int32"), Tensor([2, 60],"bool"), 0, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([0],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([0],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([168],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([168],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([10, 0, 10],"int32"), Tensor([10, 0, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 0, 10],"int32"), Tensor([10, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 0],"int32"), Tensor([10, 0],"bool"), 0, )
paddle.masked_fill(Tensor([10, 0],"int32"), Tensor([10, 60],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 0],"int32"), Tensor([10, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 0],"int32"), Tensor([10, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 10],"int32"), Tensor([0, 60, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 10],"int32"), Tensor([10, 0, 10],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60, 10],"int32"), Tensor([10, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60],"int32"), Tensor([0, 60],"bool"), 0, )
paddle.masked_fill(Tensor([10, 60],"int32"), Tensor([10, 0],"bool"), 0, )
paddle.masked_fill(Tensor([168],"float16"), Tensor([0],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([168],"float16"), Tensor([0],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([2, 0, 2],"int32"), Tensor([2, 0, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 0, 2],"int32"), Tensor([2, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 0],"int32"), Tensor([2, 0],"bool"), 0, )
paddle.masked_fill(Tensor([2, 0],"int32"), Tensor([2, 60],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 0],"int32"), Tensor([2, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 0],"int32"), Tensor([2, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 2],"int32"), Tensor([0, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 2],"int32"), Tensor([2, 0, 2],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 2],"int32"), Tensor([2, 60, 0],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60],"int32"), Tensor([0, 60],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60],"int32"), Tensor([2, 0],"bool"), 0, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 0],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 0],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 0],"float32"), Tensor([40],"bool"), -0.29328805208206177, )
paddle.masked_fill(Tensor([300, 0],"float32"), Tensor([40],"bool"), 0.9238947033882141, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([0, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([0, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 0],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 0],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 40],"float32"), Tensor([0],"bool"), -0.29328805208206177, )
paddle.masked_fill(Tensor([300, 40],"float32"), Tensor([0],"bool"), 0.9238947033882141, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 0],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 0],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), 0.5797171592712402, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 0],"bool"), -0.40675103664398193, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 0],"bool"), 0.5797171592712402, )
paddle.masked_select(Tensor([0, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.masked_select(Tensor([0, 1],"float32"), Tensor([1, 1],"bool"), )
paddle.masked_select(Tensor([0, 2, 2],"float32"), Tensor([0, 2, 2],"bool"), )
paddle.masked_select(Tensor([0, 2, 2],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([0, 21504, 4],"float32"), Tensor([0, 21504, 4],"bool"), )
paddle.masked_select(Tensor([0, 21504, 4],"float32"), Tensor([1, 21504, 4],"bool"), )
paddle.masked_select(Tensor([0, 21504],"float32"), Tensor([0, 21504],"bool"), )
paddle.masked_select(Tensor([0, 21504],"float32"), Tensor([1, 21504],"bool"), )
paddle.masked_select(Tensor([1, 0, 2],"float32"), Tensor([1, 0, 2],"bool"), )
paddle.masked_select(Tensor([1, 0, 2],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 0, 4],"float32"), Tensor([1, 0, 4],"bool"), )
paddle.masked_select(Tensor([1, 0, 4],"float32"), Tensor([1, 21504, 4],"bool"), )
paddle.masked_select(Tensor([1, 0],"float32"), Tensor([1, 0],"bool"), )
paddle.masked_select(Tensor([1, 0],"float32"), Tensor([1, 1],"bool"), )
paddle.masked_select(Tensor([1, 0],"float32"), Tensor([1, 21504],"bool"), )
paddle.masked_select(Tensor([1, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.masked_select(Tensor([1, 1],"float32"), Tensor([1, 0],"bool"), )
paddle.masked_select(Tensor([1, 2, 0],"float32"), Tensor([1, 2, 0],"bool"), )
paddle.masked_select(Tensor([1, 2, 0],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([0, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([1, 0, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 0],"bool"), )
paddle.masked_select(Tensor([1, 21504, 0],"float32"), Tensor([1, 21504, 0],"bool"), )
paddle.masked_select(Tensor([1, 21504, 0],"float32"), Tensor([1, 21504, 4],"bool"), )
paddle.masked_select(Tensor([1, 21504, 4],"float32"), Tensor([0, 21504, 4],"bool"), )
paddle.masked_select(Tensor([1, 21504, 4],"float32"), Tensor([1, 0, 4],"bool"), )
paddle.masked_select(Tensor([1, 21504, 4],"float32"), Tensor([1, 21504, 0],"bool"), )
paddle.masked_select(Tensor([1, 21504],"float32"), Tensor([0, 21504],"bool"), )
paddle.masked_select(Tensor([1, 21504],"float32"), Tensor([1, 0],"bool"), )
paddle.masked_select(x=Tensor([0, 3],"float32"), mask=Tensor([0, 3],"bool"), )
paddle.masked_select(x=Tensor([0, 3],"float32"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([0, 3],"float64"), mask=Tensor([0, 3],"bool"), )
paddle.masked_select(x=Tensor([0, 3],"float64"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 0],"float32"), mask=Tensor([2, 0],"bool"), )
paddle.masked_select(x=Tensor([2, 0],"float32"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 0],"float64"), mask=Tensor([2, 0],"bool"), )
paddle.masked_select(x=Tensor([2, 0],"float64"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float32"), mask=Tensor([0, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float32"), mask=Tensor([2, 0],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float64"), mask=Tensor([0, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float64"), mask=Tensor([2, 0],"bool"), )
paddle.maximum(Tensor([0, 1, 1, 2],"float32"), Tensor([0, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 1, 2],"float32"), Tensor([0, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 1, 2],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 1, 2],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([0, 10285, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([0, 3598, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([1, 10285, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([1, 3598, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([1001, 2],"float32"), )
paddle.maximum(Tensor([0, 1, 2],"float32"), Tensor([1002, 2],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([10, 1],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.maximum(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([0, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([0, 3, 20, 20, 1],"float32"), Tensor([0, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([0, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([11],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.maximum(Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.maximum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 0, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 0, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 1, 2],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1, 3598, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1001, 2],"float32"), )
paddle.maximum(Tensor([1, 0, 2],"float32"), Tensor([1002, 2],"float32"), )
paddle.maximum(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.maximum(Tensor([1, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.maximum(Tensor([1, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1, 10285, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1, 3598, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1, 3598, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1001, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 0],"float32"), Tensor([1002, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 10285, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24276, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 0],"float32"), Tensor([1, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([0, 1, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([0, 1, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 0, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 0, 24276, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 0, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 10285, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 2],"float32"), Tensor([1, 1, 24276, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([0, 10285, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([0, 3598, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1, 10285, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1, 3598, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1001, 0],"float32"), )
paddle.maximum(Tensor([1, 1, 2],"float32"), Tensor([1002, 0],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.maximum(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.maximum(Tensor([10, 0],"float32"), Tensor([10, 1],"float32"), )
paddle.maximum(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.maximum(Tensor([10, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.maximum(Tensor([10, 1],"float32"), Tensor([10, 0],"float32"), )
paddle.maximum(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([100, 0],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([100, 1],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([11],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([12, 0, 10, 10, 1],"float32"), Tensor([12, 0, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 0, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 0, 20, 20, 1],"float32"), Tensor([12, 0, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 0, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 0, 10, 1],"float32"), Tensor([12, 3, 0, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 0, 10, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 0, 20, 1],"float32"), Tensor([12, 3, 0, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 0, 20, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 0, 1],"float32"), Tensor([12, 3, 10, 0, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 0, 1],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 0],"float32"), Tensor([12, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([0, 3, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 0, 10, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 0, 10, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 0, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 10, 10, 1],"float32"), Tensor([12, 3, 10, 10, 0],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 0, 1],"float32"), Tensor([12, 3, 20, 0, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 0, 1],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 0],"float32"), Tensor([12, 3, 20, 20, 0],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 0],"float32"), Tensor([12, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([0, 3, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 0, 20, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 0, 20, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 0, 1],"float32"), )
paddle.maximum(Tensor([12, 3, 20, 20, 1],"float32"), Tensor([12, 3, 20, 20, 0],"float32"), )
paddle.maximum(Tensor([200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(x=Tensor([0, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.maximum(x=Tensor([0, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.maximum(x=Tensor([0, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.maximum(x=Tensor([0],"float64"), y=Tensor([0],"float64"), )
paddle.maximum(x=Tensor([0],"float64"), y=Tensor([4],"float64"), )
paddle.maximum(x=Tensor([1, 0, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.maximum(x=Tensor([1, 0],"float64"), y=Tensor([2, 0],"float64"), )
paddle.maximum(x=Tensor([1, 0],"float64"), y=Tensor([2, 2],"float64"), )
paddle.maximum(x=Tensor([1, 2, 0, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.maximum(x=Tensor([1, 2, 1, 0],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.maximum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([0, 2, 3],"float64"), )
paddle.maximum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 0, 3],"float64"), )
paddle.maximum(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 0],"float64"), )
paddle.maximum(x=Tensor([1, 2],"float64"), y=Tensor([0, 2],"float64"), )
paddle.maximum(x=Tensor([1, 2],"float64"), y=Tensor([2, 0],"float64"), )
paddle.maximum(x=Tensor([1],"float64"), y=Tensor([0],"float64"), )
paddle.mean(Tensor([0, 1, 1, 1, 3],"float64"), )
paddle.mean(Tensor([0, 1, 1, 1],"float64"), )
paddle.mean(Tensor([0, 1, 1, 4, 3],"float64"), )
paddle.mean(Tensor([0, 1, 1],"float64"), )
paddle.mean(Tensor([0, 1, 100],"float32"), )
paddle.mean(Tensor([0, 1, 16, 16],"float32"), )
paddle.mean(Tensor([0, 1, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([0, 1],"float32"), )
paddle.mean(Tensor([0, 1],"float32"), name=None, )
paddle.mean(Tensor([0, 10, 5],"float64"), name=None, )
paddle.mean(Tensor([0, 10],"float32"), axis=-1, )
paddle.mean(Tensor([0, 10],"float32"), name=None, )
paddle.mean(Tensor([0, 100, 2, 2, 2, 2],"float16"), )
paddle.mean(Tensor([0, 100, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([0, 120],"float64"), )
paddle.mean(Tensor([0, 14, 5, 1, 1, 2, 1, 1, 2],"float32"), )
paddle.mean(Tensor([0, 16, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([0, 2, 1, 512, 4, 4],"float32"), 0, True, None, )
paddle.mean(Tensor([0, 2, 16, 4, 16],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 2, 16],"float32"), axis=0, )
paddle.mean(Tensor([0, 2, 3, 1, 5, 1, 2],"float64"), )
paddle.mean(Tensor([0, 2, 3, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([0, 2],"float64"), axis=1, )
paddle.mean(Tensor([0, 200, 40],"float32"), axis=1, keepdim=False, )
paddle.mean(Tensor([0, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.mean(Tensor([0, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.mean(Tensor([0, 256, 16, 16],"float16"), -2, )
paddle.mean(Tensor([0, 256, 16, 16],"float32"), -2, )
paddle.mean(Tensor([0, 256],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 256],"float64"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 28, 28],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([0, 3, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([0, 3, 2048],"float16"), axis=1, )
paddle.mean(Tensor([0, 3, 3, 4, 3, 4, 3, 4],"float64"), )
paddle.mean(Tensor([0, 3, 3, 4],"float64"), name=None, )
paddle.mean(Tensor([0, 3, 4, 4, 2, 3, 4, 4],"float64"), )
paddle.mean(Tensor([0, 3],"float32"), axis=list[0,], )
paddle.mean(Tensor([0, 300, 2048],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([0, 32, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([0, 49, 512],"float32"), axis=1, )
paddle.mean(Tensor([0, 5],"float32"), axis=None, )
paddle.mean(Tensor([0, 512],"float32"), 1, keepdim=True, )
paddle.mean(Tensor([0, 60],"float32"), axis=0, )
paddle.mean(Tensor([0, 64],"float32"), axis=-1, )
paddle.mean(Tensor([0, 7, 32],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 8, 768],"float16"), axis=1, keepdim=True, )
paddle.mean(Tensor([0, 8, 768],"float32"), axis=1, keepdim=True, )
paddle.mean(Tensor([0, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([0, 9],"float32"), axis=1, )
paddle.mean(Tensor([0, 96, 1],"float32"), name=None, )
paddle.mean(Tensor([0, 96, 2],"float32"), axis=-1, )
paddle.mean(Tensor([0, 960, 960],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([0],"float16"), axis=0, )
paddle.mean(Tensor([0],"float32"), )
paddle.mean(Tensor([0],"float32"), axis=0, )
paddle.mean(Tensor([0],"float32"), name=None, )
paddle.mean(Tensor([0],"float64"), )
paddle.mean(Tensor([1, 0, 1, 1, 3],"float64"), )
paddle.mean(Tensor([1, 0, 1, 1],"float64"), )
paddle.mean(Tensor([1, 0, 1, 4, 3],"float64"), )
paddle.mean(Tensor([1, 0, 1],"float64"), )
paddle.mean(Tensor([1, 0, 100],"float32"), )
paddle.mean(Tensor([1, 0, 16, 16],"float32"), )
paddle.mean(Tensor([1, 0, 2, 2, 2, 2],"float16"), )
paddle.mean(Tensor([1, 0, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 0, 28],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 0, 3, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 0, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 0],"float32"), )
paddle.mean(Tensor([1, 0],"float32"), 1, keepdim=True, )
paddle.mean(Tensor([1, 0],"float32"), name=None, )
paddle.mean(Tensor([1, 0],"float64"), )
paddle.mean(Tensor([1, 1, 0, 1, 3],"float64"), )
paddle.mean(Tensor([1, 1, 0, 1],"float64"), )
paddle.mean(Tensor([1, 1, 0, 16],"float32"), )
paddle.mean(Tensor([1, 1, 0, 4, 3],"float64"), )
paddle.mean(Tensor([1, 1, 0],"float32"), )
paddle.mean(Tensor([1, 1, 0],"float64"), )
paddle.mean(Tensor([1, 1, 1, 0, 3],"float64"), )
paddle.mean(Tensor([1, 1, 1, 0],"float64"), )
paddle.mean(Tensor([1, 1, 1, 1, 0],"float64"), )
paddle.mean(Tensor([1, 1, 1, 4, 0],"float64"), )
paddle.mean(Tensor([1, 1, 16, 0],"float32"), )
paddle.mean(Tensor([1, 100, 0, 2, 2, 2],"float16"), )
paddle.mean(Tensor([1, 100, 0, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 100, 2, 0, 2, 2],"float16"), )
paddle.mean(Tensor([1, 100, 2, 0, 2, 2],"float64"), )
paddle.mean(Tensor([1, 100, 2, 2, 0, 2],"float16"), )
paddle.mean(Tensor([1, 100, 2, 2, 0, 2],"float64"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 0],"float16"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 0],"float64"), )
paddle.mean(Tensor([1, 2, 0, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 0, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 0, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 4, 0, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 4, 3, 0],"float64"), )
paddle.mean(Tensor([1, 28, 0],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 8, 0],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([10, 0, 5],"float64"), name=None, )
paddle.mean(Tensor([10, 0],"float32"), axis=0, )
paddle.mean(Tensor([10, 0],"float32"), name=None, )
paddle.mean(Tensor([10, 10, 0],"float64"), name=None, )
paddle.mean(Tensor([128, 0, 512],"float32"), axis=1, )
paddle.mean(Tensor([128, 49, 0],"float32"), axis=1, )
paddle.mean(Tensor([13, 0, 16, 4, 16],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 0, 32],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 2, 0, 4, 16],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 2, 16, 0, 16],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 2, 16, 4, 0],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([13, 7, 0],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([14, 0, 768],"float16"), axis=1, keepdim=True, )
paddle.mean(Tensor([14, 0, 768],"float32"), axis=1, keepdim=True, )
paddle.mean(Tensor([14, 8, 0],"float16"), axis=1, keepdim=True, )
paddle.mean(Tensor([14, 8, 0],"float32"), axis=1, keepdim=True, )
paddle.mean(Tensor([16, 0, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 0, 1],"float32"), name=None, )
paddle.mean(Tensor([16, 0, 2],"float32"), axis=-1, )
paddle.mean(Tensor([16, 0, 2048],"float16"), axis=1, )
paddle.mean(Tensor([16, 0, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 0],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([16, 0],"float64"), axis=-1, keepdim=True, )
paddle.mean(Tensor([16, 16, 0, 3],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 16, 3, 0],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 3, 0],"float16"), axis=1, )
paddle.mean(Tensor([16, 32, 0, 1],"float32"), axis=list[1,2,3,], keepdim=True, )
paddle.mean(Tensor([16, 32, 1, 0],"float32"), axis=list[1,2,3,], keepdim=True, )
