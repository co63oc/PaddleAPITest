paddle.argmax(x=Tensor([3, 3, 238609295, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 357913942, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 715827883],"int64"), keepdim=None, )
paddle.argmax(x=Tensor([357913942, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([2147483649, 1],"int64"), keepdim=None, )
paddle.argmin(x=Tensor([3, 3, 238609295, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([3, 357913942, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(x=Tensor([3, 715827883],"int64"), keepdim=None, )
paddle.argmin(x=Tensor([357913942, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.bincount(x=Tensor([4294967295],"int32"), )
paddle.count_nonzero(Tensor([71582789, 3, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.cummax(Tensor([100, 42949673],"float32"), axis=-1, )
paddle.cummax(Tensor([42949673, 100],"float32"), axis=-1, )
paddle.cummin(Tensor([100, 42949673],"float32"), axis=-1, )
paddle.cummin(Tensor([42949673, 100],"float32"), axis=-1, )
paddle.cumsum(Tensor([10, 429496730],"float16"), dtype="float16", )
paddle.cumsum(Tensor([357913942, 12],"float16"), dtype="float16", )
paddle.cumulative_trapezoid(y=Tensor([1431655765, 3],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 477218589],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([357913942, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.diag(Tensor([2147483649],"float64"), padding_value=8, )
paddle.diag(Tensor([2147483649],"int64"), padding_value=-8, )
paddle.diag(Tensor([2147483649],"int64"), padding_value=8.0, )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 10, 3],"float64"), Tensor([3, 3, 238609295],"float64"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 238609295, 3],"float64"), Tensor([3, 3, 10],"float64"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 2, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 4, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 7, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 2, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 4, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("binh,tnh->bnit", Tensor([13, 7, 4, 4],"float32"), Tensor([268435456, 4, 4],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 2, 10324441, 16],"float32"), Tensor([2, 16, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([8388608, 2, 16, 16],"float32"), Tensor([2, 16, 4, 1],"float32"), )
paddle.frac(Tensor([1431655765, 3],"int32"), )
paddle.frac(Tensor([2, 1073741825],"int64"), )
paddle.frac(Tensor([2, 2147483648],"int32"), )
paddle.frac(Tensor([715827883, 3],"int64"), )
paddle.histogram(input=Tensor([1073741824, 4],"float32"), )
paddle.histogram(input=Tensor([1073741824, 4],"int32"), )
paddle.histogram(input=Tensor([4, 1073741824],"float32"), )
paddle.histogram(input=Tensor([4, 1073741824],"int32"), )
paddle.histogramdd(Tensor([1073741825, 2],"float64"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([4, 268435457, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([4, 268435457, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 268435457, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 268435457, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([536870913, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([536870913, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([536870913, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([536870913, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([101, 42524429],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"float16"), Tensor([256],"float16"), act_method="gelu", )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009313154732808471, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009654839523136616, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009928022045642138, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010831302497535944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010981468949466944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0014022786635905504, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.001479289960116148, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([2, 2147483648],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0016999575309455395, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009313154732808471, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009654839523136616, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0009928022045642138, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010831302497535944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0010981468949466944, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0014022786635905504, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.001479289960116148, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_bias_act(Tensor([464, 9256396],"int32"), None, act_method="swiglu", compute_dtype="fp16", dequant_scales=Tensor([22016],"float32"), shift=None, smooth=None, quant_scale=0.0016999575309455395, quant_round_type=0, quant_max_bound=127.0, quant_min_bound=-127.0, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([536870912, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 536870912],"float32"), Tensor([8, 8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 1, 8],"float32"), Tensor([8, 8],"float32"), Tensor([8, 536870912],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([1073741824, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([1073741824, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4, 4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, Tensor([4],"float32"), Tensor([4],"float32"), dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([1, 2, 4],"float32"), Tensor([4, 4],"float32"), Tensor([4, 1073741824],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), None, None, dropout1_rate=0, dropout2_rate=0, activation="relu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=True, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 33038210],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float32"), Tensor([508, 130],"float32"), Tensor([130, 33038210],"float32"), Tensor([130],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), Tensor([508],"float32"), 0.0, 0.0, activation="relu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([31, 98, 508],"float64"), Tensor([508, 130],"float64"), Tensor([130, 16519105],"float64"), Tensor([130],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), Tensor([508],"float64"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 1398102],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([32, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 1398102],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([4, 32, 128],"float16"), Tensor([128, 256],"float16"), Tensor([256, 16777216],"float16"), Tensor([256],"float16"), Tensor([128],"float16"), Tensor([128],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), 0.0, 0.0, activation="gelu", pre_layer_norm=False, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([64, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 1398102],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([64, 128, 768],"float32"), Tensor([768, 3072],"float32"), Tensor([3072, 1398102],"float32"), Tensor([3072],"float32"), Tensor([768],"float32"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(Tensor([96, 128, 768],"float16"), Tensor([768, 3072],"float16"), Tensor([3072, 1398102],"float16"), Tensor([3072],"float16"), Tensor([768],"float16"), None, None, Tensor([768],"float32"), Tensor([768],"float32"), dropout1_rate=0.0, dropout2_rate=0.1, activation="gelu", ln1_epsilon=1e-05, ln2_epsilon=1e-05, pre_layer_norm=False, training=True, ring_id=-1, name=None, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([1073741824, 4],"float32"), linear2_weight=Tensor([4, 2],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 1073741824],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 1073741824],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln1_scale=Tensor([2],"float32"), ln1_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, pre_layer_norm=True, )
paddle.incubate.nn.functional.fused_feedforward(x=Tensor([1, 2, 2],"float32"), linear1_weight=Tensor([2, 4],"float32"), linear2_weight=Tensor([4, 1073741824],"float32"), linear1_bias=Tensor([4],"float32"), linear2_bias=Tensor([2],"float32"), ln2_scale=Tensor([2],"float32"), ln2_bias=Tensor([2],"float32"), dropout1_rate=0, dropout2_rate=0, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([1, 4294967295],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([100, 42949673],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([100, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 42524429],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([101, 42524429],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([104, 41297763],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([104, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([123, 34918434],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([123, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([131, 32786010],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([131, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([136, 31580642],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([136, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 268435456],"float16"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16, 268435456],"float32"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float16"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float16"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float16"), residual=Tensor([16, 256],"float16"), residual_alpha=0.69204696, quant_scale=0.15, quant_round_type=1, quant_max_bound=127, quant_min_bound=-127, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float32"), None, None, 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([16777216, 256],"float32"), Tensor([256],"float32"), Tensor([256],"float32"), 1e-05, begin_norm_axis=1, bias=Tensor([256],"float32"), residual=Tensor([16, 256],"float32"), residual_alpha=0.69204696, )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 2147483648],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([2, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([2, 2147483648],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([5592406, 768],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([123, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([5592406, 768],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([131, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([5592406, 768],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([136, 768],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([59, 72796056],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([60, 71582789],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([60, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([64, 67108864],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=None, residual=Tensor([64, 512],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67, 64103990],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([67, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([60, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([67, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=None, norm_bias=None, epsilon=1e-06, begin_norm_axis=1, bias=None, residual=Tensor([67108864, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([101, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([2, 1, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([59, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([60, 64],"float16"), )
paddle.incubate.nn.functional.fused_layer_norm(Tensor([67108864, 64],"float16"), norm_weight=Tensor([64],"float32"), norm_bias=Tensor([64],"float32"), epsilon=1e-05, begin_norm_axis=1, bias=Tensor([64],"float16"), residual=Tensor([67, 64],"float16"), )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([16777216, 256],"float16"), Tensor([256],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([16777216, 256],"float32"), Tensor([256],"float32"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([5592406, 768],"float16"), Tensor([768],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([67108864, 1, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([67108864, 64],"float16"), Tensor([64],"float16"), None, 1e-06, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([8388608, 1, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rms_norm(Tensor([8388608, 512],"float16"), Tensor([512],"float16"), None, 1e-05, begin_norm_axis=1, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 4, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 4, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([16777216, 8, 4, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), Tensor([2, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 16777216, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([16777216, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 67108864, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 134217728],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([16777216, 8, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 67108864, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 16],"float32"), Tensor([2, 8, 2, 134217728],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=False, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 4, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([8, 1, 2, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 4, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=False, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 16777216, 4, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), Tensor([8, 2, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), Tensor([1, 8, 1, 8],"float32"), position_ids=None, use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 16777216, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([67108864, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 16777216, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 134217728],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([67108864, 2, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 16777216, 2, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.fused_rotary_position_embedding(Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 16],"float32"), Tensor([8, 2, 2, 134217728],"float32"), Tensor([1, 8, 1, 16],"float32"), Tensor([1, 8, 1, 16],"float32"), position_ids=Tensor([2, 8],"int64"), use_neox_rotary_style=True, time_major=True, )
paddle.incubate.nn.functional.swiglu(Tensor([1, 4096, 1048576],"float32"), )
paddle.incubate.nn.functional.variable_length_memory_efficient_attention(Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 64],"float16"), Tensor([1, 1, 31, 138547333],"float16"), Tensor([1, 1],"int32"), Tensor([1, 1],"int32"), mask=Tensor([1, 1, 50, 50],"float16"), scale=0.125, )
paddle.incubate.softmax_mask_fuse(Tensor([1, 1, 134217728, 32],"float32"), Tensor([1, 1, 134217728, 32],"float32"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 263173, 8, 1020],"float16"), mask=Tensor([2, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8, 8388608, 32],"float16"), mask=Tensor([2, 1, 8388608, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2, 8388608, 8, 32],"float16"), mask=Tensor([2, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2097152, 8, 8, 32],"float16"), mask=Tensor([2097152, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([2796203, 3, 16, 32],"float16"), mask=Tensor([2796203, 1, 16, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([6, 2796203, 8, 32],"float16"), mask=Tensor([6, 1, 8, 32],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([65794, 8, 8, 1020],"float16"), mask=Tensor([65794, 1, 8, 1020],"float16"), )
paddle.incubate.softmax_mask_fuse(x=Tensor([7, 1198373, 16, 32],"float16"), mask=Tensor([7, 1, 16, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1, 4194304, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(Tensor([1048576, 4, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([1, 4194304, 32, 32],"float16"), )
paddle.incubate.softmax_mask_fuse_upper_triangle(x=Tensor([4194304, 1, 32, 32],"float16"), )
paddle.index_fill(Tensor([107374183, 40],"float32"), Tensor([2],"int64"), 1, -1, )
paddle.index_fill(Tensor([128],"int64"), Tensor([2147483649],"int64"), 0, 5, )
paddle.index_fill(Tensor([128],"int64"), Tensor([2147483649],"int64"), 0, 6, )
paddle.index_fill(Tensor([128],"int64"), Tensor([2147483649],"int64"), 0, 7, )
paddle.index_fill(Tensor([4],"int64"), Tensor([2147483649],"int64"), 0, 2, )
paddle.index_fill(Tensor([8],"int64"), Tensor([2147483649],"int64"), 0, 2, )
paddle.isin(Tensor([2, 5, 10],"bfloat16"), Tensor([4294967295],"bfloat16"), True, False, )
paddle.isin(Tensor([2, 5, 10],"bfloat16"), Tensor([4294967295],"bfloat16"), True, True, )
paddle.isin(Tensor([4, 1073741824],"bfloat16"), Tensor([2, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 1073741824],"bfloat16"), Tensor([2, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([1431655765, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([1431655765, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([536870912, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([536870912, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, True, )
paddle.kthvalue(Tensor([1677722, 128, 10],"float64"), 2, -1, )
paddle.kthvalue(Tensor([1677722, 128, 10],"float64"), 2, 2, )
paddle.kthvalue(Tensor([2, 107374183, 10],"float64"), 2, -1, )
paddle.kthvalue(Tensor([2, 107374183, 10],"float64"), 2, 2, )
paddle.kthvalue(Tensor([2, 128, 8388609],"float64"), 2, -1, )
paddle.kthvalue(Tensor([2, 128, 8388609],"float64"), 2, 2, )
paddle.kthvalue(Tensor([2, 30, 35791395],"float64"), 244, -1, )
paddle.kthvalue(Tensor([2, 30, 35791395],"float64"), 244, 2, )
paddle.kthvalue(Tensor([2, 4294968, 250],"float64"), 244, -1, )
paddle.kthvalue(Tensor([2, 4294968, 250],"float64"), 244, 2, )
paddle.kthvalue(Tensor([286332, 30, 250],"float64"), 244, -1, )
paddle.kthvalue(Tensor([286332, 30, 250],"float64"), 244, 2, )
paddle.kthvalue(Tensor([30, 200, 715828],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 200, 715828],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 200, 715828],"float32"), k=2, )
paddle.kthvalue(Tensor([30, 3579140, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([30, 3579140, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([30, 3579140, 40],"float32"), k=2, )
paddle.kthvalue(Tensor([4294967295],"float32"), 1, )
paddle.kthvalue(Tensor([4294967295],"float32"), k=2, )
paddle.kthvalue(Tensor([536871, 200, 40],"float32"), k=1, axis=1, )
paddle.kthvalue(Tensor([536871, 200, 40],"float32"), k=1, axis=1, keepdim=True, )
paddle.kthvalue(Tensor([536871, 200, 40],"float32"), k=2, )
paddle.kthvalue(x=Tensor([268435457, 2, 4],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([268435457, 2, 4],"float64"), k=4, axis=2, keepdim=True, )
paddle.kthvalue(x=Tensor([3, 178956971, 4],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([3, 178956971, 4],"float64"), k=4, axis=2, keepdim=True, )
paddle.kthvalue(x=Tensor([3, 2, 357913942],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(x=Tensor([3, 2, 357913942],"float64"), k=4, axis=2, keepdim=True, )
paddle.linalg.lu(Tensor([2, 429496730, 5],"float32"), )
paddle.linalg.lu(Tensor([2, 429496730, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.matrix_rank(Tensor([3, 47721859, 5, 6],"float32"), None, False, )
paddle.linalg.matrix_rank(x=Tensor([2, 67108865, 4, 4],"float64"), tol=None, hermitian=True, )
paddle.linalg.matrix_rank(x=Tensor([4, 1073741824],"float32"), tol=None, hermitian=False, )
paddle.linalg.svd(Tensor([10737419, 100, 2],"float64"), full_matrices=False, )
paddle.linalg.svdvals(Tensor([10, 429496730],"float32"), )
paddle.linalg.svdvals(Tensor([357913942, 12],"float32"), )
paddle.linalg.triangular_solve(Tensor([1073741824, 2, 2],"float32"), Tensor([1, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([1073741824, 2, 2],"float32"), Tensor([1073741824, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 2],"float64"), Tensor([1073741825, 2],"float64"), upper=False, )
paddle.linalg.triangular_solve(Tensor([3, 3],"float64"), Tensor([1073741825, 2],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([536870913, 4],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([536870913, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([536870913, 4],"float64"), upper=False, transpose=True, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([536870913, 4],"float64"), upper=False, transpose=True, unitriangular=True, )
paddle.logcumsumexp(Tensor([10, 10, 42949673],"float32"), )
paddle.logcumsumexp(Tensor([10, 42949673, 10],"float32"), )
paddle.logcumsumexp(Tensor([10, 429496730],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([10, 429496730],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([10, 429496730],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([10, 429496730],"float32"), dtype="float32", axis=None, )
paddle.logcumsumexp(Tensor([1073741824, 4],"float32"), )
paddle.logcumsumexp(Tensor([1073741824, 4],"float32"), dtype="float32", )
paddle.logcumsumexp(Tensor([357913942, 12],"float16"), dtype="float16", axis=1, )
paddle.logcumsumexp(Tensor([357913942, 12],"float16"), dtype="float16", axis=None, )
paddle.logcumsumexp(Tensor([357913942, 12],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([357913942, 12],"float32"), dtype="float32", axis=None, )
paddle.logsumexp(Tensor([2, 107374183, 4, 5],"float32"), )
paddle.logsumexp(Tensor([2, 107374183, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 107374183, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 143165577, 5],"float32"), )
paddle.logsumexp(Tensor([2, 3, 143165577, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 143165577, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 4, 178956971],"float32"), )
paddle.logsumexp(Tensor([2, 3, 4, 178956971],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 4, 178956971],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 4, 89478486],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 3, 71582789, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 53687092, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([3, 1431655765],"float32"), axis=None, )
paddle.logsumexp(Tensor([3, 1431655765],"float32"), keepdim=True, )
paddle.logsumexp(Tensor([30, 200, 715828],"float32"), )
paddle.logsumexp(Tensor([30, 200, 715828],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([30, 3579140, 40],"float32"), )
paddle.logsumexp(Tensor([30, 3579140, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([35791395, 3, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([536871, 200, 40],"float32"), )
paddle.logsumexp(Tensor([536871, 200, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([71582789, 3, 4, 5],"float32"), )
paddle.logsumexp(Tensor([71582789, 3, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([71582789, 3, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([858993459, 5],"float32"), axis=None, )
paddle.logsumexp(Tensor([858993459, 5],"float32"), keepdim=True, )
paddle.masked_fill(Tensor([3, 1431655765],"float16"), Tensor([3, 1],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 14316558],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([4294967295],"float16"), Tensor([4294967295],"bool"), Tensor([4294967295],"float16"), )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 536870912, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([2, 3, 715827883],"float16"), False, False, )
paddle.matmul(Tensor([2, 214748365, 5, 2],"float32"), Tensor([1, 214748365, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 4, 536870912],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 536870912, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 536870912, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 4, 536870912],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 536870912, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 4, 536870912],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 536870912, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 536870912],"float16"), Tensor([2, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 536870912],"float16"), Tensor([2, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 536870912],"float32"), Tensor([2, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 536870912],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 536870912, 4],"float16"), Tensor([2, 4, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 536870912, 4],"float16"), Tensor([2, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 536870912, 4],"float32"), Tensor([2, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 715827883, 3],"float16"), Tensor([2, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 715827883, 3],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([2, 2147483648],"float16"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([2, 2147483648],"float32"), False, False, )
paddle.matmul(Tensor([3, 1431655765],"float32"), Tensor([3],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([429496730, 1, 5, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(x=Tensor([1, 2, 2048, 1048576],"float16"), y=Tensor([1, 2, 2048, 1048576],"float16"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([2, 134217728, 16],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([2, 134217728, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 268435456],"float32"), y=Tensor([2, 8, 268435456],"float32"), transpose_y=True, )
paddle.max(Tensor([1, 32, 134217728],"float32"), axis=list[0,], )
paddle.max(Tensor([1, 32, 134217728],"float32"), axis=list[2,], )
paddle.max(Tensor([1, 536870912, 8],"float32"), axis=list[0,], )
paddle.max(Tensor([1, 536870912, 8],"float32"), axis=list[2,], )
paddle.max(Tensor([10, 4, 107374183],"int32"), axis=1, )
paddle.max(Tensor([10, 7158279, 60],"int32"), axis=1, )
paddle.max(Tensor([1048576, 32, 128],"float32"), axis=-1, )
paddle.max(Tensor([11008, 390168],"float16"), axis=tuple(0,), )
paddle.max(Tensor([128, 1, 33554432],"float32"), axis=2, )
paddle.max(Tensor([128, 262144, 128],"float32"), axis=2, )
paddle.max(Tensor([128, 33554432],"float16"), axis=1, keepdim=True, )
paddle.max(Tensor([128, 33554432],"float32"), axis=1, keepdim=True, )
paddle.max(Tensor([128, 33554432],"int32"), axis=0, )
paddle.max(Tensor([13, 110127367, 3],"float32"), 2, )
paddle.max(Tensor([13, 3, 110127367],"float32"), 2, )
paddle.max(Tensor([13, 330382100],"float32"), 1, )
paddle.max(Tensor([1355, 3170304],"float16"), axis=1, )
paddle.max(Tensor([1431655765, 3],"float32"), 1, )
paddle.max(Tensor([16, 32, 8388608],"float32"), axis=0, )
paddle.max(Tensor([16, 4194304, 64],"float32"), axis=0, )
paddle.max(Tensor([16777216, 32, 8],"float32"), axis=list[0,], )
paddle.max(Tensor([16777216, 32, 8],"float32"), axis=list[2,], )
paddle.max(Tensor([17530479, 245],"float32"), axis=0, )
paddle.max(Tensor([17895698, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([193957, 22144],"float16"), axis=1, )
paddle.max(Tensor([2, 1, 2147483648],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 1073741825],"float64"), 0, False, )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 67108864],"float32"), axis=-1, )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 67108864],"float32"), axis=6, )
paddle.max(Tensor([2, 2, 67108864, 2, 2, 2, 2],"float32"), axis=-1, )
paddle.max(Tensor([2, 2147483648],"float16"), axis=1, )
paddle.max(Tensor([2, 2147483648],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 35791395, 60],"int32"), axis=1, )
paddle.max(Tensor([2, 4, 536870912],"int32"), axis=1, )
paddle.max(Tensor([20, 3579140, 60],"int32"), axis=1, )
paddle.max(Tensor([20, 4, 53687092],"int32"), axis=1, )
paddle.max(Tensor([2097152, 32, 64],"float32"), axis=0, )
paddle.max(Tensor([220753, 19456],"float16"), axis=1, )
paddle.max(Tensor([222215, 19328],"float16"), axis=1, )
paddle.max(Tensor([233017, 18432],"float16"), axis=1, )
paddle.max(Tensor([3, 128, 11184811],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([3, 1431655765],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([3, 14913081, 96],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([3, 2, 715827883],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([3, 286331153, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([30, 200, 715828],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([30, 200, 715828],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([30, 2386093, 60],"int32"), axis=1, )
paddle.max(Tensor([30, 3579140, 40],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([30, 3579140, 40],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([30, 4, 35791395],"int32"), axis=1, )
paddle.max(Tensor([32, 1048576, 128],"float32"), axis=0, )
paddle.max(Tensor([32, 1048576, 128],"float32"), axis=-1, )
paddle.max(Tensor([32, 134217728],"float32"), axis=-1, )
paddle.max(Tensor([32, 32, 4194304],"float32"), axis=-1, )
paddle.max(Tensor([32, 64, 2097152],"float32"), axis=0, )
paddle.max(Tensor([33554432, 1, 128],"float32"), axis=2, )
paddle.max(Tensor([33554432, 128],"float32"), axis=-1, )
paddle.max(Tensor([33554432, 128],"int32"), axis=0, )
paddle.max(Tensor([34636834, 124],"float16"), axis=1, keepdim=True, )
paddle.max(Tensor([34636834, 124],"float32"), axis=1, keepdim=True, )
paddle.max(Tensor([349526, 128, 96],"float32"), axis=list[0,1,], )
paddle.max(Tensor([349526, 128, 96],"float32"), axis=list[2,], )
paddle.max(Tensor([349526, 128, 96],"int32"), axis=list[2,], keepdim=False, )
paddle.max(Tensor([390168, 11008],"float16"), axis=tuple(0,), )
paddle.max(Tensor([4, 17895698, 60],"int32"), axis=1, )
paddle.max(Tensor([4, 256, 16, 262144],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 256, 16, 262144],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([4, 256, 262144, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 256, 262144, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([4, 4, 268435456],"int32"), axis=1, )
paddle.max(Tensor([4, 4194304, 16, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([4, 4194304, 16, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([4096, 1024, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([429496730, 2, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([477218589, 3, 3],"float32"), 2, )
paddle.max(Tensor([524288, 64, 128],"float32"), axis=0, )
paddle.max(Tensor([536870913, 4],"float64"), 0, False, )
paddle.max(Tensor([536870913, 4],"float64"), 1, True, )
paddle.max(Tensor([536871, 200, 40],"float32"), axis=list[0,1,], keepdim=False, )
paddle.max(Tensor([536871, 200, 40],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.max(Tensor([64, 128, 524288],"float32"), axis=list[0,1,], )
paddle.max(Tensor([64, 128, 524288],"float32"), axis=list[2,], )
paddle.max(Tensor([64, 67108864],"float16"), axis=tuple(0,), )
paddle.max(Tensor([64, 699051, 96],"float32"), axis=list[0,1,], )
paddle.max(Tensor([64, 699051, 96],"float32"), axis=list[2,], )
paddle.max(Tensor([65536, 256, 16, 16],"float16"), axis=2, keepdim=True, )
paddle.max(Tensor([65536, 256, 16, 16],"float16"), axis=3, keepdim=True, )
paddle.max(Tensor([67108864, 64],"float16"), axis=tuple(0,), )
paddle.max(Tensor([8, 1024, 524288],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([8, 524288, 1024],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([8388608, 512],"int32"), axis=0, )
paddle.max(Tensor([858993459, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(x=Tensor([1431655765, 3],"float32"), axis=0, keepdim=True, )
paddle.max(x=Tensor([1431655765, 3],"float32"), axis=1, )
paddle.max(x=Tensor([1431655765, 3],"float32"), axis=-2, )
paddle.max(x=Tensor([2, 2147483648],"float32"), axis=1, )
paddle.median(Tensor([1073741824, 4],"float16"), 0, False, )
paddle.median(Tensor([1073741824, 4],"float16"), 0, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), 0, True, )
paddle.median(Tensor([1073741824, 4],"float16"), 0, True, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), 1, False, )
paddle.median(Tensor([1073741824, 4],"float16"), -1, False, )
paddle.median(Tensor([1073741824, 4],"float16"), 1, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), -1, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), 1, True, )
paddle.median(Tensor([1073741824, 4],"float16"), -1, True, )
paddle.median(Tensor([1073741824, 4],"float16"), 1, True, mode="min", )
paddle.median(Tensor([1073741824, 4],"float16"), -1, True, mode="min", )
paddle.median(Tensor([1073741824, 4],"float32"), 1, False, )
paddle.median(Tensor([1073741824, 4],"float32"), -1, False, )
paddle.median(Tensor([1073741824, 4],"float32"), 1, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float32"), -1, False, mode="min", )
paddle.median(Tensor([1073741824, 4],"float32"), 1, True, )
paddle.median(Tensor([1073741824, 4],"float32"), -1, True, )
paddle.median(Tensor([1073741824, 4],"float32"), 1, True, mode="min", )
paddle.median(Tensor([1073741824, 4],"float32"), -1, True, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"float64"), -1, False, )
paddle.median(Tensor([268435457, 4, 2],"float64"), -1, False, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"float64"), -1, True, )
paddle.median(Tensor([268435457, 4, 2],"float64"), -1, True, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"float64"), 2, False, )
paddle.median(Tensor([268435457, 4, 2],"float64"), 2, False, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"float64"), 2, True, )
paddle.median(Tensor([268435457, 4, 2],"float64"), 2, True, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"int64"), -1, False, )
paddle.median(Tensor([268435457, 4, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"int64"), -1, True, )
paddle.median(Tensor([268435457, 4, 2],"int64"), -1, True, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"int64"), 2, False, )
paddle.median(Tensor([268435457, 4, 2],"int64"), 2, False, mode="min", )
paddle.median(Tensor([268435457, 4, 2],"int64"), 2, True, )
paddle.median(Tensor([268435457, 4, 2],"int64"), 2, True, mode="min", )
paddle.median(Tensor([3, 1431655765],"float16"), 0, False, )
paddle.median(Tensor([3, 1431655765],"float16"), 0, False, mode="min", )
paddle.median(Tensor([3, 1431655765],"float16"), 0, True, )
paddle.median(Tensor([3, 1431655765],"float16"), 0, True, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"float64"), -1, False, )
paddle.median(Tensor([3, 357913942, 2],"float64"), -1, False, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"float64"), -1, True, )
paddle.median(Tensor([3, 357913942, 2],"float64"), -1, True, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"float64"), 2, False, )
paddle.median(Tensor([3, 357913942, 2],"float64"), 2, False, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"float64"), 2, True, )
paddle.median(Tensor([3, 357913942, 2],"float64"), 2, True, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"int64"), -1, False, )
paddle.median(Tensor([3, 357913942, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([3, 357913942, 2],"int64"), -1, True, )
paddle.median(Tensor([3, 357913942, 2],"int64"), -1, True, mode="min", )
paddle.mm(Tensor([4, 4194304, 256],"float32"), Tensor([4, 256, 512],"float32"), )
paddle.mode(Tensor([2, 10, 107374183],"float64"), -1, )
paddle.mode(Tensor([2, 10, 107374183],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([2, 107374183, 10],"float64"), 1, )
paddle.mode(Tensor([2, 107374183, 10],"float64"), 1, keepdim=True, )
paddle.mode(Tensor([2, 107374183, 10],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([21474837, 10, 10],"float64"), 1, )
paddle.mode(Tensor([21474837, 10, 10],"float64"), -1, )
paddle.mode(Tensor([21474837, 10, 10],"float64"), 1, keepdim=True, )
paddle.mode(Tensor([21474837, 10, 10],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([4294967295],"float32"), )
paddle.mode(x=Tensor([3, 2, 357913942],"float64"), )
paddle.mode(x=Tensor([3, 2, 357913942],"float64"), axis=2, keepdim=True, )
paddle.mode(x=Tensor([3, 2, 357913942],"int64"), )
paddle.mode(x=Tensor([3, 2, 715827883],"float32"), )
paddle.mode(x=Tensor([3, 2, 715827883],"int32"), )
paddle.mode(x=Tensor([3, 238609295, 3],"float64"), )
paddle.mode(x=Tensor([3, 238609295, 3],"float64"), axis=1, keepdim=False, )
paddle.mode(x=Tensor([3, 238609295, 3],"int64"), )
paddle.mode(x=Tensor([3, 477218589, 3],"float32"), )
paddle.mode(x=Tensor([3, 477218589, 3],"int32"), )
paddle.mode(x=Tensor([357913942, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.mode(x=Tensor([715827883, 2, 3],"float32"), )
paddle.mode(x=Tensor([715827883, 2, 3],"int32"), )
paddle.multiply(Tensor([128, 112, 14, 21400],"float16"), Tensor([128, 1, 1, 1],"float16"), )
paddle.multiply(Tensor([128, 112, 14, 21400],"float16"), Tensor([128, 1, 1, 21400],"float16"), )
paddle.multiply(Tensor([128, 112, 21400, 14],"float16"), Tensor([128, 1, 1, 1],"float16"), )
paddle.multiply(Tensor([128, 112, 21400, 14],"float16"), Tensor([128, 1, 21400, 1],"float16"), )
paddle.multiply(Tensor([128, 171197, 14, 14],"float16"), Tensor([128, 1, 1, 1],"float16"), )
paddle.multiply(Tensor([128, 171197, 14, 14],"float16"), Tensor([128, 171197, 1, 1],"float16"), )
paddle.multiply(Tensor([195653, 112, 14, 14],"float16"), Tensor([195653, 1, 1, 1],"float16"), )
paddle.multiply(Tensor([33554432, 128],"float16"), Tensor([128],"float16"), )
paddle.multiply(Tensor([429497, 100, 100],"float16"), Tensor([100, 100],"float16"), )
paddle.multiply(Tensor([64, 3277, 512, 1, 40],"float16"), Tensor([64, 3277, 1, 1, 40],"float16"), )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 107374183, 4, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 143165577, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 178956971],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([42949673, 100],"float32"), axis=1, mode="min", )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, )
paddle.nanmedian(Tensor([71582789, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, mode="min", )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 14, 299594],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 18, 233017],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 19, 220753],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 2, 2097152],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 20, 209716],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 2097152, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 209716, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 220753, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 233017, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1024, 299594, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1048576, 64, 64],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1048576, 64, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1073741824, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 10737419, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 10737419, 20, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 1082402, 62, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 11897417, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 11897417, 19, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 1048576, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 128, 32, 1048576],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 13256072, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 13256072, 18, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 10, 2684355],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 11, 2440323],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 1342178, 20],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 1412819, 19],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 1491309, 18],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 1677722],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 16, 1677722],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 18, 1491309],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 19, 1412819],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 20, 1342178],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 2440323, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 2684355, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 838861, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 160, 838861, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 16384, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 32768, 64],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 32768, 64],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 62, 33826],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 64, 32768],"float16"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 2048, 64, 32768],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 21913099, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 262144, 128, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 262144, 128, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 262144, 128, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 35495598, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 4194304, 32, 32],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 42949673, 10, 10],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 65536],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 65536],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 128, 65536],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 2, 4194304],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 4194304, 2],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 65536, 128],"float32"), output_size=tuple(2,2,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 65536, 128],"float32"), output_size=tuple(3,3,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 512, 65536, 128],"float32"), output_size=tuple(6,6,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 524288, 64, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 8388608, 16, 32],"float32"), output_size=2, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1, 8388608, 16, 32],"float32"), output_size=4, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1024, 85599, 7, 7],"float32"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1048576, 1024, 2, 2],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([10486, 1024, 20, 20],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([11619, 1024, 19, 19],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 8192],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 4, 8192],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 410, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 1024, 410, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 104858, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 104858, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 9363],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 28, 9363],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 9363, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 128, 9363, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 171197, 14, 14],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 171197, 14, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 7490],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 14, 7490],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 7490, 14],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 320, 7490, 14],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 42800, 28, 28],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 42800, 28, 28],"float32"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 7, 9363],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 512, 9363, 7],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([128, 684785, 7, 7],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([12946, 1024, 18, 18],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 105352, 56, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 23046, 56],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13, 256, 56, 23046],"float32"), output_size=list[7,7,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13108, 1024, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([13108, 1024, 4, 80],"float32"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([171197, 512, 7, 7],"float16"), output_size=7, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1914, 45796, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1917, 45724, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 480, 4, 11651],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 480, 583, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([192, 69906, 4, 80],"float16"), list[1,40,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1921, 2048, 156, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1921, 2048, 7, 156],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1921, 45629, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([1929, 45440, 7, 7],"float16"), output_size=1, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 134217728, 4, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 178956971, 4],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 4, 178956971],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 3, 89478486, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 67108865],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 67108865],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 4, 67108865],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 89478486, 3],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 89478486, 3],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 4, 89478486, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), list[2,5,], )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=5, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[2,5,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=list[None,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 599187, 7],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 512, 7, 599187],"float32"), output_size=tuple(7,7,), data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[1,1,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[1,4,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[2,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 67108865, 4, 4],"float64"), output_size=list[3,3,], data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 89478486, 4, 3],"float64"), output_size=3, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 89478486, 4, 3],"float64"), output_size=list[3,3,], data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2, 89478486, 4, 3],"float64"), output_size=tuple(3,3,), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([21400, 1024, 14, 14],"float32"), output_size=1, data_format="NCHW", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([221848, 160, 11, 11],"float32"), tuple(1,1,), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 1171, 7, 2048],"float16"), output_size=1, data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([256, 2048, 64, 128],"float32"), output_size=tuple(1,1,), data_format="NCHW", name=None, )
