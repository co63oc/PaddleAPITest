paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 5592406, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 5592406, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 5592406, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 5592406, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 26512144, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 9942054],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 9942054],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 9942054, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 9942054, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 9942054, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 89478486, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2097152, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2796203, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 5592406, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 5592406, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 5592406],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 4194304, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 4194304, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 4194304, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 4194304, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 4194304, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 4194304, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 4194304],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 4194304],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 4194304],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4194304, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4194304, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4194304, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 5592406, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 4194304, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 4194304, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 5592406, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 4194304, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 4194304, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 4194304, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 5592406, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 39768216],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 39768216, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 39768216, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([6628036, 3, 6, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([89478486, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([89478486, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([89478486, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([89478486, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(x=Tensor([178956971, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([178956971, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([178956971, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([178956971, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 178956971, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 178956971, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 178956971, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 89478486, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 178956971, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 178956971, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 178956971],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 159072863, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 159072863, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 159072863],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 79536432],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 79536432, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 79536432, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 53024288, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 79536432],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 79536432, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 79536432, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 39768216],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 39768216, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 39768216, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 26512144, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 89478486],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 89478486, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 89478486, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 89478486, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([89478486, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([89478486, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([89478486, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([89478486, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.flashmask_attention(Tensor([2731, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.flashmask_attention(Tensor([2731, 2048, 8, 96],"float16"), Tensor([2731, 2048, 8, 96],"float16"), Tensor([2731, 2048, 8, 96],"float16"), startend_row_indices=Tensor([2731, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 102261127, 7],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 102261127],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 43826197, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 14608733, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 14608733, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 14608733],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3130443, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3130443, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 6260886, 7, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2086962, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2086962, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([4173924, 3, 7, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.group_norm(Tensor([1, 1024, 10, 419431],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 116509, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 12, 349526],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 123362, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 131072, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 1024, 2, 2097152],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([10923, 1024, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([16132, 1024, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([2, 134217729, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 268435457, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 44739243, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 44739243, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 89478486, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 4, 134217729, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 268435457],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 44739243],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 44739243, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 89478486],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 67108865, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 67108865, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([44739243, 3, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([44739243, 4, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([58255, 1024, 2, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([61681, 1024, 2, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([65536, 1024, 2, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([1024],"float32"), bias=Tensor([1024],"float32"), )
paddle.nn.functional.group_norm(Tensor([89478486, 3, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([89478486, 4, 3, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.instance_norm(Tensor([1048576, 32, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([10737419, 100, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([1073742, 100, 4, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([1431656, 100, 3, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 21474837],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 2147484, 5],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 3579140],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 3, 7158279],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 2684355],"float64"), None, None, Tensor([100],"float64"), Tensor([100],"float64"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4, 5368710],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 100, 4294968, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 16777216, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 2147483648],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2, 32, 67108864],"float32"), )
paddle.nn.functional.instance_norm(Tensor([2147484, 100, 4, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2684355, 100, 16],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([2684355, 100, 4, 4],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([2684355, 100, 4, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([2863312, 100, 3, 5],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([33554432, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([4, 100, 10737419],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 2684355, 4],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 2684355, 4],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 2684355],"float16"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 100, 4, 2684355],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([65536, 32, 32, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 262144, 64],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([8, 32, 32, 524288],"float32"), None, None, Tensor([32],"float32"), Tensor([32],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(x=Tensor([178956971, 2, 2, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([178956971, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([178956971, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 1, 1073741825],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 178956971, 2, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 178956971, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 178956971, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 178956971, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 178956971, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 178956971, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 268435457],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 268435457],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 268435457],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 536870912],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 357913942, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 357913942, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 357913942, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([357913942, 2, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([715827883, 1, 3],"float64"), )
paddle.nn.functional.interpolate(Tensor([1, 1, 134217728, 32],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 16, 268435456],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 16777216, 256],"float32"), tuple(1024,1024,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 256, 16777216],"float32"), tuple(1024,1024,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 268435456, 16],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 32, 134217728],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 4194304, 1024],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5382165, 798],"float32"), size=list[9,13,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5592406, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 576, 7456541],"float32"), size=list[9,13,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 5835554, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 6100806, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 64, 67108864],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), size=list[10,8,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 640, 6710887],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 1, 67108864, 64],"float32"), size=tuple(256,256,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 6710887, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 1, 686, 6260886],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 704, 6100806],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 6074919],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 6074919],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 6074919],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 707, 6074919],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 736, 5835554],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 7456541, 576],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 768, 5592406],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 8947849, 480],"float32"), size=list[10,8,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 8947849, 480],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 8947849, 480],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([1, 1, 8947849, 480],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([1, 100, 55925, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 58356, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 61009, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 704, 61009],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 736, 58356],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 100, 768, 55925],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 1048576, 64, 64],"float16"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 1048576, 64, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 10486, 640, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([1, 10547, 707, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 10547, 707, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([1, 10547, 707, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([1, 10547, 707, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1, 1101274, 50, 78],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 1130255, 50, 76],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 1130255, 76, 50],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 116320, 181, 204],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 1263226, 50, 68],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1, 33554432],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1, 33554432],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1048576, 32],"float32"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 1048576, 32],"float32"), list[16,32,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 1048576, 32],"float32"), list[32,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 11184811, 3],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 128, 262144],"float32"), list[256,256,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 16, 2097152],"float32"), list[16,32,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 16, 2097152],"float32"), list[32,64,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 128, 16777216, 2],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 16777216, 2],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 2, 16777216],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 2, 16777216],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 262144, 128],"float32"), list[256,256,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 3, 11184811],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 32, 1048576],"float32"), list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 33554432, 1],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 33554432, 1],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 364723, 92],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 4, 8388608],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 5592406, 6],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 6, 5592406],"float32"), list[128,128,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 128, 8388608, 4],"float32"), list[16,32,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 128, 92, 364723],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 13982, 640, 480],"float32"), size=list[10,8,], )
paddle.nn.functional.interpolate(Tensor([1, 13982, 640, 480],"float32"), size=list[20,15,], )
paddle.nn.functional.interpolate(Tensor([1, 13982, 640, 480],"float32"), size=list[40,30,], )
paddle.nn.functional.interpolate(Tensor([1, 13982, 640, 480],"float32"), size=list[80,60,], )
paddle.nn.functional.interpolate(Tensor([1, 14514, 544, 544],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 146576, 182, 161],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 16519105, 13, 20],"float32"), size=list[25,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 16777216, 16, 16],"float32"), size=tuple(24,24,), mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 17388532, 13, 19],"float32"), size=list[25,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 17388532, 19, 13],"float32"), size=list[38,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 19, 128, 1766023],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 128, 1766023],"float32"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 19, 1766023, 128],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 1766023, 128],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 256, 883012],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 256, 883012],"float32"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 64, 3532046],"float32"), list[512,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 883012, 256],"float32"), list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19, 883012, 256],"float32"), list[512,1024,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 19, 883012, 256],"float32"), size=list[1024,1024,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 192, 1398102, 16],"float32"), size=tuple(24,24,), mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 192, 16, 1398102],"float32"), size=tuple(24,24,), mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 19434242, 13, 17],"float32"), size=list[25,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 2, 124, 17318417],"float32"), list[496,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 124, 17318417],"float32"), size=list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 16777216],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 16777216],"float32"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 128, 16777216],"float32"), size=list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float16"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float32"), list[496,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float32"), list[512,512,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float32"), size=list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 16777216, 128],"float32"), size=list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 33554432, 64],"float32"), list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 33554432, 64],"float32"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 3947581, 544],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 544, 3947581],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 62, 34636834],"float32"), list[496,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 2, 64, 33554432],"float32"), list[512,512,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 200, 39476, 544],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 200, 544, 39476],"float32"), size=list[272,272,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 16777216],"float16"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 16777216],"float32"), list[62,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 16777216],"float32"), list[64,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1, 16777216],"float32"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 1048576, 16],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 1048576, 16],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 128, 131072],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 1290556, 13],"float32"), size=list[38,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 13, 1290556],"float32"), size=list[25,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 13, 1290556],"float32"), size=list[25,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 13, 1290556],"float32"), size=list[25,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 131072, 128],"float32"), list[128,256,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 131072, 128],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 16, 1048576],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 16, 1048576],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 16777216, 1],"float16"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 16777216, 1],"float32"), list[62,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 16777216, 1],"float32"), list[64,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 16777216, 1],"float32"), list[64,64,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 19, 883012],"float32"), size=list[38,25,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 190651, 88],"float32"), size=list[88,88,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 200, 83887],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float16"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), list[124,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 262144, 64],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 304, 55189],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 31, 541201],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 32, 524288],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 32, 524288],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 524288, 32],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 524288, 32],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 524288, 32],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 53774, 312],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 55189, 304],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 61681, 272],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 62, 270601],"float32"), list[124,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 62, 270601],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float16"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float32"), list[128,128,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float32"), list[128,256,], mode="bilinear", align_corners=False, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 64, 262144],"float32"), size=list[256,256,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 838861, 20],"float32"), size=list[25,39,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 83887, 200],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 256, 88, 190651],"float32"), size=list[88,88,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 256, 883012, 19],"float32"), size=list[25,38,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 256, 986896, 17],"float32"), size=list[25,34,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 100, 166472],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 100, 166472],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 106713, 156],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 106713, 156],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 109521, 152],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 109521, 152],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 122406, 136],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 122406, 136],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 152, 109521],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 152, 109521],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 166472, 100],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 166472, 100],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 213426, 78],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 219042, 76],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 244812, 68],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 25, 665887],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 25, 665887],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 332944, 50],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 38, 438084],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 38, 438084],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 426851, 39],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 426851, 39],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 438084, 38],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 438084, 38],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 489623, 34],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 489623, 34],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 50, 332944],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 665887, 25],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 665887, 25],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 258, 76, 219042],"float32"), size=list[24,24,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 275319, 100, 156],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 275319, 100, 156],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 282564, 100, 152],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 282564, 100, 152],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 282564, 152, 100],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 282564, 152, 100],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 3, 1431655765],"float32"), size=list[64,], mode="linear", align_mode=1, align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 3, 1431655765],"float32"), size=list[64,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NCW", name=None, )
paddle.nn.functional.interpolate(Tensor([1, 3, 181, 7909701],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 182, 7866241],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 200, 7158279],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 212, 6753094],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 22369622, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 22369622, 64],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 227, 6306854],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 235, 6092153],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 250, 5726624],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 256, 5592406],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 28, 51130564],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 5113057],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 5113057],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 374, 3827957],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 4090446, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 4820390, 297],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5113057, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5187159, 276],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5225022, 274],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5506369, 260],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 5658719, 253],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 59652324, 24],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 22369622],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 22369622],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 6817409, 210],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 7017921, 204],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 7158279, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 8892272, 161],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 315807, 100, 136],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 315807, 100, 136],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 32, 1, 134217728],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 134217728, 1],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 2, 67108864],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 2, 67108864],"float32"), size=tuple(2,2,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 32, 22369622, 6],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 3, 44739243],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 44739243, 3],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 6, 22369622],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 67108864, 2],"float32"), list[32,32,], mode="bilinear", align_corners=True, )
paddle.nn.functional.interpolate(Tensor([1, 32, 67108864, 2],"float32"), size=tuple(2,2,), mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 38667, 374, 297],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 4, 1183839, 907],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([1, 4, 800, 1342178],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([1, 43827, 280, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 4405095, 25, 39],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4405095, 25, 39],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4521019, 25, 38],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4521019, 25, 38],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4521019, 38, 25],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 4521019, 38, 25],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 5052903, 25, 34],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 5052903, 25, 34],"float32"), size=list[16,16,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1, 54783, 280, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 5920, 800, 907],"float32"), size=tuple(25,29,), )
paddle.nn.functional.interpolate(Tensor([1, 6115, 686, 1024],"float32"), tuple(429,640,), mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 6391321, 28, 24],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 64, 1048576, 64],"float32"), list[64,128,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 64, 32, 2097152],"float32"), list[64,128,], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 64, 699051, 96],"float32"), size=list[96,96,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 64, 729445, 92],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 64, 92, 729445],"float32"), size=list[92,92,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 64, 96, 699051],"float32"), size=list[96,96,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 68553, 227, 276],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 68830, 200, 312],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 70295, 235, 260],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 70641, 200, 304],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 70641, 304, 200],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 7282, 768, 768],"float32"), size=list[384,384,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 73939, 212, 274],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 768, 14, 399458],"float32"), size=tuple(28,28,), align_corners=False, mode="bicubic", )
paddle.nn.functional.interpolate(Tensor([1, 768, 16, 349526],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 16, 349526],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 174763, 32],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 174763, 32],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 31, 180401],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 32, 174763],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 349526, 16],"float32"), size=list[124,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 349526, 16],"float32"), size=list[128,128,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 768, 399458, 14],"float32"), size=tuple(28,28,), align_corners=False, mode="bicubic", )
paddle.nn.functional.interpolate(Tensor([1, 78952, 200, 272],"float32"), scale_factor=0.5, align_corners=False, align_mode=0, mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([1, 7929, 736, 736],"float32"), size=list[368,368,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 81809, 250, 210],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 83887, 256, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 84881, 200, 253],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 8666, 704, 704],"float32"), size=list[352,352,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[144,200,], )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[18,25,], )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[36,50,], )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[72,100,], )
paddle.nn.functional.interpolate(Tensor([1, 9345, 576, 798],"float32"), size=list[9,13,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[192,144,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[24,18,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[48,36,], )
paddle.nn.functional.interpolate(Tensor([1, 9710, 768, 576],"float32"), size=list[96,72,], )
paddle.nn.functional.interpolate(Tensor([10226113, 5, 6, 7],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([10226113, 5, 6, 7],"float64"), size=list[10,10,], scale_factor=None, mode="bilinear", align_corners=True, align_mode=0, data_format="NHWC", name=None, )
paddle.nn.functional.interpolate(Tensor([10226113, 5, 6, 7],"float64"), size=None, scale_factor=list[1.2,3.3,], mode="bilinear", align_corners=True, align_mode=0, data_format="NCHW", name=None, )
paddle.nn.functional.interpolate(Tensor([10486, 1, 640, 640],"float32"), tuple(160,160,), mode="nearest", )
paddle.nn.functional.interpolate(Tensor([10486, 256, 40, 40],"float16"), scale_factor=2.0, mode="nearest", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([10486, 64, 80, 80],"float16"), size=list[160,160,], )
paddle.nn.functional.interpolate(Tensor([10486, 64, 80, 80],"float16"), size=tuple(160,160,), )
paddle.nn.functional.interpolate(Tensor([10547, 1, 707, 576],"float32"), size=list[12,9,], )
paddle.nn.functional.interpolate(Tensor([10547, 1, 707, 576],"float32"), size=list[23,18,], )
paddle.nn.functional.interpolate(Tensor([10547, 1, 707, 576],"float32"), size=list[45,36,], )
paddle.nn.functional.interpolate(Tensor([10547, 1, 707, 576],"float32"), size=list[89,72,], )
paddle.nn.functional.interpolate(Tensor([1068, 258, 100, 156],"float32"), size=list[36,36,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([1068, 258, 100, 156],"float32"), size=list[40,40,], mode="bilinear", align_corners=False, align_mode=0, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.6,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.7999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[0.8999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.0999999999999999,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.1999999999999997,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.2999999999999998,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4,], mode="linear", align_corners=True, align_mode=1, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=0, data_format="NWC", name=None, )
paddle.nn.functional.interpolate(Tensor([107374183, 10, 4],"float32"), size=None, scale_factor=list[1.4999999999999998,], mode="linear", align_corners=False, align_mode=1, data_format="NWC", name=None, )
