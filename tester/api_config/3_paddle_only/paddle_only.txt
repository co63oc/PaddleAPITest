paddle.nn.functional.flashmask_attention(Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), Tensor([1, 2048, 8, 96],"float16"), startend_row_indices=Tensor([1, 1, 2048, 1],"int32"), causal=True, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[2,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], kernel_size=list[2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float16"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), kernel_size=list[2,2,], output_size=list[3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[2,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float64"), output_size=list[3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool2d(x=Tensor([2, 3, 7, 7],"float64"), output_size=list[3,3,], random_u=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=5, kernel_size=None, random_u=0.5, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], kernel_size=None, random_u=0.7, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=2, random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=None, random_u=0.3, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], kernel_size=list[2,2,2,], random_u=0.6, return_mask=False, name=None, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float16"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), kernel_size=2, output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), kernel_size=list[2,2,2,], output_size=list[3,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=5, random_u=0.5, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[2,3,5,], random_u=0.7, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,3,None,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[3,None,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float32"), output_size=list[None,3,3,], random_u=0.6, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=0.3, )
paddle.nn.functional.fractional_max_pool3d(x=Tensor([2, 3, 7, 7, 7],"float64"), output_size=list[3,3,3,], random_u=None, )
paddle.audio.functional.get_window("triang", 512, )
paddle.nn.functional.class_center_sample(Tensor([10],"int32"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([10],"int64"), 20, 6, )
paddle.nn.functional.class_center_sample(Tensor([15],"int32"), 20, 8, )
paddle.nn.functional.class_center_sample(Tensor([20],"int32"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.class_center_sample(Tensor([20],"int64"), num_classes=10, num_samples=6, group=None, )
paddle.nn.functional.class_center_sample(Tensor([5],"int32"), 10, 8, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 1, 1],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 1, 1],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 1, 1],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.autograd.hessian(Tensor([5, 1],"float32"), Tensor([5, 2],"float32"), batch_axis=0, )
paddle.autograd.hessian(Tensor([5, 1],"float32"), list[Tensor([5, 2],"float32"),Tensor([5, 2],"float32"),], batch_axis=0, )
paddle.autograd.hessian(Tensor([],"float32"), Tensor([4],"float32"), )
paddle.autograd.hessian(Tensor([],"float32"), Tensor([4],"float32"), batch_axis=None, )
paddle.autograd.jacobian(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), batch_axis=0, )
paddle.autograd.jacobian(Tensor([2],"float64"), Tensor([2],"float64"), batch_axis=None, )
paddle.autograd.jacobian(Tensor([6],"float64"), Tensor([6],"float64"), batch_axis=None, )
paddle.autograd.jacobian(Tensor([],"float64"), list[Tensor([4],"float64"),Tensor([4],"float64"),], batch_axis=None, )
paddle.incubate.nn.functional.masked_multihead_attention(Tensor([2, 12288],"float16"), Tensor([2, 2, 32, 33, 128],"float16"), Tensor([3, 32, 128],"float16"), Tensor([2, 1, 1, 33],"float16"), None, None, None, None, None, None, None, 1, 0, False, "default", -1, 1, 126, -126, )
paddle.incubate.nn.functional.masked_multihead_attention(Tensor([2, 12288],"float16"), Tensor([2, 2, 32, 33, 128],"float16"), Tensor([3, 32, 128],"float16"), Tensor([2, 1, 1, 33],"float16"), None, None, None, None, None, None, None, 1, 0, False, "default", 10, 1, 126, -126, )
paddle.incubate.nn.functional.masked_multihead_attention(Tensor([2, 12288],"int32"), Tensor([2, 2, 32, 33, 128],"float16"), Tensor([3, 32, 128],"float16"), Tensor([2, 1, 1, 33],"float16"), None, None, None, None, Tensor([3, 32, 128],"float32"), None, None, 1, 0, False, "fp16", -1, 1, 126, -126, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 64, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 64, 64, False, out_scale=1.0, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, Tensor([2, 1, 128, 1, 32],"float32"), None, None, 64, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, Tensor([1],"int32"), Tensor([1],"int32"), None, None, None, 64, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"float16"), Tensor([4, 8, 64, 64],"uint8"), Tensor([4, 8, 64, 64],"uint8"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, Tensor([2, 8],"float32"), Tensor([2, 8],"float32"), Tensor([2, 8],"float32"), Tensor([2, 8],"float32"), None, None, None, None, None, None, None, None, None, 64, 64, False, use_dynamic_cachekv_quant=True, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"float16"), Tensor([4, 8, 64, 64],"uint8"), Tensor([4, 8, 64, 64],"uint8"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), None, None, None, None, None, None, None, None, None, 64, 64, False, use_dynamic_cachekv_quant=False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"float16"), Tensor([6, 8, 64, 64],"float16"), Tensor([6, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 3],"int32"), Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), None, None, None, None, None, None, None, None, None, None, None, Tensor([2, 1, 64, 128],"float16"), None, 64, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"int32"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, Tensor([1536],"float32"), Tensor([1536],"float16"), None, None, None, None, None, None, None, 64, 64, False, compute_dtype="fp16", )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 1536],"int32"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, Tensor([1536],"float32"), Tensor([1536],"float16"), Tensor([512],"float16"), Tensor([512],"float16"), None, None, None, None, None, 64, 64, False, compute_dtype="fp16", out_scale=1.0, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 64, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 64, 64, False, out_scale=1.0, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, Tensor([2, 1, 128, 1, 32],"float32"), None, None, 64, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, Tensor([1],"int32"), Tensor([1],"int32"), None, None, None, 64, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 768],"float16"), Tensor([4, 2, 64, 64],"uint8"), Tensor([4, 2, 64, 64],"uint8"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), None, None, None, None, None, None, None, None, None, 64, 64, False, use_dynamic_cachekv_quant=True, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 768],"float16"), Tensor([4, 2, 64, 64],"uint8"), Tensor([4, 2, 64, 64],"uint8"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, Tensor([2],"float32"), Tensor([2],"float32"), Tensor([2],"float32"), Tensor([2],"float32"), None, None, None, None, None, None, None, None, None, 64, 64, False, use_dynamic_cachekv_quant=False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 768],"int32"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, Tensor([768],"float32"), Tensor([768],"float16"), None, None, None, None, None, None, None, 64, 64, False, compute_dtype="fp16", )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([128, 768],"int32"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([128],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, Tensor([768],"float32"), Tensor([768],"float16"), Tensor([512],"float16"), Tensor([512],"float16"), None, None, None, None, None, 64, 64, False, compute_dtype="fp16", out_scale=1.0, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, 64, False, out_scale=1.0, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, None, None, Tensor([2, 8, 1, 65],"float16"), 1, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, Tensor([2, 1, 128, 1, 32],"float32"), None, None, 1, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, Tensor([1],"int32"), Tensor([1],"int32"), None, None, Tensor([2, 8, 1, 65],"float16"), 1, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"float16"), Tensor([4, 8, 64, 64],"uint8"), Tensor([4, 8, 64, 64],"uint8"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, Tensor([2, 8],"float32"), Tensor([2, 8],"float32"), Tensor([2, 8],"float32"), Tensor([2, 8],"float32"), None, None, None, None, None, None, None, None, None, 1, 64, False, use_dynamic_cachekv_quant=True, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"float16"), Tensor([4, 8, 64, 64],"uint8"), Tensor([4, 8, 64, 64],"uint8"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), Tensor([8],"float32"), None, None, None, None, None, None, None, None, None, 1, 64, False, use_dynamic_cachekv_quant=False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"float16"), Tensor([6, 8, 64, 64],"float16"), Tensor([6, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 3],"int32"), Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), None, None, None, None, None, None, None, None, None, None, None, Tensor([2, 1, 64, 128],"float16"), None, 1, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"int32"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, Tensor([1536],"float32"), Tensor([1536],"float16"), None, None, None, None, None, None, None, 1, 64, False, compute_dtype="fp16", )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 1536],"int32"), Tensor([4, 8, 64, 64],"float16"), Tensor([4, 8, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, Tensor([1536],"float32"), Tensor([1536],"float16"), Tensor([512],"float16"), Tensor([512],"float16"), None, None, None, None, None, 1, 64, False, compute_dtype="fp16", out_scale=1.0, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 1, 64, False, out_scale=1.0, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, None, None, Tensor([2, 8, 1, 65],"float16"), 1, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, None, None, Tensor([2, 1, 128, 1, 32],"float32"), None, None, 1, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 768],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, None, None, None, None, Tensor([1],"int32"), Tensor([1],"int32"), None, None, Tensor([2, 8, 1, 65],"float16"), 1, 64, False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 768],"float16"), Tensor([4, 2, 64, 64],"uint8"), Tensor([4, 2, 64, 64],"uint8"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), None, None, None, None, None, None, None, None, None, 1, 64, False, use_dynamic_cachekv_quant=True, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 768],"float16"), Tensor([4, 2, 64, 64],"uint8"), Tensor([4, 2, 64, 64],"uint8"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, Tensor([2],"float32"), Tensor([2],"float32"), Tensor([2],"float32"), Tensor([2],"float32"), None, None, None, None, None, None, None, None, None, 1, 64, False, use_dynamic_cachekv_quant=False, )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 768],"int32"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, Tensor([768],"float32"), Tensor([768],"float16"), None, None, None, None, None, None, None, 1, 64, False, compute_dtype="fp16", )
paddle.incubate.nn.functional.block_multihead_attention(Tensor([2, 768],"int32"), Tensor([4, 2, 64, 64],"float16"), Tensor([4, 2, 64, 64],"float16"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([2],"int32"), Tensor([3],"int32"), Tensor([3],"int32"), Tensor([2, 2],"int32"), None, None, None, None, None, None, Tensor([768],"float32"), Tensor([768],"float16"), Tensor([512],"float16"), Tensor([512],"float16"), None, None, None, None, None, 1, 64, False, compute_dtype="fp16", out_scale=1.0, )
paddle.Tensor.__sub__(Tensor([2, 3, 4],"bool"), 1, )
paddle.Tensor.__sub__(Tensor([2, 3, 4],"bool"), 1.0, )
paddle.Tensor.__sub__(Tensor([2, 3, 4],"bool"), complex(0.0,2.0), )
paddle.Tensor.__sub__(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.Tensor.__sub__(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.Tensor.__sub__(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.Tensor.__sub__(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.Tensor.__sub__(Tensor([],"float32"), True, )
paddle.Tensor.__sub__(Tensor([],"float64"), False, )
paddle.Tensor.__sub__(Tensor([],"float64"), True, )
paddle.broadcast_shape(list[-1,1,3,], list[1,3,1,], )
paddle.broadcast_shape(list[2,-1,], list[0,], )
paddle.arange(0, Tensor([],"float32"), dtype="float32", )
paddle.arange(0, Tensor([],"float64"), dtype="float64", )
paddle.arange(0, Tensor([],"int32"), dtype="float32", )
paddle.arange(0, Tensor([],"int32"), dtype="float64", )
paddle.arange(0, Tensor([],"int64"), 1, dtype=Dtype(int64), )
paddle.arange(Tensor([1],"float32"), )
paddle.arange(Tensor([1],"float32"), 1, )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), 1, )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), "float32", )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), "float64", )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), "int64", )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.arange(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), type(numpy.float32), )
paddle.arange(Tensor([1],"int32"), Tensor([1],"int32"), Tensor([1],"int32"), type(numpy.int32), )
paddle.arange(Tensor([1],"int64"), dtype="int64", )
paddle.arange(Tensor([],"float32"), Tensor([],"float32"), -1, dtype=Dtype(int64), )
paddle.arange(Tensor([],"float32"), Tensor([],"float32"), -2, dtype=Dtype(int64), )
paddle.arange(Tensor([],"float32"), Tensor([],"float32"), -4, dtype=Dtype(int64), )
paddle.arange(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.arange(Tensor([],"int64"), )
paddle.arange(Tensor([],"int64"), Tensor([],"int64"), )
paddle.arange(Tensor([],"int64"), Tensor([],"int64"), dtype=Dtype(int32), )
paddle.arange(Tensor([],"int64"), dtype="float32", )
paddle.arange(Tensor([],"int64"), dtype="int64", )
paddle.arange(end=Tensor([],"int64"), )
paddle.arange(start=0, end=Tensor([],"int64"), dtype="float32", )
paddle.arange(start=1, end=20, step=Tensor([1],"int64"), dtype=type(numpy.float32), )
paddle.arange(start=Tensor([1],"int64"), end=20, step=3, dtype=type(numpy.int64), )
paddle.arange(start=Tensor([1],"int64"), end=Tensor([1],"int64"), step=Tensor([1],"int64"), dtype=type(numpy.float32), )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 40, 60],"float32"), Tensor([1, 60, 40, 60],"float32"), Tensor([1, 2],"float32"), Tensor([36000, 4],"float32"), Tensor([36000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 42, 63],"float32"), Tensor([1, 60, 42, 63],"float32"), Tensor([1, 2],"float32"), Tensor([39690, 4],"float32"), Tensor([39690, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 42, 64],"float32"), Tensor([1, 60, 42, 64],"float32"), Tensor([1, 2],"float32"), Tensor([40320, 4],"float32"), Tensor([40320, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 44, 59],"float32"), Tensor([1, 60, 44, 59],"float32"), Tensor([1, 2],"float32"), Tensor([38940, 4],"float32"), Tensor([38940, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 44, 66],"float32"), Tensor([1, 60, 44, 66],"float32"), Tensor([1, 2],"float32"), Tensor([43560, 4],"float32"), Tensor([43560, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 44, 67],"float32"), Tensor([1, 60, 44, 67],"float32"), Tensor([1, 2],"float32"), Tensor([44220, 4],"float32"), Tensor([44220, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 44, 69],"float32"), Tensor([1, 60, 44, 69],"float32"), Tensor([1, 2],"float32"), Tensor([45540, 4],"float32"), Tensor([45540, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 46, 62],"float32"), Tensor([1, 60, 46, 62],"float32"), Tensor([1, 2],"float32"), Tensor([42780, 4],"float32"), Tensor([42780, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 46, 67],"float32"), Tensor([1, 60, 46, 67],"float32"), Tensor([1, 2],"float32"), Tensor([46230, 4],"float32"), Tensor([46230, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 46, 68],"float32"), Tensor([1, 60, 46, 68],"float32"), Tensor([1, 2],"float32"), Tensor([46920, 4],"float32"), Tensor([46920, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 46, 69],"float32"), Tensor([1, 60, 46, 69],"float32"), Tensor([1, 2],"float32"), Tensor([47610, 4],"float32"), Tensor([47610, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 46, 70],"float32"), Tensor([1, 60, 46, 70],"float32"), Tensor([1, 2],"float32"), Tensor([48300, 4],"float32"), Tensor([48300, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 46, 75],"float32"), Tensor([1, 60, 46, 75],"float32"), Tensor([1, 2],"float32"), Tensor([51750, 4],"float32"), Tensor([51750, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 46, 80],"float32"), Tensor([1, 60, 46, 80],"float32"), Tensor([1, 2],"float32"), Tensor([55200, 4],"float32"), Tensor([55200, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 46, 84],"float32"), Tensor([1, 60, 46, 84],"float32"), Tensor([1, 2],"float32"), Tensor([57960, 4],"float32"), Tensor([57960, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 47, 84],"float32"), Tensor([1, 60, 47, 84],"float32"), Tensor([1, 2],"float32"), Tensor([59220, 4],"float32"), Tensor([59220, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 48, 62],"float32"), Tensor([1, 60, 48, 62],"float32"), Tensor([1, 2],"float32"), Tensor([44640, 4],"float32"), Tensor([44640, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 48, 64],"float32"), Tensor([1, 60, 48, 64],"float32"), Tensor([1, 2],"float32"), Tensor([46080, 4],"float32"), Tensor([46080, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 48, 66],"float32"), Tensor([1, 60, 48, 66],"float32"), Tensor([1, 2],"float32"), Tensor([47520, 4],"float32"), Tensor([47520, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 48, 67],"float32"), Tensor([1, 60, 48, 67],"float32"), Tensor([1, 2],"float32"), Tensor([48240, 4],"float32"), Tensor([48240, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 48, 69],"float32"), Tensor([1, 60, 48, 69],"float32"), Tensor([1, 2],"float32"), Tensor([49680, 4],"float32"), Tensor([49680, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 48, 70],"float32"), Tensor([1, 60, 48, 70],"float32"), Tensor([1, 2],"float32"), Tensor([50400, 4],"float32"), Tensor([50400, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 48, 72],"float32"), Tensor([1, 60, 48, 72],"float32"), Tensor([1, 2],"float32"), Tensor([51840, 4],"float32"), Tensor([51840, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 48, 73],"float32"), Tensor([1, 60, 48, 73],"float32"), Tensor([1, 2],"float32"), Tensor([52560, 4],"float32"), Tensor([52560, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 48, 84],"float32"), Tensor([1, 60, 48, 84],"float32"), Tensor([1, 2],"float32"), Tensor([60480, 4],"float32"), Tensor([60480, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 64],"float32"), Tensor([1, 60, 50, 64],"float32"), Tensor([1, 2],"float32"), Tensor([48000, 4],"float32"), Tensor([48000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 67],"float32"), Tensor([1, 60, 50, 67],"float32"), Tensor([1, 2],"float32"), Tensor([50250, 4],"float32"), Tensor([50250, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 71],"float32"), Tensor([1, 60, 50, 71],"float32"), Tensor([1, 2],"float32"), Tensor([53250, 4],"float32"), Tensor([53250, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 72],"float32"), Tensor([1, 60, 50, 72],"float32"), Tensor([1, 2],"float32"), Tensor([54000, 4],"float32"), Tensor([54000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 73],"float32"), Tensor([1, 60, 50, 73],"float32"), Tensor([1, 2],"float32"), Tensor([54750, 4],"float32"), Tensor([54750, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 75],"float32"), Tensor([1, 60, 50, 75],"float32"), Tensor([1, 2],"float32"), Tensor([56250, 4],"float32"), Tensor([56250, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 76],"float32"), Tensor([1, 60, 50, 76],"float32"), Tensor([1, 2],"float32"), Tensor([57000, 4],"float32"), Tensor([57000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 79],"float32"), Tensor([1, 60, 50, 79],"float32"), Tensor([1, 2],"float32"), Tensor([59250, 4],"float32"), Tensor([59250, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 81],"float32"), Tensor([1, 60, 50, 81],"float32"), Tensor([1, 2],"float32"), Tensor([60750, 4],"float32"), Tensor([60750, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 82],"float32"), Tensor([1, 60, 50, 82],"float32"), Tensor([1, 2],"float32"), Tensor([61500, 4],"float32"), Tensor([61500, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 50, 84],"float32"), Tensor([1, 60, 50, 84],"float32"), Tensor([1, 2],"float32"), Tensor([63000, 4],"float32"), Tensor([63000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 51, 82],"float32"), Tensor([1, 60, 51, 82],"float32"), Tensor([1, 2],"float32"), Tensor([62730, 4],"float32"), Tensor([62730, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 52, 75],"float32"), Tensor([1, 60, 52, 75],"float32"), Tensor([1, 2],"float32"), Tensor([58500, 4],"float32"), Tensor([58500, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 53, 56],"float32"), Tensor([1, 60, 53, 56],"float32"), Tensor([1, 2],"float32"), Tensor([44520, 4],"float32"), Tensor([44520, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 54, 60],"float32"), Tensor([1, 60, 54, 60],"float32"), Tensor([1, 2],"float32"), Tensor([48600, 4],"float32"), Tensor([48600, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 54, 61],"float32"), Tensor([1, 60, 54, 61],"float32"), Tensor([1, 2],"float32"), Tensor([49410, 4],"float32"), Tensor([49410, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 54, 62],"float32"), Tensor([1, 60, 54, 62],"float32"), Tensor([1, 2],"float32"), Tensor([50220, 4],"float32"), Tensor([50220, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 54, 63],"float32"), Tensor([1, 60, 54, 63],"float32"), Tensor([1, 2],"float32"), Tensor([51030, 4],"float32"), Tensor([51030, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 54, 66],"float32"), Tensor([1, 60, 54, 66],"float32"), Tensor([1, 2],"float32"), Tensor([53460, 4],"float32"), Tensor([53460, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 55, 70],"float32"), Tensor([1, 60, 55, 70],"float32"), Tensor([1, 2],"float32"), Tensor([57750, 4],"float32"), Tensor([57750, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 42],"float32"), Tensor([1, 60, 56, 42],"float32"), Tensor([1, 2],"float32"), Tensor([35280, 4],"float32"), Tensor([35280, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 62],"float32"), Tensor([1, 60, 56, 62],"float32"), Tensor([1, 2],"float32"), Tensor([52080, 4],"float32"), Tensor([52080, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 63],"float32"), Tensor([1, 60, 56, 63],"float32"), Tensor([1, 2],"float32"), Tensor([52920, 4],"float32"), Tensor([52920, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 64],"float32"), Tensor([1, 60, 56, 64],"float32"), Tensor([1, 2],"float32"), Tensor([53760, 4],"float32"), Tensor([53760, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 67],"float32"), Tensor([1, 60, 56, 67],"float32"), Tensor([1, 2],"float32"), Tensor([56280, 4],"float32"), Tensor([56280, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 69],"float32"), Tensor([1, 60, 56, 69],"float32"), Tensor([1, 2],"float32"), Tensor([57960, 4],"float32"), Tensor([57960, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 72],"float32"), Tensor([1, 60, 56, 72],"float32"), Tensor([1, 2],"float32"), Tensor([60480, 4],"float32"), Tensor([60480, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 75],"float32"), Tensor([1, 60, 56, 75],"float32"), Tensor([1, 2],"float32"), Tensor([63000, 4],"float32"), Tensor([63000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 79],"float32"), Tensor([1, 60, 56, 79],"float32"), Tensor([1, 2],"float32"), Tensor([66360, 4],"float32"), Tensor([66360, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 56, 81],"float32"), Tensor([1, 60, 56, 81],"float32"), Tensor([1, 2],"float32"), Tensor([68040, 4],"float32"), Tensor([68040, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 57, 67],"float32"), Tensor([1, 60, 57, 67],"float32"), Tensor([1, 2],"float32"), Tensor([57285, 4],"float32"), Tensor([57285, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 58, 64],"float32"), Tensor([1, 60, 58, 64],"float32"), Tensor([1, 2],"float32"), Tensor([55680, 4],"float32"), Tensor([55680, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 59, 44],"float32"), Tensor([1, 60, 59, 44],"float32"), Tensor([1, 2],"float32"), Tensor([38940, 4],"float32"), Tensor([38940, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 59, 63],"float32"), Tensor([1, 60, 59, 63],"float32"), Tensor([1, 2],"float32"), Tensor([55755, 4],"float32"), Tensor([55755, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 59, 64],"float32"), Tensor([1, 60, 59, 64],"float32"), Tensor([1, 2],"float32"), Tensor([56640, 4],"float32"), Tensor([56640, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 59, 65],"float32"), Tensor([1, 60, 59, 65],"float32"), Tensor([1, 2],"float32"), Tensor([57525, 4],"float32"), Tensor([57525, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 59, 81],"float32"), Tensor([1, 60, 59, 81],"float32"), Tensor([1, 2],"float32"), Tensor([71685, 4],"float32"), Tensor([71685, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 59, 84],"float32"), Tensor([1, 60, 59, 84],"float32"), Tensor([1, 2],"float32"), Tensor([74340, 4],"float32"), Tensor([74340, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 60, 42],"float32"), Tensor([1, 60, 60, 42],"float32"), Tensor([1, 2],"float32"), Tensor([37800, 4],"float32"), Tensor([37800, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 60, 67],"float32"), Tensor([1, 60, 60, 67],"float32"), Tensor([1, 2],"float32"), Tensor([60300, 4],"float32"), Tensor([60300, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 60, 75],"float32"), Tensor([1, 60, 60, 75],"float32"), Tensor([1, 2],"float32"), Tensor([67500, 4],"float32"), Tensor([67500, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 60, 76],"float32"), Tensor([1, 60, 60, 76],"float32"), Tensor([1, 2],"float32"), Tensor([68400, 4],"float32"), Tensor([68400, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 60, 77],"float32"), Tensor([1, 60, 60, 77],"float32"), Tensor([1, 2],"float32"), Tensor([69300, 4],"float32"), Tensor([69300, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 60, 79],"float32"), Tensor([1, 60, 60, 79],"float32"), Tensor([1, 2],"float32"), Tensor([71100, 4],"float32"), Tensor([71100, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 61, 56],"float32"), Tensor([1, 60, 61, 56],"float32"), Tensor([1, 2],"float32"), Tensor([51240, 4],"float32"), Tensor([51240, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 61, 62],"float32"), Tensor([1, 60, 61, 62],"float32"), Tensor([1, 2],"float32"), Tensor([56730, 4],"float32"), Tensor([56730, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 61, 66],"float32"), Tensor([1, 60, 61, 66],"float32"), Tensor([1, 2],"float32"), Tensor([60390, 4],"float32"), Tensor([60390, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 61, 69],"float32"), Tensor([1, 60, 61, 69],"float32"), Tensor([1, 2],"float32"), Tensor([63135, 4],"float32"), Tensor([63135, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 61, 84],"float32"), Tensor([1, 60, 61, 84],"float32"), Tensor([1, 2],"float32"), Tensor([76860, 4],"float32"), Tensor([76860, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 62, 46],"float32"), Tensor([1, 60, 62, 46],"float32"), Tensor([1, 2],"float32"), Tensor([42780, 4],"float32"), Tensor([42780, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 62, 64],"float32"), Tensor([1, 60, 62, 64],"float32"), Tensor([1, 2],"float32"), Tensor([59520, 4],"float32"), Tensor([59520, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 62, 67],"float32"), Tensor([1, 60, 62, 67],"float32"), Tensor([1, 2],"float32"), Tensor([62310, 4],"float32"), Tensor([62310, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 62, 69],"float32"), Tensor([1, 60, 62, 69],"float32"), Tensor([1, 2],"float32"), Tensor([64170, 4],"float32"), Tensor([64170, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 62, 75],"float32"), Tensor([1, 60, 62, 75],"float32"), Tensor([1, 2],"float32"), Tensor([69750, 4],"float32"), Tensor([69750, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 62, 84],"float32"), Tensor([1, 60, 62, 84],"float32"), Tensor([1, 2],"float32"), Tensor([78120, 4],"float32"), Tensor([78120, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 63, 42],"float32"), Tensor([1, 60, 63, 42],"float32"), Tensor([1, 2],"float32"), Tensor([39690, 4],"float32"), Tensor([39690, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 63, 59],"float32"), Tensor([1, 60, 63, 59],"float32"), Tensor([1, 2],"float32"), Tensor([55755, 4],"float32"), Tensor([55755, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 63, 64],"float32"), Tensor([1, 60, 63, 64],"float32"), Tensor([1, 2],"float32"), Tensor([60480, 4],"float32"), Tensor([60480, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 63, 73],"float32"), Tensor([1, 60, 63, 73],"float32"), Tensor([1, 2],"float32"), Tensor([68985, 4],"float32"), Tensor([68985, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 63, 84],"float32"), Tensor([1, 60, 63, 84],"float32"), Tensor([1, 2],"float32"), Tensor([79380, 4],"float32"), Tensor([79380, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 48],"float32"), Tensor([1, 60, 64, 48],"float32"), Tensor([1, 2],"float32"), Tensor([46080, 4],"float32"), Tensor([46080, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 59],"float32"), Tensor([1, 60, 64, 59],"float32"), Tensor([1, 2],"float32"), Tensor([56640, 4],"float32"), Tensor([56640, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 62],"float32"), Tensor([1, 60, 64, 62],"float32"), Tensor([1, 2],"float32"), Tensor([59520, 4],"float32"), Tensor([59520, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 63],"float32"), Tensor([1, 60, 64, 63],"float32"), Tensor([1, 2],"float32"), Tensor([60480, 4],"float32"), Tensor([60480, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 70],"float32"), Tensor([1, 60, 64, 70],"float32"), Tensor([1, 2],"float32"), Tensor([67200, 4],"float32"), Tensor([67200, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 73],"float32"), Tensor([1, 60, 64, 73],"float32"), Tensor([1, 2],"float32"), Tensor([70080, 4],"float32"), Tensor([70080, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 75],"float32"), Tensor([1, 60, 64, 75],"float32"), Tensor([1, 2],"float32"), Tensor([72000, 4],"float32"), Tensor([72000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 76],"float32"), Tensor([1, 60, 64, 76],"float32"), Tensor([1, 2],"float32"), Tensor([72960, 4],"float32"), Tensor([72960, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 79],"float32"), Tensor([1, 60, 64, 79],"float32"), Tensor([1, 2],"float32"), Tensor([75840, 4],"float32"), Tensor([75840, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 83],"float32"), Tensor([1, 60, 64, 83],"float32"), Tensor([1, 2],"float32"), Tensor([79680, 4],"float32"), Tensor([79680, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 64, 84],"float32"), Tensor([1, 60, 64, 84],"float32"), Tensor([1, 2],"float32"), Tensor([80640, 4],"float32"), Tensor([80640, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 65, 62],"float32"), Tensor([1, 60, 65, 62],"float32"), Tensor([1, 2],"float32"), Tensor([60450, 4],"float32"), Tensor([60450, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 65, 64],"float32"), Tensor([1, 60, 65, 64],"float32"), Tensor([1, 2],"float32"), Tensor([62400, 4],"float32"), Tensor([62400, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 65, 75],"float32"), Tensor([1, 60, 65, 75],"float32"), Tensor([1, 2],"float32"), Tensor([73125, 4],"float32"), Tensor([73125, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 65, 76],"float32"), Tensor([1, 60, 65, 76],"float32"), Tensor([1, 2],"float32"), Tensor([74100, 4],"float32"), Tensor([74100, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 65, 77],"float32"), Tensor([1, 60, 65, 77],"float32"), Tensor([1, 2],"float32"), Tensor([75075, 4],"float32"), Tensor([75075, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 65, 79],"float32"), Tensor([1, 60, 65, 79],"float32"), Tensor([1, 2],"float32"), Tensor([77025, 4],"float32"), Tensor([77025, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 66, 44],"float32"), Tensor([1, 60, 66, 44],"float32"), Tensor([1, 2],"float32"), Tensor([43560, 4],"float32"), Tensor([43560, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 66, 54],"float32"), Tensor([1, 60, 66, 54],"float32"), Tensor([1, 2],"float32"), Tensor([53460, 4],"float32"), Tensor([53460, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 66, 62],"float32"), Tensor([1, 60, 66, 62],"float32"), Tensor([1, 2],"float32"), Tensor([61380, 4],"float32"), Tensor([61380, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 66, 64],"float32"), Tensor([1, 60, 66, 64],"float32"), Tensor([1, 2],"float32"), Tensor([63360, 4],"float32"), Tensor([63360, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 66, 65],"float32"), Tensor([1, 60, 66, 65],"float32"), Tensor([1, 2],"float32"), Tensor([64350, 4],"float32"), Tensor([64350, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 66, 67],"float32"), Tensor([1, 60, 66, 67],"float32"), Tensor([1, 2],"float32"), Tensor([66330, 4],"float32"), Tensor([66330, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 66, 70],"float32"), Tensor([1, 60, 66, 70],"float32"), Tensor([1, 2],"float32"), Tensor([69300, 4],"float32"), Tensor([69300, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 66, 75],"float32"), Tensor([1, 60, 66, 75],"float32"), Tensor([1, 2],"float32"), Tensor([74250, 4],"float32"), Tensor([74250, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 66, 76],"float32"), Tensor([1, 60, 66, 76],"float32"), Tensor([1, 2],"float32"), Tensor([75240, 4],"float32"), Tensor([75240, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 44],"float32"), Tensor([1, 60, 67, 44],"float32"), Tensor([1, 2],"float32"), Tensor([44220, 4],"float32"), Tensor([44220, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 50],"float32"), Tensor([1, 60, 67, 50],"float32"), Tensor([1, 2],"float32"), Tensor([50250, 4],"float32"), Tensor([50250, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 54],"float32"), Tensor([1, 60, 67, 54],"float32"), Tensor([1, 2],"float32"), Tensor([54270, 4],"float32"), Tensor([54270, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 68],"float32"), Tensor([1, 60, 67, 68],"float32"), Tensor([1, 2],"float32"), Tensor([68340, 4],"float32"), Tensor([68340, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 72],"float32"), Tensor([1, 60, 67, 72],"float32"), Tensor([1, 2],"float32"), Tensor([72360, 4],"float32"), Tensor([72360, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 73],"float32"), Tensor([1, 60, 67, 73],"float32"), Tensor([1, 2],"float32"), Tensor([73365, 4],"float32"), Tensor([73365, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 74],"float32"), Tensor([1, 60, 67, 74],"float32"), Tensor([1, 2],"float32"), Tensor([74370, 4],"float32"), Tensor([74370, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 76],"float32"), Tensor([1, 60, 67, 76],"float32"), Tensor([1, 2],"float32"), Tensor([76380, 4],"float32"), Tensor([76380, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 80],"float32"), Tensor([1, 60, 67, 80],"float32"), Tensor([1, 2],"float32"), Tensor([80400, 4],"float32"), Tensor([80400, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 67, 84],"float32"), Tensor([1, 60, 67, 84],"float32"), Tensor([1, 2],"float32"), Tensor([84420, 4],"float32"), Tensor([84420, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 68, 60],"float32"), Tensor([1, 60, 68, 60],"float32"), Tensor([1, 2],"float32"), Tensor([61200, 4],"float32"), Tensor([61200, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 68, 64],"float32"), Tensor([1, 60, 68, 64],"float32"), Tensor([1, 2],"float32"), Tensor([65280, 4],"float32"), Tensor([65280, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 69, 48],"float32"), Tensor([1, 60, 69, 48],"float32"), Tensor([1, 2],"float32"), Tensor([49680, 4],"float32"), Tensor([49680, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 69, 64],"float32"), Tensor([1, 60, 69, 64],"float32"), Tensor([1, 2],"float32"), Tensor([66240, 4],"float32"), Tensor([66240, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 69, 67],"float32"), Tensor([1, 60, 69, 67],"float32"), Tensor([1, 2],"float32"), Tensor([69345, 4],"float32"), Tensor([69345, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 69, 72],"float32"), Tensor([1, 60, 69, 72],"float32"), Tensor([1, 2],"float32"), Tensor([74520, 4],"float32"), Tensor([74520, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 69, 75],"float32"), Tensor([1, 60, 69, 75],"float32"), Tensor([1, 2],"float32"), Tensor([77625, 4],"float32"), Tensor([77625, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 69, 76],"float32"), Tensor([1, 60, 69, 76],"float32"), Tensor([1, 2],"float32"), Tensor([78660, 4],"float32"), Tensor([78660, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 69, 84],"float32"), Tensor([1, 60, 69, 84],"float32"), Tensor([1, 2],"float32"), Tensor([86940, 4],"float32"), Tensor([86940, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 70, 46],"float32"), Tensor([1, 60, 70, 46],"float32"), Tensor([1, 2],"float32"), Tensor([48300, 4],"float32"), Tensor([48300, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 70, 56],"float32"), Tensor([1, 60, 70, 56],"float32"), Tensor([1, 2],"float32"), Tensor([58800, 4],"float32"), Tensor([58800, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 70, 64],"float32"), Tensor([1, 60, 70, 64],"float32"), Tensor([1, 2],"float32"), Tensor([67200, 4],"float32"), Tensor([67200, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 71, 64],"float32"), Tensor([1, 60, 71, 64],"float32"), Tensor([1, 2],"float32"), Tensor([68160, 4],"float32"), Tensor([68160, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 71, 66],"float32"), Tensor([1, 60, 71, 66],"float32"), Tensor([1, 2],"float32"), Tensor([70290, 4],"float32"), Tensor([70290, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 72, 54],"float32"), Tensor([1, 60, 72, 54],"float32"), Tensor([1, 2],"float32"), Tensor([58320, 4],"float32"), Tensor([58320, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 72, 56],"float32"), Tensor([1, 60, 72, 56],"float32"), Tensor([1, 2],"float32"), Tensor([60480, 4],"float32"), Tensor([60480, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 72, 59],"float32"), Tensor([1, 60, 72, 59],"float32"), Tensor([1, 2],"float32"), Tensor([63720, 4],"float32"), Tensor([63720, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 72, 67],"float32"), Tensor([1, 60, 72, 67],"float32"), Tensor([1, 2],"float32"), Tensor([72360, 4],"float32"), Tensor([72360, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 72, 82],"float32"), Tensor([1, 60, 72, 82],"float32"), Tensor([1, 2],"float32"), Tensor([88560, 4],"float32"), Tensor([88560, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 73, 67],"float32"), Tensor([1, 60, 73, 67],"float32"), Tensor([1, 2],"float32"), Tensor([73365, 4],"float32"), Tensor([73365, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 73, 73],"float32"), Tensor([1, 60, 73, 73],"float32"), Tensor([1, 2],"float32"), Tensor([79935, 4],"float32"), Tensor([79935, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 73, 80],"float32"), Tensor([1, 60, 73, 80],"float32"), Tensor([1, 2],"float32"), Tensor([87600, 4],"float32"), Tensor([87600, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 74, 63],"float32"), Tensor([1, 60, 74, 63],"float32"), Tensor([1, 2],"float32"), Tensor([69930, 4],"float32"), Tensor([69930, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 75, 50],"float32"), Tensor([1, 60, 75, 50],"float32"), Tensor([1, 2],"float32"), Tensor([56250, 4],"float32"), Tensor([56250, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 75, 61],"float32"), Tensor([1, 60, 75, 61],"float32"), Tensor([1, 2],"float32"), Tensor([68625, 4],"float32"), Tensor([68625, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 75, 62],"float32"), Tensor([1, 60, 75, 62],"float32"), Tensor([1, 2],"float32"), Tensor([69750, 4],"float32"), Tensor([69750, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 75, 64],"float32"), Tensor([1, 60, 75, 64],"float32"), Tensor([1, 2],"float32"), Tensor([72000, 4],"float32"), Tensor([72000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 75, 70],"float32"), Tensor([1, 60, 75, 70],"float32"), Tensor([1, 2],"float32"), Tensor([78750, 4],"float32"), Tensor([78750, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 75, 72],"float32"), Tensor([1, 60, 75, 72],"float32"), Tensor([1, 2],"float32"), Tensor([81000, 4],"float32"), Tensor([81000, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 75, 73],"float32"), Tensor([1, 60, 75, 73],"float32"), Tensor([1, 2],"float32"), Tensor([82125, 4],"float32"), Tensor([82125, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 75, 75],"float32"), Tensor([1, 60, 75, 75],"float32"), Tensor([1, 2],"float32"), Tensor([84375, 4],"float32"), Tensor([84375, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 76, 63],"float32"), Tensor([1, 60, 76, 63],"float32"), Tensor([1, 2],"float32"), Tensor([71820, 4],"float32"), Tensor([71820, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 76, 67],"float32"), Tensor([1, 60, 76, 67],"float32"), Tensor([1, 2],"float32"), Tensor([76380, 4],"float32"), Tensor([76380, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 76, 72],"float32"), Tensor([1, 60, 76, 72],"float32"), Tensor([1, 2],"float32"), Tensor([82080, 4],"float32"), Tensor([82080, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 76, 76],"float32"), Tensor([1, 60, 76, 76],"float32"), Tensor([1, 2],"float32"), Tensor([86640, 4],"float32"), Tensor([86640, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 76, 83],"float32"), Tensor([1, 60, 76, 83],"float32"), Tensor([1, 2],"float32"), Tensor([94620, 4],"float32"), Tensor([94620, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 77, 62],"float32"), Tensor([1, 60, 77, 62],"float32"), Tensor([1, 2],"float32"), Tensor([71610, 4],"float32"), Tensor([71610, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 80, 64],"float32"), Tensor([1, 60, 80, 64],"float32"), Tensor([1, 2],"float32"), Tensor([76800, 4],"float32"), Tensor([76800, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 82, 84],"float32"), Tensor([1, 60, 82, 84],"float32"), Tensor([1, 2],"float32"), Tensor([103320, 4],"float32"), Tensor([103320, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 84, 64],"float32"), Tensor([1, 60, 84, 64],"float32"), Tensor([1, 2],"float32"), Tensor([80640, 4],"float32"), Tensor([80640, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 15, 84, 70],"float32"), Tensor([1, 60, 84, 70],"float32"), Tensor([1, 2],"float32"), Tensor([88200, 4],"float32"), Tensor([88200, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 10, 14],"float32"), Tensor([1, 12, 10, 14],"float32"), Tensor([1, 2],"float32"), Tensor([420, 4],"float32"), Tensor([420, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 10, 15],"float32"), Tensor([1, 12, 10, 15],"float32"), Tensor([1, 2],"float32"), Tensor([450, 4],"float32"), Tensor([450, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 10, 16],"float32"), Tensor([1, 12, 10, 16],"float32"), Tensor([1, 2],"float32"), Tensor([480, 4],"float32"), Tensor([480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 120],"float32"), Tensor([1, 12, 100, 120],"float32"), Tensor([1, 2],"float32"), Tensor([36000, 4],"float32"), Tensor([36000, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 124],"float32"), Tensor([1, 12, 100, 124],"float32"), Tensor([1, 2],"float32"), Tensor([37200, 4],"float32"), Tensor([37200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 128],"float32"), Tensor([1, 12, 100, 128],"float32"), Tensor([1, 2],"float32"), Tensor([38400, 4],"float32"), Tensor([38400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 136],"float32"), Tensor([1, 12, 100, 136],"float32"), Tensor([1, 2],"float32"), Tensor([40800, 4],"float32"), Tensor([40800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 140],"float32"), Tensor([1, 12, 100, 140],"float32"), Tensor([1, 2],"float32"), Tensor([42000, 4],"float32"), Tensor([42000, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 144],"float32"), Tensor([1, 12, 100, 144],"float32"), Tensor([1, 2],"float32"), Tensor([43200, 4],"float32"), Tensor([43200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 148],"float32"), Tensor([1, 12, 100, 148],"float32"), Tensor([1, 2],"float32"), Tensor([44400, 4],"float32"), Tensor([44400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 152],"float32"), Tensor([1, 12, 100, 152],"float32"), Tensor([1, 2],"float32"), Tensor([45600, 4],"float32"), Tensor([45600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 156],"float32"), Tensor([1, 12, 100, 156],"float32"), Tensor([1, 2],"float32"), Tensor([46800, 4],"float32"), Tensor([46800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 160],"float32"), Tensor([1, 12, 100, 160],"float32"), Tensor([1, 2],"float32"), Tensor([48000, 4],"float32"), Tensor([48000, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 164],"float32"), Tensor([1, 12, 100, 164],"float32"), Tensor([1, 2],"float32"), Tensor([49200, 4],"float32"), Tensor([49200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 100, 168],"float32"), Tensor([1, 12, 100, 168],"float32"), Tensor([1, 2],"float32"), Tensor([50400, 4],"float32"), Tensor([50400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 104, 144],"float32"), Tensor([1, 12, 104, 144],"float32"), Tensor([1, 2],"float32"), Tensor([44928, 4],"float32"), Tensor([44928, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 104, 148],"float32"), Tensor([1, 12, 104, 148],"float32"), Tensor([1, 2],"float32"), Tensor([46176, 4],"float32"), Tensor([46176, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 104, 152],"float32"), Tensor([1, 12, 104, 152],"float32"), Tensor([1, 2],"float32"), Tensor([47424, 4],"float32"), Tensor([47424, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 104, 164],"float32"), Tensor([1, 12, 104, 164],"float32"), Tensor([1, 2],"float32"), Tensor([51168, 4],"float32"), Tensor([51168, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 104, 168],"float32"), Tensor([1, 12, 104, 168],"float32"), Tensor([1, 2],"float32"), Tensor([52416, 4],"float32"), Tensor([52416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 112],"float32"), Tensor([1, 12, 108, 112],"float32"), Tensor([1, 2],"float32"), Tensor([36288, 4],"float32"), Tensor([36288, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 124],"float32"), Tensor([1, 12, 108, 124],"float32"), Tensor([1, 2],"float32"), Tensor([40176, 4],"float32"), Tensor([40176, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 128],"float32"), Tensor([1, 12, 108, 128],"float32"), Tensor([1, 2],"float32"), Tensor([41472, 4],"float32"), Tensor([41472, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 132],"float32"), Tensor([1, 12, 108, 132],"float32"), Tensor([1, 2],"float32"), Tensor([42768, 4],"float32"), Tensor([42768, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 136],"float32"), Tensor([1, 12, 108, 136],"float32"), Tensor([1, 2],"float32"), Tensor([44064, 4],"float32"), Tensor([44064, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 140],"float32"), Tensor([1, 12, 108, 140],"float32"), Tensor([1, 2],"float32"), Tensor([45360, 4],"float32"), Tensor([45360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 144],"float32"), Tensor([1, 12, 108, 144],"float32"), Tensor([1, 2],"float32"), Tensor([46656, 4],"float32"), Tensor([46656, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 152],"float32"), Tensor([1, 12, 108, 152],"float32"), Tensor([1, 2],"float32"), Tensor([49248, 4],"float32"), Tensor([49248, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 156],"float32"), Tensor([1, 12, 108, 156],"float32"), Tensor([1, 2],"float32"), Tensor([50544, 4],"float32"), Tensor([50544, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 164],"float32"), Tensor([1, 12, 108, 164],"float32"), Tensor([1, 2],"float32"), Tensor([53136, 4],"float32"), Tensor([53136, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 108, 168],"float32"), Tensor([1, 12, 108, 168],"float32"), Tensor([1, 2],"float32"), Tensor([54432, 4],"float32"), Tensor([54432, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 11, 15],"float32"), Tensor([1, 12, 11, 15],"float32"), Tensor([1, 2],"float32"), Tensor([495, 4],"float32"), Tensor([495, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 11, 16],"float32"), Tensor([1, 12, 11, 16],"float32"), Tensor([1, 2],"float32"), Tensor([528, 4],"float32"), Tensor([528, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 11, 17],"float32"), Tensor([1, 12, 11, 17],"float32"), Tensor([1, 2],"float32"), Tensor([561, 4],"float32"), Tensor([561, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 11, 18],"float32"), Tensor([1, 12, 11, 18],"float32"), Tensor([1, 2],"float32"), Tensor([594, 4],"float32"), Tensor([594, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 11, 21],"float32"), Tensor([1, 12, 11, 21],"float32"), Tensor([1, 2],"float32"), Tensor([693, 4],"float32"), Tensor([693, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 120],"float32"), Tensor([1, 12, 112, 120],"float32"), Tensor([1, 2],"float32"), Tensor([40320, 4],"float32"), Tensor([40320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 124],"float32"), Tensor([1, 12, 112, 124],"float32"), Tensor([1, 2],"float32"), Tensor([41664, 4],"float32"), Tensor([41664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 128],"float32"), Tensor([1, 12, 112, 128],"float32"), Tensor([1, 2],"float32"), Tensor([43008, 4],"float32"), Tensor([43008, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 132],"float32"), Tensor([1, 12, 112, 132],"float32"), Tensor([1, 2],"float32"), Tensor([44352, 4],"float32"), Tensor([44352, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 136],"float32"), Tensor([1, 12, 112, 136],"float32"), Tensor([1, 2],"float32"), Tensor([45696, 4],"float32"), Tensor([45696, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 140],"float32"), Tensor([1, 12, 112, 140],"float32"), Tensor([1, 2],"float32"), Tensor([47040, 4],"float32"), Tensor([47040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 144],"float32"), Tensor([1, 12, 112, 144],"float32"), Tensor([1, 2],"float32"), Tensor([48384, 4],"float32"), Tensor([48384, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 148],"float32"), Tensor([1, 12, 112, 148],"float32"), Tensor([1, 2],"float32"), Tensor([49728, 4],"float32"), Tensor([49728, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 152],"float32"), Tensor([1, 12, 112, 152],"float32"), Tensor([1, 2],"float32"), Tensor([51072, 4],"float32"), Tensor([51072, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 156],"float32"), Tensor([1, 12, 112, 156],"float32"), Tensor([1, 2],"float32"), Tensor([52416, 4],"float32"), Tensor([52416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 160],"float32"), Tensor([1, 12, 112, 160],"float32"), Tensor([1, 2],"float32"), Tensor([53760, 4],"float32"), Tensor([53760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 164],"float32"), Tensor([1, 12, 112, 164],"float32"), Tensor([1, 2],"float32"), Tensor([55104, 4],"float32"), Tensor([55104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 112, 84],"float32"), Tensor([1, 12, 112, 84],"float32"), Tensor([1, 2],"float32"), Tensor([28224, 4],"float32"), Tensor([28224, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 116, 124],"float32"), Tensor([1, 12, 116, 124],"float32"), Tensor([1, 2],"float32"), Tensor([43152, 4],"float32"), Tensor([43152, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 116, 128],"float32"), Tensor([1, 12, 116, 128],"float32"), Tensor([1, 2],"float32"), Tensor([44544, 4],"float32"), Tensor([44544, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 116, 132],"float32"), Tensor([1, 12, 116, 132],"float32"), Tensor([1, 2],"float32"), Tensor([45936, 4],"float32"), Tensor([45936, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 116, 136],"float32"), Tensor([1, 12, 116, 136],"float32"), Tensor([1, 2],"float32"), Tensor([47328, 4],"float32"), Tensor([47328, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 12, 16],"float32"), Tensor([1, 12, 12, 16],"float32"), Tensor([1, 2],"float32"), Tensor([576, 4],"float32"), Tensor([576, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 12, 17],"float32"), Tensor([1, 12, 12, 17],"float32"), Tensor([1, 2],"float32"), Tensor([612, 4],"float32"), Tensor([612, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 12, 18],"float32"), Tensor([1, 12, 12, 18],"float32"), Tensor([1, 2],"float32"), Tensor([648, 4],"float32"), Tensor([648, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 12, 19],"float32"), Tensor([1, 12, 12, 19],"float32"), Tensor([1, 2],"float32"), Tensor([684, 4],"float32"), Tensor([684, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 12, 20],"float32"), Tensor([1, 12, 12, 20],"float32"), Tensor([1, 2],"float32"), Tensor([720, 4],"float32"), Tensor([720, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 12, 21],"float32"), Tensor([1, 12, 12, 21],"float32"), Tensor([1, 2],"float32"), Tensor([756, 4],"float32"), Tensor([756, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 104],"float32"), Tensor([1, 12, 120, 104],"float32"), Tensor([1, 2],"float32"), Tensor([37440, 4],"float32"), Tensor([37440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 112],"float32"), Tensor([1, 12, 120, 112],"float32"), Tensor([1, 2],"float32"), Tensor([40320, 4],"float32"), Tensor([40320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 120],"float32"), Tensor([1, 12, 120, 120],"float32"), Tensor([1, 2],"float32"), Tensor([43200, 4],"float32"), Tensor([43200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 124],"float32"), Tensor([1, 12, 120, 124],"float32"), Tensor([1, 2],"float32"), Tensor([44640, 4],"float32"), Tensor([44640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 128],"float32"), Tensor([1, 12, 120, 128],"float32"), Tensor([1, 2],"float32"), Tensor([46080, 4],"float32"), Tensor([46080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 136],"float32"), Tensor([1, 12, 120, 136],"float32"), Tensor([1, 2],"float32"), Tensor([48960, 4],"float32"), Tensor([48960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 140],"float32"), Tensor([1, 12, 120, 140],"float32"), Tensor([1, 2],"float32"), Tensor([50400, 4],"float32"), Tensor([50400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 144],"float32"), Tensor([1, 12, 120, 144],"float32"), Tensor([1, 2],"float32"), Tensor([51840, 4],"float32"), Tensor([51840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 148],"float32"), Tensor([1, 12, 120, 148],"float32"), Tensor([1, 2],"float32"), Tensor([53280, 4],"float32"), Tensor([53280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 152],"float32"), Tensor([1, 12, 120, 152],"float32"), Tensor([1, 2],"float32"), Tensor([54720, 4],"float32"), Tensor([54720, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 156],"float32"), Tensor([1, 12, 120, 156],"float32"), Tensor([1, 2],"float32"), Tensor([56160, 4],"float32"), Tensor([56160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 160],"float32"), Tensor([1, 12, 120, 160],"float32"), Tensor([1, 2],"float32"), Tensor([57600, 4],"float32"), Tensor([57600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 164],"float32"), Tensor([1, 12, 120, 164],"float32"), Tensor([1, 2],"float32"), Tensor([59040, 4],"float32"), Tensor([59040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 168],"float32"), Tensor([1, 12, 120, 168],"float32"), Tensor([1, 2],"float32"), Tensor([60480, 4],"float32"), Tensor([60480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 120, 88],"float32"), Tensor([1, 12, 120, 88],"float32"), Tensor([1, 2],"float32"), Tensor([31680, 4],"float32"), Tensor([31680, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 108],"float32"), Tensor([1, 12, 124, 108],"float32"), Tensor([1, 2],"float32"), Tensor([40176, 4],"float32"), Tensor([40176, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 112],"float32"), Tensor([1, 12, 124, 112],"float32"), Tensor([1, 2],"float32"), Tensor([41664, 4],"float32"), Tensor([41664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 124],"float32"), Tensor([1, 12, 124, 124],"float32"), Tensor([1, 2],"float32"), Tensor([46128, 4],"float32"), Tensor([46128, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 128],"float32"), Tensor([1, 12, 124, 128],"float32"), Tensor([1, 2],"float32"), Tensor([47616, 4],"float32"), Tensor([47616, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 132],"float32"), Tensor([1, 12, 124, 132],"float32"), Tensor([1, 2],"float32"), Tensor([49104, 4],"float32"), Tensor([49104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 136],"float32"), Tensor([1, 12, 124, 136],"float32"), Tensor([1, 2],"float32"), Tensor([50592, 4],"float32"), Tensor([50592, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 140],"float32"), Tensor([1, 12, 124, 140],"float32"), Tensor([1, 2],"float32"), Tensor([52080, 4],"float32"), Tensor([52080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 144],"float32"), Tensor([1, 12, 124, 144],"float32"), Tensor([1, 2],"float32"), Tensor([53568, 4],"float32"), Tensor([53568, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 148],"float32"), Tensor([1, 12, 124, 148],"float32"), Tensor([1, 2],"float32"), Tensor([55056, 4],"float32"), Tensor([55056, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 152],"float32"), Tensor([1, 12, 124, 152],"float32"), Tensor([1, 2],"float32"), Tensor([56544, 4],"float32"), Tensor([56544, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 160],"float32"), Tensor([1, 12, 124, 160],"float32"), Tensor([1, 2],"float32"), Tensor([59520, 4],"float32"), Tensor([59520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 164],"float32"), Tensor([1, 12, 124, 164],"float32"), Tensor([1, 2],"float32"), Tensor([61008, 4],"float32"), Tensor([61008, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 168],"float32"), Tensor([1, 12, 124, 168],"float32"), Tensor([1, 2],"float32"), Tensor([62496, 4],"float32"), Tensor([62496, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 80],"float32"), Tensor([1, 12, 124, 80],"float32"), Tensor([1, 2],"float32"), Tensor([29760, 4],"float32"), Tensor([29760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 92],"float32"), Tensor([1, 12, 124, 92],"float32"), Tensor([1, 2],"float32"), Tensor([34224, 4],"float32"), Tensor([34224, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 124, 96],"float32"), Tensor([1, 12, 124, 96],"float32"), Tensor([1, 2],"float32"), Tensor([35712, 4],"float32"), Tensor([35712, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 112],"float32"), Tensor([1, 12, 128, 112],"float32"), Tensor([1, 2],"float32"), Tensor([43008, 4],"float32"), Tensor([43008, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 120],"float32"), Tensor([1, 12, 128, 120],"float32"), Tensor([1, 2],"float32"), Tensor([46080, 4],"float32"), Tensor([46080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 124],"float32"), Tensor([1, 12, 128, 124],"float32"), Tensor([1, 2],"float32"), Tensor([47616, 4],"float32"), Tensor([47616, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 128],"float32"), Tensor([1, 12, 128, 128],"float32"), Tensor([1, 2],"float32"), Tensor([49152, 4],"float32"), Tensor([49152, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 132],"float32"), Tensor([1, 12, 128, 132],"float32"), Tensor([1, 2],"float32"), Tensor([50688, 4],"float32"), Tensor([50688, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 136],"float32"), Tensor([1, 12, 128, 136],"float32"), Tensor([1, 2],"float32"), Tensor([52224, 4],"float32"), Tensor([52224, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 140],"float32"), Tensor([1, 12, 128, 140],"float32"), Tensor([1, 2],"float32"), Tensor([53760, 4],"float32"), Tensor([53760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 144],"float32"), Tensor([1, 12, 128, 144],"float32"), Tensor([1, 2],"float32"), Tensor([55296, 4],"float32"), Tensor([55296, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 148],"float32"), Tensor([1, 12, 128, 148],"float32"), Tensor([1, 2],"float32"), Tensor([56832, 4],"float32"), Tensor([56832, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 152],"float32"), Tensor([1, 12, 128, 152],"float32"), Tensor([1, 2],"float32"), Tensor([58368, 4],"float32"), Tensor([58368, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 156],"float32"), Tensor([1, 12, 128, 156],"float32"), Tensor([1, 2],"float32"), Tensor([59904, 4],"float32"), Tensor([59904, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 160],"float32"), Tensor([1, 12, 128, 160],"float32"), Tensor([1, 2],"float32"), Tensor([61440, 4],"float32"), Tensor([61440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 164],"float32"), Tensor([1, 12, 128, 164],"float32"), Tensor([1, 2],"float32"), Tensor([62976, 4],"float32"), Tensor([62976, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 168],"float32"), Tensor([1, 12, 128, 168],"float32"), Tensor([1, 2],"float32"), Tensor([64512, 4],"float32"), Tensor([64512, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 84],"float32"), Tensor([1, 12, 128, 84],"float32"), Tensor([1, 2],"float32"), Tensor([32256, 4],"float32"), Tensor([32256, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 128, 96],"float32"), Tensor([1, 12, 128, 96],"float32"), Tensor([1, 2],"float32"), Tensor([36864, 4],"float32"), Tensor([36864, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 13, 15],"float32"), Tensor([1, 12, 13, 15],"float32"), Tensor([1, 2],"float32"), Tensor([585, 4],"float32"), Tensor([585, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 13, 16],"float32"), Tensor([1, 12, 13, 16],"float32"), Tensor([1, 2],"float32"), Tensor([624, 4],"float32"), Tensor([624, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 13, 17],"float32"), Tensor([1, 12, 13, 17],"float32"), Tensor([1, 2],"float32"), Tensor([663, 4],"float32"), Tensor([663, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 13, 18],"float32"), Tensor([1, 12, 13, 18],"float32"), Tensor([1, 2],"float32"), Tensor([702, 4],"float32"), Tensor([702, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 13, 19],"float32"), Tensor([1, 12, 13, 19],"float32"), Tensor([1, 2],"float32"), Tensor([741, 4],"float32"), Tensor([741, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 13, 20],"float32"), Tensor([1, 12, 13, 20],"float32"), Tensor([1, 2],"float32"), Tensor([780, 4],"float32"), Tensor([780, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 13, 21],"float32"), Tensor([1, 12, 13, 21],"float32"), Tensor([1, 2],"float32"), Tensor([819, 4],"float32"), Tensor([819, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 100],"float32"), Tensor([1, 12, 132, 100],"float32"), Tensor([1, 2],"float32"), Tensor([39600, 4],"float32"), Tensor([39600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 108],"float32"), Tensor([1, 12, 132, 108],"float32"), Tensor([1, 2],"float32"), Tensor([42768, 4],"float32"), Tensor([42768, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 124],"float32"), Tensor([1, 12, 132, 124],"float32"), Tensor([1, 2],"float32"), Tensor([49104, 4],"float32"), Tensor([49104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 128],"float32"), Tensor([1, 12, 132, 128],"float32"), Tensor([1, 2],"float32"), Tensor([50688, 4],"float32"), Tensor([50688, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 132],"float32"), Tensor([1, 12, 132, 132],"float32"), Tensor([1, 2],"float32"), Tensor([52272, 4],"float32"), Tensor([52272, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 136],"float32"), Tensor([1, 12, 132, 136],"float32"), Tensor([1, 2],"float32"), Tensor([53856, 4],"float32"), Tensor([53856, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 140],"float32"), Tensor([1, 12, 132, 140],"float32"), Tensor([1, 2],"float32"), Tensor([55440, 4],"float32"), Tensor([55440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 144],"float32"), Tensor([1, 12, 132, 144],"float32"), Tensor([1, 2],"float32"), Tensor([57024, 4],"float32"), Tensor([57024, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 148],"float32"), Tensor([1, 12, 132, 148],"float32"), Tensor([1, 2],"float32"), Tensor([58608, 4],"float32"), Tensor([58608, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 152],"float32"), Tensor([1, 12, 132, 152],"float32"), Tensor([1, 2],"float32"), Tensor([60192, 4],"float32"), Tensor([60192, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 156],"float32"), Tensor([1, 12, 132, 156],"float32"), Tensor([1, 2],"float32"), Tensor([61776, 4],"float32"), Tensor([61776, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 160],"float32"), Tensor([1, 12, 132, 160],"float32"), Tensor([1, 2],"float32"), Tensor([63360, 4],"float32"), Tensor([63360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 164],"float32"), Tensor([1, 12, 132, 164],"float32"), Tensor([1, 2],"float32"), Tensor([64944, 4],"float32"), Tensor([64944, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 168],"float32"), Tensor([1, 12, 132, 168],"float32"), Tensor([1, 2],"float32"), Tensor([66528, 4],"float32"), Tensor([66528, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 132, 96],"float32"), Tensor([1, 12, 132, 96],"float32"), Tensor([1, 2],"float32"), Tensor([38016, 4],"float32"), Tensor([38016, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 100],"float32"), Tensor([1, 12, 136, 100],"float32"), Tensor([1, 2],"float32"), Tensor([40800, 4],"float32"), Tensor([40800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 108],"float32"), Tensor([1, 12, 136, 108],"float32"), Tensor([1, 2],"float32"), Tensor([44064, 4],"float32"), Tensor([44064, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 112],"float32"), Tensor([1, 12, 136, 112],"float32"), Tensor([1, 2],"float32"), Tensor([45696, 4],"float32"), Tensor([45696, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 116],"float32"), Tensor([1, 12, 136, 116],"float32"), Tensor([1, 2],"float32"), Tensor([47328, 4],"float32"), Tensor([47328, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 120],"float32"), Tensor([1, 12, 136, 120],"float32"), Tensor([1, 2],"float32"), Tensor([48960, 4],"float32"), Tensor([48960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 124],"float32"), Tensor([1, 12, 136, 124],"float32"), Tensor([1, 2],"float32"), Tensor([50592, 4],"float32"), Tensor([50592, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 128],"float32"), Tensor([1, 12, 136, 128],"float32"), Tensor([1, 2],"float32"), Tensor([52224, 4],"float32"), Tensor([52224, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 136],"float32"), Tensor([1, 12, 136, 136],"float32"), Tensor([1, 2],"float32"), Tensor([55488, 4],"float32"), Tensor([55488, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 140],"float32"), Tensor([1, 12, 136, 140],"float32"), Tensor([1, 2],"float32"), Tensor([57120, 4],"float32"), Tensor([57120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 144],"float32"), Tensor([1, 12, 136, 144],"float32"), Tensor([1, 2],"float32"), Tensor([58752, 4],"float32"), Tensor([58752, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 148],"float32"), Tensor([1, 12, 136, 148],"float32"), Tensor([1, 2],"float32"), Tensor([60384, 4],"float32"), Tensor([60384, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 152],"float32"), Tensor([1, 12, 136, 152],"float32"), Tensor([1, 2],"float32"), Tensor([62016, 4],"float32"), Tensor([62016, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 160],"float32"), Tensor([1, 12, 136, 160],"float32"), Tensor([1, 2],"float32"), Tensor([65280, 4],"float32"), Tensor([65280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 164],"float32"), Tensor([1, 12, 136, 164],"float32"), Tensor([1, 2],"float32"), Tensor([66912, 4],"float32"), Tensor([66912, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 168],"float32"), Tensor([1, 12, 136, 168],"float32"), Tensor([1, 2],"float32"), Tensor([68544, 4],"float32"), Tensor([68544, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 136, 88],"float32"), Tensor([1, 12, 136, 88],"float32"), Tensor([1, 2],"float32"), Tensor([35904, 4],"float32"), Tensor([35904, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 14, 11],"float32"), Tensor([1, 12, 14, 11],"float32"), Tensor([1, 2],"float32"), Tensor([462, 4],"float32"), Tensor([462, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 14, 14],"float32"), Tensor([1, 12, 14, 14],"float32"), Tensor([1, 2],"float32"), Tensor([588, 4],"float32"), Tensor([588, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 14, 15],"float32"), Tensor([1, 12, 14, 15],"float32"), Tensor([1, 2],"float32"), Tensor([630, 4],"float32"), Tensor([630, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 14, 16],"float32"), Tensor([1, 12, 14, 16],"float32"), Tensor([1, 2],"float32"), Tensor([672, 4],"float32"), Tensor([672, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 14, 17],"float32"), Tensor([1, 12, 14, 17],"float32"), Tensor([1, 2],"float32"), Tensor([714, 4],"float32"), Tensor([714, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 14, 18],"float32"), Tensor([1, 12, 14, 18],"float32"), Tensor([1, 2],"float32"), Tensor([756, 4],"float32"), Tensor([756, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 14, 19],"float32"), Tensor([1, 12, 14, 19],"float32"), Tensor([1, 2],"float32"), Tensor([798, 4],"float32"), Tensor([798, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 14, 20],"float32"), Tensor([1, 12, 14, 20],"float32"), Tensor([1, 2],"float32"), Tensor([840, 4],"float32"), Tensor([840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 14, 21],"float32"), Tensor([1, 12, 14, 21],"float32"), Tensor([1, 2],"float32"), Tensor([882, 4],"float32"), Tensor([882, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 112],"float32"), Tensor([1, 12, 140, 112],"float32"), Tensor([1, 2],"float32"), Tensor([47040, 4],"float32"), Tensor([47040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 120],"float32"), Tensor([1, 12, 140, 120],"float32"), Tensor([1, 2],"float32"), Tensor([50400, 4],"float32"), Tensor([50400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 124],"float32"), Tensor([1, 12, 140, 124],"float32"), Tensor([1, 2],"float32"), Tensor([52080, 4],"float32"), Tensor([52080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 128],"float32"), Tensor([1, 12, 140, 128],"float32"), Tensor([1, 2],"float32"), Tensor([53760, 4],"float32"), Tensor([53760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 132],"float32"), Tensor([1, 12, 140, 132],"float32"), Tensor([1, 2],"float32"), Tensor([55440, 4],"float32"), Tensor([55440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 136],"float32"), Tensor([1, 12, 140, 136],"float32"), Tensor([1, 2],"float32"), Tensor([57120, 4],"float32"), Tensor([57120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 140],"float32"), Tensor([1, 12, 140, 140],"float32"), Tensor([1, 2],"float32"), Tensor([58800, 4],"float32"), Tensor([58800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 144],"float32"), Tensor([1, 12, 140, 144],"float32"), Tensor([1, 2],"float32"), Tensor([60480, 4],"float32"), Tensor([60480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 148],"float32"), Tensor([1, 12, 140, 148],"float32"), Tensor([1, 2],"float32"), Tensor([62160, 4],"float32"), Tensor([62160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 152],"float32"), Tensor([1, 12, 140, 152],"float32"), Tensor([1, 2],"float32"), Tensor([63840, 4],"float32"), Tensor([63840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 156],"float32"), Tensor([1, 12, 140, 156],"float32"), Tensor([1, 2],"float32"), Tensor([65520, 4],"float32"), Tensor([65520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 164],"float32"), Tensor([1, 12, 140, 164],"float32"), Tensor([1, 2],"float32"), Tensor([68880, 4],"float32"), Tensor([68880, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 168],"float32"), Tensor([1, 12, 140, 168],"float32"), Tensor([1, 2],"float32"), Tensor([70560, 4],"float32"), Tensor([70560, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 92],"float32"), Tensor([1, 12, 140, 92],"float32"), Tensor([1, 2],"float32"), Tensor([38640, 4],"float32"), Tensor([38640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 140, 96],"float32"), Tensor([1, 12, 140, 96],"float32"), Tensor([1, 2],"float32"), Tensor([40320, 4],"float32"), Tensor([40320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 100],"float32"), Tensor([1, 12, 144, 100],"float32"), Tensor([1, 2],"float32"), Tensor([43200, 4],"float32"), Tensor([43200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 108],"float32"), Tensor([1, 12, 144, 108],"float32"), Tensor([1, 2],"float32"), Tensor([46656, 4],"float32"), Tensor([46656, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 112],"float32"), Tensor([1, 12, 144, 112],"float32"), Tensor([1, 2],"float32"), Tensor([48384, 4],"float32"), Tensor([48384, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 116],"float32"), Tensor([1, 12, 144, 116],"float32"), Tensor([1, 2],"float32"), Tensor([50112, 4],"float32"), Tensor([50112, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 120],"float32"), Tensor([1, 12, 144, 120],"float32"), Tensor([1, 2],"float32"), Tensor([51840, 4],"float32"), Tensor([51840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 124],"float32"), Tensor([1, 12, 144, 124],"float32"), Tensor([1, 2],"float32"), Tensor([53568, 4],"float32"), Tensor([53568, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 128],"float32"), Tensor([1, 12, 144, 128],"float32"), Tensor([1, 2],"float32"), Tensor([55296, 4],"float32"), Tensor([55296, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 132],"float32"), Tensor([1, 12, 144, 132],"float32"), Tensor([1, 2],"float32"), Tensor([57024, 4],"float32"), Tensor([57024, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 136],"float32"), Tensor([1, 12, 144, 136],"float32"), Tensor([1, 2],"float32"), Tensor([58752, 4],"float32"), Tensor([58752, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 140],"float32"), Tensor([1, 12, 144, 140],"float32"), Tensor([1, 2],"float32"), Tensor([60480, 4],"float32"), Tensor([60480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 144],"float32"), Tensor([1, 12, 144, 144],"float32"), Tensor([1, 2],"float32"), Tensor([62208, 4],"float32"), Tensor([62208, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 148],"float32"), Tensor([1, 12, 144, 148],"float32"), Tensor([1, 2],"float32"), Tensor([63936, 4],"float32"), Tensor([63936, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 152],"float32"), Tensor([1, 12, 144, 152],"float32"), Tensor([1, 2],"float32"), Tensor([65664, 4],"float32"), Tensor([65664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 156],"float32"), Tensor([1, 12, 144, 156],"float32"), Tensor([1, 2],"float32"), Tensor([67392, 4],"float32"), Tensor([67392, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 160],"float32"), Tensor([1, 12, 144, 160],"float32"), Tensor([1, 2],"float32"), Tensor([69120, 4],"float32"), Tensor([69120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 164],"float32"), Tensor([1, 12, 144, 164],"float32"), Tensor([1, 2],"float32"), Tensor([70848, 4],"float32"), Tensor([70848, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 168],"float32"), Tensor([1, 12, 144, 168],"float32"), Tensor([1, 2],"float32"), Tensor([72576, 4],"float32"), Tensor([72576, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 144, 96],"float32"), Tensor([1, 12, 144, 96],"float32"), Tensor([1, 2],"float32"), Tensor([41472, 4],"float32"), Tensor([41472, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 128],"float32"), Tensor([1, 12, 148, 128],"float32"), Tensor([1, 2],"float32"), Tensor([56832, 4],"float32"), Tensor([56832, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 132],"float32"), Tensor([1, 12, 148, 132],"float32"), Tensor([1, 2],"float32"), Tensor([58608, 4],"float32"), Tensor([58608, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 136],"float32"), Tensor([1, 12, 148, 136],"float32"), Tensor([1, 2],"float32"), Tensor([60384, 4],"float32"), Tensor([60384, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 140],"float32"), Tensor([1, 12, 148, 140],"float32"), Tensor([1, 2],"float32"), Tensor([62160, 4],"float32"), Tensor([62160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 144],"float32"), Tensor([1, 12, 148, 144],"float32"), Tensor([1, 2],"float32"), Tensor([63936, 4],"float32"), Tensor([63936, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 148],"float32"), Tensor([1, 12, 148, 148],"float32"), Tensor([1, 2],"float32"), Tensor([65712, 4],"float32"), Tensor([65712, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 152],"float32"), Tensor([1, 12, 148, 152],"float32"), Tensor([1, 2],"float32"), Tensor([67488, 4],"float32"), Tensor([67488, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 156],"float32"), Tensor([1, 12, 148, 156],"float32"), Tensor([1, 2],"float32"), Tensor([69264, 4],"float32"), Tensor([69264, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 160],"float32"), Tensor([1, 12, 148, 160],"float32"), Tensor([1, 2],"float32"), Tensor([71040, 4],"float32"), Tensor([71040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 164],"float32"), Tensor([1, 12, 148, 164],"float32"), Tensor([1, 2],"float32"), Tensor([72816, 4],"float32"), Tensor([72816, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 168],"float32"), Tensor([1, 12, 148, 168],"float32"), Tensor([1, 2],"float32"), Tensor([74592, 4],"float32"), Tensor([74592, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 148, 96],"float32"), Tensor([1, 12, 148, 96],"float32"), Tensor([1, 2],"float32"), Tensor([42624, 4],"float32"), Tensor([42624, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 11],"float32"), Tensor([1, 12, 15, 11],"float32"), Tensor([1, 2],"float32"), Tensor([495, 4],"float32"), Tensor([495, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 13],"float32"), Tensor([1, 12, 15, 13],"float32"), Tensor([1, 2],"float32"), Tensor([585, 4],"float32"), Tensor([585, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 14],"float32"), Tensor([1, 12, 15, 14],"float32"), Tensor([1, 2],"float32"), Tensor([630, 4],"float32"), Tensor([630, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 15],"float32"), Tensor([1, 12, 15, 15],"float32"), Tensor([1, 2],"float32"), Tensor([675, 4],"float32"), Tensor([675, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 16],"float32"), Tensor([1, 12, 15, 16],"float32"), Tensor([1, 2],"float32"), Tensor([720, 4],"float32"), Tensor([720, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 17],"float32"), Tensor([1, 12, 15, 17],"float32"), Tensor([1, 2],"float32"), Tensor([765, 4],"float32"), Tensor([765, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 18],"float32"), Tensor([1, 12, 15, 18],"float32"), Tensor([1, 2],"float32"), Tensor([810, 4],"float32"), Tensor([810, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 19],"float32"), Tensor([1, 12, 15, 19],"float32"), Tensor([1, 2],"float32"), Tensor([855, 4],"float32"), Tensor([855, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 20],"float32"), Tensor([1, 12, 15, 20],"float32"), Tensor([1, 2],"float32"), Tensor([900, 4],"float32"), Tensor([900, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 15, 21],"float32"), Tensor([1, 12, 15, 21],"float32"), Tensor([1, 2],"float32"), Tensor([945, 4],"float32"), Tensor([945, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 100],"float32"), Tensor([1, 12, 152, 100],"float32"), Tensor([1, 2],"float32"), Tensor([45600, 4],"float32"), Tensor([45600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 124],"float32"), Tensor([1, 12, 152, 124],"float32"), Tensor([1, 2],"float32"), Tensor([56544, 4],"float32"), Tensor([56544, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 128],"float32"), Tensor([1, 12, 152, 128],"float32"), Tensor([1, 2],"float32"), Tensor([58368, 4],"float32"), Tensor([58368, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 132],"float32"), Tensor([1, 12, 152, 132],"float32"), Tensor([1, 2],"float32"), Tensor([60192, 4],"float32"), Tensor([60192, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 136],"float32"), Tensor([1, 12, 152, 136],"float32"), Tensor([1, 2],"float32"), Tensor([62016, 4],"float32"), Tensor([62016, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 140],"float32"), Tensor([1, 12, 152, 140],"float32"), Tensor([1, 2],"float32"), Tensor([63840, 4],"float32"), Tensor([63840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 144],"float32"), Tensor([1, 12, 152, 144],"float32"), Tensor([1, 2],"float32"), Tensor([65664, 4],"float32"), Tensor([65664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 148],"float32"), Tensor([1, 12, 152, 148],"float32"), Tensor([1, 2],"float32"), Tensor([67488, 4],"float32"), Tensor([67488, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 152],"float32"), Tensor([1, 12, 152, 152],"float32"), Tensor([1, 2],"float32"), Tensor([69312, 4],"float32"), Tensor([69312, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 160],"float32"), Tensor([1, 12, 152, 160],"float32"), Tensor([1, 2],"float32"), Tensor([72960, 4],"float32"), Tensor([72960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 164],"float32"), Tensor([1, 12, 152, 164],"float32"), Tensor([1, 2],"float32"), Tensor([74784, 4],"float32"), Tensor([74784, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 152, 168],"float32"), Tensor([1, 12, 152, 168],"float32"), Tensor([1, 2],"float32"), Tensor([76608, 4],"float32"), Tensor([76608, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 156, 112],"float32"), Tensor([1, 12, 156, 112],"float32"), Tensor([1, 2],"float32"), Tensor([52416, 4],"float32"), Tensor([52416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 156, 124],"float32"), Tensor([1, 12, 156, 124],"float32"), Tensor([1, 2],"float32"), Tensor([58032, 4],"float32"), Tensor([58032, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 156, 140],"float32"), Tensor([1, 12, 156, 140],"float32"), Tensor([1, 2],"float32"), Tensor([65520, 4],"float32"), Tensor([65520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 156, 148],"float32"), Tensor([1, 12, 156, 148],"float32"), Tensor([1, 2],"float32"), Tensor([69264, 4],"float32"), Tensor([69264, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 156, 152],"float32"), Tensor([1, 12, 156, 152],"float32"), Tensor([1, 2],"float32"), Tensor([71136, 4],"float32"), Tensor([71136, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 10],"float32"), Tensor([1, 12, 16, 10],"float32"), Tensor([1, 2],"float32"), Tensor([480, 4],"float32"), Tensor([480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 11],"float32"), Tensor([1, 12, 16, 11],"float32"), Tensor([1, 2],"float32"), Tensor([528, 4],"float32"), Tensor([528, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 12],"float32"), Tensor([1, 12, 16, 12],"float32"), Tensor([1, 2],"float32"), Tensor([576, 4],"float32"), Tensor([576, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 14],"float32"), Tensor([1, 12, 16, 14],"float32"), Tensor([1, 2],"float32"), Tensor([672, 4],"float32"), Tensor([672, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 15],"float32"), Tensor([1, 12, 16, 15],"float32"), Tensor([1, 2],"float32"), Tensor([720, 4],"float32"), Tensor([720, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 16],"float32"), Tensor([1, 12, 16, 16],"float32"), Tensor([1, 2],"float32"), Tensor([768, 4],"float32"), Tensor([768, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 17],"float32"), Tensor([1, 12, 16, 17],"float32"), Tensor([1, 2],"float32"), Tensor([816, 4],"float32"), Tensor([816, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 18],"float32"), Tensor([1, 12, 16, 18],"float32"), Tensor([1, 2],"float32"), Tensor([864, 4],"float32"), Tensor([864, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 19],"float32"), Tensor([1, 12, 16, 19],"float32"), Tensor([1, 2],"float32"), Tensor([912, 4],"float32"), Tensor([912, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 20],"float32"), Tensor([1, 12, 16, 20],"float32"), Tensor([1, 2],"float32"), Tensor([960, 4],"float32"), Tensor([960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 16, 21],"float32"), Tensor([1, 12, 16, 21],"float32"), Tensor([1, 2],"float32"), Tensor([1008, 4],"float32"), Tensor([1008, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 160, 128],"float32"), Tensor([1, 12, 160, 128],"float32"), Tensor([1, 2],"float32"), Tensor([61440, 4],"float32"), Tensor([61440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 160, 136],"float32"), Tensor([1, 12, 160, 136],"float32"), Tensor([1, 2],"float32"), Tensor([65280, 4],"float32"), Tensor([65280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 160, 144],"float32"), Tensor([1, 12, 160, 144],"float32"), Tensor([1, 2],"float32"), Tensor([69120, 4],"float32"), Tensor([69120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 160, 152],"float32"), Tensor([1, 12, 160, 152],"float32"), Tensor([1, 2],"float32"), Tensor([72960, 4],"float32"), Tensor([72960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 160, 168],"float32"), Tensor([1, 12, 160, 168],"float32"), Tensor([1, 2],"float32"), Tensor([80640, 4],"float32"), Tensor([80640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 160, 216],"float32"), Tensor([1, 12, 160, 216],"float32"), Tensor([1, 2],"float32"), Tensor([103680, 4],"float32"), Tensor([103680, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 160, 240],"float32"), Tensor([1, 12, 160, 240],"float32"), Tensor([1, 2],"float32"), Tensor([115200, 4],"float32"), Tensor([115200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 160, 248],"float32"), Tensor([1, 12, 160, 248],"float32"), Tensor([1, 2],"float32"), Tensor([119040, 4],"float32"), Tensor([119040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 164, 124],"float32"), Tensor([1, 12, 164, 124],"float32"), Tensor([1, 2],"float32"), Tensor([61008, 4],"float32"), Tensor([61008, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 164, 168],"float32"), Tensor([1, 12, 164, 168],"float32"), Tensor([1, 2],"float32"), Tensor([82656, 4],"float32"), Tensor([82656, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 120],"float32"), Tensor([1, 12, 168, 120],"float32"), Tensor([1, 2],"float32"), Tensor([60480, 4],"float32"), Tensor([60480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 124],"float32"), Tensor([1, 12, 168, 124],"float32"), Tensor([1, 2],"float32"), Tensor([62496, 4],"float32"), Tensor([62496, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 128],"float32"), Tensor([1, 12, 168, 128],"float32"), Tensor([1, 2],"float32"), Tensor([64512, 4],"float32"), Tensor([64512, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 132],"float32"), Tensor([1, 12, 168, 132],"float32"), Tensor([1, 2],"float32"), Tensor([66528, 4],"float32"), Tensor([66528, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 140],"float32"), Tensor([1, 12, 168, 140],"float32"), Tensor([1, 2],"float32"), Tensor([70560, 4],"float32"), Tensor([70560, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 144],"float32"), Tensor([1, 12, 168, 144],"float32"), Tensor([1, 2],"float32"), Tensor([72576, 4],"float32"), Tensor([72576, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 152],"float32"), Tensor([1, 12, 168, 152],"float32"), Tensor([1, 2],"float32"), Tensor([76608, 4],"float32"), Tensor([76608, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 168],"float32"), Tensor([1, 12, 168, 168],"float32"), Tensor([1, 2],"float32"), Tensor([84672, 4],"float32"), Tensor([84672, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 256],"float32"), Tensor([1, 12, 168, 256],"float32"), Tensor([1, 2],"float32"), Tensor([129024, 4],"float32"), Tensor([129024, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 168, 264],"float32"), Tensor([1, 12, 168, 264],"float32"), Tensor([1, 2],"float32"), Tensor([133056, 4],"float32"), Tensor([133056, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 11],"float32"), Tensor([1, 12, 17, 11],"float32"), Tensor([1, 2],"float32"), Tensor([561, 4],"float32"), Tensor([561, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 12],"float32"), Tensor([1, 12, 17, 12],"float32"), Tensor([1, 2],"float32"), Tensor([612, 4],"float32"), Tensor([612, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 13],"float32"), Tensor([1, 12, 17, 13],"float32"), Tensor([1, 2],"float32"), Tensor([663, 4],"float32"), Tensor([663, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 14],"float32"), Tensor([1, 12, 17, 14],"float32"), Tensor([1, 2],"float32"), Tensor([714, 4],"float32"), Tensor([714, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 15],"float32"), Tensor([1, 12, 17, 15],"float32"), Tensor([1, 2],"float32"), Tensor([765, 4],"float32"), Tensor([765, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 16],"float32"), Tensor([1, 12, 17, 16],"float32"), Tensor([1, 2],"float32"), Tensor([816, 4],"float32"), Tensor([816, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 17],"float32"), Tensor([1, 12, 17, 17],"float32"), Tensor([1, 2],"float32"), Tensor([867, 4],"float32"), Tensor([867, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 18],"float32"), Tensor([1, 12, 17, 18],"float32"), Tensor([1, 2],"float32"), Tensor([918, 4],"float32"), Tensor([918, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 19],"float32"), Tensor([1, 12, 17, 19],"float32"), Tensor([1, 2],"float32"), Tensor([969, 4],"float32"), Tensor([969, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 20],"float32"), Tensor([1, 12, 17, 20],"float32"), Tensor([1, 2],"float32"), Tensor([1020, 4],"float32"), Tensor([1020, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 17, 21],"float32"), Tensor([1, 12, 17, 21],"float32"), Tensor([1, 2],"float32"), Tensor([1071, 4],"float32"), Tensor([1071, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 176, 240],"float32"), Tensor([1, 12, 176, 240],"float32"), Tensor([1, 2],"float32"), Tensor([126720, 4],"float32"), Tensor([126720, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 176, 264],"float32"), Tensor([1, 12, 176, 264],"float32"), Tensor([1, 2],"float32"), Tensor([139392, 4],"float32"), Tensor([139392, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 176, 272],"float32"), Tensor([1, 12, 176, 272],"float32"), Tensor([1, 2],"float32"), Tensor([143616, 4],"float32"), Tensor([143616, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 176, 280],"float32"), Tensor([1, 12, 176, 280],"float32"), Tensor([1, 2],"float32"), Tensor([147840, 4],"float32"), Tensor([147840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 176, 336],"float32"), Tensor([1, 12, 176, 336],"float32"), Tensor([1, 2],"float32"), Tensor([177408, 4],"float32"), Tensor([177408, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 12],"float32"), Tensor([1, 12, 18, 12],"float32"), Tensor([1, 2],"float32"), Tensor([648, 4],"float32"), Tensor([648, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 13],"float32"), Tensor([1, 12, 18, 13],"float32"), Tensor([1, 2],"float32"), Tensor([702, 4],"float32"), Tensor([702, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 14],"float32"), Tensor([1, 12, 18, 14],"float32"), Tensor([1, 2],"float32"), Tensor([756, 4],"float32"), Tensor([756, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 15],"float32"), Tensor([1, 12, 18, 15],"float32"), Tensor([1, 2],"float32"), Tensor([810, 4],"float32"), Tensor([810, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 16],"float32"), Tensor([1, 12, 18, 16],"float32"), Tensor([1, 2],"float32"), Tensor([864, 4],"float32"), Tensor([864, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 17],"float32"), Tensor([1, 12, 18, 17],"float32"), Tensor([1, 2],"float32"), Tensor([918, 4],"float32"), Tensor([918, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 18],"float32"), Tensor([1, 12, 18, 18],"float32"), Tensor([1, 2],"float32"), Tensor([972, 4],"float32"), Tensor([972, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 19],"float32"), Tensor([1, 12, 18, 19],"float32"), Tensor([1, 2],"float32"), Tensor([1026, 4],"float32"), Tensor([1026, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 20],"float32"), Tensor([1, 12, 18, 20],"float32"), Tensor([1, 2],"float32"), Tensor([1080, 4],"float32"), Tensor([1080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 18, 21],"float32"), Tensor([1, 12, 18, 21],"float32"), Tensor([1, 2],"float32"), Tensor([1134, 4],"float32"), Tensor([1134, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 248],"float32"), Tensor([1, 12, 184, 248],"float32"), Tensor([1, 2],"float32"), Tensor([136896, 4],"float32"), Tensor([136896, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 256],"float32"), Tensor([1, 12, 184, 256],"float32"), Tensor([1, 2],"float32"), Tensor([141312, 4],"float32"), Tensor([141312, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 272],"float32"), Tensor([1, 12, 184, 272],"float32"), Tensor([1, 2],"float32"), Tensor([150144, 4],"float32"), Tensor([150144, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 280],"float32"), Tensor([1, 12, 184, 280],"float32"), Tensor([1, 2],"float32"), Tensor([154560, 4],"float32"), Tensor([154560, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 296],"float32"), Tensor([1, 12, 184, 296],"float32"), Tensor([1, 2],"float32"), Tensor([163392, 4],"float32"), Tensor([163392, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 304],"float32"), Tensor([1, 12, 184, 304],"float32"), Tensor([1, 2],"float32"), Tensor([167808, 4],"float32"), Tensor([167808, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 312],"float32"), Tensor([1, 12, 184, 312],"float32"), Tensor([1, 2],"float32"), Tensor([172224, 4],"float32"), Tensor([172224, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 320],"float32"), Tensor([1, 12, 184, 320],"float32"), Tensor([1, 2],"float32"), Tensor([176640, 4],"float32"), Tensor([176640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 328],"float32"), Tensor([1, 12, 184, 328],"float32"), Tensor([1, 2],"float32"), Tensor([181056, 4],"float32"), Tensor([181056, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 184, 336],"float32"), Tensor([1, 12, 184, 336],"float32"), Tensor([1, 2],"float32"), Tensor([185472, 4],"float32"), Tensor([185472, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 19, 12],"float32"), Tensor([1, 12, 19, 12],"float32"), Tensor([1, 2],"float32"), Tensor([684, 4],"float32"), Tensor([684, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 19, 13],"float32"), Tensor([1, 12, 19, 13],"float32"), Tensor([1, 2],"float32"), Tensor([741, 4],"float32"), Tensor([741, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 19, 16],"float32"), Tensor([1, 12, 19, 16],"float32"), Tensor([1, 2],"float32"), Tensor([912, 4],"float32"), Tensor([912, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 19, 17],"float32"), Tensor([1, 12, 19, 17],"float32"), Tensor([1, 2],"float32"), Tensor([969, 4],"float32"), Tensor([969, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 19, 18],"float32"), Tensor([1, 12, 19, 18],"float32"), Tensor([1, 2],"float32"), Tensor([1026, 4],"float32"), Tensor([1026, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 19, 19],"float32"), Tensor([1, 12, 19, 19],"float32"), Tensor([1, 2],"float32"), Tensor([1083, 4],"float32"), Tensor([1083, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 19, 20],"float32"), Tensor([1, 12, 19, 20],"float32"), Tensor([1, 2],"float32"), Tensor([1140, 4],"float32"), Tensor([1140, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 19, 21],"float32"), Tensor([1, 12, 19, 21],"float32"), Tensor([1, 2],"float32"), Tensor([1197, 4],"float32"), Tensor([1197, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 192, 248],"float32"), Tensor([1, 12, 192, 248],"float32"), Tensor([1, 2],"float32"), Tensor([142848, 4],"float32"), Tensor([142848, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 192, 256],"float32"), Tensor([1, 12, 192, 256],"float32"), Tensor([1, 2],"float32"), Tensor([147456, 4],"float32"), Tensor([147456, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 192, 264],"float32"), Tensor([1, 12, 192, 264],"float32"), Tensor([1, 2],"float32"), Tensor([152064, 4],"float32"), Tensor([152064, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 192, 272],"float32"), Tensor([1, 12, 192, 272],"float32"), Tensor([1, 2],"float32"), Tensor([156672, 4],"float32"), Tensor([156672, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 192, 280],"float32"), Tensor([1, 12, 192, 280],"float32"), Tensor([1, 2],"float32"), Tensor([161280, 4],"float32"), Tensor([161280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 192, 288],"float32"), Tensor([1, 12, 192, 288],"float32"), Tensor([1, 2],"float32"), Tensor([165888, 4],"float32"), Tensor([165888, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 192, 296],"float32"), Tensor([1, 12, 192, 296],"float32"), Tensor([1, 2],"float32"), Tensor([170496, 4],"float32"), Tensor([170496, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 192, 304],"float32"), Tensor([1, 12, 192, 304],"float32"), Tensor([1, 2],"float32"), Tensor([175104, 4],"float32"), Tensor([175104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 192, 336],"float32"), Tensor([1, 12, 192, 336],"float32"), Tensor([1, 2],"float32"), Tensor([193536, 4],"float32"), Tensor([193536, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 20, 14],"float32"), Tensor([1, 12, 20, 14],"float32"), Tensor([1, 2],"float32"), Tensor([840, 4],"float32"), Tensor([840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 20, 16],"float32"), Tensor([1, 12, 20, 16],"float32"), Tensor([1, 2],"float32"), Tensor([960, 4],"float32"), Tensor([960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 20, 17],"float32"), Tensor([1, 12, 20, 17],"float32"), Tensor([1, 2],"float32"), Tensor([1020, 4],"float32"), Tensor([1020, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 20, 18],"float32"), Tensor([1, 12, 20, 18],"float32"), Tensor([1, 2],"float32"), Tensor([1080, 4],"float32"), Tensor([1080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 20, 19],"float32"), Tensor([1, 12, 20, 19],"float32"), Tensor([1, 2],"float32"), Tensor([1140, 4],"float32"), Tensor([1140, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 20, 21],"float32"), Tensor([1, 12, 20, 21],"float32"), Tensor([1, 2],"float32"), Tensor([1260, 4],"float32"), Tensor([1260, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 20, 27],"float32"), Tensor([1, 12, 20, 27],"float32"), Tensor([1, 2],"float32"), Tensor([1620, 4],"float32"), Tensor([1620, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 20, 30],"float32"), Tensor([1, 12, 20, 30],"float32"), Tensor([1, 2],"float32"), Tensor([1800, 4],"float32"), Tensor([1800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 20, 31],"float32"), Tensor([1, 12, 20, 31],"float32"), Tensor([1, 2],"float32"), Tensor([1860, 4],"float32"), Tensor([1860, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 240],"float32"), Tensor([1, 12, 200, 240],"float32"), Tensor([1, 2],"float32"), Tensor([144000, 4],"float32"), Tensor([144000, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 248],"float32"), Tensor([1, 12, 200, 248],"float32"), Tensor([1, 2],"float32"), Tensor([148800, 4],"float32"), Tensor([148800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 256],"float32"), Tensor([1, 12, 200, 256],"float32"), Tensor([1, 2],"float32"), Tensor([153600, 4],"float32"), Tensor([153600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 272],"float32"), Tensor([1, 12, 200, 272],"float32"), Tensor([1, 2],"float32"), Tensor([163200, 4],"float32"), Tensor([163200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 280],"float32"), Tensor([1, 12, 200, 280],"float32"), Tensor([1, 2],"float32"), Tensor([168000, 4],"float32"), Tensor([168000, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 288],"float32"), Tensor([1, 12, 200, 288],"float32"), Tensor([1, 2],"float32"), Tensor([172800, 4],"float32"), Tensor([172800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 296],"float32"), Tensor([1, 12, 200, 296],"float32"), Tensor([1, 2],"float32"), Tensor([177600, 4],"float32"), Tensor([177600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 304],"float32"), Tensor([1, 12, 200, 304],"float32"), Tensor([1, 2],"float32"), Tensor([182400, 4],"float32"), Tensor([182400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 312],"float32"), Tensor([1, 12, 200, 312],"float32"), Tensor([1, 2],"float32"), Tensor([187200, 4],"float32"), Tensor([187200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 320],"float32"), Tensor([1, 12, 200, 320],"float32"), Tensor([1, 2],"float32"), Tensor([192000, 4],"float32"), Tensor([192000, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 328],"float32"), Tensor([1, 12, 200, 328],"float32"), Tensor([1, 2],"float32"), Tensor([196800, 4],"float32"), Tensor([196800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 200, 336],"float32"), Tensor([1, 12, 200, 336],"float32"), Tensor([1, 2],"float32"), Tensor([201600, 4],"float32"), Tensor([201600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 208, 288],"float32"), Tensor([1, 12, 208, 288],"float32"), Tensor([1, 2],"float32"), Tensor([179712, 4],"float32"), Tensor([179712, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 208, 296],"float32"), Tensor([1, 12, 208, 296],"float32"), Tensor([1, 2],"float32"), Tensor([184704, 4],"float32"), Tensor([184704, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 208, 304],"float32"), Tensor([1, 12, 208, 304],"float32"), Tensor([1, 2],"float32"), Tensor([189696, 4],"float32"), Tensor([189696, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 208, 328],"float32"), Tensor([1, 12, 208, 328],"float32"), Tensor([1, 2],"float32"), Tensor([204672, 4],"float32"), Tensor([204672, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 208, 336],"float32"), Tensor([1, 12, 208, 336],"float32"), Tensor([1, 2],"float32"), Tensor([209664, 4],"float32"), Tensor([209664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 21, 15],"float32"), Tensor([1, 12, 21, 15],"float32"), Tensor([1, 2],"float32"), Tensor([945, 4],"float32"), Tensor([945, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 21, 16],"float32"), Tensor([1, 12, 21, 16],"float32"), Tensor([1, 2],"float32"), Tensor([1008, 4],"float32"), Tensor([1008, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 21, 17],"float32"), Tensor([1, 12, 21, 17],"float32"), Tensor([1, 2],"float32"), Tensor([1071, 4],"float32"), Tensor([1071, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 21, 18],"float32"), Tensor([1, 12, 21, 18],"float32"), Tensor([1, 2],"float32"), Tensor([1134, 4],"float32"), Tensor([1134, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 21, 19],"float32"), Tensor([1, 12, 21, 19],"float32"), Tensor([1, 2],"float32"), Tensor([1197, 4],"float32"), Tensor([1197, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 21, 21],"float32"), Tensor([1, 12, 21, 21],"float32"), Tensor([1, 2],"float32"), Tensor([1323, 4],"float32"), Tensor([1323, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 21, 32],"float32"), Tensor([1, 12, 21, 32],"float32"), Tensor([1, 2],"float32"), Tensor([2016, 4],"float32"), Tensor([2016, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 21, 33],"float32"), Tensor([1, 12, 21, 33],"float32"), Tensor([1, 2],"float32"), Tensor([2079, 4],"float32"), Tensor([2079, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 224],"float32"), Tensor([1, 12, 216, 224],"float32"), Tensor([1, 2],"float32"), Tensor([145152, 4],"float32"), Tensor([145152, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 248],"float32"), Tensor([1, 12, 216, 248],"float32"), Tensor([1, 2],"float32"), Tensor([160704, 4],"float32"), Tensor([160704, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 256],"float32"), Tensor([1, 12, 216, 256],"float32"), Tensor([1, 2],"float32"), Tensor([165888, 4],"float32"), Tensor([165888, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 264],"float32"), Tensor([1, 12, 216, 264],"float32"), Tensor([1, 2],"float32"), Tensor([171072, 4],"float32"), Tensor([171072, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 272],"float32"), Tensor([1, 12, 216, 272],"float32"), Tensor([1, 2],"float32"), Tensor([176256, 4],"float32"), Tensor([176256, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 280],"float32"), Tensor([1, 12, 216, 280],"float32"), Tensor([1, 2],"float32"), Tensor([181440, 4],"float32"), Tensor([181440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 288],"float32"), Tensor([1, 12, 216, 288],"float32"), Tensor([1, 2],"float32"), Tensor([186624, 4],"float32"), Tensor([186624, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 304],"float32"), Tensor([1, 12, 216, 304],"float32"), Tensor([1, 2],"float32"), Tensor([196992, 4],"float32"), Tensor([196992, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 312],"float32"), Tensor([1, 12, 216, 312],"float32"), Tensor([1, 2],"float32"), Tensor([202176, 4],"float32"), Tensor([202176, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 328],"float32"), Tensor([1, 12, 216, 328],"float32"), Tensor([1, 2],"float32"), Tensor([212544, 4],"float32"), Tensor([212544, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 216, 336],"float32"), Tensor([1, 12, 216, 336],"float32"), Tensor([1, 2],"float32"), Tensor([217728, 4],"float32"), Tensor([217728, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 22, 30],"float32"), Tensor([1, 12, 22, 30],"float32"), Tensor([1, 2],"float32"), Tensor([1980, 4],"float32"), Tensor([1980, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 22, 33],"float32"), Tensor([1, 12, 22, 33],"float32"), Tensor([1, 2],"float32"), Tensor([2178, 4],"float32"), Tensor([2178, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 22, 34],"float32"), Tensor([1, 12, 22, 34],"float32"), Tensor([1, 2],"float32"), Tensor([2244, 4],"float32"), Tensor([2244, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 22, 35],"float32"), Tensor([1, 12, 22, 35],"float32"), Tensor([1, 2],"float32"), Tensor([2310, 4],"float32"), Tensor([2310, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 22, 42],"float32"), Tensor([1, 12, 22, 42],"float32"), Tensor([1, 2],"float32"), Tensor([2772, 4],"float32"), Tensor([2772, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 168],"float32"), Tensor([1, 12, 224, 168],"float32"), Tensor([1, 2],"float32"), Tensor([112896, 4],"float32"), Tensor([112896, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 240],"float32"), Tensor([1, 12, 224, 240],"float32"), Tensor([1, 2],"float32"), Tensor([161280, 4],"float32"), Tensor([161280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 248],"float32"), Tensor([1, 12, 224, 248],"float32"), Tensor([1, 2],"float32"), Tensor([166656, 4],"float32"), Tensor([166656, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 256],"float32"), Tensor([1, 12, 224, 256],"float32"), Tensor([1, 2],"float32"), Tensor([172032, 4],"float32"), Tensor([172032, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 264],"float32"), Tensor([1, 12, 224, 264],"float32"), Tensor([1, 2],"float32"), Tensor([177408, 4],"float32"), Tensor([177408, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 272],"float32"), Tensor([1, 12, 224, 272],"float32"), Tensor([1, 2],"float32"), Tensor([182784, 4],"float32"), Tensor([182784, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 280],"float32"), Tensor([1, 12, 224, 280],"float32"), Tensor([1, 2],"float32"), Tensor([188160, 4],"float32"), Tensor([188160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 288],"float32"), Tensor([1, 12, 224, 288],"float32"), Tensor([1, 2],"float32"), Tensor([193536, 4],"float32"), Tensor([193536, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 296],"float32"), Tensor([1, 12, 224, 296],"float32"), Tensor([1, 2],"float32"), Tensor([198912, 4],"float32"), Tensor([198912, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 304],"float32"), Tensor([1, 12, 224, 304],"float32"), Tensor([1, 2],"float32"), Tensor([204288, 4],"float32"), Tensor([204288, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 312],"float32"), Tensor([1, 12, 224, 312],"float32"), Tensor([1, 2],"float32"), Tensor([209664, 4],"float32"), Tensor([209664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 320],"float32"), Tensor([1, 12, 224, 320],"float32"), Tensor([1, 2],"float32"), Tensor([215040, 4],"float32"), Tensor([215040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 224, 328],"float32"), Tensor([1, 12, 224, 328],"float32"), Tensor([1, 2],"float32"), Tensor([220416, 4],"float32"), Tensor([220416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 31],"float32"), Tensor([1, 12, 23, 31],"float32"), Tensor([1, 2],"float32"), Tensor([2139, 4],"float32"), Tensor([2139, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 32],"float32"), Tensor([1, 12, 23, 32],"float32"), Tensor([1, 2],"float32"), Tensor([2208, 4],"float32"), Tensor([2208, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 34],"float32"), Tensor([1, 12, 23, 34],"float32"), Tensor([1, 2],"float32"), Tensor([2346, 4],"float32"), Tensor([2346, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 35],"float32"), Tensor([1, 12, 23, 35],"float32"), Tensor([1, 2],"float32"), Tensor([2415, 4],"float32"), Tensor([2415, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 37],"float32"), Tensor([1, 12, 23, 37],"float32"), Tensor([1, 2],"float32"), Tensor([2553, 4],"float32"), Tensor([2553, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 38],"float32"), Tensor([1, 12, 23, 38],"float32"), Tensor([1, 2],"float32"), Tensor([2622, 4],"float32"), Tensor([2622, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 39],"float32"), Tensor([1, 12, 23, 39],"float32"), Tensor([1, 2],"float32"), Tensor([2691, 4],"float32"), Tensor([2691, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 40],"float32"), Tensor([1, 12, 23, 40],"float32"), Tensor([1, 2],"float32"), Tensor([2760, 4],"float32"), Tensor([2760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 41],"float32"), Tensor([1, 12, 23, 41],"float32"), Tensor([1, 2],"float32"), Tensor([2829, 4],"float32"), Tensor([2829, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 23, 42],"float32"), Tensor([1, 12, 23, 42],"float32"), Tensor([1, 2],"float32"), Tensor([2898, 4],"float32"), Tensor([2898, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 232, 248],"float32"), Tensor([1, 12, 232, 248],"float32"), Tensor([1, 2],"float32"), Tensor([172608, 4],"float32"), Tensor([172608, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 232, 256],"float32"), Tensor([1, 12, 232, 256],"float32"), Tensor([1, 2],"float32"), Tensor([178176, 4],"float32"), Tensor([178176, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 232, 264],"float32"), Tensor([1, 12, 232, 264],"float32"), Tensor([1, 2],"float32"), Tensor([183744, 4],"float32"), Tensor([183744, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 232, 272],"float32"), Tensor([1, 12, 232, 272],"float32"), Tensor([1, 2],"float32"), Tensor([189312, 4],"float32"), Tensor([189312, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 24, 31],"float32"), Tensor([1, 12, 24, 31],"float32"), Tensor([1, 2],"float32"), Tensor([2232, 4],"float32"), Tensor([2232, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 24, 32],"float32"), Tensor([1, 12, 24, 32],"float32"), Tensor([1, 2],"float32"), Tensor([2304, 4],"float32"), Tensor([2304, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 24, 33],"float32"), Tensor([1, 12, 24, 33],"float32"), Tensor([1, 2],"float32"), Tensor([2376, 4],"float32"), Tensor([2376, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 24, 34],"float32"), Tensor([1, 12, 24, 34],"float32"), Tensor([1, 2],"float32"), Tensor([2448, 4],"float32"), Tensor([2448, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 24, 35],"float32"), Tensor([1, 12, 24, 35],"float32"), Tensor([1, 2],"float32"), Tensor([2520, 4],"float32"), Tensor([2520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 24, 36],"float32"), Tensor([1, 12, 24, 36],"float32"), Tensor([1, 2],"float32"), Tensor([2592, 4],"float32"), Tensor([2592, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 24, 37],"float32"), Tensor([1, 12, 24, 37],"float32"), Tensor([1, 2],"float32"), Tensor([2664, 4],"float32"), Tensor([2664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 24, 38],"float32"), Tensor([1, 12, 24, 38],"float32"), Tensor([1, 2],"float32"), Tensor([2736, 4],"float32"), Tensor([2736, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 24, 42],"float32"), Tensor([1, 12, 24, 42],"float32"), Tensor([1, 2],"float32"), Tensor([3024, 4],"float32"), Tensor([3024, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 176],"float32"), Tensor([1, 12, 240, 176],"float32"), Tensor([1, 2],"float32"), Tensor([126720, 4],"float32"), Tensor([126720, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 208],"float32"), Tensor([1, 12, 240, 208],"float32"), Tensor([1, 2],"float32"), Tensor([149760, 4],"float32"), Tensor([149760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 224],"float32"), Tensor([1, 12, 240, 224],"float32"), Tensor([1, 2],"float32"), Tensor([161280, 4],"float32"), Tensor([161280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 240],"float32"), Tensor([1, 12, 240, 240],"float32"), Tensor([1, 2],"float32"), Tensor([172800, 4],"float32"), Tensor([172800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 248],"float32"), Tensor([1, 12, 240, 248],"float32"), Tensor([1, 2],"float32"), Tensor([178560, 4],"float32"), Tensor([178560, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 256],"float32"), Tensor([1, 12, 240, 256],"float32"), Tensor([1, 2],"float32"), Tensor([184320, 4],"float32"), Tensor([184320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 272],"float32"), Tensor([1, 12, 240, 272],"float32"), Tensor([1, 2],"float32"), Tensor([195840, 4],"float32"), Tensor([195840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 280],"float32"), Tensor([1, 12, 240, 280],"float32"), Tensor([1, 2],"float32"), Tensor([201600, 4],"float32"), Tensor([201600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 288],"float32"), Tensor([1, 12, 240, 288],"float32"), Tensor([1, 2],"float32"), Tensor([207360, 4],"float32"), Tensor([207360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 296],"float32"), Tensor([1, 12, 240, 296],"float32"), Tensor([1, 2],"float32"), Tensor([213120, 4],"float32"), Tensor([213120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 304],"float32"), Tensor([1, 12, 240, 304],"float32"), Tensor([1, 2],"float32"), Tensor([218880, 4],"float32"), Tensor([218880, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 312],"float32"), Tensor([1, 12, 240, 312],"float32"), Tensor([1, 2],"float32"), Tensor([224640, 4],"float32"), Tensor([224640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 320],"float32"), Tensor([1, 12, 240, 320],"float32"), Tensor([1, 2],"float32"), Tensor([230400, 4],"float32"), Tensor([230400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 328],"float32"), Tensor([1, 12, 240, 328],"float32"), Tensor([1, 2],"float32"), Tensor([236160, 4],"float32"), Tensor([236160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 240, 336],"float32"), Tensor([1, 12, 240, 336],"float32"), Tensor([1, 2],"float32"), Tensor([241920, 4],"float32"), Tensor([241920, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 160],"float32"), Tensor([1, 12, 248, 160],"float32"), Tensor([1, 2],"float32"), Tensor([119040, 4],"float32"), Tensor([119040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 184],"float32"), Tensor([1, 12, 248, 184],"float32"), Tensor([1, 2],"float32"), Tensor([136896, 4],"float32"), Tensor([136896, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 192],"float32"), Tensor([1, 12, 248, 192],"float32"), Tensor([1, 2],"float32"), Tensor([142848, 4],"float32"), Tensor([142848, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 216],"float32"), Tensor([1, 12, 248, 216],"float32"), Tensor([1, 2],"float32"), Tensor([160704, 4],"float32"), Tensor([160704, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 224],"float32"), Tensor([1, 12, 248, 224],"float32"), Tensor([1, 2],"float32"), Tensor([166656, 4],"float32"), Tensor([166656, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 248],"float32"), Tensor([1, 12, 248, 248],"float32"), Tensor([1, 2],"float32"), Tensor([184512, 4],"float32"), Tensor([184512, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 256],"float32"), Tensor([1, 12, 248, 256],"float32"), Tensor([1, 2],"float32"), Tensor([190464, 4],"float32"), Tensor([190464, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 264],"float32"), Tensor([1, 12, 248, 264],"float32"), Tensor([1, 2],"float32"), Tensor([196416, 4],"float32"), Tensor([196416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 272],"float32"), Tensor([1, 12, 248, 272],"float32"), Tensor([1, 2],"float32"), Tensor([202368, 4],"float32"), Tensor([202368, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 280],"float32"), Tensor([1, 12, 248, 280],"float32"), Tensor([1, 2],"float32"), Tensor([208320, 4],"float32"), Tensor([208320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 288],"float32"), Tensor([1, 12, 248, 288],"float32"), Tensor([1, 2],"float32"), Tensor([214272, 4],"float32"), Tensor([214272, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 296],"float32"), Tensor([1, 12, 248, 296],"float32"), Tensor([1, 2],"float32"), Tensor([220224, 4],"float32"), Tensor([220224, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 304],"float32"), Tensor([1, 12, 248, 304],"float32"), Tensor([1, 2],"float32"), Tensor([226176, 4],"float32"), Tensor([226176, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 320],"float32"), Tensor([1, 12, 248, 320],"float32"), Tensor([1, 2],"float32"), Tensor([238080, 4],"float32"), Tensor([238080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 328],"float32"), Tensor([1, 12, 248, 328],"float32"), Tensor([1, 2],"float32"), Tensor([244032, 4],"float32"), Tensor([244032, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 248, 336],"float32"), Tensor([1, 12, 248, 336],"float32"), Tensor([1, 2],"float32"), Tensor([249984, 4],"float32"), Tensor([249984, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 30],"float32"), Tensor([1, 12, 25, 30],"float32"), Tensor([1, 2],"float32"), Tensor([2250, 4],"float32"), Tensor([2250, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 31],"float32"), Tensor([1, 12, 25, 31],"float32"), Tensor([1, 2],"float32"), Tensor([2325, 4],"float32"), Tensor([2325, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 32],"float32"), Tensor([1, 12, 25, 32],"float32"), Tensor([1, 2],"float32"), Tensor([2400, 4],"float32"), Tensor([2400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 34],"float32"), Tensor([1, 12, 25, 34],"float32"), Tensor([1, 2],"float32"), Tensor([2550, 4],"float32"), Tensor([2550, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 35],"float32"), Tensor([1, 12, 25, 35],"float32"), Tensor([1, 2],"float32"), Tensor([2625, 4],"float32"), Tensor([2625, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 36],"float32"), Tensor([1, 12, 25, 36],"float32"), Tensor([1, 2],"float32"), Tensor([2700, 4],"float32"), Tensor([2700, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 37],"float32"), Tensor([1, 12, 25, 37],"float32"), Tensor([1, 2],"float32"), Tensor([2775, 4],"float32"), Tensor([2775, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 38],"float32"), Tensor([1, 12, 25, 38],"float32"), Tensor([1, 2],"float32"), Tensor([2850, 4],"float32"), Tensor([2850, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 39],"float32"), Tensor([1, 12, 25, 39],"float32"), Tensor([1, 2],"float32"), Tensor([2925, 4],"float32"), Tensor([2925, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 40],"float32"), Tensor([1, 12, 25, 40],"float32"), Tensor([1, 2],"float32"), Tensor([3000, 4],"float32"), Tensor([3000, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 41],"float32"), Tensor([1, 12, 25, 41],"float32"), Tensor([1, 2],"float32"), Tensor([3075, 4],"float32"), Tensor([3075, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 25, 42],"float32"), Tensor([1, 12, 25, 42],"float32"), Tensor([1, 2],"float32"), Tensor([3150, 4],"float32"), Tensor([3150, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 168],"float32"), Tensor([1, 12, 256, 168],"float32"), Tensor([1, 2],"float32"), Tensor([129024, 4],"float32"), Tensor([129024, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 192],"float32"), Tensor([1, 12, 256, 192],"float32"), Tensor([1, 2],"float32"), Tensor([147456, 4],"float32"), Tensor([147456, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 224],"float32"), Tensor([1, 12, 256, 224],"float32"), Tensor([1, 2],"float32"), Tensor([172032, 4],"float32"), Tensor([172032, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 240],"float32"), Tensor([1, 12, 256, 240],"float32"), Tensor([1, 2],"float32"), Tensor([184320, 4],"float32"), Tensor([184320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 248],"float32"), Tensor([1, 12, 256, 248],"float32"), Tensor([1, 2],"float32"), Tensor([190464, 4],"float32"), Tensor([190464, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 256],"float32"), Tensor([1, 12, 256, 256],"float32"), Tensor([1, 2],"float32"), Tensor([196608, 4],"float32"), Tensor([196608, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 264],"float32"), Tensor([1, 12, 256, 264],"float32"), Tensor([1, 2],"float32"), Tensor([202752, 4],"float32"), Tensor([202752, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 272],"float32"), Tensor([1, 12, 256, 272],"float32"), Tensor([1, 2],"float32"), Tensor([208896, 4],"float32"), Tensor([208896, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 280],"float32"), Tensor([1, 12, 256, 280],"float32"), Tensor([1, 2],"float32"), Tensor([215040, 4],"float32"), Tensor([215040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 288],"float32"), Tensor([1, 12, 256, 288],"float32"), Tensor([1, 2],"float32"), Tensor([221184, 4],"float32"), Tensor([221184, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 296],"float32"), Tensor([1, 12, 256, 296],"float32"), Tensor([1, 2],"float32"), Tensor([227328, 4],"float32"), Tensor([227328, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 304],"float32"), Tensor([1, 12, 256, 304],"float32"), Tensor([1, 2],"float32"), Tensor([233472, 4],"float32"), Tensor([233472, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 312],"float32"), Tensor([1, 12, 256, 312],"float32"), Tensor([1, 2],"float32"), Tensor([239616, 4],"float32"), Tensor([239616, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 320],"float32"), Tensor([1, 12, 256, 320],"float32"), Tensor([1, 2],"float32"), Tensor([245760, 4],"float32"), Tensor([245760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 328],"float32"), Tensor([1, 12, 256, 328],"float32"), Tensor([1, 2],"float32"), Tensor([251904, 4],"float32"), Tensor([251904, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 256, 336],"float32"), Tensor([1, 12, 256, 336],"float32"), Tensor([1, 2],"float32"), Tensor([258048, 4],"float32"), Tensor([258048, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 26, 36],"float32"), Tensor([1, 12, 26, 36],"float32"), Tensor([1, 2],"float32"), Tensor([2808, 4],"float32"), Tensor([2808, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 26, 37],"float32"), Tensor([1, 12, 26, 37],"float32"), Tensor([1, 2],"float32"), Tensor([2886, 4],"float32"), Tensor([2886, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 26, 38],"float32"), Tensor([1, 12, 26, 38],"float32"), Tensor([1, 2],"float32"), Tensor([2964, 4],"float32"), Tensor([2964, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 26, 41],"float32"), Tensor([1, 12, 26, 41],"float32"), Tensor([1, 2],"float32"), Tensor([3198, 4],"float32"), Tensor([3198, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 26, 42],"float32"), Tensor([1, 12, 26, 42],"float32"), Tensor([1, 2],"float32"), Tensor([3276, 4],"float32"), Tensor([3276, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 192],"float32"), Tensor([1, 12, 264, 192],"float32"), Tensor([1, 2],"float32"), Tensor([152064, 4],"float32"), Tensor([152064, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 200],"float32"), Tensor([1, 12, 264, 200],"float32"), Tensor([1, 2],"float32"), Tensor([158400, 4],"float32"), Tensor([158400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 216],"float32"), Tensor([1, 12, 264, 216],"float32"), Tensor([1, 2],"float32"), Tensor([171072, 4],"float32"), Tensor([171072, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 248],"float32"), Tensor([1, 12, 264, 248],"float32"), Tensor([1, 2],"float32"), Tensor([196416, 4],"float32"), Tensor([196416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 256],"float32"), Tensor([1, 12, 264, 256],"float32"), Tensor([1, 2],"float32"), Tensor([202752, 4],"float32"), Tensor([202752, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 264],"float32"), Tensor([1, 12, 264, 264],"float32"), Tensor([1, 2],"float32"), Tensor([209088, 4],"float32"), Tensor([209088, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 272],"float32"), Tensor([1, 12, 264, 272],"float32"), Tensor([1, 2],"float32"), Tensor([215424, 4],"float32"), Tensor([215424, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 280],"float32"), Tensor([1, 12, 264, 280],"float32"), Tensor([1, 2],"float32"), Tensor([221760, 4],"float32"), Tensor([221760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 288],"float32"), Tensor([1, 12, 264, 288],"float32"), Tensor([1, 2],"float32"), Tensor([228096, 4],"float32"), Tensor([228096, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 296],"float32"), Tensor([1, 12, 264, 296],"float32"), Tensor([1, 2],"float32"), Tensor([234432, 4],"float32"), Tensor([234432, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 304],"float32"), Tensor([1, 12, 264, 304],"float32"), Tensor([1, 2],"float32"), Tensor([240768, 4],"float32"), Tensor([240768, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 312],"float32"), Tensor([1, 12, 264, 312],"float32"), Tensor([1, 2],"float32"), Tensor([247104, 4],"float32"), Tensor([247104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 320],"float32"), Tensor([1, 12, 264, 320],"float32"), Tensor([1, 2],"float32"), Tensor([253440, 4],"float32"), Tensor([253440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 328],"float32"), Tensor([1, 12, 264, 328],"float32"), Tensor([1, 2],"float32"), Tensor([259776, 4],"float32"), Tensor([259776, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 264, 336],"float32"), Tensor([1, 12, 264, 336],"float32"), Tensor([1, 2],"float32"), Tensor([266112, 4],"float32"), Tensor([266112, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 28],"float32"), Tensor([1, 12, 27, 28],"float32"), Tensor([1, 2],"float32"), Tensor([2268, 4],"float32"), Tensor([2268, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 31],"float32"), Tensor([1, 12, 27, 31],"float32"), Tensor([1, 2],"float32"), Tensor([2511, 4],"float32"), Tensor([2511, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 32],"float32"), Tensor([1, 12, 27, 32],"float32"), Tensor([1, 2],"float32"), Tensor([2592, 4],"float32"), Tensor([2592, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 33],"float32"), Tensor([1, 12, 27, 33],"float32"), Tensor([1, 2],"float32"), Tensor([2673, 4],"float32"), Tensor([2673, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 34],"float32"), Tensor([1, 12, 27, 34],"float32"), Tensor([1, 2],"float32"), Tensor([2754, 4],"float32"), Tensor([2754, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 35],"float32"), Tensor([1, 12, 27, 35],"float32"), Tensor([1, 2],"float32"), Tensor([2835, 4],"float32"), Tensor([2835, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 36],"float32"), Tensor([1, 12, 27, 36],"float32"), Tensor([1, 2],"float32"), Tensor([2916, 4],"float32"), Tensor([2916, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 38],"float32"), Tensor([1, 12, 27, 38],"float32"), Tensor([1, 2],"float32"), Tensor([3078, 4],"float32"), Tensor([3078, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 39],"float32"), Tensor([1, 12, 27, 39],"float32"), Tensor([1, 2],"float32"), Tensor([3159, 4],"float32"), Tensor([3159, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 41],"float32"), Tensor([1, 12, 27, 41],"float32"), Tensor([1, 2],"float32"), Tensor([3321, 4],"float32"), Tensor([3321, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 27, 42],"float32"), Tensor([1, 12, 27, 42],"float32"), Tensor([1, 2],"float32"), Tensor([3402, 4],"float32"), Tensor([3402, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 176],"float32"), Tensor([1, 12, 272, 176],"float32"), Tensor([1, 2],"float32"), Tensor([143616, 4],"float32"), Tensor([143616, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 200],"float32"), Tensor([1, 12, 272, 200],"float32"), Tensor([1, 2],"float32"), Tensor([163200, 4],"float32"), Tensor([163200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 216],"float32"), Tensor([1, 12, 272, 216],"float32"), Tensor([1, 2],"float32"), Tensor([176256, 4],"float32"), Tensor([176256, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 224],"float32"), Tensor([1, 12, 272, 224],"float32"), Tensor([1, 2],"float32"), Tensor([182784, 4],"float32"), Tensor([182784, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 232],"float32"), Tensor([1, 12, 272, 232],"float32"), Tensor([1, 2],"float32"), Tensor([189312, 4],"float32"), Tensor([189312, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 240],"float32"), Tensor([1, 12, 272, 240],"float32"), Tensor([1, 2],"float32"), Tensor([195840, 4],"float32"), Tensor([195840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 248],"float32"), Tensor([1, 12, 272, 248],"float32"), Tensor([1, 2],"float32"), Tensor([202368, 4],"float32"), Tensor([202368, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 256],"float32"), Tensor([1, 12, 272, 256],"float32"), Tensor([1, 2],"float32"), Tensor([208896, 4],"float32"), Tensor([208896, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 272],"float32"), Tensor([1, 12, 272, 272],"float32"), Tensor([1, 2],"float32"), Tensor([221952, 4],"float32"), Tensor([221952, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 280],"float32"), Tensor([1, 12, 272, 280],"float32"), Tensor([1, 2],"float32"), Tensor([228480, 4],"float32"), Tensor([228480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 288],"float32"), Tensor([1, 12, 272, 288],"float32"), Tensor([1, 2],"float32"), Tensor([235008, 4],"float32"), Tensor([235008, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 296],"float32"), Tensor([1, 12, 272, 296],"float32"), Tensor([1, 2],"float32"), Tensor([241536, 4],"float32"), Tensor([241536, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 304],"float32"), Tensor([1, 12, 272, 304],"float32"), Tensor([1, 2],"float32"), Tensor([248064, 4],"float32"), Tensor([248064, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 320],"float32"), Tensor([1, 12, 272, 320],"float32"), Tensor([1, 2],"float32"), Tensor([261120, 4],"float32"), Tensor([261120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 328],"float32"), Tensor([1, 12, 272, 328],"float32"), Tensor([1, 2],"float32"), Tensor([267648, 4],"float32"), Tensor([267648, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 272, 336],"float32"), Tensor([1, 12, 272, 336],"float32"), Tensor([1, 2],"float32"), Tensor([274176, 4],"float32"), Tensor([274176, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 21],"float32"), Tensor([1, 12, 28, 21],"float32"), Tensor([1, 2],"float32"), Tensor([1764, 4],"float32"), Tensor([1764, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 30],"float32"), Tensor([1, 12, 28, 30],"float32"), Tensor([1, 2],"float32"), Tensor([2520, 4],"float32"), Tensor([2520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 31],"float32"), Tensor([1, 12, 28, 31],"float32"), Tensor([1, 2],"float32"), Tensor([2604, 4],"float32"), Tensor([2604, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 32],"float32"), Tensor([1, 12, 28, 32],"float32"), Tensor([1, 2],"float32"), Tensor([2688, 4],"float32"), Tensor([2688, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 33],"float32"), Tensor([1, 12, 28, 33],"float32"), Tensor([1, 2],"float32"), Tensor([2772, 4],"float32"), Tensor([2772, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 34],"float32"), Tensor([1, 12, 28, 34],"float32"), Tensor([1, 2],"float32"), Tensor([2856, 4],"float32"), Tensor([2856, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 35],"float32"), Tensor([1, 12, 28, 35],"float32"), Tensor([1, 2],"float32"), Tensor([2940, 4],"float32"), Tensor([2940, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 36],"float32"), Tensor([1, 12, 28, 36],"float32"), Tensor([1, 2],"float32"), Tensor([3024, 4],"float32"), Tensor([3024, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 37],"float32"), Tensor([1, 12, 28, 37],"float32"), Tensor([1, 2],"float32"), Tensor([3108, 4],"float32"), Tensor([3108, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 38],"float32"), Tensor([1, 12, 28, 38],"float32"), Tensor([1, 2],"float32"), Tensor([3192, 4],"float32"), Tensor([3192, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 39],"float32"), Tensor([1, 12, 28, 39],"float32"), Tensor([1, 2],"float32"), Tensor([3276, 4],"float32"), Tensor([3276, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 40],"float32"), Tensor([1, 12, 28, 40],"float32"), Tensor([1, 2],"float32"), Tensor([3360, 4],"float32"), Tensor([3360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 28, 41],"float32"), Tensor([1, 12, 28, 41],"float32"), Tensor([1, 2],"float32"), Tensor([3444, 4],"float32"), Tensor([3444, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 184],"float32"), Tensor([1, 12, 280, 184],"float32"), Tensor([1, 2],"float32"), Tensor([154560, 4],"float32"), Tensor([154560, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 192],"float32"), Tensor([1, 12, 280, 192],"float32"), Tensor([1, 2],"float32"), Tensor([161280, 4],"float32"), Tensor([161280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 224],"float32"), Tensor([1, 12, 280, 224],"float32"), Tensor([1, 2],"float32"), Tensor([188160, 4],"float32"), Tensor([188160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 240],"float32"), Tensor([1, 12, 280, 240],"float32"), Tensor([1, 2],"float32"), Tensor([201600, 4],"float32"), Tensor([201600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 248],"float32"), Tensor([1, 12, 280, 248],"float32"), Tensor([1, 2],"float32"), Tensor([208320, 4],"float32"), Tensor([208320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 256],"float32"), Tensor([1, 12, 280, 256],"float32"), Tensor([1, 2],"float32"), Tensor([215040, 4],"float32"), Tensor([215040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 264],"float32"), Tensor([1, 12, 280, 264],"float32"), Tensor([1, 2],"float32"), Tensor([221760, 4],"float32"), Tensor([221760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 272],"float32"), Tensor([1, 12, 280, 272],"float32"), Tensor([1, 2],"float32"), Tensor([228480, 4],"float32"), Tensor([228480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 280],"float32"), Tensor([1, 12, 280, 280],"float32"), Tensor([1, 2],"float32"), Tensor([235200, 4],"float32"), Tensor([235200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 288],"float32"), Tensor([1, 12, 280, 288],"float32"), Tensor([1, 2],"float32"), Tensor([241920, 4],"float32"), Tensor([241920, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 296],"float32"), Tensor([1, 12, 280, 296],"float32"), Tensor([1, 2],"float32"), Tensor([248640, 4],"float32"), Tensor([248640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 304],"float32"), Tensor([1, 12, 280, 304],"float32"), Tensor([1, 2],"float32"), Tensor([255360, 4],"float32"), Tensor([255360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 312],"float32"), Tensor([1, 12, 280, 312],"float32"), Tensor([1, 2],"float32"), Tensor([262080, 4],"float32"), Tensor([262080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 328],"float32"), Tensor([1, 12, 280, 328],"float32"), Tensor([1, 2],"float32"), Tensor([275520, 4],"float32"), Tensor([275520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 280, 336],"float32"), Tensor([1, 12, 280, 336],"float32"), Tensor([1, 2],"float32"), Tensor([282240, 4],"float32"), Tensor([282240, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 192],"float32"), Tensor([1, 12, 288, 192],"float32"), Tensor([1, 2],"float32"), Tensor([165888, 4],"float32"), Tensor([165888, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 200],"float32"), Tensor([1, 12, 288, 200],"float32"), Tensor([1, 2],"float32"), Tensor([172800, 4],"float32"), Tensor([172800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 216],"float32"), Tensor([1, 12, 288, 216],"float32"), Tensor([1, 2],"float32"), Tensor([186624, 4],"float32"), Tensor([186624, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 224],"float32"), Tensor([1, 12, 288, 224],"float32"), Tensor([1, 2],"float32"), Tensor([193536, 4],"float32"), Tensor([193536, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 232],"float32"), Tensor([1, 12, 288, 232],"float32"), Tensor([1, 2],"float32"), Tensor([200448, 4],"float32"), Tensor([200448, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 240],"float32"), Tensor([1, 12, 288, 240],"float32"), Tensor([1, 2],"float32"), Tensor([207360, 4],"float32"), Tensor([207360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 248],"float32"), Tensor([1, 12, 288, 248],"float32"), Tensor([1, 2],"float32"), Tensor([214272, 4],"float32"), Tensor([214272, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 256],"float32"), Tensor([1, 12, 288, 256],"float32"), Tensor([1, 2],"float32"), Tensor([221184, 4],"float32"), Tensor([221184, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 264],"float32"), Tensor([1, 12, 288, 264],"float32"), Tensor([1, 2],"float32"), Tensor([228096, 4],"float32"), Tensor([228096, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 272],"float32"), Tensor([1, 12, 288, 272],"float32"), Tensor([1, 2],"float32"), Tensor([235008, 4],"float32"), Tensor([235008, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 280],"float32"), Tensor([1, 12, 288, 280],"float32"), Tensor([1, 2],"float32"), Tensor([241920, 4],"float32"), Tensor([241920, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 288],"float32"), Tensor([1, 12, 288, 288],"float32"), Tensor([1, 2],"float32"), Tensor([248832, 4],"float32"), Tensor([248832, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 296],"float32"), Tensor([1, 12, 288, 296],"float32"), Tensor([1, 2],"float32"), Tensor([255744, 4],"float32"), Tensor([255744, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 304],"float32"), Tensor([1, 12, 288, 304],"float32"), Tensor([1, 2],"float32"), Tensor([262656, 4],"float32"), Tensor([262656, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 312],"float32"), Tensor([1, 12, 288, 312],"float32"), Tensor([1, 2],"float32"), Tensor([269568, 4],"float32"), Tensor([269568, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 320],"float32"), Tensor([1, 12, 288, 320],"float32"), Tensor([1, 2],"float32"), Tensor([276480, 4],"float32"), Tensor([276480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 328],"float32"), Tensor([1, 12, 288, 328],"float32"), Tensor([1, 2],"float32"), Tensor([283392, 4],"float32"), Tensor([283392, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 288, 336],"float32"), Tensor([1, 12, 288, 336],"float32"), Tensor([1, 2],"float32"), Tensor([290304, 4],"float32"), Tensor([290304, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 29, 31],"float32"), Tensor([1, 12, 29, 31],"float32"), Tensor([1, 2],"float32"), Tensor([2697, 4],"float32"), Tensor([2697, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 29, 32],"float32"), Tensor([1, 12, 29, 32],"float32"), Tensor([1, 2],"float32"), Tensor([2784, 4],"float32"), Tensor([2784, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 29, 33],"float32"), Tensor([1, 12, 29, 33],"float32"), Tensor([1, 2],"float32"), Tensor([2871, 4],"float32"), Tensor([2871, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 29, 34],"float32"), Tensor([1, 12, 29, 34],"float32"), Tensor([1, 2],"float32"), Tensor([2958, 4],"float32"), Tensor([2958, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 192],"float32"), Tensor([1, 12, 296, 192],"float32"), Tensor([1, 2],"float32"), Tensor([170496, 4],"float32"), Tensor([170496, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 256],"float32"), Tensor([1, 12, 296, 256],"float32"), Tensor([1, 2],"float32"), Tensor([227328, 4],"float32"), Tensor([227328, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 264],"float32"), Tensor([1, 12, 296, 264],"float32"), Tensor([1, 2],"float32"), Tensor([234432, 4],"float32"), Tensor([234432, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 272],"float32"), Tensor([1, 12, 296, 272],"float32"), Tensor([1, 2],"float32"), Tensor([241536, 4],"float32"), Tensor([241536, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 280],"float32"), Tensor([1, 12, 296, 280],"float32"), Tensor([1, 2],"float32"), Tensor([248640, 4],"float32"), Tensor([248640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 288],"float32"), Tensor([1, 12, 296, 288],"float32"), Tensor([1, 2],"float32"), Tensor([255744, 4],"float32"), Tensor([255744, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 296],"float32"), Tensor([1, 12, 296, 296],"float32"), Tensor([1, 2],"float32"), Tensor([262848, 4],"float32"), Tensor([262848, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 304],"float32"), Tensor([1, 12, 296, 304],"float32"), Tensor([1, 2],"float32"), Tensor([269952, 4],"float32"), Tensor([269952, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 312],"float32"), Tensor([1, 12, 296, 312],"float32"), Tensor([1, 2],"float32"), Tensor([277056, 4],"float32"), Tensor([277056, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 320],"float32"), Tensor([1, 12, 296, 320],"float32"), Tensor([1, 2],"float32"), Tensor([284160, 4],"float32"), Tensor([284160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 328],"float32"), Tensor([1, 12, 296, 328],"float32"), Tensor([1, 2],"float32"), Tensor([291264, 4],"float32"), Tensor([291264, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 296, 336],"float32"), Tensor([1, 12, 296, 336],"float32"), Tensor([1, 2],"float32"), Tensor([298368, 4],"float32"), Tensor([298368, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 22],"float32"), Tensor([1, 12, 30, 22],"float32"), Tensor([1, 2],"float32"), Tensor([1980, 4],"float32"), Tensor([1980, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 26],"float32"), Tensor([1, 12, 30, 26],"float32"), Tensor([1, 2],"float32"), Tensor([2340, 4],"float32"), Tensor([2340, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 28],"float32"), Tensor([1, 12, 30, 28],"float32"), Tensor([1, 2],"float32"), Tensor([2520, 4],"float32"), Tensor([2520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 30],"float32"), Tensor([1, 12, 30, 30],"float32"), Tensor([1, 2],"float32"), Tensor([2700, 4],"float32"), Tensor([2700, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 31],"float32"), Tensor([1, 12, 30, 31],"float32"), Tensor([1, 2],"float32"), Tensor([2790, 4],"float32"), Tensor([2790, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 32],"float32"), Tensor([1, 12, 30, 32],"float32"), Tensor([1, 2],"float32"), Tensor([2880, 4],"float32"), Tensor([2880, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 34],"float32"), Tensor([1, 12, 30, 34],"float32"), Tensor([1, 2],"float32"), Tensor([3060, 4],"float32"), Tensor([3060, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 35],"float32"), Tensor([1, 12, 30, 35],"float32"), Tensor([1, 2],"float32"), Tensor([3150, 4],"float32"), Tensor([3150, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 36],"float32"), Tensor([1, 12, 30, 36],"float32"), Tensor([1, 2],"float32"), Tensor([3240, 4],"float32"), Tensor([3240, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 37],"float32"), Tensor([1, 12, 30, 37],"float32"), Tensor([1, 2],"float32"), Tensor([3330, 4],"float32"), Tensor([3330, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 38],"float32"), Tensor([1, 12, 30, 38],"float32"), Tensor([1, 2],"float32"), Tensor([3420, 4],"float32"), Tensor([3420, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 39],"float32"), Tensor([1, 12, 30, 39],"float32"), Tensor([1, 2],"float32"), Tensor([3510, 4],"float32"), Tensor([3510, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 40],"float32"), Tensor([1, 12, 30, 40],"float32"), Tensor([1, 2],"float32"), Tensor([3600, 4],"float32"), Tensor([3600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 41],"float32"), Tensor([1, 12, 30, 41],"float32"), Tensor([1, 2],"float32"), Tensor([3690, 4],"float32"), Tensor([3690, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 30, 42],"float32"), Tensor([1, 12, 30, 42],"float32"), Tensor([1, 2],"float32"), Tensor([3780, 4],"float32"), Tensor([3780, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 200],"float32"), Tensor([1, 12, 304, 200],"float32"), Tensor([1, 2],"float32"), Tensor([182400, 4],"float32"), Tensor([182400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 248],"float32"), Tensor([1, 12, 304, 248],"float32"), Tensor([1, 2],"float32"), Tensor([226176, 4],"float32"), Tensor([226176, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 256],"float32"), Tensor([1, 12, 304, 256],"float32"), Tensor([1, 2],"float32"), Tensor([233472, 4],"float32"), Tensor([233472, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 264],"float32"), Tensor([1, 12, 304, 264],"float32"), Tensor([1, 2],"float32"), Tensor([240768, 4],"float32"), Tensor([240768, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 272],"float32"), Tensor([1, 12, 304, 272],"float32"), Tensor([1, 2],"float32"), Tensor([248064, 4],"float32"), Tensor([248064, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 280],"float32"), Tensor([1, 12, 304, 280],"float32"), Tensor([1, 2],"float32"), Tensor([255360, 4],"float32"), Tensor([255360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 288],"float32"), Tensor([1, 12, 304, 288],"float32"), Tensor([1, 2],"float32"), Tensor([262656, 4],"float32"), Tensor([262656, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 296],"float32"), Tensor([1, 12, 304, 296],"float32"), Tensor([1, 2],"float32"), Tensor([269952, 4],"float32"), Tensor([269952, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 304],"float32"), Tensor([1, 12, 304, 304],"float32"), Tensor([1, 2],"float32"), Tensor([277248, 4],"float32"), Tensor([277248, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 320],"float32"), Tensor([1, 12, 304, 320],"float32"), Tensor([1, 2],"float32"), Tensor([291840, 4],"float32"), Tensor([291840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 328],"float32"), Tensor([1, 12, 304, 328],"float32"), Tensor([1, 2],"float32"), Tensor([299136, 4],"float32"), Tensor([299136, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 304, 336],"float32"), Tensor([1, 12, 304, 336],"float32"), Tensor([1, 2],"float32"), Tensor([306432, 4],"float32"), Tensor([306432, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 20],"float32"), Tensor([1, 12, 31, 20],"float32"), Tensor([1, 2],"float32"), Tensor([1860, 4],"float32"), Tensor([1860, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 23],"float32"), Tensor([1, 12, 31, 23],"float32"), Tensor([1, 2],"float32"), Tensor([2139, 4],"float32"), Tensor([2139, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 24],"float32"), Tensor([1, 12, 31, 24],"float32"), Tensor([1, 2],"float32"), Tensor([2232, 4],"float32"), Tensor([2232, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 27],"float32"), Tensor([1, 12, 31, 27],"float32"), Tensor([1, 2],"float32"), Tensor([2511, 4],"float32"), Tensor([2511, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 28],"float32"), Tensor([1, 12, 31, 28],"float32"), Tensor([1, 2],"float32"), Tensor([2604, 4],"float32"), Tensor([2604, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 31],"float32"), Tensor([1, 12, 31, 31],"float32"), Tensor([1, 2],"float32"), Tensor([2883, 4],"float32"), Tensor([2883, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 32],"float32"), Tensor([1, 12, 31, 32],"float32"), Tensor([1, 2],"float32"), Tensor([2976, 4],"float32"), Tensor([2976, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 33],"float32"), Tensor([1, 12, 31, 33],"float32"), Tensor([1, 2],"float32"), Tensor([3069, 4],"float32"), Tensor([3069, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 34],"float32"), Tensor([1, 12, 31, 34],"float32"), Tensor([1, 2],"float32"), Tensor([3162, 4],"float32"), Tensor([3162, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 35],"float32"), Tensor([1, 12, 31, 35],"float32"), Tensor([1, 2],"float32"), Tensor([3255, 4],"float32"), Tensor([3255, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 36],"float32"), Tensor([1, 12, 31, 36],"float32"), Tensor([1, 2],"float32"), Tensor([3348, 4],"float32"), Tensor([3348, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 37],"float32"), Tensor([1, 12, 31, 37],"float32"), Tensor([1, 2],"float32"), Tensor([3441, 4],"float32"), Tensor([3441, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 38],"float32"), Tensor([1, 12, 31, 38],"float32"), Tensor([1, 2],"float32"), Tensor([3534, 4],"float32"), Tensor([3534, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 40],"float32"), Tensor([1, 12, 31, 40],"float32"), Tensor([1, 2],"float32"), Tensor([3720, 4],"float32"), Tensor([3720, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 41],"float32"), Tensor([1, 12, 31, 41],"float32"), Tensor([1, 2],"float32"), Tensor([3813, 4],"float32"), Tensor([3813, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 31, 42],"float32"), Tensor([1, 12, 31, 42],"float32"), Tensor([1, 2],"float32"), Tensor([3906, 4],"float32"), Tensor([3906, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 312, 224],"float32"), Tensor([1, 12, 312, 224],"float32"), Tensor([1, 2],"float32"), Tensor([209664, 4],"float32"), Tensor([209664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 312, 248],"float32"), Tensor([1, 12, 312, 248],"float32"), Tensor([1, 2],"float32"), Tensor([232128, 4],"float32"), Tensor([232128, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 312, 280],"float32"), Tensor([1, 12, 312, 280],"float32"), Tensor([1, 2],"float32"), Tensor([262080, 4],"float32"), Tensor([262080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 312, 296],"float32"), Tensor([1, 12, 312, 296],"float32"), Tensor([1, 2],"float32"), Tensor([277056, 4],"float32"), Tensor([277056, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 312, 304],"float32"), Tensor([1, 12, 312, 304],"float32"), Tensor([1, 2],"float32"), Tensor([284544, 4],"float32"), Tensor([284544, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 21],"float32"), Tensor([1, 12, 32, 21],"float32"), Tensor([1, 2],"float32"), Tensor([2016, 4],"float32"), Tensor([2016, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 24],"float32"), Tensor([1, 12, 32, 24],"float32"), Tensor([1, 2],"float32"), Tensor([2304, 4],"float32"), Tensor([2304, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 28],"float32"), Tensor([1, 12, 32, 28],"float32"), Tensor([1, 2],"float32"), Tensor([2688, 4],"float32"), Tensor([2688, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 30],"float32"), Tensor([1, 12, 32, 30],"float32"), Tensor([1, 2],"float32"), Tensor([2880, 4],"float32"), Tensor([2880, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 31],"float32"), Tensor([1, 12, 32, 31],"float32"), Tensor([1, 2],"float32"), Tensor([2976, 4],"float32"), Tensor([2976, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 32],"float32"), Tensor([1, 12, 32, 32],"float32"), Tensor([1, 2],"float32"), Tensor([3072, 4],"float32"), Tensor([3072, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 33],"float32"), Tensor([1, 12, 32, 33],"float32"), Tensor([1, 2],"float32"), Tensor([3168, 4],"float32"), Tensor([3168, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 34],"float32"), Tensor([1, 12, 32, 34],"float32"), Tensor([1, 2],"float32"), Tensor([3264, 4],"float32"), Tensor([3264, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 35],"float32"), Tensor([1, 12, 32, 35],"float32"), Tensor([1, 2],"float32"), Tensor([3360, 4],"float32"), Tensor([3360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 36],"float32"), Tensor([1, 12, 32, 36],"float32"), Tensor([1, 2],"float32"), Tensor([3456, 4],"float32"), Tensor([3456, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 37],"float32"), Tensor([1, 12, 32, 37],"float32"), Tensor([1, 2],"float32"), Tensor([3552, 4],"float32"), Tensor([3552, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 38],"float32"), Tensor([1, 12, 32, 38],"float32"), Tensor([1, 2],"float32"), Tensor([3648, 4],"float32"), Tensor([3648, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 39],"float32"), Tensor([1, 12, 32, 39],"float32"), Tensor([1, 2],"float32"), Tensor([3744, 4],"float32"), Tensor([3744, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 40],"float32"), Tensor([1, 12, 32, 40],"float32"), Tensor([1, 2],"float32"), Tensor([3840, 4],"float32"), Tensor([3840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 41],"float32"), Tensor([1, 12, 32, 41],"float32"), Tensor([1, 2],"float32"), Tensor([3936, 4],"float32"), Tensor([3936, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 32, 42],"float32"), Tensor([1, 12, 32, 42],"float32"), Tensor([1, 2],"float32"), Tensor([4032, 4],"float32"), Tensor([4032, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 320, 256],"float32"), Tensor([1, 12, 320, 256],"float32"), Tensor([1, 2],"float32"), Tensor([245760, 4],"float32"), Tensor([245760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 320, 272],"float32"), Tensor([1, 12, 320, 272],"float32"), Tensor([1, 2],"float32"), Tensor([261120, 4],"float32"), Tensor([261120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 320, 288],"float32"), Tensor([1, 12, 320, 288],"float32"), Tensor([1, 2],"float32"), Tensor([276480, 4],"float32"), Tensor([276480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 320, 304],"float32"), Tensor([1, 12, 320, 304],"float32"), Tensor([1, 2],"float32"), Tensor([291840, 4],"float32"), Tensor([291840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 320, 336],"float32"), Tensor([1, 12, 320, 336],"float32"), Tensor([1, 2],"float32"), Tensor([322560, 4],"float32"), Tensor([322560, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 328, 248],"float32"), Tensor([1, 12, 328, 248],"float32"), Tensor([1, 2],"float32"), Tensor([244032, 4],"float32"), Tensor([244032, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 328, 336],"float32"), Tensor([1, 12, 328, 336],"float32"), Tensor([1, 2],"float32"), Tensor([330624, 4],"float32"), Tensor([330624, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 24],"float32"), Tensor([1, 12, 33, 24],"float32"), Tensor([1, 2],"float32"), Tensor([2376, 4],"float32"), Tensor([2376, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 25],"float32"), Tensor([1, 12, 33, 25],"float32"), Tensor([1, 2],"float32"), Tensor([2475, 4],"float32"), Tensor([2475, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 27],"float32"), Tensor([1, 12, 33, 27],"float32"), Tensor([1, 2],"float32"), Tensor([2673, 4],"float32"), Tensor([2673, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 31],"float32"), Tensor([1, 12, 33, 31],"float32"), Tensor([1, 2],"float32"), Tensor([3069, 4],"float32"), Tensor([3069, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 32],"float32"), Tensor([1, 12, 33, 32],"float32"), Tensor([1, 2],"float32"), Tensor([3168, 4],"float32"), Tensor([3168, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 33],"float32"), Tensor([1, 12, 33, 33],"float32"), Tensor([1, 2],"float32"), Tensor([3267, 4],"float32"), Tensor([3267, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 34],"float32"), Tensor([1, 12, 33, 34],"float32"), Tensor([1, 2],"float32"), Tensor([3366, 4],"float32"), Tensor([3366, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 35],"float32"), Tensor([1, 12, 33, 35],"float32"), Tensor([1, 2],"float32"), Tensor([3465, 4],"float32"), Tensor([3465, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 36],"float32"), Tensor([1, 12, 33, 36],"float32"), Tensor([1, 2],"float32"), Tensor([3564, 4],"float32"), Tensor([3564, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 37],"float32"), Tensor([1, 12, 33, 37],"float32"), Tensor([1, 2],"float32"), Tensor([3663, 4],"float32"), Tensor([3663, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 38],"float32"), Tensor([1, 12, 33, 38],"float32"), Tensor([1, 2],"float32"), Tensor([3762, 4],"float32"), Tensor([3762, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 39],"float32"), Tensor([1, 12, 33, 39],"float32"), Tensor([1, 2],"float32"), Tensor([3861, 4],"float32"), Tensor([3861, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 40],"float32"), Tensor([1, 12, 33, 40],"float32"), Tensor([1, 2],"float32"), Tensor([3960, 4],"float32"), Tensor([3960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 41],"float32"), Tensor([1, 12, 33, 41],"float32"), Tensor([1, 2],"float32"), Tensor([4059, 4],"float32"), Tensor([4059, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 33, 42],"float32"), Tensor([1, 12, 33, 42],"float32"), Tensor([1, 2],"float32"), Tensor([4158, 4],"float32"), Tensor([4158, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 336, 240],"float32"), Tensor([1, 12, 336, 240],"float32"), Tensor([1, 2],"float32"), Tensor([241920, 4],"float32"), Tensor([241920, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 336, 248],"float32"), Tensor([1, 12, 336, 248],"float32"), Tensor([1, 2],"float32"), Tensor([249984, 4],"float32"), Tensor([249984, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 336, 256],"float32"), Tensor([1, 12, 336, 256],"float32"), Tensor([1, 2],"float32"), Tensor([258048, 4],"float32"), Tensor([258048, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 336, 264],"float32"), Tensor([1, 12, 336, 264],"float32"), Tensor([1, 2],"float32"), Tensor([266112, 4],"float32"), Tensor([266112, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 336, 280],"float32"), Tensor([1, 12, 336, 280],"float32"), Tensor([1, 2],"float32"), Tensor([282240, 4],"float32"), Tensor([282240, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 336, 288],"float32"), Tensor([1, 12, 336, 288],"float32"), Tensor([1, 2],"float32"), Tensor([290304, 4],"float32"), Tensor([290304, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 336, 304],"float32"), Tensor([1, 12, 336, 304],"float32"), Tensor([1, 2],"float32"), Tensor([306432, 4],"float32"), Tensor([306432, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 336, 336],"float32"), Tensor([1, 12, 336, 336],"float32"), Tensor([1, 2],"float32"), Tensor([338688, 4],"float32"), Tensor([338688, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 22],"float32"), Tensor([1, 12, 34, 22],"float32"), Tensor([1, 2],"float32"), Tensor([2244, 4],"float32"), Tensor([2244, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 25],"float32"), Tensor([1, 12, 34, 25],"float32"), Tensor([1, 2],"float32"), Tensor([2550, 4],"float32"), Tensor([2550, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 27],"float32"), Tensor([1, 12, 34, 27],"float32"), Tensor([1, 2],"float32"), Tensor([2754, 4],"float32"), Tensor([2754, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 28],"float32"), Tensor([1, 12, 34, 28],"float32"), Tensor([1, 2],"float32"), Tensor([2856, 4],"float32"), Tensor([2856, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 29],"float32"), Tensor([1, 12, 34, 29],"float32"), Tensor([1, 2],"float32"), Tensor([2958, 4],"float32"), Tensor([2958, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 30],"float32"), Tensor([1, 12, 34, 30],"float32"), Tensor([1, 2],"float32"), Tensor([3060, 4],"float32"), Tensor([3060, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 31],"float32"), Tensor([1, 12, 34, 31],"float32"), Tensor([1, 2],"float32"), Tensor([3162, 4],"float32"), Tensor([3162, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 32],"float32"), Tensor([1, 12, 34, 32],"float32"), Tensor([1, 2],"float32"), Tensor([3264, 4],"float32"), Tensor([3264, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 34],"float32"), Tensor([1, 12, 34, 34],"float32"), Tensor([1, 2],"float32"), Tensor([3468, 4],"float32"), Tensor([3468, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 35],"float32"), Tensor([1, 12, 34, 35],"float32"), Tensor([1, 2],"float32"), Tensor([3570, 4],"float32"), Tensor([3570, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 36],"float32"), Tensor([1, 12, 34, 36],"float32"), Tensor([1, 2],"float32"), Tensor([3672, 4],"float32"), Tensor([3672, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 37],"float32"), Tensor([1, 12, 34, 37],"float32"), Tensor([1, 2],"float32"), Tensor([3774, 4],"float32"), Tensor([3774, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 38],"float32"), Tensor([1, 12, 34, 38],"float32"), Tensor([1, 2],"float32"), Tensor([3876, 4],"float32"), Tensor([3876, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 40],"float32"), Tensor([1, 12, 34, 40],"float32"), Tensor([1, 2],"float32"), Tensor([4080, 4],"float32"), Tensor([4080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 41],"float32"), Tensor([1, 12, 34, 41],"float32"), Tensor([1, 2],"float32"), Tensor([4182, 4],"float32"), Tensor([4182, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 34, 42],"float32"), Tensor([1, 12, 34, 42],"float32"), Tensor([1, 2],"float32"), Tensor([4284, 4],"float32"), Tensor([4284, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 23],"float32"), Tensor([1, 12, 35, 23],"float32"), Tensor([1, 2],"float32"), Tensor([2415, 4],"float32"), Tensor([2415, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 24],"float32"), Tensor([1, 12, 35, 24],"float32"), Tensor([1, 2],"float32"), Tensor([2520, 4],"float32"), Tensor([2520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 28],"float32"), Tensor([1, 12, 35, 28],"float32"), Tensor([1, 2],"float32"), Tensor([2940, 4],"float32"), Tensor([2940, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 30],"float32"), Tensor([1, 12, 35, 30],"float32"), Tensor([1, 2],"float32"), Tensor([3150, 4],"float32"), Tensor([3150, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 31],"float32"), Tensor([1, 12, 35, 31],"float32"), Tensor([1, 2],"float32"), Tensor([3255, 4],"float32"), Tensor([3255, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 32],"float32"), Tensor([1, 12, 35, 32],"float32"), Tensor([1, 2],"float32"), Tensor([3360, 4],"float32"), Tensor([3360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 33],"float32"), Tensor([1, 12, 35, 33],"float32"), Tensor([1, 2],"float32"), Tensor([3465, 4],"float32"), Tensor([3465, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 34],"float32"), Tensor([1, 12, 35, 34],"float32"), Tensor([1, 2],"float32"), Tensor([3570, 4],"float32"), Tensor([3570, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 35],"float32"), Tensor([1, 12, 35, 35],"float32"), Tensor([1, 2],"float32"), Tensor([3675, 4],"float32"), Tensor([3675, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 36],"float32"), Tensor([1, 12, 35, 36],"float32"), Tensor([1, 2],"float32"), Tensor([3780, 4],"float32"), Tensor([3780, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 37],"float32"), Tensor([1, 12, 35, 37],"float32"), Tensor([1, 2],"float32"), Tensor([3885, 4],"float32"), Tensor([3885, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 38],"float32"), Tensor([1, 12, 35, 38],"float32"), Tensor([1, 2],"float32"), Tensor([3990, 4],"float32"), Tensor([3990, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 39],"float32"), Tensor([1, 12, 35, 39],"float32"), Tensor([1, 2],"float32"), Tensor([4095, 4],"float32"), Tensor([4095, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 41],"float32"), Tensor([1, 12, 35, 41],"float32"), Tensor([1, 2],"float32"), Tensor([4305, 4],"float32"), Tensor([4305, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 35, 42],"float32"), Tensor([1, 12, 35, 42],"float32"), Tensor([1, 2],"float32"), Tensor([4410, 4],"float32"), Tensor([4410, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 24],"float32"), Tensor([1, 12, 36, 24],"float32"), Tensor([1, 2],"float32"), Tensor([2592, 4],"float32"), Tensor([2592, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 25],"float32"), Tensor([1, 12, 36, 25],"float32"), Tensor([1, 2],"float32"), Tensor([2700, 4],"float32"), Tensor([2700, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 27],"float32"), Tensor([1, 12, 36, 27],"float32"), Tensor([1, 2],"float32"), Tensor([2916, 4],"float32"), Tensor([2916, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 28],"float32"), Tensor([1, 12, 36, 28],"float32"), Tensor([1, 2],"float32"), Tensor([3024, 4],"float32"), Tensor([3024, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 29],"float32"), Tensor([1, 12, 36, 29],"float32"), Tensor([1, 2],"float32"), Tensor([3132, 4],"float32"), Tensor([3132, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 30],"float32"), Tensor([1, 12, 36, 30],"float32"), Tensor([1, 2],"float32"), Tensor([3240, 4],"float32"), Tensor([3240, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 31],"float32"), Tensor([1, 12, 36, 31],"float32"), Tensor([1, 2],"float32"), Tensor([3348, 4],"float32"), Tensor([3348, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 32],"float32"), Tensor([1, 12, 36, 32],"float32"), Tensor([1, 2],"float32"), Tensor([3456, 4],"float32"), Tensor([3456, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 33],"float32"), Tensor([1, 12, 36, 33],"float32"), Tensor([1, 2],"float32"), Tensor([3564, 4],"float32"), Tensor([3564, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 34],"float32"), Tensor([1, 12, 36, 34],"float32"), Tensor([1, 2],"float32"), Tensor([3672, 4],"float32"), Tensor([3672, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 35],"float32"), Tensor([1, 12, 36, 35],"float32"), Tensor([1, 2],"float32"), Tensor([3780, 4],"float32"), Tensor([3780, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 36],"float32"), Tensor([1, 12, 36, 36],"float32"), Tensor([1, 2],"float32"), Tensor([3888, 4],"float32"), Tensor([3888, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 37],"float32"), Tensor([1, 12, 36, 37],"float32"), Tensor([1, 2],"float32"), Tensor([3996, 4],"float32"), Tensor([3996, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 38],"float32"), Tensor([1, 12, 36, 38],"float32"), Tensor([1, 2],"float32"), Tensor([4104, 4],"float32"), Tensor([4104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 39],"float32"), Tensor([1, 12, 36, 39],"float32"), Tensor([1, 2],"float32"), Tensor([4212, 4],"float32"), Tensor([4212, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 40],"float32"), Tensor([1, 12, 36, 40],"float32"), Tensor([1, 2],"float32"), Tensor([4320, 4],"float32"), Tensor([4320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 41],"float32"), Tensor([1, 12, 36, 41],"float32"), Tensor([1, 2],"float32"), Tensor([4428, 4],"float32"), Tensor([4428, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 36, 42],"float32"), Tensor([1, 12, 36, 42],"float32"), Tensor([1, 2],"float32"), Tensor([4536, 4],"float32"), Tensor([4536, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 24],"float32"), Tensor([1, 12, 37, 24],"float32"), Tensor([1, 2],"float32"), Tensor([2664, 4],"float32"), Tensor([2664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 32],"float32"), Tensor([1, 12, 37, 32],"float32"), Tensor([1, 2],"float32"), Tensor([3552, 4],"float32"), Tensor([3552, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 33],"float32"), Tensor([1, 12, 37, 33],"float32"), Tensor([1, 2],"float32"), Tensor([3663, 4],"float32"), Tensor([3663, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 34],"float32"), Tensor([1, 12, 37, 34],"float32"), Tensor([1, 2],"float32"), Tensor([3774, 4],"float32"), Tensor([3774, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 35],"float32"), Tensor([1, 12, 37, 35],"float32"), Tensor([1, 2],"float32"), Tensor([3885, 4],"float32"), Tensor([3885, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 36],"float32"), Tensor([1, 12, 37, 36],"float32"), Tensor([1, 2],"float32"), Tensor([3996, 4],"float32"), Tensor([3996, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 37],"float32"), Tensor([1, 12, 37, 37],"float32"), Tensor([1, 2],"float32"), Tensor([4107, 4],"float32"), Tensor([4107, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 38],"float32"), Tensor([1, 12, 37, 38],"float32"), Tensor([1, 2],"float32"), Tensor([4218, 4],"float32"), Tensor([4218, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 39],"float32"), Tensor([1, 12, 37, 39],"float32"), Tensor([1, 2],"float32"), Tensor([4329, 4],"float32"), Tensor([4329, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 40],"float32"), Tensor([1, 12, 37, 40],"float32"), Tensor([1, 2],"float32"), Tensor([4440, 4],"float32"), Tensor([4440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 41],"float32"), Tensor([1, 12, 37, 41],"float32"), Tensor([1, 2],"float32"), Tensor([4551, 4],"float32"), Tensor([4551, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 37, 42],"float32"), Tensor([1, 12, 37, 42],"float32"), Tensor([1, 2],"float32"), Tensor([4662, 4],"float32"), Tensor([4662, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 25],"float32"), Tensor([1, 12, 38, 25],"float32"), Tensor([1, 2],"float32"), Tensor([2850, 4],"float32"), Tensor([2850, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 31],"float32"), Tensor([1, 12, 38, 31],"float32"), Tensor([1, 2],"float32"), Tensor([3534, 4],"float32"), Tensor([3534, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 32],"float32"), Tensor([1, 12, 38, 32],"float32"), Tensor([1, 2],"float32"), Tensor([3648, 4],"float32"), Tensor([3648, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 33],"float32"), Tensor([1, 12, 38, 33],"float32"), Tensor([1, 2],"float32"), Tensor([3762, 4],"float32"), Tensor([3762, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 34],"float32"), Tensor([1, 12, 38, 34],"float32"), Tensor([1, 2],"float32"), Tensor([3876, 4],"float32"), Tensor([3876, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 35],"float32"), Tensor([1, 12, 38, 35],"float32"), Tensor([1, 2],"float32"), Tensor([3990, 4],"float32"), Tensor([3990, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 36],"float32"), Tensor([1, 12, 38, 36],"float32"), Tensor([1, 2],"float32"), Tensor([4104, 4],"float32"), Tensor([4104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 37],"float32"), Tensor([1, 12, 38, 37],"float32"), Tensor([1, 2],"float32"), Tensor([4218, 4],"float32"), Tensor([4218, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 38],"float32"), Tensor([1, 12, 38, 38],"float32"), Tensor([1, 2],"float32"), Tensor([4332, 4],"float32"), Tensor([4332, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 40],"float32"), Tensor([1, 12, 38, 40],"float32"), Tensor([1, 2],"float32"), Tensor([4560, 4],"float32"), Tensor([4560, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 41],"float32"), Tensor([1, 12, 38, 41],"float32"), Tensor([1, 2],"float32"), Tensor([4674, 4],"float32"), Tensor([4674, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 38, 42],"float32"), Tensor([1, 12, 38, 42],"float32"), Tensor([1, 2],"float32"), Tensor([4788, 4],"float32"), Tensor([4788, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 39, 28],"float32"), Tensor([1, 12, 39, 28],"float32"), Tensor([1, 2],"float32"), Tensor([3276, 4],"float32"), Tensor([3276, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 39, 31],"float32"), Tensor([1, 12, 39, 31],"float32"), Tensor([1, 2],"float32"), Tensor([3627, 4],"float32"), Tensor([3627, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 39, 35],"float32"), Tensor([1, 12, 39, 35],"float32"), Tensor([1, 2],"float32"), Tensor([4095, 4],"float32"), Tensor([4095, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 39, 37],"float32"), Tensor([1, 12, 39, 37],"float32"), Tensor([1, 2],"float32"), Tensor([4329, 4],"float32"), Tensor([4329, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 39, 38],"float32"), Tensor([1, 12, 39, 38],"float32"), Tensor([1, 2],"float32"), Tensor([4446, 4],"float32"), Tensor([4446, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 40, 32],"float32"), Tensor([1, 12, 40, 32],"float32"), Tensor([1, 2],"float32"), Tensor([3840, 4],"float32"), Tensor([3840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 40, 34],"float32"), Tensor([1, 12, 40, 34],"float32"), Tensor([1, 2],"float32"), Tensor([4080, 4],"float32"), Tensor([4080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 40, 36],"float32"), Tensor([1, 12, 40, 36],"float32"), Tensor([1, 2],"float32"), Tensor([4320, 4],"float32"), Tensor([4320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 40, 38],"float32"), Tensor([1, 12, 40, 38],"float32"), Tensor([1, 2],"float32"), Tensor([4560, 4],"float32"), Tensor([4560, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 40, 42],"float32"), Tensor([1, 12, 40, 42],"float32"), Tensor([1, 2],"float32"), Tensor([5040, 4],"float32"), Tensor([5040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 40, 54],"float32"), Tensor([1, 12, 40, 54],"float32"), Tensor([1, 2],"float32"), Tensor([6480, 4],"float32"), Tensor([6480, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 40, 60],"float32"), Tensor([1, 12, 40, 60],"float32"), Tensor([1, 2],"float32"), Tensor([7200, 4],"float32"), Tensor([7200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 40, 62],"float32"), Tensor([1, 12, 40, 62],"float32"), Tensor([1, 2],"float32"), Tensor([7440, 4],"float32"), Tensor([7440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 41, 31],"float32"), Tensor([1, 12, 41, 31],"float32"), Tensor([1, 2],"float32"), Tensor([3813, 4],"float32"), Tensor([3813, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 41, 42],"float32"), Tensor([1, 12, 41, 42],"float32"), Tensor([1, 2],"float32"), Tensor([5166, 4],"float32"), Tensor([5166, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 30],"float32"), Tensor([1, 12, 42, 30],"float32"), Tensor([1, 2],"float32"), Tensor([3780, 4],"float32"), Tensor([3780, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 31],"float32"), Tensor([1, 12, 42, 31],"float32"), Tensor([1, 2],"float32"), Tensor([3906, 4],"float32"), Tensor([3906, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 32],"float32"), Tensor([1, 12, 42, 32],"float32"), Tensor([1, 2],"float32"), Tensor([4032, 4],"float32"), Tensor([4032, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 33],"float32"), Tensor([1, 12, 42, 33],"float32"), Tensor([1, 2],"float32"), Tensor([4158, 4],"float32"), Tensor([4158, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 35],"float32"), Tensor([1, 12, 42, 35],"float32"), Tensor([1, 2],"float32"), Tensor([4410, 4],"float32"), Tensor([4410, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 36],"float32"), Tensor([1, 12, 42, 36],"float32"), Tensor([1, 2],"float32"), Tensor([4536, 4],"float32"), Tensor([4536, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 38],"float32"), Tensor([1, 12, 42, 38],"float32"), Tensor([1, 2],"float32"), Tensor([4788, 4],"float32"), Tensor([4788, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 42],"float32"), Tensor([1, 12, 42, 42],"float32"), Tensor([1, 2],"float32"), Tensor([5292, 4],"float32"), Tensor([5292, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 64],"float32"), Tensor([1, 12, 42, 64],"float32"), Tensor([1, 2],"float32"), Tensor([8064, 4],"float32"), Tensor([8064, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 42, 66],"float32"), Tensor([1, 12, 42, 66],"float32"), Tensor([1, 2],"float32"), Tensor([8316, 4],"float32"), Tensor([8316, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 44, 60],"float32"), Tensor([1, 12, 44, 60],"float32"), Tensor([1, 2],"float32"), Tensor([7920, 4],"float32"), Tensor([7920, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 44, 66],"float32"), Tensor([1, 12, 44, 66],"float32"), Tensor([1, 2],"float32"), Tensor([8712, 4],"float32"), Tensor([8712, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 44, 68],"float32"), Tensor([1, 12, 44, 68],"float32"), Tensor([1, 2],"float32"), Tensor([8976, 4],"float32"), Tensor([8976, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 44, 70],"float32"), Tensor([1, 12, 44, 70],"float32"), Tensor([1, 2],"float32"), Tensor([9240, 4],"float32"), Tensor([9240, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 44, 84],"float32"), Tensor([1, 12, 44, 84],"float32"), Tensor([1, 2],"float32"), Tensor([11088, 4],"float32"), Tensor([11088, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 62],"float32"), Tensor([1, 12, 46, 62],"float32"), Tensor([1, 2],"float32"), Tensor([8556, 4],"float32"), Tensor([8556, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 64],"float32"), Tensor([1, 12, 46, 64],"float32"), Tensor([1, 2],"float32"), Tensor([8832, 4],"float32"), Tensor([8832, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 68],"float32"), Tensor([1, 12, 46, 68],"float32"), Tensor([1, 2],"float32"), Tensor([9384, 4],"float32"), Tensor([9384, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 70],"float32"), Tensor([1, 12, 46, 70],"float32"), Tensor([1, 2],"float32"), Tensor([9660, 4],"float32"), Tensor([9660, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 74],"float32"), Tensor([1, 12, 46, 74],"float32"), Tensor([1, 2],"float32"), Tensor([10212, 4],"float32"), Tensor([10212, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 76],"float32"), Tensor([1, 12, 46, 76],"float32"), Tensor([1, 2],"float32"), Tensor([10488, 4],"float32"), Tensor([10488, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 78],"float32"), Tensor([1, 12, 46, 78],"float32"), Tensor([1, 2],"float32"), Tensor([10764, 4],"float32"), Tensor([10764, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 80],"float32"), Tensor([1, 12, 46, 80],"float32"), Tensor([1, 2],"float32"), Tensor([11040, 4],"float32"), Tensor([11040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 82],"float32"), Tensor([1, 12, 46, 82],"float32"), Tensor([1, 2],"float32"), Tensor([11316, 4],"float32"), Tensor([11316, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 46, 84],"float32"), Tensor([1, 12, 46, 84],"float32"), Tensor([1, 2],"float32"), Tensor([11592, 4],"float32"), Tensor([11592, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 48, 62],"float32"), Tensor([1, 12, 48, 62],"float32"), Tensor([1, 2],"float32"), Tensor([8928, 4],"float32"), Tensor([8928, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 48, 64],"float32"), Tensor([1, 12, 48, 64],"float32"), Tensor([1, 2],"float32"), Tensor([9216, 4],"float32"), Tensor([9216, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 48, 66],"float32"), Tensor([1, 12, 48, 66],"float32"), Tensor([1, 2],"float32"), Tensor([9504, 4],"float32"), Tensor([9504, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 48, 68],"float32"), Tensor([1, 12, 48, 68],"float32"), Tensor([1, 2],"float32"), Tensor([9792, 4],"float32"), Tensor([9792, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 48, 70],"float32"), Tensor([1, 12, 48, 70],"float32"), Tensor([1, 2],"float32"), Tensor([10080, 4],"float32"), Tensor([10080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 48, 72],"float32"), Tensor([1, 12, 48, 72],"float32"), Tensor([1, 2],"float32"), Tensor([10368, 4],"float32"), Tensor([10368, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 48, 74],"float32"), Tensor([1, 12, 48, 74],"float32"), Tensor([1, 2],"float32"), Tensor([10656, 4],"float32"), Tensor([10656, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 48, 76],"float32"), Tensor([1, 12, 48, 76],"float32"), Tensor([1, 2],"float32"), Tensor([10944, 4],"float32"), Tensor([10944, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 48, 84],"float32"), Tensor([1, 12, 48, 84],"float32"), Tensor([1, 2],"float32"), Tensor([12096, 4],"float32"), Tensor([12096, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 60],"float32"), Tensor([1, 12, 50, 60],"float32"), Tensor([1, 2],"float32"), Tensor([9000, 4],"float32"), Tensor([9000, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 62],"float32"), Tensor([1, 12, 50, 62],"float32"), Tensor([1, 2],"float32"), Tensor([9300, 4],"float32"), Tensor([9300, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 64],"float32"), Tensor([1, 12, 50, 64],"float32"), Tensor([1, 2],"float32"), Tensor([9600, 4],"float32"), Tensor([9600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 68],"float32"), Tensor([1, 12, 50, 68],"float32"), Tensor([1, 2],"float32"), Tensor([10200, 4],"float32"), Tensor([10200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 70],"float32"), Tensor([1, 12, 50, 70],"float32"), Tensor([1, 2],"float32"), Tensor([10500, 4],"float32"), Tensor([10500, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 72],"float32"), Tensor([1, 12, 50, 72],"float32"), Tensor([1, 2],"float32"), Tensor([10800, 4],"float32"), Tensor([10800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 74],"float32"), Tensor([1, 12, 50, 74],"float32"), Tensor([1, 2],"float32"), Tensor([11100, 4],"float32"), Tensor([11100, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 76],"float32"), Tensor([1, 12, 50, 76],"float32"), Tensor([1, 2],"float32"), Tensor([11400, 4],"float32"), Tensor([11400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 78],"float32"), Tensor([1, 12, 50, 78],"float32"), Tensor([1, 2],"float32"), Tensor([11700, 4],"float32"), Tensor([11700, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 80],"float32"), Tensor([1, 12, 50, 80],"float32"), Tensor([1, 2],"float32"), Tensor([12000, 4],"float32"), Tensor([12000, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 82],"float32"), Tensor([1, 12, 50, 82],"float32"), Tensor([1, 2],"float32"), Tensor([12300, 4],"float32"), Tensor([12300, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 50, 84],"float32"), Tensor([1, 12, 50, 84],"float32"), Tensor([1, 2],"float32"), Tensor([12600, 4],"float32"), Tensor([12600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 52, 72],"float32"), Tensor([1, 12, 52, 72],"float32"), Tensor([1, 2],"float32"), Tensor([11232, 4],"float32"), Tensor([11232, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 52, 74],"float32"), Tensor([1, 12, 52, 74],"float32"), Tensor([1, 2],"float32"), Tensor([11544, 4],"float32"), Tensor([11544, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 52, 76],"float32"), Tensor([1, 12, 52, 76],"float32"), Tensor([1, 2],"float32"), Tensor([11856, 4],"float32"), Tensor([11856, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 52, 82],"float32"), Tensor([1, 12, 52, 82],"float32"), Tensor([1, 2],"float32"), Tensor([12792, 4],"float32"), Tensor([12792, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 52, 84],"float32"), Tensor([1, 12, 52, 84],"float32"), Tensor([1, 2],"float32"), Tensor([13104, 4],"float32"), Tensor([13104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 56],"float32"), Tensor([1, 12, 54, 56],"float32"), Tensor([1, 2],"float32"), Tensor([9072, 4],"float32"), Tensor([9072, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 62],"float32"), Tensor([1, 12, 54, 62],"float32"), Tensor([1, 2],"float32"), Tensor([10044, 4],"float32"), Tensor([10044, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 64],"float32"), Tensor([1, 12, 54, 64],"float32"), Tensor([1, 2],"float32"), Tensor([10368, 4],"float32"), Tensor([10368, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 66],"float32"), Tensor([1, 12, 54, 66],"float32"), Tensor([1, 2],"float32"), Tensor([10692, 4],"float32"), Tensor([10692, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 68],"float32"), Tensor([1, 12, 54, 68],"float32"), Tensor([1, 2],"float32"), Tensor([11016, 4],"float32"), Tensor([11016, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 70],"float32"), Tensor([1, 12, 54, 70],"float32"), Tensor([1, 2],"float32"), Tensor([11340, 4],"float32"), Tensor([11340, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 72],"float32"), Tensor([1, 12, 54, 72],"float32"), Tensor([1, 2],"float32"), Tensor([11664, 4],"float32"), Tensor([11664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 76],"float32"), Tensor([1, 12, 54, 76],"float32"), Tensor([1, 2],"float32"), Tensor([12312, 4],"float32"), Tensor([12312, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 78],"float32"), Tensor([1, 12, 54, 78],"float32"), Tensor([1, 2],"float32"), Tensor([12636, 4],"float32"), Tensor([12636, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 82],"float32"), Tensor([1, 12, 54, 82],"float32"), Tensor([1, 2],"float32"), Tensor([13284, 4],"float32"), Tensor([13284, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 54, 84],"float32"), Tensor([1, 12, 54, 84],"float32"), Tensor([1, 2],"float32"), Tensor([13608, 4],"float32"), Tensor([13608, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 42],"float32"), Tensor([1, 12, 56, 42],"float32"), Tensor([1, 2],"float32"), Tensor([7056, 4],"float32"), Tensor([7056, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 60],"float32"), Tensor([1, 12, 56, 60],"float32"), Tensor([1, 2],"float32"), Tensor([10080, 4],"float32"), Tensor([10080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 62],"float32"), Tensor([1, 12, 56, 62],"float32"), Tensor([1, 2],"float32"), Tensor([10416, 4],"float32"), Tensor([10416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 64],"float32"), Tensor([1, 12, 56, 64],"float32"), Tensor([1, 2],"float32"), Tensor([10752, 4],"float32"), Tensor([10752, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 66],"float32"), Tensor([1, 12, 56, 66],"float32"), Tensor([1, 2],"float32"), Tensor([11088, 4],"float32"), Tensor([11088, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 68],"float32"), Tensor([1, 12, 56, 68],"float32"), Tensor([1, 2],"float32"), Tensor([11424, 4],"float32"), Tensor([11424, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 70],"float32"), Tensor([1, 12, 56, 70],"float32"), Tensor([1, 2],"float32"), Tensor([11760, 4],"float32"), Tensor([11760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 72],"float32"), Tensor([1, 12, 56, 72],"float32"), Tensor([1, 2],"float32"), Tensor([12096, 4],"float32"), Tensor([12096, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 74],"float32"), Tensor([1, 12, 56, 74],"float32"), Tensor([1, 2],"float32"), Tensor([12432, 4],"float32"), Tensor([12432, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 76],"float32"), Tensor([1, 12, 56, 76],"float32"), Tensor([1, 2],"float32"), Tensor([12768, 4],"float32"), Tensor([12768, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 78],"float32"), Tensor([1, 12, 56, 78],"float32"), Tensor([1, 2],"float32"), Tensor([13104, 4],"float32"), Tensor([13104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 80],"float32"), Tensor([1, 12, 56, 80],"float32"), Tensor([1, 2],"float32"), Tensor([13440, 4],"float32"), Tensor([13440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 56, 82],"float32"), Tensor([1, 12, 56, 82],"float32"), Tensor([1, 2],"float32"), Tensor([13776, 4],"float32"), Tensor([13776, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 58, 62],"float32"), Tensor([1, 12, 58, 62],"float32"), Tensor([1, 2],"float32"), Tensor([10788, 4],"float32"), Tensor([10788, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 58, 64],"float32"), Tensor([1, 12, 58, 64],"float32"), Tensor([1, 2],"float32"), Tensor([11136, 4],"float32"), Tensor([11136, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 58, 66],"float32"), Tensor([1, 12, 58, 66],"float32"), Tensor([1, 2],"float32"), Tensor([11484, 4],"float32"), Tensor([11484, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 58, 68],"float32"), Tensor([1, 12, 58, 68],"float32"), Tensor([1, 2],"float32"), Tensor([11832, 4],"float32"), Tensor([11832, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 44],"float32"), Tensor([1, 12, 60, 44],"float32"), Tensor([1, 2],"float32"), Tensor([7920, 4],"float32"), Tensor([7920, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 52],"float32"), Tensor([1, 12, 60, 52],"float32"), Tensor([1, 2],"float32"), Tensor([9360, 4],"float32"), Tensor([9360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 56],"float32"), Tensor([1, 12, 60, 56],"float32"), Tensor([1, 2],"float32"), Tensor([10080, 4],"float32"), Tensor([10080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 60],"float32"), Tensor([1, 12, 60, 60],"float32"), Tensor([1, 2],"float32"), Tensor([10800, 4],"float32"), Tensor([10800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 62],"float32"), Tensor([1, 12, 60, 62],"float32"), Tensor([1, 2],"float32"), Tensor([11160, 4],"float32"), Tensor([11160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 64],"float32"), Tensor([1, 12, 60, 64],"float32"), Tensor([1, 2],"float32"), Tensor([11520, 4],"float32"), Tensor([11520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 68],"float32"), Tensor([1, 12, 60, 68],"float32"), Tensor([1, 2],"float32"), Tensor([12240, 4],"float32"), Tensor([12240, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 70],"float32"), Tensor([1, 12, 60, 70],"float32"), Tensor([1, 2],"float32"), Tensor([12600, 4],"float32"), Tensor([12600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 72],"float32"), Tensor([1, 12, 60, 72],"float32"), Tensor([1, 2],"float32"), Tensor([12960, 4],"float32"), Tensor([12960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 74],"float32"), Tensor([1, 12, 60, 74],"float32"), Tensor([1, 2],"float32"), Tensor([13320, 4],"float32"), Tensor([13320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 76],"float32"), Tensor([1, 12, 60, 76],"float32"), Tensor([1, 2],"float32"), Tensor([13680, 4],"float32"), Tensor([13680, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 78],"float32"), Tensor([1, 12, 60, 78],"float32"), Tensor([1, 2],"float32"), Tensor([14040, 4],"float32"), Tensor([14040, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 80],"float32"), Tensor([1, 12, 60, 80],"float32"), Tensor([1, 2],"float32"), Tensor([14400, 4],"float32"), Tensor([14400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 82],"float32"), Tensor([1, 12, 60, 82],"float32"), Tensor([1, 2],"float32"), Tensor([14760, 4],"float32"), Tensor([14760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 60, 84],"float32"), Tensor([1, 12, 60, 84],"float32"), Tensor([1, 2],"float32"), Tensor([15120, 4],"float32"), Tensor([15120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 40],"float32"), Tensor([1, 12, 62, 40],"float32"), Tensor([1, 2],"float32"), Tensor([7440, 4],"float32"), Tensor([7440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 46],"float32"), Tensor([1, 12, 62, 46],"float32"), Tensor([1, 2],"float32"), Tensor([8556, 4],"float32"), Tensor([8556, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 48],"float32"), Tensor([1, 12, 62, 48],"float32"), Tensor([1, 2],"float32"), Tensor([8928, 4],"float32"), Tensor([8928, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 54],"float32"), Tensor([1, 12, 62, 54],"float32"), Tensor([1, 2],"float32"), Tensor([10044, 4],"float32"), Tensor([10044, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 56],"float32"), Tensor([1, 12, 62, 56],"float32"), Tensor([1, 2],"float32"), Tensor([10416, 4],"float32"), Tensor([10416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 62],"float32"), Tensor([1, 12, 62, 62],"float32"), Tensor([1, 2],"float32"), Tensor([11532, 4],"float32"), Tensor([11532, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 64],"float32"), Tensor([1, 12, 62, 64],"float32"), Tensor([1, 2],"float32"), Tensor([11904, 4],"float32"), Tensor([11904, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 66],"float32"), Tensor([1, 12, 62, 66],"float32"), Tensor([1, 2],"float32"), Tensor([12276, 4],"float32"), Tensor([12276, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 68],"float32"), Tensor([1, 12, 62, 68],"float32"), Tensor([1, 2],"float32"), Tensor([12648, 4],"float32"), Tensor([12648, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 70],"float32"), Tensor([1, 12, 62, 70],"float32"), Tensor([1, 2],"float32"), Tensor([13020, 4],"float32"), Tensor([13020, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 72],"float32"), Tensor([1, 12, 62, 72],"float32"), Tensor([1, 2],"float32"), Tensor([13392, 4],"float32"), Tensor([13392, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 74],"float32"), Tensor([1, 12, 62, 74],"float32"), Tensor([1, 2],"float32"), Tensor([13764, 4],"float32"), Tensor([13764, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 76],"float32"), Tensor([1, 12, 62, 76],"float32"), Tensor([1, 2],"float32"), Tensor([14136, 4],"float32"), Tensor([14136, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 80],"float32"), Tensor([1, 12, 62, 80],"float32"), Tensor([1, 2],"float32"), Tensor([14880, 4],"float32"), Tensor([14880, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 82],"float32"), Tensor([1, 12, 62, 82],"float32"), Tensor([1, 2],"float32"), Tensor([15252, 4],"float32"), Tensor([15252, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 62, 84],"float32"), Tensor([1, 12, 62, 84],"float32"), Tensor([1, 2],"float32"), Tensor([15624, 4],"float32"), Tensor([15624, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 42],"float32"), Tensor([1, 12, 64, 42],"float32"), Tensor([1, 2],"float32"), Tensor([8064, 4],"float32"), Tensor([8064, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 48],"float32"), Tensor([1, 12, 64, 48],"float32"), Tensor([1, 2],"float32"), Tensor([9216, 4],"float32"), Tensor([9216, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 56],"float32"), Tensor([1, 12, 64, 56],"float32"), Tensor([1, 2],"float32"), Tensor([10752, 4],"float32"), Tensor([10752, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 60],"float32"), Tensor([1, 12, 64, 60],"float32"), Tensor([1, 2],"float32"), Tensor([11520, 4],"float32"), Tensor([11520, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 62],"float32"), Tensor([1, 12, 64, 62],"float32"), Tensor([1, 2],"float32"), Tensor([11904, 4],"float32"), Tensor([11904, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 64],"float32"), Tensor([1, 12, 64, 64],"float32"), Tensor([1, 2],"float32"), Tensor([12288, 4],"float32"), Tensor([12288, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 66],"float32"), Tensor([1, 12, 64, 66],"float32"), Tensor([1, 2],"float32"), Tensor([12672, 4],"float32"), Tensor([12672, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 68],"float32"), Tensor([1, 12, 64, 68],"float32"), Tensor([1, 2],"float32"), Tensor([13056, 4],"float32"), Tensor([13056, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 70],"float32"), Tensor([1, 12, 64, 70],"float32"), Tensor([1, 2],"float32"), Tensor([13440, 4],"float32"), Tensor([13440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 72],"float32"), Tensor([1, 12, 64, 72],"float32"), Tensor([1, 2],"float32"), Tensor([13824, 4],"float32"), Tensor([13824, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 74],"float32"), Tensor([1, 12, 64, 74],"float32"), Tensor([1, 2],"float32"), Tensor([14208, 4],"float32"), Tensor([14208, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 76],"float32"), Tensor([1, 12, 64, 76],"float32"), Tensor([1, 2],"float32"), Tensor([14592, 4],"float32"), Tensor([14592, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 78],"float32"), Tensor([1, 12, 64, 78],"float32"), Tensor([1, 2],"float32"), Tensor([14976, 4],"float32"), Tensor([14976, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 80],"float32"), Tensor([1, 12, 64, 80],"float32"), Tensor([1, 2],"float32"), Tensor([15360, 4],"float32"), Tensor([15360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 82],"float32"), Tensor([1, 12, 64, 82],"float32"), Tensor([1, 2],"float32"), Tensor([15744, 4],"float32"), Tensor([15744, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 64, 84],"float32"), Tensor([1, 12, 64, 84],"float32"), Tensor([1, 2],"float32"), Tensor([16128, 4],"float32"), Tensor([16128, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 48],"float32"), Tensor([1, 12, 66, 48],"float32"), Tensor([1, 2],"float32"), Tensor([9504, 4],"float32"), Tensor([9504, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 50],"float32"), Tensor([1, 12, 66, 50],"float32"), Tensor([1, 2],"float32"), Tensor([9900, 4],"float32"), Tensor([9900, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 54],"float32"), Tensor([1, 12, 66, 54],"float32"), Tensor([1, 2],"float32"), Tensor([10692, 4],"float32"), Tensor([10692, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 62],"float32"), Tensor([1, 12, 66, 62],"float32"), Tensor([1, 2],"float32"), Tensor([12276, 4],"float32"), Tensor([12276, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 64],"float32"), Tensor([1, 12, 66, 64],"float32"), Tensor([1, 2],"float32"), Tensor([12672, 4],"float32"), Tensor([12672, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 66],"float32"), Tensor([1, 12, 66, 66],"float32"), Tensor([1, 2],"float32"), Tensor([13068, 4],"float32"), Tensor([13068, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 68],"float32"), Tensor([1, 12, 66, 68],"float32"), Tensor([1, 2],"float32"), Tensor([13464, 4],"float32"), Tensor([13464, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 70],"float32"), Tensor([1, 12, 66, 70],"float32"), Tensor([1, 2],"float32"), Tensor([13860, 4],"float32"), Tensor([13860, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 72],"float32"), Tensor([1, 12, 66, 72],"float32"), Tensor([1, 2],"float32"), Tensor([14256, 4],"float32"), Tensor([14256, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 74],"float32"), Tensor([1, 12, 66, 74],"float32"), Tensor([1, 2],"float32"), Tensor([14652, 4],"float32"), Tensor([14652, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 76],"float32"), Tensor([1, 12, 66, 76],"float32"), Tensor([1, 2],"float32"), Tensor([15048, 4],"float32"), Tensor([15048, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 78],"float32"), Tensor([1, 12, 66, 78],"float32"), Tensor([1, 2],"float32"), Tensor([15444, 4],"float32"), Tensor([15444, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 80],"float32"), Tensor([1, 12, 66, 80],"float32"), Tensor([1, 2],"float32"), Tensor([15840, 4],"float32"), Tensor([15840, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 82],"float32"), Tensor([1, 12, 66, 82],"float32"), Tensor([1, 2],"float32"), Tensor([16236, 4],"float32"), Tensor([16236, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 66, 84],"float32"), Tensor([1, 12, 66, 84],"float32"), Tensor([1, 2],"float32"), Tensor([16632, 4],"float32"), Tensor([16632, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 44],"float32"), Tensor([1, 12, 68, 44],"float32"), Tensor([1, 2],"float32"), Tensor([8976, 4],"float32"), Tensor([8976, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 50],"float32"), Tensor([1, 12, 68, 50],"float32"), Tensor([1, 2],"float32"), Tensor([10200, 4],"float32"), Tensor([10200, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 54],"float32"), Tensor([1, 12, 68, 54],"float32"), Tensor([1, 2],"float32"), Tensor([11016, 4],"float32"), Tensor([11016, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 56],"float32"), Tensor([1, 12, 68, 56],"float32"), Tensor([1, 2],"float32"), Tensor([11424, 4],"float32"), Tensor([11424, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 58],"float32"), Tensor([1, 12, 68, 58],"float32"), Tensor([1, 2],"float32"), Tensor([11832, 4],"float32"), Tensor([11832, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 60],"float32"), Tensor([1, 12, 68, 60],"float32"), Tensor([1, 2],"float32"), Tensor([12240, 4],"float32"), Tensor([12240, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 62],"float32"), Tensor([1, 12, 68, 62],"float32"), Tensor([1, 2],"float32"), Tensor([12648, 4],"float32"), Tensor([12648, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 64],"float32"), Tensor([1, 12, 68, 64],"float32"), Tensor([1, 2],"float32"), Tensor([13056, 4],"float32"), Tensor([13056, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 68],"float32"), Tensor([1, 12, 68, 68],"float32"), Tensor([1, 2],"float32"), Tensor([13872, 4],"float32"), Tensor([13872, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 70],"float32"), Tensor([1, 12, 68, 70],"float32"), Tensor([1, 2],"float32"), Tensor([14280, 4],"float32"), Tensor([14280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 72],"float32"), Tensor([1, 12, 68, 72],"float32"), Tensor([1, 2],"float32"), Tensor([14688, 4],"float32"), Tensor([14688, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 74],"float32"), Tensor([1, 12, 68, 74],"float32"), Tensor([1, 2],"float32"), Tensor([15096, 4],"float32"), Tensor([15096, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 76],"float32"), Tensor([1, 12, 68, 76],"float32"), Tensor([1, 2],"float32"), Tensor([15504, 4],"float32"), Tensor([15504, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 80],"float32"), Tensor([1, 12, 68, 80],"float32"), Tensor([1, 2],"float32"), Tensor([16320, 4],"float32"), Tensor([16320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 82],"float32"), Tensor([1, 12, 68, 82],"float32"), Tensor([1, 2],"float32"), Tensor([16728, 4],"float32"), Tensor([16728, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 68, 84],"float32"), Tensor([1, 12, 68, 84],"float32"), Tensor([1, 2],"float32"), Tensor([17136, 4],"float32"), Tensor([17136, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 46],"float32"), Tensor([1, 12, 70, 46],"float32"), Tensor([1, 2],"float32"), Tensor([9660, 4],"float32"), Tensor([9660, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 48],"float32"), Tensor([1, 12, 70, 48],"float32"), Tensor([1, 2],"float32"), Tensor([10080, 4],"float32"), Tensor([10080, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 56],"float32"), Tensor([1, 12, 70, 56],"float32"), Tensor([1, 2],"float32"), Tensor([11760, 4],"float32"), Tensor([11760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 60],"float32"), Tensor([1, 12, 70, 60],"float32"), Tensor([1, 2],"float32"), Tensor([12600, 4],"float32"), Tensor([12600, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 62],"float32"), Tensor([1, 12, 70, 62],"float32"), Tensor([1, 2],"float32"), Tensor([13020, 4],"float32"), Tensor([13020, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 64],"float32"), Tensor([1, 12, 70, 64],"float32"), Tensor([1, 2],"float32"), Tensor([13440, 4],"float32"), Tensor([13440, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 66],"float32"), Tensor([1, 12, 70, 66],"float32"), Tensor([1, 2],"float32"), Tensor([13860, 4],"float32"), Tensor([13860, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 68],"float32"), Tensor([1, 12, 70, 68],"float32"), Tensor([1, 2],"float32"), Tensor([14280, 4],"float32"), Tensor([14280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 70],"float32"), Tensor([1, 12, 70, 70],"float32"), Tensor([1, 2],"float32"), Tensor([14700, 4],"float32"), Tensor([14700, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 72],"float32"), Tensor([1, 12, 70, 72],"float32"), Tensor([1, 2],"float32"), Tensor([15120, 4],"float32"), Tensor([15120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 74],"float32"), Tensor([1, 12, 70, 74],"float32"), Tensor([1, 2],"float32"), Tensor([15540, 4],"float32"), Tensor([15540, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 76],"float32"), Tensor([1, 12, 70, 76],"float32"), Tensor([1, 2],"float32"), Tensor([15960, 4],"float32"), Tensor([15960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 78],"float32"), Tensor([1, 12, 70, 78],"float32"), Tensor([1, 2],"float32"), Tensor([16380, 4],"float32"), Tensor([16380, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 82],"float32"), Tensor([1, 12, 70, 82],"float32"), Tensor([1, 2],"float32"), Tensor([17220, 4],"float32"), Tensor([17220, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 70, 84],"float32"), Tensor([1, 12, 70, 84],"float32"), Tensor([1, 2],"float32"), Tensor([17640, 4],"float32"), Tensor([17640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 48],"float32"), Tensor([1, 12, 72, 48],"float32"), Tensor([1, 2],"float32"), Tensor([10368, 4],"float32"), Tensor([10368, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 50],"float32"), Tensor([1, 12, 72, 50],"float32"), Tensor([1, 2],"float32"), Tensor([10800, 4],"float32"), Tensor([10800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 54],"float32"), Tensor([1, 12, 72, 54],"float32"), Tensor([1, 2],"float32"), Tensor([11664, 4],"float32"), Tensor([11664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 56],"float32"), Tensor([1, 12, 72, 56],"float32"), Tensor([1, 2],"float32"), Tensor([12096, 4],"float32"), Tensor([12096, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 58],"float32"), Tensor([1, 12, 72, 58],"float32"), Tensor([1, 2],"float32"), Tensor([12528, 4],"float32"), Tensor([12528, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 60],"float32"), Tensor([1, 12, 72, 60],"float32"), Tensor([1, 2],"float32"), Tensor([12960, 4],"float32"), Tensor([12960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 62],"float32"), Tensor([1, 12, 72, 62],"float32"), Tensor([1, 2],"float32"), Tensor([13392, 4],"float32"), Tensor([13392, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 64],"float32"), Tensor([1, 12, 72, 64],"float32"), Tensor([1, 2],"float32"), Tensor([13824, 4],"float32"), Tensor([13824, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 66],"float32"), Tensor([1, 12, 72, 66],"float32"), Tensor([1, 2],"float32"), Tensor([14256, 4],"float32"), Tensor([14256, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 68],"float32"), Tensor([1, 12, 72, 68],"float32"), Tensor([1, 2],"float32"), Tensor([14688, 4],"float32"), Tensor([14688, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 70],"float32"), Tensor([1, 12, 72, 70],"float32"), Tensor([1, 2],"float32"), Tensor([15120, 4],"float32"), Tensor([15120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 72],"float32"), Tensor([1, 12, 72, 72],"float32"), Tensor([1, 2],"float32"), Tensor([15552, 4],"float32"), Tensor([15552, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 74],"float32"), Tensor([1, 12, 72, 74],"float32"), Tensor([1, 2],"float32"), Tensor([15984, 4],"float32"), Tensor([15984, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 76],"float32"), Tensor([1, 12, 72, 76],"float32"), Tensor([1, 2],"float32"), Tensor([16416, 4],"float32"), Tensor([16416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 78],"float32"), Tensor([1, 12, 72, 78],"float32"), Tensor([1, 2],"float32"), Tensor([16848, 4],"float32"), Tensor([16848, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 80],"float32"), Tensor([1, 12, 72, 80],"float32"), Tensor([1, 2],"float32"), Tensor([17280, 4],"float32"), Tensor([17280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 82],"float32"), Tensor([1, 12, 72, 82],"float32"), Tensor([1, 2],"float32"), Tensor([17712, 4],"float32"), Tensor([17712, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 72, 84],"float32"), Tensor([1, 12, 72, 84],"float32"), Tensor([1, 2],"float32"), Tensor([18144, 4],"float32"), Tensor([18144, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 48],"float32"), Tensor([1, 12, 74, 48],"float32"), Tensor([1, 2],"float32"), Tensor([10656, 4],"float32"), Tensor([10656, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 64],"float32"), Tensor([1, 12, 74, 64],"float32"), Tensor([1, 2],"float32"), Tensor([14208, 4],"float32"), Tensor([14208, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 66],"float32"), Tensor([1, 12, 74, 66],"float32"), Tensor([1, 2],"float32"), Tensor([14652, 4],"float32"), Tensor([14652, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 68],"float32"), Tensor([1, 12, 74, 68],"float32"), Tensor([1, 2],"float32"), Tensor([15096, 4],"float32"), Tensor([15096, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 70],"float32"), Tensor([1, 12, 74, 70],"float32"), Tensor([1, 2],"float32"), Tensor([15540, 4],"float32"), Tensor([15540, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 72],"float32"), Tensor([1, 12, 74, 72],"float32"), Tensor([1, 2],"float32"), Tensor([15984, 4],"float32"), Tensor([15984, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 74],"float32"), Tensor([1, 12, 74, 74],"float32"), Tensor([1, 2],"float32"), Tensor([16428, 4],"float32"), Tensor([16428, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 76],"float32"), Tensor([1, 12, 74, 76],"float32"), Tensor([1, 2],"float32"), Tensor([16872, 4],"float32"), Tensor([16872, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 78],"float32"), Tensor([1, 12, 74, 78],"float32"), Tensor([1, 2],"float32"), Tensor([17316, 4],"float32"), Tensor([17316, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 80],"float32"), Tensor([1, 12, 74, 80],"float32"), Tensor([1, 2],"float32"), Tensor([17760, 4],"float32"), Tensor([17760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 82],"float32"), Tensor([1, 12, 74, 82],"float32"), Tensor([1, 2],"float32"), Tensor([18204, 4],"float32"), Tensor([18204, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 74, 84],"float32"), Tensor([1, 12, 74, 84],"float32"), Tensor([1, 2],"float32"), Tensor([18648, 4],"float32"), Tensor([18648, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 50],"float32"), Tensor([1, 12, 76, 50],"float32"), Tensor([1, 2],"float32"), Tensor([11400, 4],"float32"), Tensor([11400, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 62],"float32"), Tensor([1, 12, 76, 62],"float32"), Tensor([1, 2],"float32"), Tensor([14136, 4],"float32"), Tensor([14136, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 64],"float32"), Tensor([1, 12, 76, 64],"float32"), Tensor([1, 2],"float32"), Tensor([14592, 4],"float32"), Tensor([14592, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 66],"float32"), Tensor([1, 12, 76, 66],"float32"), Tensor([1, 2],"float32"), Tensor([15048, 4],"float32"), Tensor([15048, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 68],"float32"), Tensor([1, 12, 76, 68],"float32"), Tensor([1, 2],"float32"), Tensor([15504, 4],"float32"), Tensor([15504, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 70],"float32"), Tensor([1, 12, 76, 70],"float32"), Tensor([1, 2],"float32"), Tensor([15960, 4],"float32"), Tensor([15960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 72],"float32"), Tensor([1, 12, 76, 72],"float32"), Tensor([1, 2],"float32"), Tensor([16416, 4],"float32"), Tensor([16416, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 74],"float32"), Tensor([1, 12, 76, 74],"float32"), Tensor([1, 2],"float32"), Tensor([16872, 4],"float32"), Tensor([16872, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 76],"float32"), Tensor([1, 12, 76, 76],"float32"), Tensor([1, 2],"float32"), Tensor([17328, 4],"float32"), Tensor([17328, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 80],"float32"), Tensor([1, 12, 76, 80],"float32"), Tensor([1, 2],"float32"), Tensor([18240, 4],"float32"), Tensor([18240, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 82],"float32"), Tensor([1, 12, 76, 82],"float32"), Tensor([1, 2],"float32"), Tensor([18696, 4],"float32"), Tensor([18696, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 76, 84],"float32"), Tensor([1, 12, 76, 84],"float32"), Tensor([1, 2],"float32"), Tensor([19152, 4],"float32"), Tensor([19152, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 78, 56],"float32"), Tensor([1, 12, 78, 56],"float32"), Tensor([1, 2],"float32"), Tensor([13104, 4],"float32"), Tensor([13104, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 78, 62],"float32"), Tensor([1, 12, 78, 62],"float32"), Tensor([1, 2],"float32"), Tensor([14508, 4],"float32"), Tensor([14508, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 78, 70],"float32"), Tensor([1, 12, 78, 70],"float32"), Tensor([1, 2],"float32"), Tensor([16380, 4],"float32"), Tensor([16380, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 78, 74],"float32"), Tensor([1, 12, 78, 74],"float32"), Tensor([1, 2],"float32"), Tensor([17316, 4],"float32"), Tensor([17316, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 78, 76],"float32"), Tensor([1, 12, 78, 76],"float32"), Tensor([1, 2],"float32"), Tensor([17784, 4],"float32"), Tensor([17784, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 80, 108],"float32"), Tensor([1, 12, 80, 108],"float32"), Tensor([1, 2],"float32"), Tensor([25920, 4],"float32"), Tensor([25920, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 80, 120],"float32"), Tensor([1, 12, 80, 120],"float32"), Tensor([1, 2],"float32"), Tensor([28800, 4],"float32"), Tensor([28800, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 80, 124],"float32"), Tensor([1, 12, 80, 124],"float32"), Tensor([1, 2],"float32"), Tensor([29760, 4],"float32"), Tensor([29760, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 80, 64],"float32"), Tensor([1, 12, 80, 64],"float32"), Tensor([1, 2],"float32"), Tensor([15360, 4],"float32"), Tensor([15360, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 80, 68],"float32"), Tensor([1, 12, 80, 68],"float32"), Tensor([1, 2],"float32"), Tensor([16320, 4],"float32"), Tensor([16320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 80, 72],"float32"), Tensor([1, 12, 80, 72],"float32"), Tensor([1, 2],"float32"), Tensor([17280, 4],"float32"), Tensor([17280, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 80, 76],"float32"), Tensor([1, 12, 80, 76],"float32"), Tensor([1, 2],"float32"), Tensor([18240, 4],"float32"), Tensor([18240, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 80, 84],"float32"), Tensor([1, 12, 80, 84],"float32"), Tensor([1, 2],"float32"), Tensor([20160, 4],"float32"), Tensor([20160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 82, 62],"float32"), Tensor([1, 12, 82, 62],"float32"), Tensor([1, 2],"float32"), Tensor([15252, 4],"float32"), Tensor([15252, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 82, 84],"float32"), Tensor([1, 12, 82, 84],"float32"), Tensor([1, 2],"float32"), Tensor([20664, 4],"float32"), Tensor([20664, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 128],"float32"), Tensor([1, 12, 84, 128],"float32"), Tensor([1, 2],"float32"), Tensor([32256, 4],"float32"), Tensor([32256, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 132],"float32"), Tensor([1, 12, 84, 132],"float32"), Tensor([1, 2],"float32"), Tensor([33264, 4],"float32"), Tensor([33264, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 60],"float32"), Tensor([1, 12, 84, 60],"float32"), Tensor([1, 2],"float32"), Tensor([15120, 4],"float32"), Tensor([15120, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 62],"float32"), Tensor([1, 12, 84, 62],"float32"), Tensor([1, 2],"float32"), Tensor([15624, 4],"float32"), Tensor([15624, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 64],"float32"), Tensor([1, 12, 84, 64],"float32"), Tensor([1, 2],"float32"), Tensor([16128, 4],"float32"), Tensor([16128, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 66],"float32"), Tensor([1, 12, 84, 66],"float32"), Tensor([1, 2],"float32"), Tensor([16632, 4],"float32"), Tensor([16632, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 70],"float32"), Tensor([1, 12, 84, 70],"float32"), Tensor([1, 2],"float32"), Tensor([17640, 4],"float32"), Tensor([17640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 72],"float32"), Tensor([1, 12, 84, 72],"float32"), Tensor([1, 2],"float32"), Tensor([18144, 4],"float32"), Tensor([18144, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 76],"float32"), Tensor([1, 12, 84, 76],"float32"), Tensor([1, 2],"float32"), Tensor([19152, 4],"float32"), Tensor([19152, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 84, 84],"float32"), Tensor([1, 12, 84, 84],"float32"), Tensor([1, 2],"float32"), Tensor([21168, 4],"float32"), Tensor([21168, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 88, 120],"float32"), Tensor([1, 12, 88, 120],"float32"), Tensor([1, 2],"float32"), Tensor([31680, 4],"float32"), Tensor([31680, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 88, 132],"float32"), Tensor([1, 12, 88, 132],"float32"), Tensor([1, 2],"float32"), Tensor([34848, 4],"float32"), Tensor([34848, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 88, 136],"float32"), Tensor([1, 12, 88, 136],"float32"), Tensor([1, 2],"float32"), Tensor([35904, 4],"float32"), Tensor([35904, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 88, 140],"float32"), Tensor([1, 12, 88, 140],"float32"), Tensor([1, 2],"float32"), Tensor([36960, 4],"float32"), Tensor([36960, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 88, 168],"float32"), Tensor([1, 12, 88, 168],"float32"), Tensor([1, 2],"float32"), Tensor([44352, 4],"float32"), Tensor([44352, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 124],"float32"), Tensor([1, 12, 92, 124],"float32"), Tensor([1, 2],"float32"), Tensor([34224, 4],"float32"), Tensor([34224, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 128],"float32"), Tensor([1, 12, 92, 128],"float32"), Tensor([1, 2],"float32"), Tensor([35328, 4],"float32"), Tensor([35328, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 136],"float32"), Tensor([1, 12, 92, 136],"float32"), Tensor([1, 2],"float32"), Tensor([37536, 4],"float32"), Tensor([37536, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 140],"float32"), Tensor([1, 12, 92, 140],"float32"), Tensor([1, 2],"float32"), Tensor([38640, 4],"float32"), Tensor([38640, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 148],"float32"), Tensor([1, 12, 92, 148],"float32"), Tensor([1, 2],"float32"), Tensor([40848, 4],"float32"), Tensor([40848, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 152],"float32"), Tensor([1, 12, 92, 152],"float32"), Tensor([1, 2],"float32"), Tensor([41952, 4],"float32"), Tensor([41952, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 156],"float32"), Tensor([1, 12, 92, 156],"float32"), Tensor([1, 2],"float32"), Tensor([43056, 4],"float32"), Tensor([43056, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 160],"float32"), Tensor([1, 12, 92, 160],"float32"), Tensor([1, 2],"float32"), Tensor([44160, 4],"float32"), Tensor([44160, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 164],"float32"), Tensor([1, 12, 92, 164],"float32"), Tensor([1, 2],"float32"), Tensor([45264, 4],"float32"), Tensor([45264, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 92, 168],"float32"), Tensor([1, 12, 92, 168],"float32"), Tensor([1, 2],"float32"), Tensor([46368, 4],"float32"), Tensor([46368, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 96, 124],"float32"), Tensor([1, 12, 96, 124],"float32"), Tensor([1, 2],"float32"), Tensor([35712, 4],"float32"), Tensor([35712, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 96, 128],"float32"), Tensor([1, 12, 96, 128],"float32"), Tensor([1, 2],"float32"), Tensor([36864, 4],"float32"), Tensor([36864, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 96, 132],"float32"), Tensor([1, 12, 96, 132],"float32"), Tensor([1, 2],"float32"), Tensor([38016, 4],"float32"), Tensor([38016, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 96, 136],"float32"), Tensor([1, 12, 96, 136],"float32"), Tensor([1, 2],"float32"), Tensor([39168, 4],"float32"), Tensor([39168, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 96, 140],"float32"), Tensor([1, 12, 96, 140],"float32"), Tensor([1, 2],"float32"), Tensor([40320, 4],"float32"), Tensor([40320, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 96, 144],"float32"), Tensor([1, 12, 96, 144],"float32"), Tensor([1, 2],"float32"), Tensor([41472, 4],"float32"), Tensor([41472, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 96, 148],"float32"), Tensor([1, 12, 96, 148],"float32"), Tensor([1, 2],"float32"), Tensor([42624, 4],"float32"), Tensor([42624, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 96, 152],"float32"), Tensor([1, 12, 96, 152],"float32"), Tensor([1, 2],"float32"), Tensor([43776, 4],"float32"), Tensor([43776, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 3, 96, 168],"float32"), Tensor([1, 12, 96, 168],"float32"), Tensor([1, 2],"float32"), Tensor([48384, 4],"float32"), Tensor([48384, 4],"float32"), pre_nms_top_n=2000, post_nms_top_n=2000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 4, 16, 16],"float32"), Tensor([1, 16, 16, 16],"float32"), Tensor([1, 2],"float32"), Tensor([16, 16, 4, 4],"float32"), Tensor([16, 16, 4, 4],"float32"), pre_nms_top_n=12000, post_nms_top_n=5000, nms_thresh=0.7, min_size=3.0, eta=1.0, pixel_offset=True, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 10, 8],"float32"), Tensor([1, 36, 10, 8],"float32"), Tensor([1, 2],"float32"), Tensor([720, 4],"float32"), Tensor([720, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 12, 9],"float32"), Tensor([1, 36, 12, 9],"float32"), Tensor([1, 2],"float32"), Tensor([972, 4],"float32"), Tensor([972, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 144, 200],"float32"), Tensor([1, 36, 144, 200],"float32"), Tensor([1, 2],"float32"), Tensor([259200, 4],"float32"), Tensor([259200, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 18, 25],"float32"), Tensor([1, 36, 18, 25],"float32"), Tensor([1, 2],"float32"), Tensor([4050, 4],"float32"), Tensor([4050, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 192, 144],"float32"), Tensor([1, 36, 192, 144],"float32"), Tensor([1, 2],"float32"), Tensor([248832, 4],"float32"), Tensor([248832, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 20, 15],"float32"), Tensor([1, 36, 20, 15],"float32"), Tensor([1, 2],"float32"), Tensor([2700, 4],"float32"), Tensor([2700, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 23, 18],"float32"), Tensor([1, 36, 23, 18],"float32"), Tensor([1, 2],"float32"), Tensor([3726, 4],"float32"), Tensor([3726, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 24, 18],"float32"), Tensor([1, 36, 24, 18],"float32"), Tensor([1, 2],"float32"), Tensor([3888, 4],"float32"), Tensor([3888, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 36, 50],"float32"), Tensor([1, 36, 36, 50],"float32"), Tensor([1, 2],"float32"), Tensor([16200, 4],"float32"), Tensor([16200, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 40, 30],"float32"), Tensor([1, 36, 40, 30],"float32"), Tensor([1, 2],"float32"), Tensor([10800, 4],"float32"), Tensor([10800, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 45, 36],"float32"), Tensor([1, 36, 45, 36],"float32"), Tensor([1, 2],"float32"), Tensor([14580, 4],"float32"), Tensor([14580, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 48, 36],"float32"), Tensor([1, 36, 48, 36],"float32"), Tensor([1, 2],"float32"), Tensor([15552, 4],"float32"), Tensor([15552, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 5, 4],"float32"), Tensor([1, 36, 5, 4],"float32"), Tensor([1, 2],"float32"), Tensor([180, 4],"float32"), Tensor([180, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 5, 7],"float32"), Tensor([1, 36, 5, 7],"float32"), Tensor([1, 2],"float32"), Tensor([315, 4],"float32"), Tensor([315, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 6, 5],"float32"), Tensor([1, 36, 6, 5],"float32"), Tensor([1, 2],"float32"), Tensor([270, 4],"float32"), Tensor([270, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 72, 100],"float32"), Tensor([1, 36, 72, 100],"float32"), Tensor([1, 2],"float32"), Tensor([64800, 4],"float32"), Tensor([64800, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 80, 60],"float32"), Tensor([1, 36, 80, 60],"float32"), Tensor([1, 2],"float32"), Tensor([43200, 4],"float32"), Tensor([43200, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 89, 72],"float32"), Tensor([1, 36, 89, 72],"float32"), Tensor([1, 2],"float32"), Tensor([57672, 4],"float32"), Tensor([57672, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 9, 13],"float32"), Tensor([1, 36, 9, 13],"float32"), Tensor([1, 2],"float32"), Tensor([1053, 4],"float32"), Tensor([1053, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([1, 9, 96, 72],"float32"), Tensor([1, 36, 96, 72],"float32"), Tensor([1, 2],"float32"), Tensor([62208, 4],"float32"), Tensor([62208, 4],"float32"), pre_nms_top_n=4000, post_nms_top_n=4000, nms_thresh=0.7, min_size=0.0, eta=1.0, return_rois_num=True, )
paddle.vision.ops.generate_proposals(Tensor([2, 3, 4, 4],"float32"), Tensor([2, 12, 4, 4],"float32"), Tensor([2, 3],"float32"), Tensor([4, 4, 3, 4],"float32"), Tensor([4, 4, 3, 4],"float32"), pre_nms_top_n=10, post_nms_top_n=5, return_rois_num=True, )
paddle.geometric.sample_neighbors(Tensor([85],"int64"), Tensor([21],"int64"), Tensor([4],"int64"), sample_size=5, )
paddle.geometric.sample_neighbors(Tensor([88],"int64"), Tensor([21],"int64"), Tensor([5],"int64"), eids=Tensor([88],"int64"), 
paddle.geometric.sample_neighbors(Tensor([85],"int64"), Tensor([21],"int64"), Tensor([5],"int64"), sample_size=5, )
paddle.geometric.sample_neighbors(Tensor([88],"int64"), Tensor([21],"int64"), Tensor([5],"int64"), eids=Tensor([88],"int64"), sample_size=5, return_eids=True, )
paddle.geometric.sample_neighbors(Tensor([88],"int64"), Tensor([21],"int64"), Tensor([5],"int64"), perm_buffer=Tensor([88],"int64"), sample_size=5, )
paddle.geometric.sample_neighbors(Tensor([90],"int64"), Tensor([21],"int64"), Tensor([5],"int64"), perm_buffer=Tensor([90],"int64"), sample_size=5, )
paddle.geometric.sample_neighbors(Tensor([91],"int64"), Tensor([21],"int64"), Tensor([5],"int64"), eids=Tensor([91],"int64"), perm_buffer=Tensor([91],"int64"), sample_size=5, return_eids=True, )
paddle.geometric.sample_neighbors(Tensor([91],"int64"), Tensor([21],"int64"), Tensor([5],"int64"), eids=Tensor([91],"int64"), sample_size=5, return_eids=True, )
paddle.vision.ops.nms(Tensor([64, 4],"float32"), 0.5, )
paddle.vision.ops.nms(Tensor([64, 4],"float32"), 0.5, Tensor([64],"float32"), )
paddle.vision.ops.nms(Tensor([64, 4],"float32"), 0.5, Tensor([64],"float32"), Tensor([64],"int64"), list[0,1,2,3,], 20, )
paddle.nn.functional.instance_norm(Tensor([2, 100],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 128],"float32"), )
paddle.nn.functional.instance_norm(Tensor([4, 100],"float32"), None, None, Tensor([100],"float32"), Tensor([100],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.one_hot(Tensor([1, 10285],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([1, 21504],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 21504],"int32"), 16, )
paddle.nn.functional.one_hot(Tensor([1, 24276],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 27216],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 30324],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 33600],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 3598],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([1, 36858],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([1, 37044],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 38402],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([1, 40656],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 4165],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([1, 44436],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 4789],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([1, 48384],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 52500],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 5440],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([1, 56784],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 61236],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 6150],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([1, 6400],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([1, 65856],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 6885],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([1, 70644],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 75600],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([1, 7681],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([1, 8400],"int32"), 3, )
paddle.nn.functional.one_hot(Tensor([1, 8500],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([1, 8580],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([1, 9382],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([10, 60],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([106],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([108],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([10],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([11, 1],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([11, 1],"int32"), Tensor([],"int32"), )
paddle.nn.functional.one_hot(Tensor([110484],"int32"), num_classes=5, )
paddle.nn.functional.one_hot(Tensor([110],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([112],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([113],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([114],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([116],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([117],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([117],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([119],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([11],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([11],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([11],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([11],"int32"), Tensor([],"int32"), )
paddle.nn.functional.one_hot(Tensor([1200],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([120],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([122760],"int32"), num_classes=5, )
paddle.nn.functional.one_hot(Tensor([122],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([123],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([124],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([125],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([126],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([127],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([128],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([129],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([12],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([130],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([131],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([132],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([133],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([134],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([135036],"int32"), num_classes=5, )
paddle.nn.functional.one_hot(Tensor([135],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([136],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([137],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([138],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([139],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([13],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([140],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([141],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([142],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([143],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([144],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([145],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([147],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([148],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([149],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([14],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([150],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([151],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([152],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([153],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([154],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([155],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([157920],"int32"), num_classes=4, )
paddle.nn.functional.one_hot(Tensor([157],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([158],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([159],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([15],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([16, 10164],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 11109],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 12096],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 2100],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 2125],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([16, 2541],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 3024],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 3060],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([16, 3549],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 4116],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 4725],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 5376],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 6069],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 6804],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 7581],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 8400],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([16, 9261],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([160],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([161],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([1620],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([162],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([163],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([164],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([165],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([166],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([167],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([168],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([169],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([16],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([170],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([171],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([1728],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([172],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([173],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([174],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([175],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([176],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([177],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([178],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([179],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([17],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([1800],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([180],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([181],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([182],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([183],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([184],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([186],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([187],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([188],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([189],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([18],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([190960],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([190],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([191],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([192],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([193],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([194],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([195],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([196],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([197],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([198],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([199],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([19],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([1],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 10164],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 10164],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 10164],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 10285],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([2, 107136],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 11109],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 11109],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 11109],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 12096],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 12096],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 12096],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 1],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([2, 2100],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 2100],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 2100],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 2541],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 2541],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 2541],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 3024],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 3024],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 3024],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 3549],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 3549],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 3549],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 3598],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([2, 4116],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 4116],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 4116],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 4165],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([2, 4725],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 4725],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 4725],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 4789],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([2, 5376],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 5376],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 5376],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 5440],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([2, 6069],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 6069],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 6069],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 60],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 6150],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([2, 6804],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 6804],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 6804],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 6885],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([2, 7581],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 7581],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 7581],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 7681],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([2, 8400],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 8400],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 8400],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 8500],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([2, 9261],"int32"), 11, )
paddle.nn.functional.one_hot(Tensor([2, 9261],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([2, 9261],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([2, 9382],"int32"), 12, )
paddle.nn.functional.one_hot(Tensor([20, 60],"int32"), 20, )
paddle.nn.functional.one_hot(Tensor([200],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([201],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([202],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([203],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([204],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([205],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([206],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([207],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([208],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([209],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([20],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([20],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([210056],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([210],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([211],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([212],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([213],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([214],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([215],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([216],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([217],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([218240],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([218],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([219],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([21],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([220968],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([220],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([221],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([222],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([223],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([224],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([225],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([226],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([227],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([228],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([229],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([230],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([231],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([232],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([233],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([234],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([235],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([236],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([237],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([238],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([239],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([240064],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([240],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([241],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([242],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([243],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([244],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([245520],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([245],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([246],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([247],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([248],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([249],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([24],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([250],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([251],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([252],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([253],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([254],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([255],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([256],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([257],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([258],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([259],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([25],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([260],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([261],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([262],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([263],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([264],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([265],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([266],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([267],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([268],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([269],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([26],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([270072],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([270],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([271],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([272800],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([272],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([273],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([274],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([275],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([27648],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([276],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([277],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([278],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([279],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([27],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([280],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([281],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([282],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([283],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([284],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([285],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([286],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([287],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([28800],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([288],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([289],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([290],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([291],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([292],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([293],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([294],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([295],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([296],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([297],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([298],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([299],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([2],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([30, 60],"int32"), 30, )
paddle.nn.functional.one_hot(Tensor([300080],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([300],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([300],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([301],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([302],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([303],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([304],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([305],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([306],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([307],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([308],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([309],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([30],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([310],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([311],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([312],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([313],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([314],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([315],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([316],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([317],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([318],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([319],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([320],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([321],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([322],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([323],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([324],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([325],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([326],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([327],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([328],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([329],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([330088],"int32"), num_classes=81, )
paddle.nn.functional.one_hot(Tensor([330],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([331],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([332],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([333],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([334],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([335],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([336],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([337],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([338],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([339],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([340],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([341],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([342],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([343],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([344],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([345],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([346],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([347],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([348],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([349],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([350],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([351],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([352],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([353],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([354],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([355],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([356],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([357],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([358],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([359],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([35],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([360],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([361],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([362],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([363],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([364],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([365],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([366],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([367],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([368],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([369],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([370],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([371],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([372],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([373],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([374],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([375],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([376],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([377],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([378],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([379],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([380],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([381],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([382],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([383],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([384],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([385],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([386],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([387],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([388],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([389],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([390],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([391],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([392],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([393],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([394],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([395],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([396],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([397],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([398],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([399],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([3],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 10164],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 10164],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 11109],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 12096],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 12096],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 1],"int64"), Tensor([1],"int64"), )
paddle.nn.functional.one_hot(Tensor([4, 2100],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 2541],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 2541],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 2577],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 3024],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 3060],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 3549],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 3598],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 4116],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 4116],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 4165],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 4725],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 4725],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 4789],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 5376],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 5376],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 6069],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 6069],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 60],"int32"), 4, )
paddle.nn.functional.one_hot(Tensor([4, 6804],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 6804],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 7581],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 7581],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 8400],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 8400],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([4, 9261],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([4, 9261],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([400],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([401],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([402],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([403],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([404],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([405],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([406],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([407],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([408],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([409],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([410],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([411],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([413],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([414],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([414],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([415],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([416],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([417],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([418],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([419],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([420],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([421],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([422],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([423],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([424],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([425],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([426],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([427],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([428],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([429],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([430],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([431],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([432],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([432],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([433],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([434],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([435],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([436],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([437],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([439],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([440],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([441],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([444],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([445],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([448],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([449],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([450],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([450],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([451],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([452],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([453],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([454],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([455],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([457],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([461],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([463],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([464],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([467],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([469],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([470],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([472],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([473],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([474],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([476],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([478],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([4800],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([482],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([483],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([484],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([486],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([494],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([495],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([496],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([498],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([499],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([4],"int32"), 50, )
paddle.nn.functional.one_hot(Tensor([5, 10, 7, 3],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([5, 10, 7, 3],"int32"), Tensor([],"int32"), )
paddle.nn.functional.one_hot(Tensor([50, 10, 70, 30],"int32"), 10, )
paddle.nn.functional.one_hot(Tensor([502],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([504],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([505],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([510],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([511],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([512],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([6, 60],"int32"), 6, )
paddle.nn.functional.one_hot(Tensor([64, 1360],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([64, 1726],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([64, 2125],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([64, 2577],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([64, 3060],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([6408],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([6912],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([7200],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([7],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([8, 10164],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 10164],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 10285],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 11109],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 11109],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 12096],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 2100],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 2100],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 2541],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 2541],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 3024],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 3549],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 4116],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 4116],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 4725],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 4725],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 5376],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 5376],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 6069],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 6069],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 6804],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 6804],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 6885],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 7581],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 7581],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 7681],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 8400],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 8400],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 8500],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 9261],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([8, 9261],"int32"), 81, )
paddle.nn.functional.one_hot(Tensor([8, 9382],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([80],"int32"), 5, )
paddle.nn.functional.one_hot(Tensor([80],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([85932],"int32"), num_classes=5, )
paddle.nn.functional.one_hot(Tensor([8],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([8],"int32"), 50, )
paddle.nn.functional.one_hot(Tensor([94],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([95480],"int32"), num_classes=5, )
paddle.nn.functional.one_hot(Tensor([97],"int32"), 80, )
paddle.nn.functional.one_hot(Tensor([9],"int32"), 2, )
paddle.nn.functional.one_hot(Tensor([9],"int32"), 5, )
paddle.nn.functional.one_hot(x=Tensor([2, 3, 4, 6],"int32"), num_classes=10, )
paddle.nn.functional.one_hot(x=Tensor([2, 3],"int32"), num_classes=10, )
paddle.nn.functional.linear(x=tuple(Tensor([1, 10],"float32"),), weight=Tensor([10, 10],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=tuple(Tensor([13, 7, 32],"float32"),Tensor([13, 32],"float32"),), weight=Tensor([32, 32],"float32"), bias=Tensor([32],"float32"), name=None, )
paddle.nn.functional.linear(x=tuple(Tensor([13, 7, 32],"float32"),Tensor([13, 4, 7, 7],"float32"),), weight=Tensor([32, 32],"float32"), bias=Tensor([32],"float32"), name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 2],"float64"), Tensor([5, 5],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 2],"float64"), label=Tensor([5, 5],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.pad(Tensor([499, 80],"float32"), list[0,2501,0,0,], data_format="NLC", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NCDHW", )
paddle.nn.functional.pad(x=Tensor([1, 1, 1, 2, 3],"float64"), pad=tuple(0,1,1,1,2,0,), mode="circular", value=0, data_format="NDHWC", )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 128],"float16"), Tensor([288, 128],"int8"), bias=Tensor([288],"float16"), weight_scale=Tensor([288],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([128, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int4", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([1, 32, 64],"float16"), Tensor([256, 64],"int8"), bias=Tensor([256],"float16"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", group_size=-1, )
paddle.nn.quant.weight_only_linear(Tensor([100, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([100, 512],"float16"), weight=Tensor([640, 512],"int8"), weight_scale=Tensor([640],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([101, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([104, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([104, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([104, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([104, 512],"float16"), weight=Tensor([640, 512],"int8"), weight_scale=Tensor([640],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([123, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([123, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([123, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([123, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([131, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([131, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([131, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([131, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([136, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([136, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([136, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([136, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([145, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([145, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([145, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([145, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([154, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([154, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([154, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([154, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([167, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([167, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([167, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([167, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([172, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([172, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([172, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([172, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([181, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([181, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([181, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([181, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 1, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 512],"float16"), weight=Tensor([640, 512],"int8"), weight_scale=Tensor([640],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([2, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([203, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([203, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([203, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([203, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([221, 11008],"float16"), weight=Tensor([768, 11008],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([221, 768],"float16"), weight=Tensor([22016, 768],"int8"), weight_scale=Tensor([22016],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([221, 768],"float16"), weight=Tensor([2304, 768],"int8"), bias=None, weight_scale=Tensor([2304],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([221, 768],"float16"), weight=Tensor([768, 768],"int8"), weight_scale=Tensor([768],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([58, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([58, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([58, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([58, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([58, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([59, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([59, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([59, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([59, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([60, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([60, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([60, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([60, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([60, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([64, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([64, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([64, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([64, 512],"float16"), weight=Tensor([640, 512],"int8"), weight_scale=Tensor([640],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([67, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([67, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([67, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([67, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([67, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([68, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([68, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([68, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([68, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([71, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([71, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([71, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([71, 512],"float16"), weight=Tensor([640, 512],"int8"), weight_scale=Tensor([640],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([74, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([74, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([74, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([76, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([76, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([76, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([76, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([77, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([77, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([77, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([77, 512],"float16"), weight=Tensor([640, 512],"int8"), weight_scale=Tensor([640],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([78, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([78, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([78, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([78, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([78, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([81, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([81, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([81, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([81, 512],"float16"), weight=Tensor([640, 512],"int8"), weight_scale=Tensor([640],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([87, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([87, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([87, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([88, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([88, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([88, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([89, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([89, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([89, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([89, 512],"float16"), weight=Tensor([640, 512],"int8"), weight_scale=Tensor([640],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([90, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([90, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([90, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([90, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([91, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([91, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([91, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([91, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([92, 320],"float16"), weight=Tensor([512, 320],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([92, 512],"float16"), weight=Tensor([1024, 512],"int8"), bias=Tensor([1024],"float16"), weight_scale=Tensor([1024],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([92, 512],"float16"), weight=Tensor([512, 512],"int8"), weight_scale=Tensor([512],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([92, 512],"float16"), weight=Tensor([640, 512],"int8"), weight_scale=Tensor([640],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([97, 64],"float16"), weight=Tensor([128, 64],"int8"), weight_scale=Tensor([128],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([97, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([97, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([98, 256],"float16"), weight=Tensor([64, 256],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([98, 64],"float16"), weight=Tensor([192, 64],"int8"), bias=Tensor([192],"float16"), weight_scale=Tensor([192],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([98, 64],"float16"), weight=Tensor([256, 64],"int8"), weight_scale=Tensor([256],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_only_linear(Tensor([98, 64],"float16"), weight=Tensor([64, 64],"int8"), weight_scale=Tensor([64],"float16"), weight_dtype="int8", )
paddle.nn.quant.weight_quantize(Tensor([11008, 64],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([11008, 768],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([256, 64],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([320, 512],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([512, 1024],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([512, 512],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([512, 640],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 128],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 192],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 22016],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 64],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([768, 22016],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([768, 2304],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([768, 768],"float16"), algo="weight_only_int8", )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([4, 3],"float64"), Tensor([4, 3],"float64"), soft_label=True, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([128, 10000],"float32"), label=Tensor([128, 10000],"float32"), soft_label=True, )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=1, dtype="int64", )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=1, keepdim=True, dtype="int64", )
paddle.nn.functional.cross_entropy(Tensor([104, 3],"float32"), Tensor([104],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([104, 99],"float32"), Tensor([104],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([117, 99],"float32"), Tensor([117],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([13, 2],"float32"), Tensor([13],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([13, 3],"float32"), Tensor([13],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([13, 4],"float16"), Tensor([13],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([13, 4],"float32"), Tensor([13],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([13, 7, 99],"float32"), Tensor([13, 7, 1],"int32"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([13, 7],"float32"), Tensor([13],"int32"), weight=None, ignore_index=7, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([13, 8],"float32"), Tensor([13],"int32"), weight=None, ignore_index=8, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([14, 200],"float32"), Tensor([14],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([14, 2],"float32"), Tensor([14],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([14, 3],"float32"), Tensor([14],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([14, 7],"float32"), Tensor([14],"int32"), weight=None, ignore_index=7, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 3, 2, 2],"float64"), Tensor([2, 2, 2],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 32, 32, 3],"float32"), Tensor([2, 32, 32],"int32"), weight=None, ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 3],"float32"), Tensor([2],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 7],"float32"), Tensor([2],"int32"), weight=None, ignore_index=7, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([214272, 2],"float32"), Tensor([214272, 1],"int32"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([25, 529, 44, 44],"float64"), Tensor([25, 1, 44, 44],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([3, 2, 2, 5],"float64"), Tensor([3, 2, 2, 5],"float64"), soft_label=True, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([3, 2, 2, 5],"float64"), Tensor([3, 2, 2, 5],"float64"), soft_label=True, label_smoothing=0.7642113030841614, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([3, 3],"float32"), Tensor([3],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 19, 1024, 1024],"float32"), Tensor([4, 1, 1024, 1024],"int64"), weight=None, ignore_index=255, reduction="none", axis=1, )
paddle.nn.functional.cross_entropy(Tensor([4, 19, 512, 1024],"float32"), Tensor([4, 1, 512, 1024],"int64"), weight=None, ignore_index=255, reduction="none", axis=1, )
paddle.nn.functional.cross_entropy(Tensor([78, 99],"float32"), Tensor([78],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([84, 99],"float32"), Tensor([84],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([91, 100],"float32"), Tensor([91],"int32"), )
paddle.nn.functional.cross_entropy(Tensor([91, 2],"float32"), Tensor([91],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([91, 3],"float32"), Tensor([91],"int32"), )
paddle.nn.functional.cross_entropy(Tensor([91, 3],"float32"), Tensor([91],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([91, 99],"float32"), Tensor([91],"int32"), reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([91, 99],"float32"), Tensor([91],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([98, 2],"float32"), Tensor([98],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([98, 99],"float32"), Tensor([98],"int32"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 28, 33712],"float32"), label=Tensor([104, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 29, 33712],"float32"), label=Tensor([104, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 30, 33712],"float32"), label=Tensor([104, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 31, 33712],"float32"), label=Tensor([104, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 32, 33712],"float32"), label=Tensor([104, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 33, 33712],"float32"), label=Tensor([104, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 34, 33712],"float32"), label=Tensor([104, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 35, 33712],"float32"), label=Tensor([104, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 36, 33712],"float32"), label=Tensor([104, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 37, 33712],"float32"), label=Tensor([104, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 38, 33712],"float32"), label=Tensor([104, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 39, 33712],"float32"), label=Tensor([104, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 40, 33712],"float32"), label=Tensor([104, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 41, 33712],"float32"), label=Tensor([104, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 42, 33712],"float32"), label=Tensor([104, 42, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 43, 33712],"float32"), label=Tensor([104, 43, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 44, 33712],"float32"), label=Tensor([104, 44, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 45, 33712],"float32"), label=Tensor([104, 45, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 46, 33712],"float32"), label=Tensor([104, 46, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 47, 33712],"float32"), label=Tensor([104, 47, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 48, 33712],"float32"), label=Tensor([104, 48, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([104, 49, 33712],"float32"), label=Tensor([104, 49, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 26, 33712],"float32"), label=Tensor([112, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 27, 33712],"float32"), label=Tensor([112, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 28, 33712],"float32"), label=Tensor([112, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 29, 33712],"float32"), label=Tensor([112, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 30, 33712],"float32"), label=Tensor([112, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 31, 33712],"float32"), label=Tensor([112, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 32, 33712],"float32"), label=Tensor([112, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 33, 33712],"float32"), label=Tensor([112, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 34, 33712],"float32"), label=Tensor([112, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 35, 33712],"float32"), label=Tensor([112, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 36, 33712],"float32"), label=Tensor([112, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 37, 33712],"float32"), label=Tensor([112, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 38, 33712],"float32"), label=Tensor([112, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 39, 33712],"float32"), label=Tensor([112, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 40, 33712],"float32"), label=Tensor([112, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 41, 33712],"float32"), label=Tensor([112, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 42, 33712],"float32"), label=Tensor([112, 42, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 43, 33712],"float32"), label=Tensor([112, 43, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 44, 33712],"float32"), label=Tensor([112, 44, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([112, 45, 33712],"float32"), label=Tensor([112, 45, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 24, 33712],"float32"), label=Tensor([120, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 25, 33712],"float32"), label=Tensor([120, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 26, 33712],"float32"), label=Tensor([120, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 27, 33712],"float32"), label=Tensor([120, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 28, 33712],"float32"), label=Tensor([120, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 29, 33712],"float32"), label=Tensor([120, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 30, 33712],"float32"), label=Tensor([120, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 31, 33712],"float32"), label=Tensor([120, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 32, 33712],"float32"), label=Tensor([120, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 33, 33712],"float32"), label=Tensor([120, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 34, 33712],"float32"), label=Tensor([120, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 35, 33712],"float32"), label=Tensor([120, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 36, 33712],"float32"), label=Tensor([120, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 37, 33712],"float32"), label=Tensor([120, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 38, 33712],"float32"), label=Tensor([120, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 39, 33712],"float32"), label=Tensor([120, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 40, 33712],"float32"), label=Tensor([120, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 41, 33712],"float32"), label=Tensor([120, 41, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([120, 42, 33712],"float32"), label=Tensor([120, 42, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 23, 33712],"float32"), label=Tensor([128, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 24, 33712],"float32"), label=Tensor([128, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 25, 33712],"float32"), label=Tensor([128, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 26, 33712],"float32"), label=Tensor([128, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 27, 33712],"float32"), label=Tensor([128, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 28, 33712],"float32"), label=Tensor([128, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 29, 33712],"float32"), label=Tensor([128, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 30, 33712],"float32"), label=Tensor([128, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 31, 33712],"float32"), label=Tensor([128, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 32, 33712],"float32"), label=Tensor([128, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 33, 33712],"float32"), label=Tensor([128, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 34, 33712],"float32"), label=Tensor([128, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 35, 33712],"float32"), label=Tensor([128, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 36, 33712],"float32"), label=Tensor([128, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 37, 33712],"float32"), label=Tensor([128, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 38, 33712],"float32"), label=Tensor([128, 38, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 39, 33712],"float32"), label=Tensor([128, 39, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([128, 40, 33712],"float32"), label=Tensor([128, 40, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 21, 33712],"float32"), label=Tensor([136, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 22, 33712],"float32"), label=Tensor([136, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 23, 33712],"float32"), label=Tensor([136, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 24, 33712],"float32"), label=Tensor([136, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 25, 33712],"float32"), label=Tensor([136, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 26, 33712],"float32"), label=Tensor([136, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 27, 33712],"float32"), label=Tensor([136, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 28, 33712],"float32"), label=Tensor([136, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 29, 33712],"float32"), label=Tensor([136, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 30, 33712],"float32"), label=Tensor([136, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 31, 33712],"float32"), label=Tensor([136, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 32, 33712],"float32"), label=Tensor([136, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 33, 33712],"float32"), label=Tensor([136, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 34, 33712],"float32"), label=Tensor([136, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 35, 33712],"float32"), label=Tensor([136, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 36, 33712],"float32"), label=Tensor([136, 36, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([136, 37, 33712],"float32"), label=Tensor([136, 37, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 20, 33712],"float32"), label=Tensor([144, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 21, 33712],"float32"), label=Tensor([144, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 22, 33712],"float32"), label=Tensor([144, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 23, 33712],"float32"), label=Tensor([144, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 24, 33712],"float32"), label=Tensor([144, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 25, 33712],"float32"), label=Tensor([144, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 26, 33712],"float32"), label=Tensor([144, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 27, 33712],"float32"), label=Tensor([144, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 28, 33712],"float32"), label=Tensor([144, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 29, 33712],"float32"), label=Tensor([144, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 30, 33712],"float32"), label=Tensor([144, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 31, 33712],"float32"), label=Tensor([144, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 32, 33712],"float32"), label=Tensor([144, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 33, 33712],"float32"), label=Tensor([144, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 34, 33712],"float32"), label=Tensor([144, 34, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([144, 35, 33712],"float32"), label=Tensor([144, 35, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([15, 244, 33712],"float32"), label=Tensor([15, 244, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 19, 33712],"float32"), label=Tensor([152, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 20, 33712],"float32"), label=Tensor([152, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 21, 33712],"float32"), label=Tensor([152, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 22, 33712],"float32"), label=Tensor([152, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 23, 33712],"float32"), label=Tensor([152, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 24, 33712],"float32"), label=Tensor([152, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 25, 33712],"float32"), label=Tensor([152, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 26, 33712],"float32"), label=Tensor([152, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 27, 33712],"float32"), label=Tensor([152, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 28, 33712],"float32"), label=Tensor([152, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 29, 33712],"float32"), label=Tensor([152, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 30, 33712],"float32"), label=Tensor([152, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 31, 33712],"float32"), label=Tensor([152, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 32, 33712],"float32"), label=Tensor([152, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([152, 33, 33712],"float32"), label=Tensor([152, 33, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 109, 33712],"float32"), label=Tensor([16, 109, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 149, 33712],"float32"), label=Tensor([16, 149, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 171, 33712],"float32"), label=Tensor([16, 171, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 173, 33712],"float32"), label=Tensor([16, 173, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 174, 33712],"float32"), label=Tensor([16, 174, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 176, 33712],"float32"), label=Tensor([16, 176, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 178, 33712],"float32"), label=Tensor([16, 178, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 182, 33712],"float32"), label=Tensor([16, 182, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 205, 33712],"float32"), label=Tensor([16, 205, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 217, 33712],"float32"), label=Tensor([16, 217, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 227, 33712],"float32"), label=Tensor([16, 227, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([16, 264, 33712],"float32"), label=Tensor([16, 264, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 17, 33712],"float32"), label=Tensor([160, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 19, 33712],"float32"), label=Tensor([160, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 20, 33712],"float32"), label=Tensor([160, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 21, 33712],"float32"), label=Tensor([160, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 22, 33712],"float32"), label=Tensor([160, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 23, 33712],"float32"), label=Tensor([160, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 24, 33712],"float32"), label=Tensor([160, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 25, 33712],"float32"), label=Tensor([160, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 26, 33712],"float32"), label=Tensor([160, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 27, 33712],"float32"), label=Tensor([160, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 28, 33712],"float32"), label=Tensor([160, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 29, 33712],"float32"), label=Tensor([160, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 30, 33712],"float32"), label=Tensor([160, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 31, 33712],"float32"), label=Tensor([160, 31, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([160, 32, 33712],"float32"), label=Tensor([160, 32, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 17, 33712],"float32"), label=Tensor([168, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 18, 33712],"float32"), label=Tensor([168, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 19, 33712],"float32"), label=Tensor([168, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 20, 33712],"float32"), label=Tensor([168, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 21, 33712],"float32"), label=Tensor([168, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 22, 33712],"float32"), label=Tensor([168, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 23, 33712],"float32"), label=Tensor([168, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 24, 33712],"float32"), label=Tensor([168, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 25, 33712],"float32"), label=Tensor([168, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 26, 33712],"float32"), label=Tensor([168, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 27, 33712],"float32"), label=Tensor([168, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 28, 33712],"float32"), label=Tensor([168, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 29, 33712],"float32"), label=Tensor([168, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([168, 30, 33712],"float32"), label=Tensor([168, 30, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 16, 33712],"float32"), label=Tensor([176, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 17, 33712],"float32"), label=Tensor([176, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 18, 33712],"float32"), label=Tensor([176, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 19, 33712],"float32"), label=Tensor([176, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 20, 33712],"float32"), label=Tensor([176, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 21, 33712],"float32"), label=Tensor([176, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 22, 33712],"float32"), label=Tensor([176, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 23, 33712],"float32"), label=Tensor([176, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 24, 33712],"float32"), label=Tensor([176, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 25, 33712],"float32"), label=Tensor([176, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 26, 33712],"float32"), label=Tensor([176, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 27, 33712],"float32"), label=Tensor([176, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 28, 33712],"float32"), label=Tensor([176, 28, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([176, 29, 33712],"float32"), label=Tensor([176, 29, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 16, 33712],"float32"), label=Tensor([184, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 17, 33712],"float32"), label=Tensor([184, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 18, 33712],"float32"), label=Tensor([184, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 19, 33712],"float32"), label=Tensor([184, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 20, 33712],"float32"), label=Tensor([184, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 21, 33712],"float32"), label=Tensor([184, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 22, 33712],"float32"), label=Tensor([184, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 23, 33712],"float32"), label=Tensor([184, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 24, 33712],"float32"), label=Tensor([184, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 25, 33712],"float32"), label=Tensor([184, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 26, 33712],"float32"), label=Tensor([184, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([184, 27, 33712],"float32"), label=Tensor([184, 27, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 15, 33712],"float32"), label=Tensor([192, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 16, 33712],"float32"), label=Tensor([192, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 17, 33712],"float32"), label=Tensor([192, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 18, 33712],"float32"), label=Tensor([192, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 19, 33712],"float32"), label=Tensor([192, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 20, 33712],"float32"), label=Tensor([192, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 21, 33712],"float32"), label=Tensor([192, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 22, 33712],"float32"), label=Tensor([192, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 23, 33712],"float32"), label=Tensor([192, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 24, 33712],"float32"), label=Tensor([192, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 25, 33712],"float32"), label=Tensor([192, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([192, 26, 33712],"float32"), label=Tensor([192, 26, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 14, 33712],"float32"), label=Tensor([200, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 15, 33712],"float32"), label=Tensor([200, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 16, 33712],"float32"), label=Tensor([200, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 17, 33712],"float32"), label=Tensor([200, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 18, 33712],"float32"), label=Tensor([200, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 19, 33712],"float32"), label=Tensor([200, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 20, 33712],"float32"), label=Tensor([200, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 21, 33712],"float32"), label=Tensor([200, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 22, 33712],"float32"), label=Tensor([200, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 23, 33712],"float32"), label=Tensor([200, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 24, 33712],"float32"), label=Tensor([200, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([200, 25, 33712],"float32"), label=Tensor([200, 25, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 14, 33712],"float32"), label=Tensor([208, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 15, 33712],"float32"), label=Tensor([208, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 16, 33712],"float32"), label=Tensor([208, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 17, 33712],"float32"), label=Tensor([208, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 18, 33712],"float32"), label=Tensor([208, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 19, 33712],"float32"), label=Tensor([208, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 20, 33712],"float32"), label=Tensor([208, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 21, 33712],"float32"), label=Tensor([208, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 22, 33712],"float32"), label=Tensor([208, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 23, 33712],"float32"), label=Tensor([208, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([208, 24, 33712],"float32"), label=Tensor([208, 24, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 17, 33712],"float32"), label=Tensor([216, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 18, 33712],"float32"), label=Tensor([216, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 19, 33712],"float32"), label=Tensor([216, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 20, 33712],"float32"), label=Tensor([216, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 21, 33712],"float32"), label=Tensor([216, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 22, 33712],"float32"), label=Tensor([216, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([216, 23, 33712],"float32"), label=Tensor([216, 23, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 13, 33712],"float32"), label=Tensor([224, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 14, 33712],"float32"), label=Tensor([224, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 15, 33712],"float32"), label=Tensor([224, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 16, 33712],"float32"), label=Tensor([224, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 17, 33712],"float32"), label=Tensor([224, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([224, 18, 33712],"float32"), label=Tensor([224, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 16, 33712],"float32"), label=Tensor([232, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 17, 33712],"float32"), label=Tensor([232, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 18, 33712],"float32"), label=Tensor([232, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 19, 33712],"float32"), label=Tensor([232, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 20, 33712],"float32"), label=Tensor([232, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 21, 33712],"float32"), label=Tensor([232, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([232, 22, 33712],"float32"), label=Tensor([232, 22, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 113, 33712],"float32"), label=Tensor([24, 113, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 114, 33712],"float32"), label=Tensor([24, 114, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 116, 33712],"float32"), label=Tensor([24, 116, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 117, 33712],"float32"), label=Tensor([24, 117, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 122, 33712],"float32"), label=Tensor([24, 122, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 129, 33712],"float32"), label=Tensor([24, 129, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 130, 33712],"float32"), label=Tensor([24, 130, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 131, 33712],"float32"), label=Tensor([24, 131, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 132, 33712],"float32"), label=Tensor([24, 132, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 133, 33712],"float32"), label=Tensor([24, 133, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 135, 33712],"float32"), label=Tensor([24, 135, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 136, 33712],"float32"), label=Tensor([24, 136, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 137, 33712],"float32"), label=Tensor([24, 137, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 139, 33712],"float32"), label=Tensor([24, 139, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 140, 33712],"float32"), label=Tensor([24, 140, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 141, 33712],"float32"), label=Tensor([24, 141, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 142, 33712],"float32"), label=Tensor([24, 142, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 144, 33712],"float32"), label=Tensor([24, 144, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 146, 33712],"float32"), label=Tensor([24, 146, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 149, 33712],"float32"), label=Tensor([24, 149, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 150, 33712],"float32"), label=Tensor([24, 150, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 151, 33712],"float32"), label=Tensor([24, 151, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 153, 33712],"float32"), label=Tensor([24, 153, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 154, 33712],"float32"), label=Tensor([24, 154, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 157, 33712],"float32"), label=Tensor([24, 157, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 158, 33712],"float32"), label=Tensor([24, 158, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 159, 33712],"float32"), label=Tensor([24, 159, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 162, 33712],"float32"), label=Tensor([24, 162, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 163, 33712],"float32"), label=Tensor([24, 163, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 171, 33712],"float32"), label=Tensor([24, 171, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 173, 33712],"float32"), label=Tensor([24, 173, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 174, 33712],"float32"), label=Tensor([24, 174, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 176, 33712],"float32"), label=Tensor([24, 176, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 178, 33712],"float32"), label=Tensor([24, 178, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 182, 33712],"float32"), label=Tensor([24, 182, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([24, 205, 33712],"float32"), label=Tensor([24, 205, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 12, 33712],"float32"), label=Tensor([240, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 13, 33712],"float32"), label=Tensor([240, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 14, 33712],"float32"), label=Tensor([240, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 15, 33712],"float32"), label=Tensor([240, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 16, 33712],"float32"), label=Tensor([240, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 17, 33712],"float32"), label=Tensor([240, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 18, 33712],"float32"), label=Tensor([240, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 19, 33712],"float32"), label=Tensor([240, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 20, 33712],"float32"), label=Tensor([240, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([240, 21, 33712],"float32"), label=Tensor([240, 21, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 12, 33712],"float32"), label=Tensor([256, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 13, 33712],"float32"), label=Tensor([256, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 14, 33712],"float32"), label=Tensor([256, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 15, 33712],"float32"), label=Tensor([256, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 16, 33712],"float32"), label=Tensor([256, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 17, 33712],"float32"), label=Tensor([256, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 18, 33712],"float32"), label=Tensor([256, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 19, 33712],"float32"), label=Tensor([256, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([256, 20, 33712],"float32"), label=Tensor([256, 20, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 14, 33712],"float32"), label=Tensor([264, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 15, 33712],"float32"), label=Tensor([264, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 16, 33712],"float32"), label=Tensor([264, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 17, 33712],"float32"), label=Tensor([264, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 18, 33712],"float32"), label=Tensor([264, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([264, 19, 33712],"float32"), label=Tensor([264, 19, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 11, 33712],"float32"), label=Tensor([272, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 12, 33712],"float32"), label=Tensor([272, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 13, 33712],"float32"), label=Tensor([272, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 14, 33712],"float32"), label=Tensor([272, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([272, 15, 33712],"float32"), label=Tensor([272, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 14, 33712],"float32"), label=Tensor([280, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 15, 33712],"float32"), label=Tensor([280, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 16, 33712],"float32"), label=Tensor([280, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 17, 33712],"float32"), label=Tensor([280, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([280, 18, 33712],"float32"), label=Tensor([280, 18, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 10, 33712],"float32"), label=Tensor([288, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 11, 33712],"float32"), label=Tensor([288, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 12, 33712],"float32"), label=Tensor([288, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 13, 33712],"float32"), label=Tensor([288, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([288, 14, 33712],"float32"), label=Tensor([288, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 13, 33712],"float32"), label=Tensor([296, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 14, 33712],"float32"), label=Tensor([296, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 15, 33712],"float32"), label=Tensor([296, 15, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 16, 33712],"float32"), label=Tensor([296, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([296, 17, 33712],"float32"), label=Tensor([296, 17, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 10, 33712],"float32"), label=Tensor([312, 10, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 11, 33712],"float32"), label=Tensor([312, 11, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 12, 33712],"float32"), label=Tensor([312, 12, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 13, 33712],"float32"), label=Tensor([312, 13, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 14, 33712],"float32"), label=Tensor([312, 14, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([312, 16, 33712],"float32"), label=Tensor([312, 16, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 100, 33712],"float32"), label=Tensor([32, 100, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 101, 33712],"float32"), label=Tensor([32, 101, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 103, 33712],"float32"), label=Tensor([32, 103, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 104, 33712],"float32"), label=Tensor([32, 104, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 105, 33712],"float32"), label=Tensor([32, 105, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 106, 33712],"float32"), label=Tensor([32, 106, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 107, 33712],"float32"), label=Tensor([32, 107, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 108, 33712],"float32"), label=Tensor([32, 108, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 109, 33712],"float32"), label=Tensor([32, 109, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 110, 33712],"float32"), label=Tensor([32, 110, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 111, 33712],"float32"), label=Tensor([32, 111, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 112, 33712],"float32"), label=Tensor([32, 112, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 113, 33712],"float32"), label=Tensor([32, 113, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 114, 33712],"float32"), label=Tensor([32, 114, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 115, 33712],"float32"), label=Tensor([32, 115, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 117, 33712],"float32"), label=Tensor([32, 117, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 118, 33712],"float32"), label=Tensor([32, 118, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 121, 33712],"float32"), label=Tensor([32, 121, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 122, 33712],"float32"), label=Tensor([32, 122, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 123, 33712],"float32"), label=Tensor([32, 123, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 124, 33712],"float32"), label=Tensor([32, 124, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 125, 33712],"float32"), label=Tensor([32, 125, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 126, 33712],"float32"), label=Tensor([32, 126, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 127, 33712],"float32"), label=Tensor([32, 127, 33712],"float32"), reduction="none", soft_label=True, )
paddle.nn.functional.cross_entropy(input=Tensor([32, 128, 33712],"float32"), label=Tensor([32, 128, 33712],"float32"), reduction="none", soft_label=True, )
paddle.vision.ops.box_coder(Tensor([30, 4],"float32"), list[0.12371375411748886,0.7415851950645447,0.40236398577690125,0.6756224632263184,], Tensor([30, 81, 4],"float32"), "decode_center_size", False, axis=1, )
paddle.vision.ops.box_coder(prior_box=Tensor([80, 4],"float32"), prior_box_var=Tensor([80, 4],"float32"), target_box=Tensor([20, 80, 4],"float32"), code_type="decode_center_size", box_normalized=False, )
paddle.vision.ops.box_coder(prior_box=Tensor([80, 4],"float32"), prior_box_var=tuple(1,2,3,4,), target_box=Tensor([20, 80, 4],"float32"), code_type="decode_center_size", box_normalized=False, )
paddle.vision.ops.matrix_nms(Tensor([1, 64, 4],"float32"), Tensor([1, 4, 64],"float32"), 0.5, post_threshold=0.0, nms_top_k=400, keep_top_k=100, )
paddle.vision.ops.matrix_nms(Tensor([7, 1200, 4],"float32"), Tensor([7, 21, 1200],"float32"), 0.01, 0.0, 400, 200, False, 2.0, 0, True, True, True, )
paddle.vision.ops.matrix_nms(Tensor([7, 1200, 4],"float32"), Tensor([7, 21, 1200],"float32"), 0.01, 0.0, 400, 200, True, 2.0, 0, True, True, True, )
paddle.vision.ops.matrix_nms(Tensor([7, 1200, 4],"float32"), Tensor([7, 21, 1200],"float32"), 0.01, 2.0, 400, 200, False, 2.0, 0, True, True, True, )
paddle.vision.ops.prior_box(Tensor([4, 48, 40, 40],"float32"), Tensor([4, 3, 640, 640],"float32"), list[32.0,48.0,64.0,80.0,96.0,128.0,], list[], list[1.0,], list[0.1,0.1,0.2,0.2,], False, False, list[16.0,16.0,], 0.5, False, None, )
paddle.vision.ops.prior_box(Tensor([4, 48, 80, 80],"float32"), Tensor([4, 3, 640, 640],"float32"), list[16.0,24.0,], list[], list[1.0,], list[0.1,0.1,0.2,0.2,], False, False, list[8.0,8.0,], 0.5, False, None, )
paddle.vision.ops.prior_box(Tensor([4, 96, 40, 40],"float32"), Tensor([4, 3, 640, 640],"float32"), list[32.0,48.0,64.0,80.0,96.0,128.0,], list[], list[1.0,], list[0.1,0.1,0.2,0.2,], False, False, list[16.0,16.0,], 0.5, False, None, )
paddle.vision.ops.prior_box(Tensor([4, 96, 80, 80],"float32"), Tensor([4, 3, 640, 640],"float32"), list[16.0,24.0,], list[], list[1.0,], list[0.1,0.1,0.2,0.2,], False, False, list[8.0,8.0,], 0.5, False, None, )
paddle.vision.ops.prior_box(input=Tensor([2, 10, 32, 32],"float32"), image=Tensor([2, 10, 40, 40],"float32"), min_sizes=list[2.0,4.0,], clip=True, flip=True, )
paddle.vision.ops.yolo_box(Tensor([2, 14, 8, 8],"float32"), img_size=Tensor([2, 2],"int32"), anchors=list[10,13,16,30,], class_num=2, conf_thresh=0.01, downsample_ratio=8, clip_bbox=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_box(Tensor([2, 16, 8, 8],"float32"), img_size=Tensor([2, 2],"int32"), anchors=list[10,13,16,30,], class_num=2, conf_thresh=0.01, downsample_ratio=8, clip_bbox=True, scale_x_y=1.0, iou_aware=True, iou_aware_factor=0.5, )
paddle.vision.ops.yolo_loss(Tensor([2, 14, 8, 8],"float32"), gt_box=Tensor([2, 10, 4],"float32"), gt_label=Tensor([2, 10],"int32"), anchors=list[10,13,16,30,], anchor_mask=list[0,1,], class_num=2, ignore_thresh=0.7, downsample_ratio=8, use_label_smooth=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([3, 30, 5, 5],"float64"), gt_box=Tensor([3, 5, 4],"float64"), gt_label=Tensor([3, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=None, use_label_smooth=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([3, 30, 5, 5],"float64"), gt_box=Tensor([3, 5, 4],"float64"), gt_label=Tensor([3, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=Tensor([3, 5],"float64"), use_label_smooth=False, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([3, 30, 5, 5],"float64"), gt_box=Tensor([3, 5, 4],"float64"), gt_label=Tensor([3, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=Tensor([3, 5],"float64"), use_label_smooth=True, scale_x_y=1.0, )
paddle.vision.ops.yolo_loss(Tensor([3, 30, 5, 5],"float64"), gt_box=Tensor([3, 5, 4],"float64"), gt_label=Tensor([3, 5],"int32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=5, ignore_thresh=0.7, downsample_ratio=32, gt_score=Tensor([3, 5],"float64"), use_label_smooth=True, scale_x_y=1.2, )
paddle.vision.ops.yolo_loss(x=Tensor([4, 255, 19, 19],"float32"), gt_box=Tensor([4, 1, 4],"float32"), gt_label=Tensor([4, 1],"int32"), gt_score=Tensor([4, 1],"float32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[6,7,8,], class_num=80, ignore_thresh=0.7, downsample_ratio=32, use_label_smooth=True, )
paddle.vision.ops.yolo_loss(x=Tensor([4, 255, 38, 38],"float32"), gt_box=Tensor([4, 1, 4],"float32"), gt_label=Tensor([4, 1],"int32"), gt_score=Tensor([4, 1],"float32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[3,4,5,], class_num=80, ignore_thresh=0.7, downsample_ratio=16, use_label_smooth=True, )
paddle.vision.ops.yolo_loss(x=Tensor([4, 255, 76, 76],"float32"), gt_box=Tensor([4, 1, 4],"float32"), gt_label=Tensor([4, 1],"int32"), gt_score=Tensor([4, 1],"float32"), anchors=list[10,13,16,30,33,23,30,61,62,45,59,119,116,90,156,198,373,326,], anchor_mask=list[0,1,2,], class_num=80, ignore_thresh=0.7, downsample_ratio=8, use_label_smooth=True, )
paddle.nn.functional.hsigmoid_loss(Tensor([20, 5],"float64"), Tensor([20, 1],"int64"), 101, Tensor([100, 5],"float64"), Tensor([100, 1],"float64"), None, None, False, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), None, None, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), path_table=None, path_code=None, is_sparse=False, name=None, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 6],"float32"), Tensor([4, 1],"int64"), 8, Tensor([7, 6],"float32"), Tensor([7],"float32"), path_table=Tensor([4, 5],"int64"), path_code=Tensor([4, 5],"int64"), is_sparse=False, name=None, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 8],"float64"), Tensor([4],"int64"), 6, Tensor([5, 8],"float64"), None, Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), False, )
paddle.nn.functional.hsigmoid_loss(Tensor([4, 8],"float64"), Tensor([4],"int64"), 6, Tensor([5, 8],"float64"), Tensor([5, 1],"float64"), Tensor([4, 5],"int64"), Tensor([4, 5],"int64"), False, )
paddle.nn.quant.weight_quantize(Tensor([11008, 64],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([11008, 768],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([128, 288],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([256, 64],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([320, 512],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([512, 1024],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([512, 512],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([512, 640],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 128],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 192],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 22016],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int4", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", arch=70, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", arch=75, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", arch=80, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", arch=86, group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 256],"float16"), algo="weight_only_int8", group_size=-1, )
paddle.nn.quant.weight_quantize(Tensor([64, 64],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([768, 22016],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([768, 2304],"float16"), algo="weight_only_int8", )
paddle.nn.quant.weight_quantize(Tensor([768, 768],"float16"), algo="weight_only_int8", )
paddle.dot(Tensor([0, 0],"float32"), Tensor([0, 0],"float32"), )
paddle.Tensor.set_(Tensor([0],"float16"), None, None, None, 0, )
paddle.Tensor.set_(Tensor([0],"float32"), None, None, None, 0, )
