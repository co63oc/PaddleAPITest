paddle.Tensor.__add__(Tensor([1, 1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__add__(Tensor([1, 1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__add__(Tensor([1, 950313, 6, 49, 49],"float32"), Tensor([1, 950313, 1, 49, 49],"float32"), )
paddle.Tensor.__add__(Tensor([1, 8912897, 1, 4, 1, 2],"float32"), Tensor([1, 8912897, 8, 4, 4, 2],"float32"), )
paddle.Tensor.__add__(Tensor([1, 11, 1, 4, 1, 1620527],"float32"), Tensor([1, 11, 8, 4, 4, 1620527],"float32"), )
paddle.Tensor.__add__(Tensor([1, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__add__(Tensor([1, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 38028357, 4],"float32"), Tensor([38028357, 4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 2, 76056713],"float32"), Tensor([2, 76056713],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 570425345, 4],"float32"), Tensor([570425345, 4],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 152113426],"float32"), Tensor([152113426],"float32"), )
paddle.Tensor.__add__(Tensor([1, 3, 5, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__add__(Tensor([124, 5868, 56, 56],"float32"), Tensor([5868, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([124, 2281701379, 56, 56],"float32"), Tensor([2281701379, 1, 1],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 139265],"float32"), Tensor([1, 128, 128, 139265],"float32"), )
paddle.Tensor.__add__(Tensor([128, 128, 139265],"float32"), Tensor([1, 128, 128, 139265],"float32"), )
paddle.Tensor.__add__(Tensor([760567127, 3],"float32"), Tensor([10000, 760567127, 3],"float32"), )
paddle.Tensor.__add__(Tensor([2, 1140850690],"float32"), Tensor([10000, 2, 1140850690],"float32"), )
paddle.Tensor.__add__(Tensor([76057, 3],"float32"), Tensor([10000, 76057, 3],"float32"), )
paddle.Tensor.__add__(Tensor([2, 114086],"float32"), Tensor([10000, 2, 114086],"float32"), )
paddle.Tensor.__add__(Tensor([2, 178956971, 3, 2, 2],"float16"), Tensor([178956971, 1, 1, 1],"float16"), )
paddle.Tensor.__add__(Tensor([2, 4294967297, 3, 2, 2],"float16"), Tensor([4294967297, 1, 1, 1],"float16"), )
paddle.Tensor.__add__(Tensor([2281701379],"float32"), Tensor([13, 7, 2281701379],"float32"), )
paddle.Tensor.__add__(Tensor([25073642],"float32"), Tensor([13, 7, 25073642],"float32"), )
paddle.Tensor.__and__(Tensor([2, 228170138, 1, 5],"int64"), Tensor([228170138, 4, 1],"int64"), )
paddle.Tensor.__and__(Tensor([2, 3, 76056713, 5],"int64"), Tensor([3, 4, 76056713],"int64"), )
paddle.Tensor.__and__(Tensor([2, 570425345, 1, 5],"int64"), Tensor([570425345, 4, 1],"int64"), )
paddle.Tensor.__and__(Tensor([2, 3, 190141782, 5],"int64"), Tensor([3, 4, 190141782],"int64"), )
paddle.Tensor.__and__(Tensor([570425345, 4, 1],"int64"), Tensor([2, 570425345, 1, 5],"int64"), )
paddle.Tensor.__and__(Tensor([3, 4, 190141782],"int64"), Tensor([2, 3, 190141782, 5],"int64"), )
paddle.Tensor.__and__(Tensor([228170138, 4, 1],"int64"), Tensor([2, 228170138, 1, 5],"int64"), )
paddle.Tensor.__and__(Tensor([3, 4, 76056713],"int64"), Tensor([2, 3, 76056713, 5],"int64"), )
paddle.Tensor.__eq__(Tensor([13, 175515491, 1],"int32"), Tensor([13, 1, 175515491],"int32"), )
paddle.Tensor.__eq__(Tensor([13, 7, 25073642],"int32"), Tensor([13, 25073642, 7],"int32"), )
paddle.Tensor.__eq__(Tensor([13, 7, 25073642],"int32"), Tensor([13, 25073642, 7],"int32"), )
paddle.Tensor.__eq__(Tensor([13, 175515491, 1],"int32"), Tensor([13, 1, 175515491],"int32"), )
paddle.Tensor.__floordiv__(Tensor([2228225, 1024],"float32"), Tensor([2228225, 1024],"float16"), )
paddle.Tensor.__floordiv__(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4194305, 1024],"float32"), Tensor([4194305, 1024],"float16"), )
paddle.Tensor.__floordiv__(Tensor([10, 429496730],"float32"), Tensor([10, 429496730],"float16"), )
paddle.Tensor.__floordiv__(Tensor([715827883, 3, 2],"bfloat16"), Tensor([715827883, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 536870913, 2],"bfloat16"), Tensor([4, 536870913, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 357913942],"bfloat16"), Tensor([4, 3, 357913942],"float32"), )
paddle.Tensor.__floordiv__(Tensor([380283564, 3, 2],"bfloat16"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 285212673, 2],"bfloat16"), Tensor([4, 285212673, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 190141782],"bfloat16"), Tensor([4, 3, 190141782],"float32"), )
paddle.Tensor.__floordiv__(Tensor([715827883, 3, 2],"bfloat16"), Tensor([715827883, 3, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 536870913, 2],"bfloat16"), Tensor([4, 536870913, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 357913942],"bfloat16"), Tensor([4, 3, 357913942],"float64"), )
paddle.Tensor.__floordiv__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.Tensor.__floordiv__(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.Tensor.__floordiv__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.Tensor.__floordiv__(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.Tensor.__floordiv__(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.Tensor.__floordiv__(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.Tensor.__floordiv__(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.Tensor.__floordiv__(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"bfloat16"), )
paddle.Tensor.__ge__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.Tensor.__ge__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.Tensor.__ge__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.Tensor.__ge__(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.__ge__(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.Tensor.__ge__(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.Tensor.__ge__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.Tensor.__ge__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.Tensor.__ge__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.Tensor.__gt__(Tensor([12988, 175678],"int32"), Tensor([175678, 32],"int32"), )
paddle.Tensor.__gt__(Tensor([12988, 71303169],"int32"), Tensor([71303169, 32],"int32"), )
paddle.Tensor.__gt__(Tensor([170628, 13373],"int32"), Tensor([13373, 20],"int32"), )
paddle.Tensor.__gt__(Tensor([170628, 114085069],"int32"), Tensor([114085069, 20],"int32"), )
paddle.Tensor.__le__(Tensor([1, 2281701379, 21504],"float32"), Tensor([1, 2281701379, 1],"float32"), )
paddle.Tensor.__lshift__(Tensor([200, 21474837],"int16"), Tensor([21474837],"int16"), )
paddle.Tensor.__lshift__(Tensor([200, 4294967297],"int16"), Tensor([4294967297],"int16"), )
paddle.Tensor.__lshift__(Tensor([200, 21474837],"int16"), Tensor([21474837],"int16"), False, )
paddle.Tensor.__lshift__(Tensor([200, 4294967297],"int16"), Tensor([4294967297],"int16"), False, )
paddle.Tensor.__lshift__(Tensor([200, 11408507],"int32"), Tensor([11408507],"int32"), )
paddle.Tensor.__lshift__(Tensor([200, 2281701379],"int32"), Tensor([2281701379],"int32"), )
paddle.Tensor.__lshift__(Tensor([200, 11408507],"int32"), Tensor([11408507],"int32"), False, )
paddle.Tensor.__lshift__(Tensor([200, 2281701379],"int32"), Tensor([2281701379],"int32"), False, )
paddle.Tensor.__lshift__(Tensor([200, 11408507],"int64"), Tensor([11408507],"int64"), )
paddle.Tensor.__lshift__(Tensor([200, 2281701379],"int64"), Tensor([2281701379],"int64"), )
paddle.Tensor.__lshift__(Tensor([200, 11408507],"int64"), Tensor([11408507],"int64"), False, )
paddle.Tensor.__lshift__(Tensor([200, 2281701379],"int64"), Tensor([2281701379],"int64"), False, )
paddle.Tensor.__lshift__(Tensor([200, 21474837],"int8"), Tensor([21474837],"int8"), )
paddle.Tensor.__lshift__(Tensor([200, 4294967297],"int8"), Tensor([4294967297],"int8"), )
paddle.Tensor.__lshift__(Tensor([200, 21474837],"int8"), Tensor([21474837],"int8"), False, )
paddle.Tensor.__lshift__(Tensor([200, 4294967297],"int8"), Tensor([4294967297],"int8"), False, )
paddle.Tensor.__lshift__(Tensor([200, 21474837],"uint8"), Tensor([21474837],"uint8"), )
paddle.Tensor.__lshift__(Tensor([200, 4294967297],"uint8"), Tensor([4294967297],"uint8"), )
paddle.Tensor.__lshift__(Tensor([200, 21474837],"uint8"), Tensor([21474837],"uint8"), False, )
paddle.Tensor.__lshift__(Tensor([200, 4294967297],"uint8"), Tensor([4294967297],"uint8"), False, )
paddle.Tensor.__lshift__(Tensor([4294967297],"int16"), Tensor([200, 4294967297],"int16"), )
paddle.Tensor.__lshift__(Tensor([21474837],"int16"), Tensor([200, 21474837],"int16"), )
paddle.Tensor.__lshift__(Tensor([4294967297],"int16"), Tensor([200, 4294967297],"int16"), False, )
paddle.Tensor.__lshift__(Tensor([21474837],"int16"), Tensor([200, 21474837],"int16"), False, )
paddle.Tensor.__lshift__(Tensor([2281701379],"int32"), Tensor([200, 2281701379],"int32"), )
paddle.Tensor.__lshift__(Tensor([11408507],"int32"), Tensor([200, 11408507],"int32"), )
paddle.Tensor.__lshift__(Tensor([2281701379],"int32"), Tensor([200, 2281701379],"int32"), False, )
paddle.Tensor.__lshift__(Tensor([11408507],"int32"), Tensor([200, 11408507],"int32"), False, )
paddle.Tensor.__lshift__(Tensor([2281701379],"int64"), Tensor([200, 2281701379],"int64"), )
paddle.Tensor.__lshift__(Tensor([11408507],"int64"), Tensor([200, 11408507],"int64"), )
paddle.Tensor.__lshift__(Tensor([2281701379],"int64"), Tensor([200, 2281701379],"int64"), False, )
paddle.Tensor.__lshift__(Tensor([11408507],"int64"), Tensor([200, 11408507],"int64"), False, )
paddle.Tensor.__lshift__(Tensor([4294967297],"int8"), Tensor([200, 4294967297],"int8"), )
paddle.Tensor.__lshift__(Tensor([21474837],"int8"), Tensor([200, 21474837],"int8"), )
paddle.Tensor.__lshift__(Tensor([4294967297],"int8"), Tensor([200, 4294967297],"int8"), False, )
paddle.Tensor.__lshift__(Tensor([21474837],"int8"), Tensor([200, 21474837],"int8"), False, )
paddle.Tensor.__lshift__(Tensor([4294967297],"uint8"), Tensor([200, 4294967297],"uint8"), )
paddle.Tensor.__lshift__(Tensor([21474837],"uint8"), Tensor([200, 21474837],"uint8"), )
paddle.Tensor.__lshift__(Tensor([4294967297],"uint8"), Tensor([200, 4294967297],"uint8"), False, )
paddle.Tensor.__lshift__(Tensor([21474837],"uint8"), Tensor([200, 21474837],"uint8"), False, )
paddle.Tensor.__lt__(Tensor([1, 1, 2281701379, 1],"int64"), Tensor([1, 1, 1, 2281701379],"int64"), )
paddle.Tensor.__lt__(Tensor([1, 1, 2281701379, 1],"int64"), Tensor([1, 1, 1, 2281701379],"int64"), )
paddle.Tensor.__lt__(Tensor([1, 1, 2281701379, 1],"int64"), Tensor([1, 1, 1, 2281701379],"int64"), )
paddle.Tensor.__lt__(Tensor([1, 1, 2281701379, 1],"int64"), Tensor([1, 1, 1, 2281701379],"int64"), )
paddle.Tensor.__lt__(Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.Tensor.__lt__(Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.Tensor.__lt__(Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.Tensor.__lt__(Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.Tensor.__lt__(Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.Tensor.__lt__(Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.Tensor.__lt__(Tensor([2281701379, 7],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 2281701379],"float32"), Tensor([2281701379, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 43994],"float32"), Tensor([43994, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 2281701379],"float32"), Tensor([2281701379, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 43994],"float32"), Tensor([43994, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 143757],"float32"), Tensor([1, 1, 143757, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 71303169],"float32"), Tensor([1, 1, 71303169, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 143757],"float32"), Tensor([1, 1, 143757, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 35651585],"float32"), Tensor([1, 1, 35651585, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 143757],"float32"), Tensor([1, 1, 143757, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 9507090],"float32"), Tensor([1, 1, 9507090, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 143757],"float32"), Tensor([1, 1, 143757, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 15872, 9507090],"float32"), Tensor([1, 1, 9507090, 240],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 139265],"float32"), Tensor([1, 1, 139265, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 71303169],"float32"), Tensor([1, 1, 71303169, 32],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 139265],"float32"), Tensor([1, 1, 139265, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 16384, 35651585],"float32"), Tensor([1, 1, 35651585, 64],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 2281701379],"float32"), Tensor([2281701379, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 43994],"float32"), Tensor([43994, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 2281701379],"float32"), Tensor([2281701379, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 43994],"float32"), Tensor([43994, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 2281701379],"float32"), Tensor([2281701379, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 1, 43994],"float32"), Tensor([43994, 51865],"float32"), )
paddle.Tensor.__matmul__(Tensor([1073741825, 100, 2],"float16"), Tensor([1073741825, 2, 2],"float16"), )
paddle.Tensor.__matmul__(Tensor([119304648, 100, 6],"float16"), Tensor([119304648, 6, 6],"float16"), )
paddle.Tensor.__matmul__(Tensor([1073741825, 17, 2],"float16"), Tensor([1073741825, 2, 2],"float16"), )
paddle.Tensor.__matmul__(Tensor([21474837, 2, 2],"float16"), Tensor([21474837, 2, 100],"float16"), )
paddle.Tensor.__matmul__(Tensor([126322568, 2, 2],"float16"), Tensor([126322568, 2, 17],"float16"), )
paddle.Tensor.__matmul__(Tensor([536870913, 2, 2],"float16"), Tensor([536870913, 2, 4],"float16"), )
paddle.Tensor.__matmul__(Tensor([1, 2281701379],"float32"), Tensor([2281701379, 1000],"float32"), )
paddle.Tensor.__matmul__(Tensor([1, 2281702],"float32"), Tensor([2281702, 1000],"float32"), )
paddle.Tensor.__matmul__(Tensor([10, 228170138],"float32"), Tensor([228170138, 768],"float32"), )
paddle.Tensor.__matmul__(Tensor([10, 2970966],"float32"), Tensor([2970966, 768],"float32"), )
paddle.Tensor.__matmul__(Tensor([10, 228170138],"float32"), Tensor([228170138, 4],"float32"), )
paddle.Tensor.__matmul__(Tensor([10, 570425345],"float32"), Tensor([570425345, 4],"float32"), )
paddle.Tensor.__mod__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.Tensor.__mod__(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.Tensor.__mod__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.Tensor.__mod__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.Tensor.__mod__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.Tensor.__mod__(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.Tensor.__mod__(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.Tensor.__mod__(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.Tensor.__mod__(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.Tensor.__mod__(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.Tensor.__mod__(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.Tensor.__ne__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.Tensor.__ne__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.Tensor.__ne__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.Tensor.__ne__(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.__ne__(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.Tensor.__ne__(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.Tensor.__ne__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.Tensor.__ne__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.Tensor.__ne__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.Tensor.__ne__(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.Tensor.__ne__(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.Tensor.__ne__(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.Tensor.__ne__(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.Tensor.__ne__(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.Tensor.__ne__(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.Tensor.__or__(Tensor([2, 228170138, 1, 5],"int64"), Tensor([228170138, 4, 1],"int64"), )
paddle.Tensor.__or__(Tensor([2, 3, 76056713, 5],"int64"), Tensor([3, 4, 76056713],"int64"), )
paddle.Tensor.__or__(Tensor([2, 570425345, 1, 5],"int64"), Tensor([570425345, 4, 1],"int64"), )
paddle.Tensor.__or__(Tensor([2, 3, 190141782, 5],"int64"), Tensor([3, 4, 190141782],"int64"), )
paddle.Tensor.__or__(Tensor([570425345, 4, 1],"int64"), Tensor([2, 570425345, 1, 5],"int64"), )
paddle.Tensor.__or__(Tensor([3, 4, 190141782],"int64"), Tensor([2, 3, 190141782, 5],"int64"), )
paddle.Tensor.__or__(Tensor([228170138, 4, 1],"int64"), Tensor([2, 228170138, 1, 5],"int64"), )
paddle.Tensor.__or__(Tensor([3, 4, 76056713],"int64"), Tensor([2, 3, 76056713, 5],"int64"), )
paddle.Tensor.__pow__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.Tensor.__pow__(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.Tensor.__pow__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.Tensor.__pow__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.Tensor.__pow__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.Tensor.__pow__(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.Tensor.__pow__(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.Tensor.__pow__(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.Tensor.__pow__(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.Tensor.__pow__(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.Tensor.__pow__(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.Tensor.__pow__(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.Tensor.__pow__(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.Tensor.__pow__(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.Tensor.__rmatmul__(Tensor([456340276, 5],"float32"), Tensor([2, 456340276],"float32"), )
paddle.Tensor.__rmatmul__(Tensor([1140850690, 5],"float32"), Tensor([2, 1140850690],"float32"), )
paddle.Tensor.__rshift__(Tensor([200, 21474837],"int16"), Tensor([21474837],"int16"), )
paddle.Tensor.__rshift__(Tensor([200, 4294967297],"int16"), Tensor([4294967297],"int16"), )
paddle.Tensor.__rshift__(Tensor([200, 21474837],"int16"), Tensor([21474837],"int16"), False, )
paddle.Tensor.__rshift__(Tensor([200, 4294967297],"int16"), Tensor([4294967297],"int16"), False, )
paddle.Tensor.__rshift__(Tensor([200, 11408507],"int32"), Tensor([11408507],"int32"), )
paddle.Tensor.__rshift__(Tensor([200, 2281701379],"int32"), Tensor([2281701379],"int32"), )
paddle.Tensor.__rshift__(Tensor([200, 11408507],"int32"), Tensor([11408507],"int32"), False, )
paddle.Tensor.__rshift__(Tensor([200, 2281701379],"int32"), Tensor([2281701379],"int32"), False, )
paddle.Tensor.__rshift__(Tensor([200, 11408507],"int64"), Tensor([11408507],"int64"), )
paddle.Tensor.__rshift__(Tensor([200, 2281701379],"int64"), Tensor([2281701379],"int64"), )
paddle.Tensor.__rshift__(Tensor([200, 11408507],"int64"), Tensor([11408507],"int64"), False, )
paddle.Tensor.__rshift__(Tensor([200, 2281701379],"int64"), Tensor([2281701379],"int64"), False, )
paddle.Tensor.__rshift__(Tensor([200, 21474837],"int8"), Tensor([21474837],"int8"), )
paddle.Tensor.__rshift__(Tensor([200, 4294967297],"int8"), Tensor([4294967297],"int8"), )
paddle.Tensor.__rshift__(Tensor([200, 21474837],"int8"), Tensor([21474837],"int8"), False, )
paddle.Tensor.__rshift__(Tensor([200, 4294967297],"int8"), Tensor([4294967297],"int8"), False, )
paddle.Tensor.__rshift__(Tensor([200, 21474837],"uint8"), Tensor([21474837],"uint8"), )
paddle.Tensor.__rshift__(Tensor([200, 4294967297],"uint8"), Tensor([4294967297],"uint8"), )
paddle.Tensor.__rshift__(Tensor([200, 21474837],"uint8"), Tensor([21474837],"uint8"), False, )
paddle.Tensor.__rshift__(Tensor([200, 4294967297],"uint8"), Tensor([4294967297],"uint8"), False, )
paddle.Tensor.__rshift__(Tensor([4294967297],"int16"), Tensor([200, 4294967297],"int16"), )
paddle.Tensor.__rshift__(Tensor([21474837],"int16"), Tensor([200, 21474837],"int16"), )
paddle.Tensor.__rshift__(Tensor([4294967297],"int16"), Tensor([200, 4294967297],"int16"), False, )
paddle.Tensor.__rshift__(Tensor([21474837],"int16"), Tensor([200, 21474837],"int16"), False, )
paddle.Tensor.__rshift__(Tensor([2281701379],"int32"), Tensor([200, 2281701379],"int32"), )
paddle.Tensor.__rshift__(Tensor([11408507],"int32"), Tensor([200, 11408507],"int32"), )
paddle.Tensor.__rshift__(Tensor([2281701379],"int32"), Tensor([200, 2281701379],"int32"), False, )
paddle.Tensor.__rshift__(Tensor([11408507],"int32"), Tensor([200, 11408507],"int32"), False, )
paddle.Tensor.__rshift__(Tensor([2281701379],"int64"), Tensor([200, 2281701379],"int64"), )
paddle.Tensor.__rshift__(Tensor([11408507],"int64"), Tensor([200, 11408507],"int64"), )
paddle.Tensor.__rshift__(Tensor([2281701379],"int64"), Tensor([200, 2281701379],"int64"), False, )
paddle.Tensor.__rshift__(Tensor([11408507],"int64"), Tensor([200, 11408507],"int64"), False, )
paddle.Tensor.__rshift__(Tensor([4294967297],"int8"), Tensor([200, 4294967297],"int8"), )
paddle.Tensor.__rshift__(Tensor([21474837],"int8"), Tensor([200, 21474837],"int8"), )
paddle.Tensor.__rshift__(Tensor([4294967297],"int8"), Tensor([200, 4294967297],"int8"), False, )
paddle.Tensor.__rshift__(Tensor([21474837],"int8"), Tensor([200, 21474837],"int8"), False, )
paddle.Tensor.__rshift__(Tensor([4294967297],"uint8"), Tensor([200, 4294967297],"uint8"), )
paddle.Tensor.__rshift__(Tensor([21474837],"uint8"), Tensor([200, 21474837],"uint8"), )
paddle.Tensor.__rshift__(Tensor([4294967297],"uint8"), Tensor([200, 4294967297],"uint8"), False, )
paddle.Tensor.__rshift__(Tensor([21474837],"uint8"), Tensor([200, 21474837],"uint8"), False, )
paddle.Tensor.__sub__(Tensor([1, 1, 64, 64, 14260634],"float32"), Tensor([16, 10, 1, 1, 14260634],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 21504, 106106],"float32"), Tensor([21504, 106106],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 1140850690, 2],"float32"), Tensor([1140850690, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 21504, 106106],"float32"), Tensor([21504, 106106],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 45474, 224, 224],"float32"), Tensor([45474, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1, 2281701379, 224, 224],"float32"), Tensor([2281701379, 1, 1],"float32"), )
paddle.Tensor.__sub__(Tensor([1140850690, 2],"float32"), Tensor([16, 1140850690, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([10164, 224489],"float32"), Tensor([16, 10164, 224489],"float32"), )
paddle.Tensor.__sub__(Tensor([71303169, 2],"float32"), Tensor([16, 71303169, 2],"float32"), )
paddle.Tensor.__sub__(Tensor([10164, 14031],"float32"), Tensor([16, 10164, 14031],"float32"), )
paddle.Tensor.__sub__(Tensor([2281701379],"float32"), Tensor([10105, 2281701379],"float32"), )
paddle.Tensor.__sub__(Tensor([225800],"float32"), Tensor([10105, 225800],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 96, 1828287],"float32"), Tensor([1828287],"float32"), )
paddle.Tensor.__sub__(Tensor([13, 96, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__truediv__(Tensor([55462, 10285, 4],"float32"), Tensor([10285, 55462],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 570425345, 4],"float32"), Tensor([570425345, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 2281701379, 4],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([221848, 10285, 4],"float32"), Tensor([10285, 221848],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__truediv__(Tensor([1, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.Tensor.__truediv__(Tensor([1, 45474, 224, 224],"float32"), Tensor([45474, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 2281701379, 224, 224],"float32"), Tensor([2281701379, 1, 1],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 3, 760567127],"float32"), Tensor([760567127],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 3, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 36828, 8, 1140850690, 4, 2],"float32"), Tensor([1, 1, 1, 1140850690, 1, 2],"float32"), )
paddle.Tensor.__truediv__(Tensor([1, 36828, 8, 5, 4, 456340276],"float32"), Tensor([1, 1, 1, 5, 1, 456340276],"float32"), )
paddle.Tensor.__truediv__(Tensor([1000, 2, 2, 570426],"float32"), Tensor([2, 570426],"float32"), )
paddle.Tensor.__truediv__(Tensor([1000, 2, 2, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 280, 376, 25, 217],"float32"), Tensor([217],"float32"), )
paddle.Tensor.__truediv__(Tensor([4, 280, 376, 25, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.__xor__(Tensor([2, 228170138, 1, 5],"int64"), Tensor([228170138, 4, 1],"int64"), )
paddle.Tensor.__xor__(Tensor([2, 3, 76056713, 5],"int64"), Tensor([3, 4, 76056713],"int64"), )
paddle.Tensor.__xor__(Tensor([2, 570425345, 1, 5],"int64"), Tensor([570425345, 4, 1],"int64"), )
paddle.Tensor.__xor__(Tensor([2, 3, 190141782, 5],"int64"), Tensor([3, 4, 190141782],"int64"), )
paddle.Tensor.__xor__(Tensor([570425345, 4, 1],"int64"), Tensor([2, 570425345, 1, 5],"int64"), )
paddle.Tensor.__xor__(Tensor([3, 4, 190141782],"int64"), Tensor([2, 3, 190141782, 5],"int64"), )
paddle.Tensor.__xor__(Tensor([228170138, 4, 1],"int64"), Tensor([2, 228170138, 1, 5],"int64"), )
paddle.Tensor.__xor__(Tensor([3, 4, 76056713],"int64"), Tensor([2, 3, 76056713, 5],"int64"), )
paddle.Tensor.bmm(Tensor([1, 108472, 21035],"float32"), Tensor([1, 21035, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 108472, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 108472, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 1973791],"float32"), Tensor([1, 1973791, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 1156, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 1156, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 120000, 19015],"float32"), Tensor([1, 19015, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 120000, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 120000, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 143264, 15927],"float32"), Tensor([1, 15927, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 143264, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 143264, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 146200, 15607],"float32"), Tensor([1, 15607, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 146200, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 146200, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 150164, 15195],"float32"), Tensor([1, 15195, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 150164, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 150164, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 153088, 14905],"float32"), Tensor([1, 14905, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 153088, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 153088, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 16, 142606337],"float32"), Tensor([1, 142606337, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 16, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 16, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 170476, 13385],"float32"), Tensor([1, 13385, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 170476, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 170476, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 179876, 12685],"float32"), Tensor([1, 12685, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 179876, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 179876, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 191277, 11929],"float32"), Tensor([1, 11929, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 191277, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 191277, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 4, 570425345],"float32"), Tensor([1, 570425345, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 4, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 4, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 4096, 557057],"float32"), Tensor([1, 557057, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 4096, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 4096, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 5776, 395032],"float32"), Tensor([1, 395032, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 5776, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 5776, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 64, 35651585],"float32"), Tensor([1, 35651585, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 64, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 64, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 784, 2910334],"float32"), Tensor([1, 2910334, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 784, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 784, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 8100, 281692],"float32"), Tensor([1, 281692, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 8100, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 8100, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 832, 2742430],"float32"), Tensor([1, 2742430, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 832, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 832, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 98000, 23283],"float32"), Tensor([1, 23283, 2],"float32"), )
paddle.Tensor.bmm(Tensor([380283564, 98000, 3],"float32"), Tensor([380283564, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 98000, 1140850690],"float32"), Tensor([1, 1140850690, 2],"float32"), )
paddle.Tensor.clip(Tensor([2, 2],"int32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), )
paddle.Tensor.clip(Tensor([2, 2],"int32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), )
paddle.Tensor.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4294967297],"float16"), )
paddle.Tensor.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4294967297],"float16"), )
paddle.Tensor.expand_as(Tensor([1, 456340276],"int32"), Tensor([5, 456340276],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 35651585],"float32"), Tensor([64, 35651585],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 87757746],"int64"), Tensor([26, 87757746],"int64"), )
paddle.Tensor.expand_as(Tensor([17825793, 1, 32],"float32"), Tensor([17825793, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([2, 1, 285212673],"float32"), Tensor([2, 4, 285212673],"float32"), )
paddle.Tensor.expand_as(Tensor([101862, 1],"float32"), Tensor([101862, 22400],"int64"), )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 142606337, 2],"int32"), Tensor([2, 2, 142606337],"int32"), offset=0, dim1=1, dim2=2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 570425345, 2],"int32"), Tensor([2, 2, 570425345],"int32"), offset=0, dim1=1, dim2=2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 142606337, 2],"int64"), Tensor([2, 2, 142606337],"int64"), offset=0, dim1=1, dim2=2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 570425345, 2],"int64"), Tensor([2, 2, 570425345],"int64"), offset=0, dim1=1, dim2=2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([142606337, 4, 4],"int32"), Tensor([4, 142606337],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([570425345, 4, 4],"int32"), Tensor([4, 570425345],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([142606337, 4, 4],"int64"), Tensor([4, 142606337],"int64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([570425345, 4, 4],"int64"), Tensor([4, 570425345],"int64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([81489335, 4, 7],"int32"), Tensor([81489335, 4],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 162978670, 7],"int32"), Tensor([2, 162978670],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([570425345, 4, 7],"int32"), Tensor([570425345, 4],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 1140850690, 7],"int32"), Tensor([2, 1140850690],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([81489335, 4, 7],"int64"), Tensor([81489335, 4],"int64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 162978670, 7],"int64"), Tensor([2, 162978670],"int64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([570425345, 4, 7],"int64"), Tensor([570425345, 4],"int64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 1140850690, 7],"int64"), Tensor([2, 1140850690],"int64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 570425345],"int32"), Tensor([570425345],"int32"), offset=-1, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 2281701379],"int32"), Tensor([2281701379],"int32"), offset=-1, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 570425345],"int32"), Tensor([570425345],"int32"), offset=0, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 2281701379],"int32"), Tensor([2281701379],"int32"), offset=0, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 570425345],"int64"), Tensor([570425345],"int64"), offset=-1, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 2281701379],"int64"), Tensor([2281701379],"int64"), offset=-1, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 570425345],"int64"), Tensor([570425345],"int64"), offset=0, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 2281701379],"int64"), Tensor([2281701379],"int64"), offset=0, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 456340276],"int32"), Tensor([456340276],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 2281701379],"int32"), Tensor([2281701379],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 456340276],"int64"), Tensor([456340276],"int64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 2281701379],"int64"), Tensor([2281701379],"int64"), 0, 0, 1, )
paddle.Tensor.gather_nd(Tensor([57042535, 20, 2],"float32"), Tensor([57042535, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([1, 20, 114085069],"float32"), Tensor([1, 114085069],"int64"), )
paddle.Tensor.gather_nd(Tensor([1140850690, 20, 2],"float32"), Tensor([1140850690, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([1, 20, 2281701379],"float32"), Tensor([1, 2281701379],"int64"), )
paddle.Tensor.gather_nd(Tensor([10186167, 7, 32],"float32"), Tensor([10186167, 2],"int32"), )
paddle.Tensor.gather_nd(Tensor([1140850690, 7, 32],"float32"), Tensor([1140850690, 2],"int32"), )
paddle.Tensor.gather_nd(Tensor([108652447, 7, 3],"float32"), Tensor([108652447, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([1140850690, 7, 3],"float32"), Tensor([1140850690, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([162978670, 7, 2],"float32"), Tensor([162978670, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([14, 7, 23282668],"float32"), Tensor([14, 23282668],"int64"), )
paddle.Tensor.gather_nd(Tensor([1140850690, 7, 2],"float32"), Tensor([1140850690, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([14, 7, 162978670],"float32"), Tensor([14, 162978670],"int64"), )
paddle.Tensor.gather_nd(Tensor([108652447, 7, 3],"float32"), Tensor([108652447, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([1140850690, 7, 3],"float32"), Tensor([1140850690, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([2281702, 16384, 10],"float32"), Tensor([2281702, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([2281702, 16384, 1],"float32"), Tensor([2281702, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([2281702, 16384, 2],"float32"), Tensor([2281702, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 16384, 1140851],"float32"), Tensor([4, 500, 1140851],"int64"), )
paddle.Tensor.gather_nd(Tensor([1521135, 500, 1],"float32"), Tensor([1521135, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 190141782, 1],"float32"), Tensor([4, 190141782, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([1521135, 500, 2],"float32"), Tensor([1521135, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 190141782, 2],"float32"), Tensor([4, 190141782, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([2281702, 53568, 1],"float32"), Tensor([2281702, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([2281702, 53568, 2],"float32"), Tensor([2281702, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([4, 53568, 1140851],"float32"), Tensor([4, 500, 1140851],"int64"), )
paddle.Tensor.gather_nd(Tensor([2281702, 53568, 8],"float32"), Tensor([2281702, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([2281702, 16384, 10],"float32"), Tensor([2281702, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([2281702, 16384, 1],"float32"), Tensor([2281702, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([2281702, 16384, 2],"float32"), Tensor([2281702, 500, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 16384, 570426],"float32"), Tensor([8, 500, 570426],"int64"), )
paddle.Tensor.gather_nd(Tensor([1521135, 500, 1],"float32"), Tensor([1521135, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 95070891, 1],"float32"), Tensor([8, 95070891, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([1521135, 500, 2],"float32"), Tensor([1521135, 500, 3],"int64"), )
paddle.Tensor.gather_nd(Tensor([8, 95070891, 2],"float32"), Tensor([8, 95070891, 3],"int64"), )
paddle.Tensor.gcd(x=Tensor([6, 19014179, 4, 5],"int32"), y=Tensor([2, 19014179, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 95070891],"int32"), y=Tensor([2, 1, 95070891],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 228170138, 4, 5],"int32"), y=Tensor([2, 228170138, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 1140850690],"int32"), y=Tensor([2, 1, 1140850690],"int32"), )
paddle.Tensor.index_select(Tensor([5704254, 1, 400],"float32"), index=Tensor([5704254],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([2281701379, 1, 400],"float32"), index=Tensor([2281701379],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([285212673, 8],"float32"), Tensor([285212673],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([2281701379, 8],"float32"), Tensor([2281701379],"int64"), axis=0, )
paddle.Tensor.inner(x=Tensor([71582789, 5, 3, 4],"float16"), y=Tensor([3, 71582789, 5, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([2, 178956971, 3, 4],"float16"), y=Tensor([3, 2, 178956971, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([2, 5, 107374183, 4],"float16"), y=Tensor([107374183, 2, 5, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([2, 5, 107374183, 4],"float16"), y=Tensor([107374183, 2, 5, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([71582789, 5, 3, 4],"float16"), y=Tensor([3, 71582789, 5, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([2, 178956971, 3, 4],"float16"), y=Tensor([3, 2, 178956971, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([1073741825, 4],"float16"), y=Tensor([1073741825, 2, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([3, 1431655766],"float16"), y=Tensor([3, 2, 1431655766],"float16"), )
paddle.Tensor.inner(x=Tensor([536870913, 4],"float16"), y=Tensor([536870913, 2, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([3, 715827883],"float16"), y=Tensor([3, 2, 715827883],"float16"), )
paddle.Tensor.inner(x=Tensor([1073741825, 4],"float16"), y=Tensor([1073741825, 2, 5, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([3, 1431655766],"float16"), y=Tensor([3, 2, 5, 1431655766],"float16"), )
paddle.Tensor.inner(x=Tensor([107374183, 4],"float16"), y=Tensor([107374183, 2, 5, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([3, 143165577],"float16"), y=Tensor([3, 2, 5, 143165577],"float16"), )
paddle.Tensor.inner(x=Tensor([3, 858993460],"float16"), y=Tensor([5, 858993460],"float16"), )
paddle.Tensor.inner(x=Tensor([357913942, 3, 4],"float16"), y=Tensor([2, 357913942, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([536870913, 3, 4],"float16"), y=Tensor([2, 536870913, 4],"float16"), )
paddle.Tensor.inner(x=Tensor([5, 3, 429496730],"float16"), y=Tensor([2, 5, 429496730],"float16"), )
paddle.Tensor.masked_fill(Tensor([1, 2281701379, 256],"float32"), Tensor([1, 2281701379, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 2281701379, 4],"float32"), Tensor([1, 2281701379, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 2281701379, 256],"float32"), Tensor([1, 2281701379, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 2281701379, 4],"float32"), Tensor([1, 2281701379, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 2281701379, 256],"float32"), Tensor([1, 2281701379, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 2281701379, 4],"float32"), Tensor([1, 2281701379, 1],"bool"), math.inf, )
paddle.Tensor.masked_fill(Tensor([1, 2281701379, 256],"float32"), Tensor([1, 2281701379, 1],"bool"), 0.0, )
paddle.Tensor.masked_fill(Tensor([1, 2281701379, 4],"float32"), Tensor([1, 2281701379, 1],"bool"), math.inf, )
paddle.Tensor.matmul(Tensor([29826162, 100, 12],"float16"), Tensor([29826162, 12, 12],"float16"), )
paddle.Tensor.matmul(Tensor([1, 100, 42949673],"float16"), Tensor([1, 42949673, 40],"float16"), )
paddle.Tensor.matmul(Tensor([8947849, 100, 12],"float16"), Tensor([8947849, 12, 40],"float16"), )
paddle.Tensor.matmul(Tensor([1, 100, 107374183],"float16"), Tensor([1, 107374183, 40],"float16"), )
paddle.Tensor.matmul(Tensor([1073741825, 100, 2],"float16"), Tensor([1073741825, 2, 2],"float16"), )
paddle.Tensor.matmul(Tensor([1, 100, 42949673],"float16"), Tensor([1, 42949673, 4],"float16"), )
paddle.Tensor.matmul(Tensor([536870913, 100, 2],"float16"), Tensor([536870913, 2, 4],"float16"), )
paddle.Tensor.matmul(Tensor([1, 100, 1073741825],"float16"), Tensor([1, 1073741825, 4],"float16"), )
paddle.Tensor.matmul(Tensor([268435457, 100, 4],"float16"), Tensor([268435457, 4, 4],"float16"), )
paddle.Tensor.matmul(Tensor([1, 100, 42949673],"float16"), Tensor([1, 42949673, 40],"float16"), )
paddle.Tensor.matmul(Tensor([17895698, 100, 6],"float16"), Tensor([17895698, 6, 40],"float16"), )
paddle.Tensor.matmul(Tensor([1, 100, 107374183],"float16"), Tensor([1, 107374183, 40],"float16"), )
paddle.Tensor.matmul(Tensor([119304648, 100, 6],"float16"), Tensor([119304648, 6, 6],"float16"), )
paddle.Tensor.matmul(Tensor([429496730, 10],"float16"), Tensor([10, 429496730],"float16"), )
paddle.Tensor.matmul(Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.Tensor.matmul(Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.Tensor.matmul(Tensor([429496730, 10],"float16"), Tensor([10, 429496730],"float16"), )
paddle.Tensor.matmul(Tensor([34359739, 125],"float16"), Tensor([125, 34359739],"float16"), )
paddle.Tensor.matmul(Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.Tensor.matmul(Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.Tensor.matmul(Tensor([34359739, 125],"float16"), Tensor([125, 34359739],"float16"), )
paddle.Tensor.matmul(Tensor([1, 21504, 1, 106106],"float32"), Tensor([106106],"float32"), )
paddle.Tensor.matmul(Tensor([1, 21504, 1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.Tensor.matmul(Tensor([171798692, 25],"float16"), Tensor([25, 171798692],"float16"), )
paddle.Tensor.matmul(Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.Tensor.matmul(Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.Tensor.matmul(Tensor([171798692, 25],"float16"), Tensor([25, 171798692],"float16"), )
paddle.Tensor.matmul(Tensor([1, 4294967297],"float16"), Tensor([4294967297, 5],"float16"), )
paddle.Tensor.matmul(Tensor([1, 858993460],"float16"), Tensor([858993460, 5],"float16"), )
paddle.Tensor.matmul(Tensor([15082, 12, 197, 197],"float32"), Tensor([15082, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 1616, 197, 197],"float32"), Tensor([112, 1616, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 26527, 64],"float32"), Tensor([112, 12, 64, 26527],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 8618],"float32"), Tensor([112, 12, 8618, 197],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 197, 8618],"float32"), Tensor([112, 12, 8618, 197],"float32"), )
paddle.Tensor.matmul(Tensor([112, 12, 26527, 64],"float32"), Tensor([112, 12, 64, 26527],"float32"), )
paddle.Tensor.matmul(Tensor([8671, 16, 257, 257],"float32"), Tensor([8671, 16, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 1119, 257, 257],"float32"), Tensor([124, 1119, 257, 64],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 17970, 64],"float32"), Tensor([124, 16, 64, 17970],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 257, 4475],"float32"), Tensor([124, 16, 4475, 257],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 257, 4475],"float32"), Tensor([124, 16, 4475, 257],"float32"), )
paddle.Tensor.matmul(Tensor([124, 16, 17970, 64],"float32"), Tensor([124, 16, 64, 17970],"float32"), )
paddle.Tensor.matmul(Tensor([15082, 12, 197, 197],"float32"), Tensor([15082, 12, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 1414, 197, 197],"float32"), Tensor([128, 1414, 197, 64],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 23211, 64],"float32"), Tensor([128, 12, 64, 23211],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 197, 7541],"float32"), Tensor([128, 12, 7541, 197],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 197, 7541],"float32"), Tensor([128, 12, 7541, 197],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 23211, 64],"float32"), Tensor([128, 12, 64, 23211],"float32"), )
paddle.Tensor.matmul(Tensor([258345, 12, 23, 23],"float32"), Tensor([258345, 12, 23, 32],"float32"), )
paddle.Tensor.matmul(Tensor([128, 24220, 23, 23],"float32"), Tensor([128, 24220, 23, 32],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 46422, 32],"float32"), Tensor([128, 12, 32, 46422],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 23, 64587],"float32"), Tensor([128, 12, 64587, 23],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 23, 64587],"float32"), Tensor([128, 12, 64587, 23],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 46422, 32],"float32"), Tensor([128, 12, 32, 46422],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 23, 64587],"float32"), Tensor([128, 12, 64587, 40],"float32"), )
paddle.Tensor.matmul(Tensor([148549, 12, 23, 32],"float32"), Tensor([148549, 12, 32, 40],"float32"), )
paddle.Tensor.matmul(Tensor([128, 13927, 23, 32],"float32"), Tensor([128, 13927, 32, 40],"float32"), )
paddle.Tensor.matmul(Tensor([128, 12, 23, 37138],"float32"), Tensor([128, 12, 37138, 40],"float32"), )
paddle.Tensor.multiply(Tensor([2281701379, 3072],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.Tensor.multiply(Tensor([2281701379, 768],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.Tensor.multiply(Tensor([1398102, 3072],"float16"), Tensor([1398102, 1],"float32"), )
paddle.Tensor.multiply(Tensor([2281701379, 3072],"float16"), Tensor([2281701379, 1],"float32"), )
paddle.Tensor.multiply(Tensor([2281701379, 3072],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.Tensor.multiply(Tensor([5592406, 768],"float16"), Tensor([5592406, 1],"float32"), )
paddle.Tensor.multiply(Tensor([2281701379, 768],"float16"), Tensor([2281701379, 1],"float32"), )
paddle.Tensor.multiply(Tensor([2281701379, 768],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.Tensor.slice_scatter(Tensor([1431655766, 6],"float16"), Tensor([1431655766, 3],"float16"), list[1,], list[0,], list[6,], list[2,], )
paddle.add(Tensor([1, 570425345, 4],"float32"), Tensor([570425345, 4],"float32"), )
paddle.add(Tensor([1, 8, 285212673],"float32"), Tensor([8, 285212673],"float32"), )
paddle.add(Tensor([1, 570425345, 4],"float32"), Tensor([570425345, 4],"float32"), )
paddle.add(Tensor([1, 8, 285212673],"float32"), Tensor([8, 285212673],"float32"), )
paddle.add(Tensor([10000, 429497],"float16"), Tensor([429497],"float16"), name="Uniform_sample", )
paddle.add(Tensor([10000, 4294967297],"float16"), Tensor([4294967297],"float16"), name="Uniform_sample", )
paddle.add(Tensor([10000, 143166, 3],"float16"), Tensor([143166, 3],"float16"), name="Uniform_sample", )
paddle.add(Tensor([10000, 5, 85900],"float16"), Tensor([5, 85900],"float16"), name="Uniform_sample", )
paddle.add(Tensor([10000, 1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), name="Uniform_sample", )
paddle.add(Tensor([10000, 5, 858993460],"float16"), Tensor([5, 858993460],"float16"), name="Uniform_sample", )
paddle.add(Tensor([13, 7, 25073642],"float32"), Tensor([25073642],"float32"), )
paddle.add(Tensor([13, 7, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.add(Tensor([2, 3, 1, 380283564],"float32"), Tensor([380283564],"float32"), )
paddle.add(Tensor([2, 3, 1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.add(Tensor([300, 7605672],"int64"), Tensor([7605672],"int64"), )
paddle.add(Tensor([300, 2281701379],"int64"), Tensor([2281701379],"int64"), )
paddle.add(Tensor([2281701379],"int64"), Tensor([300, 2281701379],"int64"), )
paddle.add(Tensor([7605672],"int64"), Tensor([300, 7605672],"int64"), )
paddle.add(Tensor([171402, 1, 512, 1, 40],"float32"), Tensor([171402, 26, 512, 1, 1],"float32"), )
paddle.add(Tensor([64, 1, 1371215, 1, 40],"float32"), Tensor([64, 26, 1371215, 1, 1],"float32"), )
paddle.addmm(Tensor([45634028, 50],"float32"), Tensor([45634028, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 76056713],"float32"), Tensor([30, 80],"float32"), Tensor([80, 76056713],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([28521268, 50],"float32"), Tensor([28521268, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 76056713],"float32"), Tensor([76056713, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 45634028],"float32"), Tensor([45634028, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 28521268],"float32"), Tensor([30, 80],"float32"), Tensor([80, 28521268],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(input=Tensor([1, 1],"float16"), x=Tensor([1073741825, 4],"float16"), y=Tensor([4, 1073741825],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 1],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 1],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1, 1],"float16"), x=Tensor([1073741825, 4],"float16"), y=Tensor([4, 1073741825],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([4294967297, 1],"float16"), x=Tensor([4294967297, 4],"float16"), y=Tensor([4, 4294967297],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1073741825, 1],"float16"), x=Tensor([1073741825, 4],"float16"), y=Tensor([4, 1073741825],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 1],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 1],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([1073741825, 1],"float16"), x=Tensor([1073741825, 4],"float16"), y=Tensor([4, 1073741825],"float16"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([5, 5],"float16"), x=Tensor([5, 858993460],"float16"), y=Tensor([858993460, 5],"float16"), beta=0.5, alpha=5.0, )
paddle.atan2(Tensor([111, 116197, 333],"float16"), Tensor([116197, 333],"float16"), )
paddle.atan2(Tensor([111, 222, 174295],"float16"), Tensor([222, 174295],"float16"), )
paddle.atan2(Tensor([111, 12897800, 333],"float16"), Tensor([12897800, 333],"float16"), )
paddle.atan2(Tensor([111, 222, 19346700],"float16"), Tensor([222, 19346700],"float16"), )
paddle.atan2(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.atan2(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.atan2(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.atan2(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.atan2(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.atan2(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.atan2(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.atan2(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.atan2(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.atan2(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.atleast_1d(Tensor([2, 2147483649, 1],"float16"), Tensor([1, 2147483649],"float16"), )
paddle.atleast_1d(Tensor([2, 3, 715827883],"float16"), Tensor([715827883, 3],"float16"), )
paddle.atleast_1d(Tensor([2, 3, 1431655766],"float16"), Tensor([1431655766, 3],"float16"), )
paddle.atleast_1d(Tensor([2, 4294967297, 1],"float16"), Tensor([1, 4294967297],"float16"), )
paddle.atleast_1d(Tensor([2, 2147483649, 1],"float16"), Tensor([2147483649],"float16"), )
paddle.atleast_1d(Tensor([2, 4294967297, 1],"float16"), Tensor([4294967297],"float16"), )
paddle.atleast_1d(Tensor([2281701379],"float32"), Tensor([2281701379],"float64"), )
paddle.atleast_1d(Tensor([4294967297],"float32"), Tensor([4294967297],"float16"), )
paddle.atleast_2d(Tensor([2, 2147483649, 1],"float16"), Tensor([1, 2147483649],"float16"), )
paddle.atleast_2d(Tensor([2, 3, 715827883],"float16"), Tensor([715827883, 3],"float16"), )
paddle.atleast_2d(Tensor([2, 3, 1431655766],"float16"), Tensor([1431655766, 3],"float16"), )
paddle.atleast_2d(Tensor([2, 4294967297, 1],"float16"), Tensor([1, 4294967297],"float16"), )
paddle.atleast_2d(Tensor([2, 2147483649, 1],"float16"), Tensor([2147483649],"float16"), )
paddle.atleast_2d(Tensor([2, 4294967297, 1],"float16"), Tensor([4294967297],"float16"), )
paddle.atleast_2d(Tensor([2281701379],"float32"), Tensor([2281701379],"float64"), )
paddle.atleast_2d(Tensor([4294967297],"float32"), Tensor([4294967297],"float16"), )
paddle.atleast_2d(Tensor([4294967297],"float16"), Tensor([1, 4294967297],"float16"), )
paddle.atleast_2d(Tensor([4294967297],"float16"), Tensor([1, 4294967297],"float16"), )
paddle.atleast_3d(Tensor([2, 2147483649, 1],"float16"), Tensor([1, 2147483649],"float16"), )
paddle.atleast_3d(Tensor([2, 3, 715827883],"float16"), Tensor([715827883, 3],"float16"), )
paddle.atleast_3d(Tensor([2, 3, 1431655766],"float16"), Tensor([1431655766, 3],"float16"), )
paddle.atleast_3d(Tensor([2, 4294967297, 1],"float16"), Tensor([1, 4294967297],"float16"), )
paddle.atleast_3d(Tensor([2, 2147483649, 1],"float16"), Tensor([2147483649],"float16"), )
paddle.atleast_3d(Tensor([2, 4294967297, 1],"float16"), Tensor([4294967297],"float16"), )
paddle.atleast_3d(Tensor([2281701379],"float32"), Tensor([2281701379],"float64"), )
paddle.atleast_3d(Tensor([4294967297],"float32"), Tensor([4294967297],"float16"), )
paddle.atleast_3d(Tensor([4294967297],"float16"), Tensor([1, 4294967297, 1],"float16"), )
paddle.atleast_3d(Tensor([4294967297],"float16"), Tensor([1, 4294967297, 1],"float16"), )
paddle.atleast_3d(Tensor([4294967297],"float16"), Tensor([1, 4294967297],"float16"), )
paddle.atleast_3d(Tensor([4294967297],"float16"), Tensor([1, 4294967297],"float16"), )
paddle.bincount(Tensor([2281701379],"int64"), weights=Tensor([2281701379],"float64"), )
paddle.bincount(Tensor([4294967297],"int64"), weights=Tensor([4294967297],"float16"), )
paddle.bitwise_and(Tensor([2, 228170138, 1, 5],"int64"), Tensor([228170138, 4, 1],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 76056713, 5],"int64"), Tensor([3, 4, 76056713],"int64"), )
paddle.bitwise_and(Tensor([2, 570425345, 1, 5],"int64"), Tensor([570425345, 4, 1],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 190141782, 5],"int64"), Tensor([3, 4, 190141782],"int64"), )
paddle.bitwise_and(Tensor([570425345, 4, 1],"int64"), Tensor([2, 570425345, 1, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 190141782],"int64"), Tensor([2, 3, 190141782, 5],"int64"), )
paddle.bitwise_and(Tensor([228170138, 4, 1],"int64"), Tensor([2, 228170138, 1, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 76056713],"int64"), Tensor([2, 3, 76056713, 5],"int64"), )
paddle.bitwise_and(Tensor([570425345, 4, 1],"int64"), Tensor([2, 570425345, 1, 5],"int64"), out=Tensor([2, 570425345, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 760567127, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 760567127, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 190141782],"int64"), Tensor([2, 3, 190141782, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([152113426, 3, 1, 5],"int64"), out=Tensor([152113426, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([228170138, 4, 1],"int64"), Tensor([2, 228170138, 1, 5],"int64"), out=Tensor([2, 228170138, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 76056713],"int64"), Tensor([2, 3, 76056713, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 380283564],"int64"), out=Tensor([2, 3, 4, 380283564],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([38028357, 3, 1, 5],"int64"), out=Tensor([38028357, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([57042535, 4, 1],"int64"), Tensor([2, 57042535, 1, 5],"int64"), out=Tensor([2, 57042535, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 76056713, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 76056713, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 95070891],"int64"), out=Tensor([2, 3, 4, 95070891],"int64"), )
paddle.bitwise_left_shift(Tensor([200, 21474837],"int16"), Tensor([21474837],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 4294967297],"int16"), Tensor([4294967297],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 21474837],"int16"), Tensor([21474837],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 4294967297],"int16"), Tensor([4294967297],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 11408507],"int32"), Tensor([11408507],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 2281701379],"int32"), Tensor([2281701379],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 11408507],"int32"), Tensor([11408507],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 2281701379],"int32"), Tensor([2281701379],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 11408507],"int64"), Tensor([11408507],"int64"), )
paddle.bitwise_left_shift(Tensor([200, 2281701379],"int64"), Tensor([2281701379],"int64"), )
paddle.bitwise_left_shift(Tensor([200, 11408507],"int64"), Tensor([11408507],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 2281701379],"int64"), Tensor([2281701379],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 21474837],"int8"), Tensor([21474837],"int8"), )
paddle.bitwise_left_shift(Tensor([200, 4294967297],"int8"), Tensor([4294967297],"int8"), )
paddle.bitwise_left_shift(Tensor([200, 21474837],"int8"), Tensor([21474837],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 4294967297],"int8"), Tensor([4294967297],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 21474837],"uint8"), Tensor([21474837],"uint8"), )
paddle.bitwise_left_shift(Tensor([200, 4294967297],"uint8"), Tensor([4294967297],"uint8"), )
paddle.bitwise_left_shift(Tensor([200, 21474837],"uint8"), Tensor([21474837],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 4294967297],"uint8"), Tensor([4294967297],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([4294967297],"int16"), Tensor([200, 4294967297],"int16"), )
paddle.bitwise_left_shift(Tensor([21474837],"int16"), Tensor([200, 21474837],"int16"), )
paddle.bitwise_left_shift(Tensor([4294967297],"int16"), Tensor([200, 4294967297],"int16"), False, )
paddle.bitwise_left_shift(Tensor([21474837],"int16"), Tensor([200, 21474837],"int16"), False, )
paddle.bitwise_left_shift(Tensor([2281701379],"int32"), Tensor([200, 2281701379],"int32"), )
paddle.bitwise_left_shift(Tensor([11408507],"int32"), Tensor([200, 11408507],"int32"), )
paddle.bitwise_left_shift(Tensor([2281701379],"int32"), Tensor([200, 2281701379],"int32"), False, )
paddle.bitwise_left_shift(Tensor([11408507],"int32"), Tensor([200, 11408507],"int32"), False, )
paddle.bitwise_left_shift(Tensor([2281701379],"int64"), Tensor([200, 2281701379],"int64"), )
paddle.bitwise_left_shift(Tensor([11408507],"int64"), Tensor([200, 11408507],"int64"), )
paddle.bitwise_left_shift(Tensor([2281701379],"int64"), Tensor([200, 2281701379],"int64"), False, )
paddle.bitwise_left_shift(Tensor([11408507],"int64"), Tensor([200, 11408507],"int64"), False, )
paddle.bitwise_left_shift(Tensor([4294967297],"int8"), Tensor([200, 4294967297],"int8"), )
paddle.bitwise_left_shift(Tensor([21474837],"int8"), Tensor([200, 21474837],"int8"), )
paddle.bitwise_left_shift(Tensor([4294967297],"int8"), Tensor([200, 4294967297],"int8"), False, )
paddle.bitwise_left_shift(Tensor([21474837],"int8"), Tensor([200, 21474837],"int8"), False, )
paddle.bitwise_left_shift(Tensor([4294967297],"uint8"), Tensor([200, 4294967297],"uint8"), )
paddle.bitwise_left_shift(Tensor([21474837],"uint8"), Tensor([200, 21474837],"uint8"), )
paddle.bitwise_left_shift(Tensor([4294967297],"uint8"), Tensor([200, 4294967297],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([21474837],"uint8"), Tensor([200, 21474837],"uint8"), False, )
paddle.bitwise_or(Tensor([2, 228170138, 1, 5],"int64"), Tensor([228170138, 4, 1],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 76056713, 5],"int64"), Tensor([3, 4, 76056713],"int64"), )
paddle.bitwise_or(Tensor([2, 570425345, 1, 5],"int64"), Tensor([570425345, 4, 1],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 190141782, 5],"int64"), Tensor([3, 4, 190141782],"int64"), )
paddle.bitwise_or(Tensor([570425345, 4, 1],"int64"), Tensor([2, 570425345, 1, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 190141782],"int64"), Tensor([2, 3, 190141782, 5],"int64"), )
paddle.bitwise_or(Tensor([228170138, 4, 1],"int64"), Tensor([2, 228170138, 1, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 76056713],"int64"), Tensor([2, 3, 76056713, 5],"int64"), )
paddle.bitwise_or(Tensor([570425345, 4, 1],"int64"), Tensor([2, 570425345, 1, 5],"int64"), out=Tensor([2, 570425345, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 760567127, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 760567127, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 190141782],"int64"), Tensor([2, 3, 190141782, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([152113426, 3, 1, 5],"int64"), out=Tensor([152113426, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([228170138, 4, 1],"int64"), Tensor([2, 228170138, 1, 5],"int64"), out=Tensor([2, 228170138, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 76056713],"int64"), Tensor([2, 3, 76056713, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 380283564],"int64"), out=Tensor([2, 3, 4, 380283564],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([38028357, 3, 1, 5],"int64"), out=Tensor([38028357, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([57042535, 4, 1],"int64"), Tensor([2, 57042535, 1, 5],"int64"), out=Tensor([2, 57042535, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 76056713, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 76056713, 5],"int64"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 95070891],"int64"), out=Tensor([2, 3, 4, 95070891],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 21474837],"int16"), Tensor([21474837],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 4294967297],"int16"), Tensor([4294967297],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 11408507],"int32"), Tensor([11408507],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 2281701379],"int32"), Tensor([2281701379],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 11408507],"int64"), Tensor([11408507],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 2281701379],"int64"), Tensor([2281701379],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 21474837],"int8"), Tensor([21474837],"int8"), )
paddle.bitwise_right_shift(Tensor([200, 4294967297],"int8"), Tensor([4294967297],"int8"), )
paddle.bitwise_right_shift(Tensor([200, 21474837],"uint8"), Tensor([21474837],"uint8"), )
paddle.bitwise_right_shift(Tensor([200, 4294967297],"uint8"), Tensor([4294967297],"uint8"), )
paddle.bitwise_right_shift(Tensor([200, 21474837],"uint8"), Tensor([21474837],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 4294967297],"uint8"), Tensor([4294967297],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([4294967297],"int16"), Tensor([200, 4294967297],"int16"), )
paddle.bitwise_right_shift(Tensor([21474837],"int16"), Tensor([200, 21474837],"int16"), )
paddle.bitwise_right_shift(Tensor([2281701379],"int32"), Tensor([200, 2281701379],"int32"), )
paddle.bitwise_right_shift(Tensor([11408507],"int32"), Tensor([200, 11408507],"int32"), )
paddle.bitwise_right_shift(Tensor([2281701379],"int64"), Tensor([200, 2281701379],"int64"), )
paddle.bitwise_right_shift(Tensor([11408507],"int64"), Tensor([200, 11408507],"int64"), )
paddle.bitwise_right_shift(Tensor([4294967297],"int8"), Tensor([200, 4294967297],"int8"), )
paddle.bitwise_right_shift(Tensor([21474837],"int8"), Tensor([200, 21474837],"int8"), )
paddle.bitwise_right_shift(Tensor([4294967297],"uint8"), Tensor([200, 4294967297],"uint8"), )
paddle.bitwise_right_shift(Tensor([21474837],"uint8"), Tensor([200, 21474837],"uint8"), )
paddle.bitwise_right_shift(Tensor([4294967297],"uint8"), Tensor([200, 4294967297],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([21474837],"uint8"), Tensor([200, 21474837],"uint8"), False, )
paddle.bitwise_xor(Tensor([2, 228170138, 1, 5],"int64"), Tensor([228170138, 4, 1],"int64"), )
paddle.bitwise_xor(Tensor([2, 3, 76056713, 5],"int64"), Tensor([3, 4, 76056713],"int64"), )
paddle.bitwise_xor(Tensor([2, 570425345, 1, 5],"int64"), Tensor([570425345, 4, 1],"int64"), )
paddle.bitwise_xor(Tensor([2, 3, 190141782, 5],"int64"), Tensor([3, 4, 190141782],"int64"), )
paddle.bitwise_xor(Tensor([570425345, 4, 1],"int64"), Tensor([2, 570425345, 1, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 190141782],"int64"), Tensor([2, 3, 190141782, 5],"int64"), )
paddle.bitwise_xor(Tensor([228170138, 4, 1],"int64"), Tensor([2, 228170138, 1, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 76056713],"int64"), Tensor([2, 3, 76056713, 5],"int64"), )
paddle.bitwise_xor(Tensor([570425345, 4, 1],"int64"), Tensor([2, 570425345, 1, 5],"int64"), out=Tensor([2, 570425345, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 760567127, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 760567127, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 190141782],"int64"), Tensor([2, 3, 190141782, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([152113426, 3, 1, 5],"int64"), out=Tensor([152113426, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([228170138, 4, 1],"int64"), Tensor([2, 228170138, 1, 5],"int64"), out=Tensor([2, 228170138, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 76056713],"int64"), Tensor([2, 3, 76056713, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 380283564],"int64"), out=Tensor([2, 3, 4, 380283564],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([38028357, 3, 1, 5],"int64"), out=Tensor([38028357, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([57042535, 4, 1],"int64"), Tensor([2, 57042535, 1, 5],"int64"), out=Tensor([2, 57042535, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 76056713, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 76056713, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 95070891],"int64"), out=Tensor([2, 3, 4, 95070891],"int64"), )
paddle.bmm(Tensor([1008, 17685, 128],"float32"), Tensor([1008, 128, 17685],"float32"), )
paddle.bmm(Tensor([1008, 7, 323371],"float32"), Tensor([1008, 323371, 7],"float32"), )
paddle.bmm(Tensor([1008, 7, 323371],"float32"), Tensor([1008, 323371, 7],"float32"), )
paddle.bmm(Tensor([1008, 17685, 128],"float32"), Tensor([1008, 128, 17685],"float32"), )
paddle.bmm(Tensor([2546542, 7, 7],"float32"), Tensor([2546542, 7, 128],"float32"), )
paddle.bmm(Tensor([112, 165, 123469],"float32"), Tensor([112, 123469, 64],"float32"), )
paddle.bmm(Tensor([282950, 165, 126],"float32"), Tensor([282950, 126, 64],"float32"), )
paddle.bmm(Tensor([112, 165, 318318],"float32"), Tensor([112, 318318, 64],"float32"), )
paddle.bmm(Tensor([216071, 165, 165],"float32"), Tensor([216071, 165, 64],"float32"), )
paddle.bmm(Tensor([112, 165, 123469],"float32"), Tensor([112, 123469, 126],"float32"), )
paddle.bmm(Tensor([282950, 165, 64],"float32"), Tensor([282950, 64, 126],"float32"), )
paddle.bmm(Tensor([112, 165, 161686],"float32"), Tensor([112, 161686, 126],"float32"), )
paddle.bmm(Tensor([112, 318318, 64],"float32"), Tensor([112, 64, 318318],"float32"), )
paddle.bmm(Tensor([112, 165, 123469],"float32"), Tensor([112, 123469, 165],"float32"), )
paddle.bmm(Tensor([112, 165, 123469],"float32"), Tensor([112, 123469, 165],"float32"), )
paddle.bmm(Tensor([112, 318318, 64],"float32"), Tensor([112, 64, 318318],"float32"), )
paddle.bmm(Tensor([112, 186, 109529],"float32"), Tensor([112, 109529, 64],"float32"), )
paddle.bmm(Tensor([282950, 186, 126],"float32"), Tensor([282950, 126, 64],"float32"), )
paddle.bmm(Tensor([112, 186, 318318],"float32"), Tensor([112, 318318, 64],"float32"), )
paddle.bmm(Tensor([191676, 186, 186],"float32"), Tensor([191676, 186, 64],"float32"), )
paddle.bmm(Tensor([112, 186, 109529],"float32"), Tensor([112, 109529, 126],"float32"), )
paddle.bmm(Tensor([282950, 186, 64],"float32"), Tensor([282950, 64, 126],"float32"), )
paddle.bmm(Tensor([112, 186, 161686],"float32"), Tensor([112, 161686, 126],"float32"), )
paddle.bmm(Tensor([112, 318318, 64],"float32"), Tensor([112, 64, 318318],"float32"), )
paddle.bmm(Tensor([112, 186, 109529],"float32"), Tensor([112, 109529, 186],"float32"), )
paddle.bmm(Tensor([112, 186, 109529],"float32"), Tensor([112, 109529, 186],"float32"), )
paddle.bmm(Tensor([112, 318318, 64],"float32"), Tensor([112, 64, 318318],"float32"), )
paddle.bmm(Tensor([112, 206, 98895],"float32"), Tensor([112, 98895, 64],"float32"), )
paddle.bmm(Tensor([282950, 206, 126],"float32"), Tensor([282950, 126, 64],"float32"), )
paddle.bmm(Tensor([112, 206, 318318],"float32"), Tensor([112, 318318, 64],"float32"), )
paddle.bmm(Tensor([173066, 206, 206],"float32"), Tensor([173066, 206, 64],"float32"), )
paddle.bmm(Tensor([112, 206, 98895],"float32"), Tensor([112, 98895, 126],"float32"), )
paddle.bmm(Tensor([282950, 206, 64],"float32"), Tensor([282950, 64, 126],"float32"), )
paddle.bmm(Tensor([112, 206, 161686],"float32"), Tensor([112, 161686, 126],"float32"), )
paddle.bmm(Tensor([112, 318318, 64],"float32"), Tensor([112, 64, 318318],"float32"), )
paddle.bmm(Tensor([112, 206, 98895],"float32"), Tensor([112, 98895, 206],"float32"), )
paddle.bmm(Tensor([112, 206, 98895],"float32"), Tensor([112, 98895, 206],"float32"), )
paddle.bmm(Tensor([112, 318318, 64],"float32"), Tensor([112, 64, 318318],"float32"), )
paddle.bmm(Tensor([112, 209, 97476],"float32"), Tensor([112, 97476, 64],"float32"), )
paddle.bmm(Tensor([282950, 209, 126],"float32"), Tensor([282950, 126, 64],"float32"), )
paddle.bmm(Tensor([112, 209, 318318],"float32"), Tensor([112, 318318, 64],"float32"), )
paddle.bmm(Tensor([170582, 209, 209],"float32"), Tensor([170582, 209, 64],"float32"), )
paddle.bmm(x=Tensor([2, 2, 570425345],"float32"), y=Tensor([2, 570425345, 2],"float32"), )
paddle.bmm(x=Tensor([2, 2, 570425345],"float32"), y=Tensor([2, 570425345, 2],"float32"), )
paddle.bmm(x=Tensor([2, 2, 1073741825],"float16"), y=Tensor([2, 1073741825, 2],"float16"), )
paddle.bmm(x=Tensor([2, 2, 1073741825],"float16"), y=Tensor([2, 1073741825, 2],"float16"), )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 380283564],"bool"),Tensor([1, 1, 1, 6, 380283564],"bool"),Tensor([1, 6, 1, 6, 380283564],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 380283564],"bool"),Tensor([1, 1, 1, 6, 380283564],"bool"),Tensor([1, 6, 1, 6, 380283564],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 63380594],"bool"),Tensor([1, 1, 1, 6, 63380594],"bool"),Tensor([1, 6, 1, 6, 63380594],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 380283564],"float32"),Tensor([1, 1, 1, 6, 380283564],"float32"),Tensor([1, 6, 1, 6, 380283564],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 380283564],"float32"),Tensor([1, 1, 1, 6, 380283564],"float32"),Tensor([1, 6, 1, 6, 380283564],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 63380594],"float32"),Tensor([1, 1, 1, 6, 63380594],"float32"),Tensor([1, 6, 1, 6, 63380594],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 10563433],"bool"),Tensor([6, 10563433, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 21126865],"bool"),Tensor([6, 21126865, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 10563433],"float32"),Tensor([6, 10563433, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 21126865],"float32"),Tensor([6, 21126865, 6, 3],"float32"),], )
paddle.broadcast_tensors(list[Tensor([570425345, 4],"float32"),Tensor([3, 570425345],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 2281701379],"float32"),Tensor([3, 1],"float32"),Tensor([3, 2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([2281701379, 1],"float32"),Tensor([2281701379, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([760567127, 4],"float32"),Tensor([3, 760567127],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([570425345, 1],"float32"),Tensor([570425345, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 760567127],"float32"),Tensor([3, 1],"float32"),Tensor([3, 760567127],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 570425345, 2],"float32"),Tensor([570425345],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 2281701379, 2],"float32"),Tensor([2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 2147483649, 1],"float16"),Tensor([2, 2, 1, 30],"float16"),Tensor([1, 2, 2147483649, 1],"float16"),], )
paddle.broadcast_tensors(list[Tensor([2, 2147483649, 1],"float16"),Tensor([2, 2, 1, 30],"float16"),Tensor([1, 2, 2147483649, 1],"float16"),], )
paddle.broadcast_tensors(list[Tensor([71582789, 60, 1],"float16"),Tensor([6, 71582789, 1, 10],"float16"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 35791395],"float16"),Tensor([6, 2, 35791395, 10],"float16"),], )
paddle.broadcast_tensors(list[Tensor([71582789, 60, 1],"float16"),Tensor([6, 71582789, 1, 10],"float16"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 35791395],"float16"),Tensor([6, 2, 35791395, 10],"float16"),], )
paddle.broadcast_tensors(list[Tensor([2281701379],"float32"),Tensor([1, 2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2281701379],"float32"),Tensor([1, 2281701379],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 71303169, 4],"float32"),Tensor([3, 71303169],"float32"),Tensor([71303169, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([2281701379, 1],"float32"),Tensor([1, 2281701379, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 760567127, 4],"float32"),Tensor([3, 760567127],"float32"),Tensor([760567127, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 190141782, 4],"float32"),Tensor([3, 190141782],"float32"),Tensor([190141782, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([570425345, 1],"float32"),Tensor([1, 570425345, 4],"float32"),], )
paddle.broadcast_tensors(tuple(Tensor([760567127, 1],"float32"),Tensor([760567127, 3],"float32"),Tensor([760567127, 3],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float32"),Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([760567127, 1],"float32"),Tensor([760567127, 3],"float32"),Tensor([760567127, 3],"float32"),), )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float32"),Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),), )
paddle.bucketize(Tensor([2, 2147483649],"float16"), Tensor([2147483649],"float16"), )
paddle.bucketize(Tensor([2, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.bucketize(Tensor([2, 2147483649],"float16"), Tensor([2147483649],"float16"), out_int32=True, )
paddle.bucketize(Tensor([2, 4294967297],"float16"), Tensor([4294967297],"float16"), out_int32=True, )
paddle.bucketize(Tensor([2, 2147483649],"float16"), Tensor([2147483649],"float16"), right=True, )
paddle.bucketize(Tensor([2, 4294967297],"float16"), Tensor([4294967297],"float16"), right=True, )
paddle.cartesian_prod(list[Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),Tensor([1],"int64"),], )
paddle.cartesian_prod(list[Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),Tensor([1],"int64"),], )
paddle.cartesian_prod(list[Tensor([4294967297],"float16"),Tensor([5],"float16"),Tensor([4294967297],"float16"),], )
paddle.cartesian_prod(list[Tensor([4294967297],"float16"),Tensor([5],"float16"),Tensor([4294967297],"float16"),], )
paddle.cartesian_prod(list[Tensor([2281701379],"int32"),Tensor([5],"int32"),Tensor([2281701379],"int32"),], )
paddle.cartesian_prod(list[Tensor([2281701379],"int32"),Tensor([5],"int32"),Tensor([2281701379],"int32"),], )
paddle.cartesian_prod(list[Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),Tensor([5],"int32"),], )
paddle.cartesian_prod(list[Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),Tensor([5],"int32"),], )
paddle.cartesian_prod(list[Tensor([5],"int64"),Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.cartesian_prod(list[Tensor([5],"int64"),Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.cast(Tensor([2281701379],"bool"), type(numpy.bool), )
paddle.cdist(Tensor([300, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), p=1, )
paddle.cdist(Tensor([6380, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), p=1, )
paddle.cdist(Tensor([8550, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), p=1, )
paddle.cdist(Tensor([900, 2281701379],"float32"), Tensor([1, 2281701379],"float32"), p=1, )
paddle.column_stack(list[Tensor([4294967297],"float16"),Tensor([4294967297, 1],"float16"),], )
paddle.column_stack(list[Tensor([4294967297],"float16"),Tensor([4294967297, 1],"float16"),], )
paddle.copysign(Tensor([3, 286331154, 5],"float16"), Tensor([286331154, 5],"float16"), )
paddle.copysign(Tensor([3, 4, 357913942],"float16"), Tensor([4, 357913942],"float16"), )
paddle.copysign(Tensor([3, 858993460, 5],"float16"), Tensor([858993460, 5],"float16"), )
paddle.copysign(Tensor([3, 4, 1073741825],"float16"), Tensor([4, 1073741825],"float16"), )
paddle.copysign(Tensor([3, 4, 357913942],"float16"), Tensor([357913942],"float16"), )
paddle.copysign(Tensor([3, 4, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.copysign(Tensor([858993460, 5],"float16"), Tensor([3, 858993460, 5],"float16"), )
paddle.copysign(Tensor([4, 1073741825],"float16"), Tensor([3, 4, 1073741825],"float16"), )
paddle.copysign(Tensor([286331154, 5],"float16"), Tensor([3, 286331154, 5],"float16"), )
paddle.copysign(Tensor([4, 357913942],"float16"), Tensor([3, 4, 357913942],"float16"), )
paddle.diff(Tensor([760567127, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([760567127, 3],"float32"), )
paddle.diff(Tensor([760567127, 4],"float32"), n=1, axis=-1, prepend=Tensor([760567127, 3],"float32"), append=None, )
paddle.diff(Tensor([2, 2281701379],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 2281701379],"float32"), )
paddle.diff(Tensor([2, 760567127],"float32"), n=1, axis=0, prepend=Tensor([3, 760567127],"float32"), append=None, )
paddle.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4294967297],"float16"), )
paddle.diff(x=Tensor([10],"float16"), prepend=Tensor([4294967297],"float16"), append=Tensor([4294967297],"float16"), )
paddle.dist(Tensor([2, 2, 2281701379, 2],"float32"), Tensor([1, 1, 2281701379, 1],"float32"), 2, )
paddle.dist(x=Tensor([4294967297],"float16"), y=Tensor([4, 4294967297],"float16"), )
paddle.dist(x=Tensor([1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), )
paddle.dist(x=Tensor([4294967297],"float16"), y=Tensor([4, 4294967297],"float16"), p=4, )
paddle.dist(x=Tensor([1073741825],"float16"), y=Tensor([4, 1073741825],"float16"), p=4, )
paddle.dist(x=Tensor([19173962, 1, 1, 4, 4],"float16"), y=Tensor([19173962, 8, 7, 1, 4],"float16"), )
paddle.dist(x=Tensor([2, 134217729, 4, 4],"float16"), y=Tensor([7, 134217729, 4],"float16"), )
paddle.dist(x=Tensor([2, 153391690, 4, 4],"float16"), y=Tensor([7, 153391690, 4],"float16"), )
paddle.dist(x=Tensor([2, 715827883, 1, 3],"float16"), y=Tensor([715827883, 3, 1],"float16"), p=7, )
paddle.dist(x=Tensor([2, 4, 178956971, 3],"float16"), y=Tensor([4, 3, 178956971],"float16"), p=7, )
paddle.dist(x=Tensor([2, 4, 1, 536870913],"float16"), y=Tensor([4, 536870913, 1],"float16"), p=7, )
paddle.dist(x=Tensor([2, 1431655766, 1, 3],"float16"), y=Tensor([1431655766, 3, 1],"float16"), p=7, )
paddle.dist(x=Tensor([2, 4, 1, 1073741825],"float16"), y=Tensor([4, 1073741825, 1],"float16"), p=7, )
paddle.dist(x=Tensor([2, 4, 357913942, 3],"float16"), y=Tensor([4, 3, 357913942],"float16"), p=7, )
paddle.divide(Tensor([2281701379, 128],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.divide(Tensor([760567127, 3, 3, 4],"float32"), Tensor([760567127, 3, 1, 1],"float32"), )
paddle.divide(Tensor([190141782, 3, 3, 4],"float32"), Tensor([190141782, 3, 1, 4],"float32"), )
paddle.divide(Tensor([2, 3, 3, 380283564],"float32"), Tensor([2, 3, 1, 380283564],"float32"), )
paddle.divide(Tensor([2, 3, 3, 126761188],"float32"), Tensor([3, 1, 126761188],"float32"), )
paddle.divide(Tensor([2, 3, 3, 760567127],"float32"), Tensor([3, 1, 760567127],"float32"), )
paddle.divide(x=Tensor([187679, 12158],"float32"), y=Tensor([12158],"float32"), )
paddle.divide(x=Tensor([187679, 2281701379],"float32"), y=Tensor([2281701379],"float32"), )
paddle.divide(x=Tensor([2147483649, 1],"float16"), y=Tensor([2147483649, 2],"float16"), )
paddle.divide(x=Tensor([4294967297],"float16"), y=Tensor([4294967297, 1],"float16"), )
paddle.divide(x=Tensor([4294967297],"float16"), y=Tensor([4294967297, 1],"float16"), )
paddle.dstack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297, 1],"float16"),], )
paddle.dstack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297, 1],"float16"),], )
paddle.dstack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297],"float16"),], )
paddle.dstack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297],"float16"),], )
paddle.einsum("..., ...", Tensor([429496730, 10],"float16"), Tensor([2, 429496730, 10],"float16"), )
paddle.einsum("..., ...", Tensor([3, 1431655766],"float16"), Tensor([2, 3, 1431655766],"float16"), )
paddle.einsum("..., ...", Tensor([214748365, 10],"float16"), Tensor([2, 214748365, 10],"float16"), )
paddle.einsum("..., ...", Tensor([3, 715827883],"float16"), Tensor([2, 3, 715827883],"float16"), )
paddle.einsum("...a,a...->...", Tensor([107374183, 2, 2, 10],"float16"), Tensor([10, 107374183, 2, 2],"float16"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 2, 357913942],"float16"), Tensor([357913942, 3, 2, 2],"float16"), )
paddle.einsum("...a,a...->...", Tensor([3, 2, 2, 357913942],"float16"), Tensor([357913942, 3, 2, 2],"float16"), )
paddle.einsum("...a,a...->...", Tensor([107374183, 2, 2, 10],"float16"), Tensor([10, 107374183, 2, 2],"float16"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([256, 16, 128, 4353],"float32"), Tensor([256, 4353, 16, 16],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([178258, 16, 128, 50],"float32"), Tensor([178258, 50, 16, 16],"float32"), )
paddle.einsum("...hqk,...khd->...qhd", Tensor([256, 16, 128, 34817],"float32"), Tensor([256, 34817, 16, 16],"float32"), )
paddle.einsum("...i, ...i", Tensor([2, 3, 715827883],"float16"), Tensor([715827883],"float16"), )
paddle.einsum("...i, ...i", Tensor([2, 3, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("...ij,...i->j...", Tensor([390451573, 11],"float16"), Tensor([3, 4, 5, 390451573],"float16"), )
paddle.einsum("...ij,...i->j...", Tensor([71582789, 11],"float16"), Tensor([3, 4, 5, 71582789],"float16"), )
paddle.einsum("...ij,...jk->...ik", Tensor([858993460, 5],"float16"), Tensor([5, 858993460],"float16"), )
paddle.einsum("...ij,...jk->...ik", Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.einsum("...ij,...jk->...ik", Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.einsum("...ij,...jk->...ik", Tensor([858993460, 5],"float16"), Tensor([5, 858993460],"float16"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([5941931, 6, 8, 8],"float32"), Tensor([5941931, 3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 17825793, 8, 8],"float32"), Tensor([2, 3, 17825793, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([1980644, 6, 8, 8],"float32"), Tensor([1980644, 3, 6, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2, 5941931, 8, 8],"float32"), Tensor([2, 3, 5941931, 8, 8],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([2910334, 28, 28],"float32"), Tensor([3, 2910334, 28, 28],"float32"), )
paddle.einsum("...ijk, ...xijk -> ...xjk", Tensor([970112, 28, 28],"float32"), Tensor([3, 970112, 28, 28],"float32"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 477218589, 3],"float16"), Tensor([3, 3, 477218589],"float16"), )
paddle.einsum("...jk, ...kl->...jl", Tensor([3, 477218589, 3],"float16"), Tensor([3, 3, 477218589],"float16"), )
paddle.einsum("...km,mlk->...lm", Tensor([4, 32, 32, 557057],"float32"), Tensor([557057, 32, 32],"float32"), )
paddle.einsum("...km,mlk->...lm", Tensor([4, 32, 32, 2228225],"float32"), Tensor([2228225, 32, 32],"float32"), )
paddle.einsum("...lm, mlk->...km", Tensor([4, 32, 32, 557057],"float32"), Tensor([557057, 32, 32],"float32"), )
paddle.einsum("...lm, mlk->...km", Tensor([4, 32, 32, 2228225],"float32"), Tensor([2228225, 32, 32],"float32"), )
paddle.einsum("...qhd,...khd->...hqk", Tensor([178258, 128, 16, 16],"float32"), Tensor([178258, 50, 16, 16],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 1, 14626291],"float32"), Tensor([13, 4, 3, 14626291, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([11883862, 4, 3, 1, 2],"float32"), Tensor([11883862, 4, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 3656573, 3, 1, 2],"float32"), Tensor([13, 3656573, 3, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 2742430, 1, 2],"float32"), Tensor([13, 4, 2742430, 2, 8],"float32"), )
paddle.einsum("...qk,...kd->...qd", Tensor([13, 4, 3, 1, 1828287],"float32"), Tensor([13, 4, 3, 1828287, 8],"float32"), )
paddle.einsum("a...d,...cb->...abcd", Tensor([59652324, 3, 2, 3, 4],"float16"), Tensor([12, 59652324],"float16"), )
paddle.einsum("a...d,...cb->...abcd", Tensor([357913942, 3, 2, 3, 4],"float16"), Tensor([12, 357913942],"float16"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 3565159, 8, 5],"float32"), Tensor([3565159, 64, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 891290, 8, 5],"float32"), Tensor([891290, 64, 8, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 128, 55706, 5],"float32"), Tensor([128, 64, 55706, 5],"float32"), )
paddle.einsum("abcd,becd->aecd", Tensor([16, 128, 8, 34817],"float32"), Tensor([128, 64, 8, 34817],"float32"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 143165577, 5, 3],"float16"), Tensor([3, 143165577, 5],"float16"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 4, 178956971, 3],"float16"), Tensor([3, 4, 178956971],"float16"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 4, 5, 107374183],"float16"), Tensor([107374183, 4, 5],"float16"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 4, 5, 214748365],"float16"), Tensor([214748365, 4, 5],"float16"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 286331154, 5, 3],"float16"), Tensor([3, 286331154, 5],"float16"), )
paddle.einsum("abcd,dfg->abcfg", Tensor([2, 4, 357913942, 3],"float16"), Tensor([3, 4, 357913942],"float16"), )
paddle.einsum("ak, kn-> an", Tensor([15000, 152114],"float32"), Tensor([152114, 50],"float32"), )
paddle.einsum("ak, kn-> an", Tensor([15000, 45634028],"float32"), Tensor([45634028, 50],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 285212673],"float32"), Tensor([1, 8, 285212673, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 327079, 1, 109],"float32"), Tensor([1, 327079, 109, 64],"float32"), )
paddle.einsum("b h i j, b h j d -> b h i d", Tensor([1, 8, 1, 4456449],"float32"), Tensor([1, 8, 4456449, 64],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([2037234, 4, 5, 1, 8],"float32"), Tensor([2037234, 4, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 626842, 5, 1, 8],"float32"), Tensor([13, 626842, 5, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 783552, 1, 8],"float32"), Tensor([13, 4, 783552, 7, 8],"float32"), )
paddle.einsum("bhlqd,bhlkd->bhlqk", Tensor([13, 4, 5, 1, 1253683],"float32"), Tensor([13, 4, 5, 7, 1253683],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([190141782, 4, 3, 1, 1],"float32"), Tensor([190141782, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 58505164, 3, 1, 1],"float32"), Tensor([13, 58505164, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([71303169, 4, 3, 1, 1],"float32"), Tensor([71303169, 4, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhkd->bhlqd", Tensor([13, 21939437, 3, 1, 1],"float32"), Tensor([13, 21939437, 1, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 1, 43878873],"float32"), Tensor([13, 4, 1, 43878873, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([10186167, 4, 1, 1, 7],"float32"), Tensor([10186167, 4, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 3134206, 1, 1, 7],"float32"), Tensor([13, 3134206, 1, 7, 8],"float32"), )
paddle.einsum("bhlqk,bhlkd->bhlqd", Tensor([13, 4, 1, 1, 5484860],"float32"), Tensor([13, 4, 1, 5484860, 8],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([432, 14, 14, 26948],"float32"), Tensor([14, 14, 26948],"float32"), )
paddle.einsum("bhwc,hkc->bhwk", Tensor([432, 14, 14, 11641334],"float32"), Tensor([14, 14, 11641334],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([432, 14, 14, 26948],"float32"), Tensor([14, 14, 26948],"float32"), )
paddle.einsum("bhwc,wkc->bhwk", Tensor([432, 14, 14, 11641334],"float32"), Tensor([14, 14, 11641334],"float32"), )
paddle.einsum("bij,bjk->bik", Tensor([3, 4, 357913942],"float16"), Tensor([3, 357913942, 2],"float16"), )
paddle.einsum("bij,bjk->bik", Tensor([429496730, 4, 5],"float16"), Tensor([429496730, 5, 2],"float16"), )
paddle.einsum("bij,bjk->bik", Tensor([3, 4, 715827883],"float16"), Tensor([3, 715827883, 2],"float16"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 10969719, 4, 4],"float32"), Tensor([10969719, 4, 4],"float32"), )
paddle.einsum("bind,snd->bnis", Tensor([13, 142606337, 4, 4],"float32"), Tensor([142606337, 4, 4],"float32"), )
paddle.einsum("bixy,mixy,bmxy,mjxy,bjxy->bxy", Tensor([1228, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([1228, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([1228, 32, 241, 241],"float32"), )
paddle.einsum("bixy,mixy,bmxy,mjxy,bjxy->bxy", Tensor([1228, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([1228, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([1228, 32, 241, 241],"float32"), )
paddle.einsum("bixy,mixy,bmxy,mjxy,bjxy->bxy", Tensor([1228, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([1228, 32, 241, 241],"float32"), Tensor([32, 32, 1, 1],"float32"), Tensor([1228, 32, 241, 241],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([152113426, 5, 1, 1],"float32"), Tensor([152113426, 5, 1, 3],"float32"), )
paddle.einsum("blkd,bldq->blkq", Tensor([13, 58505164, 1, 1],"float32"), Tensor([13, 58505164, 1, 3],"float32"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([286331154, 3, 5],"float16"), Tensor([286331154, 2, 3, 4],"float16"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([1, 858993460, 5],"float16"), Tensor([1, 2, 858993460, 4],"float16"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([178956971, 3, 5],"float16"), Tensor([178956971, 2, 3, 4],"float16"), )
paddle.einsum("blq,bhlk->bhlqk", Tensor([1, 536870913, 5],"float16"), Tensor([1, 2, 536870913, 4],"float16"), )
paddle.einsum("blqd,bmdk->blqk", Tensor([2281701379, 5, 1, 1],"float32"), Tensor([2281701379, 1, 1, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 685608, 16, 16],"float32"), Tensor([685608, 16, 4, 1],"float32"), )
paddle.einsum("bmtd,mdhr->bmhtr", Tensor([13, 35651585, 16, 16],"float32"), Tensor([35651585, 16, 4, 1],"float32"), )
paddle.einsum("bn,anm,bm->ba", Tensor([2, 2147483649],"float16"), Tensor([3, 2147483649, 2],"float16"), Tensor([2, 2],"float16"), )
paddle.einsum("bn,anm,bm->ba", Tensor([2, 715827883],"float16"), Tensor([3, 715827883, 2],"float16"), Tensor([2, 2],"float16"), )
paddle.einsum("bnij,bjnd->bind", Tensor([71303169, 4, 2, 2],"float32"), Tensor([71303169, 2, 4, 4],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([11641334, 4, 7, 7],"float32"), Tensor([7, 11641334, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4656534, 7, 7],"float32"), Tensor([7, 10, 4656534, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10186167, 4, 7, 7],"float32"), Tensor([7, 10186167, 4, 8],"float32"), )
paddle.einsum("bnij,jbnd->ibnd", Tensor([10, 4074467, 7, 7],"float32"), Tensor([7, 10, 4074467, 8],"float32"), )
paddle.einsum("i..., i...", Tensor([715827883, 3, 2],"float16"), Tensor([715827883],"float16"), )
paddle.einsum("i..., i...", Tensor([4294967297, 3, 2],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 5093084, 4, 8],"float32"), Tensor([14, 5093084, 4, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 2037234, 8],"float32"), Tensor([14, 10, 2037234, 8],"float32"), )
paddle.einsum("ibnd,jbnd->bnij", Tensor([7, 10, 4, 4074467],"float32"), Tensor([14, 10, 4, 4074467],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 14, 2910334, 8],"float32"), Tensor([2, 2910334, 8],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 14, 4, 5820667],"float32"), Tensor([2, 4, 5820667],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 14, 142606337, 8],"float32"), Tensor([2, 142606337, 8],"float32"), )
paddle.einsum("ibnd,snd->ibns", Tensor([7, 14, 4, 285212673],"float32"), Tensor([2, 4, 285212673],"float32"), )
paddle.einsum("ic,pi->pc", Tensor([8912897, 256],"float32"), Tensor([128, 8912897],"float32"), )
paddle.einsum("ic,pi->pc", Tensor([17825793, 256],"float32"), Tensor([128, 17825793],"float32"), )
paddle.einsum("ij, j", Tensor([4, 1073741825],"float16"), Tensor([1073741825],"float16"), )
paddle.einsum("ij, j", Tensor([4, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("ij,...i->j...", Tensor([858993460, 5],"float16"), Tensor([3, 2, 858993460],"float16"), )
paddle.einsum("ij,...i->j...", Tensor([715827883, 5],"float16"), Tensor([3, 2, 715827883],"float16"), )
paddle.einsum("ij,j->i", Tensor([4, 1073741825],"float16"), Tensor([1073741825],"float16"), )
paddle.einsum("ij,j->i", Tensor([4, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("ij,jk", Tensor([4, 1073741825],"float16"), Tensor([1073741825, 6],"float16"), )
paddle.einsum("ij,jk", Tensor([4, 715827883],"float16"), Tensor([715827883, 6],"float16"), )
paddle.einsum("ij,jk,kl", Tensor([3, 1431655766],"float16"), Tensor([1431655766, 5],"float16"), Tensor([5, 6],"float16"), )
paddle.einsum("ij,jk,kl", Tensor([3, 858993460],"float16"), Tensor([858993460, 5],"float16"), Tensor([5, 6],"float16"), )
paddle.einsum("ij,jk,kl", Tensor([3, 4],"float16"), Tensor([4, 1073741825],"float16"), Tensor([1073741825, 6],"float16"), )
paddle.einsum("ij,jk,kl", Tensor([3, 4],"float16"), Tensor([4, 715827883],"float16"), Tensor([715827883, 6],"float16"), )
paddle.einsum("ij,kj->ik", Tensor([4, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 23282668, 2],"float32"), Tensor([7, 23282668, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 40744668, 2],"float32"), Tensor([7, 40744668, 4, 2],"float32"), )
paddle.einsum("ijbs,ibns->bnij", Tensor([7, 7, 14, 5820667],"float32"), Tensor([7, 14, 4, 5820667],"float32"), )
paddle.einsum("ijk, ik->jk", Tensor([429496730, 2, 5],"float16"), Tensor([429496730, 5],"float16"), )
paddle.einsum("ijk, ik->jk", Tensor([4, 2, 536870913],"float16"), Tensor([4, 536870913],"float16"), )
paddle.einsum("ijk, ik->jk", Tensor([858993460, 2, 5],"float16"), Tensor([858993460, 5],"float16"), )
paddle.einsum("ijk, ik->jk", Tensor([4, 2, 1073741825],"float16"), Tensor([4, 1073741825],"float16"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 477218589, 3],"float16"), Tensor([3, 3, 477218589],"float16"), )
paddle.einsum("ijk, ikl->ijl", Tensor([3, 477218589, 3],"float16"), Tensor([3, 3, 477218589],"float16"), )
paddle.einsum("ijk, jil -> kl", Tensor([214748365, 4, 5],"float16"), Tensor([4, 214748365, 2],"float16"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 286331154, 5],"float16"), Tensor([286331154, 3, 2],"float16"), )
paddle.einsum("ijk, jil -> kl", Tensor([3, 715827883, 5],"float16"), Tensor([715827883, 3, 2],"float16"), )
paddle.einsum("ijk, jil -> kl", Tensor([536870913, 4, 5],"float16"), Tensor([4, 536870913, 2],"float16"), )
paddle.einsum("ijk,jk->i", Tensor([3, 286331154, 5],"float16"), Tensor([286331154, 5],"float16"), )
paddle.einsum("ijk,jk->i", Tensor([3, 4, 357913942],"float16"), Tensor([4, 357913942],"float16"), )
paddle.einsum("ijk,jk->i", Tensor([3, 858993460, 5],"float16"), Tensor([858993460, 5],"float16"), )
paddle.einsum("ijk,jk->i", Tensor([3, 4, 1073741825],"float16"), Tensor([4, 1073741825],"float16"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 286331154, 5],"float16"), Tensor([286331154, 5],"float16"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 4, 357913942],"float16"), Tensor([4, 357913942],"float16"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 858993460, 5],"float16"), Tensor([858993460, 5],"float16"), )
paddle.einsum("ijk,jk->ij", Tensor([3, 4, 1073741825],"float16"), Tensor([4, 1073741825],"float16"), )
paddle.einsum("ijk,jk->ik", Tensor([3, 286331154, 5],"float16"), Tensor([286331154, 5],"float16"), )
paddle.einsum("ijk,jk->ik", Tensor([3, 4, 357913942],"float16"), Tensor([4, 357913942],"float16"), )
paddle.einsum("ijk,jk->ik", Tensor([3, 858993460, 5],"float16"), Tensor([858993460, 5],"float16"), )
paddle.einsum("ijk,jk->ik", Tensor([3, 4, 1073741825],"float16"), Tensor([4, 1073741825],"float16"), )
paddle.einsum("ijk,lk->ijl", Tensor([3, 4, 357913942],"float16"), Tensor([2, 357913942],"float16"), )
paddle.einsum("ijk,lk->ijl", Tensor([3, 4, 2147483649],"float16"), Tensor([2, 2147483649],"float16"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([71582789, 4, 5, 3],"float16"), Tensor([3, 71582789, 4],"float16"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 143165577, 5, 3],"float16"), Tensor([3, 2, 143165577],"float16"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 4, 5, 107374183],"float16"), Tensor([107374183, 2, 4],"float16"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 4, 5, 536870913],"float16"), Tensor([536870913, 2, 4],"float16"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([357913942, 4, 5, 3],"float16"), Tensor([3, 357913942, 4],"float16"), )
paddle.einsum("ijkl, lmn->ijn", Tensor([2, 715827883, 5, 3],"float16"), Tensor([3, 2, 715827883],"float16"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([71582789, 4, 5, 3],"float16"), Tensor([3, 71582789, 4],"float16"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 143165577, 5, 3],"float16"), Tensor([3, 2, 143165577],"float16"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 4, 5, 107374183],"float16"), Tensor([107374183, 2, 4],"float16"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 4, 5, 536870913],"float16"), Tensor([536870913, 2, 4],"float16"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([357913942, 4, 5, 3],"float16"), Tensor([3, 357913942, 4],"float16"), )
paddle.einsum("ijkl, lmn->kmn", Tensor([2, 715827883, 5, 3],"float16"), Tensor([3, 2, 715827883],"float16"), )
paddle.einsum("ik, ijk->j", Tensor([858993460, 5],"float16"), Tensor([858993460, 2, 5],"float16"), )
paddle.einsum("ik, ijk->j", Tensor([4, 1073741825],"float16"), Tensor([4, 2, 1073741825],"float16"), )
paddle.einsum("ik, ijk->j", Tensor([429496730, 5],"float16"), Tensor([429496730, 2, 5],"float16"), )
paddle.einsum("ik, ijk->j", Tensor([4, 536870913],"float16"), Tensor([4, 2, 536870913],"float16"), )
paddle.einsum("ji,j", Tensor([1073741825, 4],"float16"), Tensor([1073741825],"float16"), )
paddle.einsum("ji,j", Tensor([4294967297, 4],"float16"), Tensor([4294967297],"float16"), )
paddle.einsum("k...,...jk->...k", Tensor([59652324, 3, 2, 3, 4],"float16"), Tensor([12, 59652324],"float16"), )
paddle.einsum("k...,...jk->...k", Tensor([357913942, 3, 2, 3, 4],"float16"), Tensor([12, 357913942],"float16"), )
paddle.einsum("lbnd,mlb->mbnd", Tensor([8, 8912897, 4, 8],"float32"), Tensor([1, 8, 8912897],"float32"), )
paddle.einsum("lbnd,mlb->mbnd", Tensor([8, 285212673, 4, 8],"float32"), Tensor([1, 8, 285212673],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([5093084, 14, 4, 8],"float32"), Tensor([5093084, 8, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 71303169, 4, 8],"float32"), Tensor([1, 8, 71303169],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 14, 4, 40744668],"float32"), Tensor([1, 40744668, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([20372334, 14, 4, 8],"float32"), Tensor([20372334, 8, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 14, 4, 162978670],"float32"), Tensor([1, 162978670, 14],"float32"), )
paddle.einsum("mbnd,mlb->lbnd", Tensor([1, 285212673, 4, 8],"float32"), Tensor([1, 8, 285212673],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 380283564, 2],"float32"), Tensor([2, 2, 380283564],"float32"), )
paddle.einsum("nbka,ahc->nbkhc", Tensor([1, 3, 570425345, 2],"float32"), Tensor([2, 2, 570425345],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 152113426],"float32"), Tensor([152113426, 2, 4],"float32"), )
paddle.einsum("nbqa,ahc->nbqhc", Tensor([1, 3, 5, 285212673],"float32"), Tensor([285212673, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([23767723, 3, 5, 2, 4],"float32"), Tensor([23767723, 3, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 71303169, 5, 2, 4],"float32"), Tensor([1, 71303169, 4, 2, 4],"float32"), )
paddle.einsum("nbqhc,nbkhc->nbhqk", Tensor([1, 3, 5, 47535446, 4],"float32"), Tensor([1, 3, 4, 47535446, 4],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([391776, 52, 7, 8],"float32"), Tensor([391776, 52, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 10186167, 7, 8],"float32"), Tensor([2, 10186167, 14, 8],"float32"), )
paddle.einsum("nbtc,nbsc->nbts", Tensor([2, 52, 7, 1567103],"float32"), Tensor([2, 52, 14, 1567103],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 7, 3134206],"float32"), Tensor([2, 52, 3134206, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([391776, 52, 7, 14],"float32"), Tensor([391776, 52, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 10186167, 7, 14],"float32"), Tensor([2, 10186167, 14, 8],"float32"), )
paddle.einsum("nbts,nbsc->nbtc", Tensor([2, 52, 7, 2742430],"float32"), Tensor([2, 52, 2742430, 8],"float32"), )
paddle.einsum("se,sec->sec", Tensor([10, 228170138],"float32"), Tensor([10, 228170138, 10],"float32"), )
paddle.einsum("se,sec->sec", Tensor([10, 22817014],"float32"), Tensor([10, 22817014, 10],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([10, 22817014, 10],"float32"), Tensor([22817014, 10, 64],"float32"), )
paddle.einsum("sec,ecm->sm", Tensor([10, 3565159, 10],"float32"), Tensor([3565159, 10, 64],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([14, 162978670],"float32"), Tensor([162978670, 4, 4],"float32"), )
paddle.einsum("td,dnh->tnh", Tensor([14, 142606337],"float32"), Tensor([142606337, 4, 4],"float32"), )
paddle.equal(Tensor([2, 1140850690],"int64"), Tensor([1140850690],"int64"), )
paddle.equal(Tensor([2, 2281701379],"int64"), Tensor([2281701379],"int64"), )
paddle.equal(Tensor([2, 1140850690],"int64"), Tensor([1140850690],"int64"), )
paddle.equal(Tensor([2, 2281701379],"int64"), Tensor([2281701379],"int64"), )
paddle.equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.equal(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.equal(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.equal(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.equal(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.equal(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.equal(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.equal(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.equal(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.equal(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.equal(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.equal(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.equal(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.equal(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.equal(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.equal(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.equal(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.equal(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.equal(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.equal(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.equal(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.equal(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.equal(x=Tensor([3, 3, 477218589],"float16"), y=Tensor([3, 3, 3, 477218589],"float16"), )
paddle.equal(x=Tensor([3, 3, 159072863],"float16"), y=Tensor([3, 3, 3, 159072863],"float16"), )
paddle.equal(x=Tensor([3, 3, 3, 159072863],"float16"), y=Tensor([3, 3, 159072863],"float16"), )
paddle.equal(x=Tensor([3, 3, 3, 477218589],"float16"), y=Tensor([3, 3, 477218589],"float16"), )
paddle.equal_all(x=Tensor([1, 1431655766, 3],"float16"), y=Tensor([1431655766, 3],"float16"), )
paddle.equal_all(x=Tensor([1, 2, 2147483649],"float16"), y=Tensor([2, 2147483649],"float16"), )
paddle.equal_all(x=Tensor([1, 1431655766, 3],"float16"), y=Tensor([1431655766, 3],"float16"), )
paddle.equal_all(x=Tensor([1, 2, 2147483649],"float16"), y=Tensor([2, 2147483649],"float16"), )
paddle.equal_all(x=Tensor([2, 4294967297],"float16"), y=Tensor([1, 4294967297],"float16"), )
paddle.expand_as(Tensor([1, 71303169],"int64"), Tensor([32, 71303169],"int64"), )
paddle.expand_as(Tensor([1, 325957340],"int64"), Tensor([7, 325957340],"int64"), )
paddle.expand_as(Tensor([1, 2910334, 1, 1],"float32"), Tensor([1, 2910334, 28, 28],"float32"), )
paddle.expand_as(Tensor([1455167, 2, 1, 1],"float32"), Tensor([1455167, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([10, 291034, 1, 1],"float32"), Tensor([10, 291034, 28, 28],"float32"), )
paddle.expand_as(Tensor([28521268, 80, 1, 1],"float32"), Tensor([28521268, 80, 28, 28],"float16"), )
paddle.expand_as(Tensor([106, 21525485, 1, 1],"float32"), Tensor([106, 21525485, 28, 28],"float16"), )
paddle.expand_as(Tensor([68479, 80, 1, 1],"float32"), Tensor([68479, 80, 28, 28],"float16"), )
paddle.expand_as(Tensor([106, 51682, 1, 1],"float32"), Tensor([106, 51682, 28, 28],"float16"), )
paddle.expand_as(Tensor([36380, 80, 1, 1],"float32"), Tensor([36380, 80, 28, 28],"float32"), )
paddle.expand_as(Tensor([106, 27456, 1, 1],"float32"), Tensor([106, 27456, 28, 28],"float32"), )
paddle.expand_as(Tensor([5820667, 2, 1, 1],"float32"), Tensor([5820667, 2, 14, 14],"float32"), )
paddle.expand_as(Tensor([11, 1058304, 1, 1],"float32"), Tensor([11, 1058304, 14, 14],"float32"), )
paddle.expand_as(Tensor([1455167, 2, 1, 1],"float32"), Tensor([1455167, 2, 28, 28],"float32"), )
paddle.expand_as(Tensor([11, 264576, 1, 1],"float32"), Tensor([11, 264576, 28, 28],"float32"), )
paddle.expand_as(Tensor([28521268, 80, 1, 1],"float32"), Tensor([28521268, 80, 14, 14],"float16"), )
paddle.expand_as(Tensor([110, 20742740, 1, 1],"float32"), Tensor([110, 20742740, 14, 14],"float16"), )
paddle.expand_as(Tensor([273914, 80, 1, 1],"float32"), Tensor([273914, 80, 14, 14],"float16"), )
paddle.expand_as(Tensor([110, 199210, 1, 1],"float32"), Tensor([110, 199210, 14, 14],"float16"), )
paddle.expand_as(Tensor([4563403, 500, 1],"int32"), Tensor([4563403, 500, 128],"float16"), )
paddle.expand_as(Tensor([20, 114085069, 1],"int32"), Tensor([20, 114085069, 128],"float16"), )
paddle.expand_as(Tensor([67109, 500, 1],"int32"), Tensor([67109, 500, 128],"float16"), )
paddle.expand_as(Tensor([20, 1677722, 1],"int32"), Tensor([20, 1677722, 128],"float16"), )
paddle.expand_as(Tensor([35652, 500, 1],"int32"), Tensor([35652, 500, 128],"float32"), )
paddle.expand_as(Tensor([20, 891290, 1],"int32"), Tensor([20, 891290, 128],"float32"), )
paddle.expand_as(Tensor([4563403, 500, 1],"int32"), Tensor([4563403, 500, 2],"float16"), )
paddle.expand_as(Tensor([20, 114085069, 1],"int32"), Tensor([20, 114085069, 2],"float16"), )
paddle.expand_as(Tensor([4294968, 500, 1],"int32"), Tensor([4294968, 500, 2],"float16"), )
paddle.expand_as(Tensor([20, 107374183, 1],"int32"), Tensor([20, 107374183, 2],"float16"), )
paddle.expand_as(Tensor([2281702, 500, 1],"int32"), Tensor([2281702, 500, 2],"float32"), )
paddle.expand_as(Tensor([20, 57042535, 1],"int32"), Tensor([20, 57042535, 2],"float32"), )
paddle.expand_as(Tensor([4563403, 500, 1],"int32"), Tensor([4563403, 500, 4],"float16"), )
paddle.expand_as(Tensor([20, 114085069, 1],"int32"), Tensor([20, 114085069, 4],"float16"), )
paddle.expand_as(Tensor([2147484, 500, 1],"int32"), Tensor([2147484, 500, 4],"float16"), )
paddle.expand_as(Tensor([20, 53687092, 1],"int32"), Tensor([20, 53687092, 4],"float16"), )
paddle.expand_as(Tensor([1140851, 500, 1],"int32"), Tensor([1140851, 500, 4],"float32"), )
paddle.expand_as(Tensor([20, 28521268, 1],"int32"), Tensor([20, 28521268, 4],"float32"), )
paddle.expand_as(Tensor([2281701379],"float32"), Tensor([1, 2281701379],"int64"), )
paddle.expand_as(Tensor([2281701379],"float32"), Tensor([1, 2281701379],"int64"), )
paddle.expand_as(Tensor([2281701379],"float32"), Tensor([1, 2281701379],"int64"), )
paddle.expand_as(Tensor([2281701379],"float32"), Tensor([1, 2281701379],"int64"), )
paddle.expand_as(Tensor([2281701379],"float32"), Tensor([2, 2281701379],"int64"), )
paddle.expand_as(Tensor([1140850690],"float32"), Tensor([2, 1140850690],"int64"), )
paddle.expand_as(Tensor([2281701379],"float32"), Tensor([4, 2281701379],"int64"), )
paddle.expand_as(Tensor([570425345],"float32"), Tensor([4, 570425345],"int64"), )
paddle.expand_as(Tensor([2281701379],"float32"), Tensor([6, 2281701379],"int64"), )
paddle.expand_as(Tensor([380283564],"float32"), Tensor([6, 380283564],"int64"), )
paddle.expand_as(Tensor([8912897, 128, 1],"int32"), Tensor([8912897, 128, 2],"float32"), )
paddle.expand_as(Tensor([4, 285212673, 1],"int32"), Tensor([4, 285212673, 2],"float32"), )
paddle.expand_as(Tensor([2281701379],"float32"), Tensor([2, 2281701379],"int64"), )
paddle.expand_as(Tensor([1140850690],"float32"), Tensor([2, 1140850690],"int64"), )
paddle.expand_as(Tensor([570425345, 1],"float32"), Tensor([570425345, 4],"float32"), )
paddle.expand_as(x=Tensor([1140850690, 1],"int64"), y=Tensor([1140850690, 2],"int64"), )
paddle.expand_as(x=Tensor([2281701379],"int64"), y=Tensor([2, 2281701379],"int64"), )
paddle.expand_as(x=Tensor([1140850690],"int64"), y=Tensor([2, 1140850690],"int64"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"bfloat16"), Tensor([715827883, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"bfloat16"), Tensor([4, 536870913, 2],"float32"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"bfloat16"), Tensor([4, 3, 357913942],"float32"), )
paddle.floor_divide(Tensor([380283564, 3, 2],"bfloat16"), Tensor([380283564, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4, 285212673, 2],"bfloat16"), Tensor([4, 285212673, 2],"float32"), )
paddle.floor_divide(Tensor([4, 3, 190141782],"bfloat16"), Tensor([4, 3, 190141782],"float32"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"bfloat16"), Tensor([715827883, 3, 2],"float64"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"bfloat16"), Tensor([4, 536870913, 2],"float64"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"bfloat16"), Tensor([4, 3, 357913942],"float64"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.floor_divide(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.floor_divide(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.floor_divide(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"bfloat16"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"bfloat16"), )
paddle.floor_divide(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.floor_divide(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.floor_divide(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.floor_divide(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"bfloat16"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.floor_divide(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.floor_divide(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.floor_divide(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.floor_divide(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.fmax(Tensor([10, 228170138],"float32"), Tensor([228170138],"float32"), )
paddle.fmax(Tensor([10, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.fmax(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.fmax(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.fmax(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.fmax(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.fmax(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.fmax(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.fmax(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.fmax(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.fmax(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.fmax(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.fmin(Tensor([10, 228170138],"float32"), Tensor([228170138],"float32"), )
paddle.fmin(Tensor([10, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.fmin(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.fmin(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.fmin(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.fmin(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.fmin(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.fmin(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.fmin(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.fmin(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.fmin(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.fmin(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.full_like(x=Tensor([4294967297],"float16"), fill_value=False, dtype=type(numpy.bool), )
paddle.full_like(x=Tensor([4294967297],"float16"), fill_value=True, dtype=type(numpy.bool), )
paddle.gather(Tensor([7711, 544, 544],"float32"), Tensor([7711],"int64"), axis=0, )
paddle.gather(Tensor([2281701379, 544, 544],"float32"), Tensor([2281701379],"int64"), axis=0, )
paddle.gather(Tensor([325957340, 7],"float32"), index=Tensor([325957340],"int64"), axis=0, )
paddle.gather(Tensor([2281701379, 7],"float32"), index=Tensor([2281701379],"int64"), axis=0, )
paddle.gather(Tensor([45474, 256, 14, 14],"float32"), Tensor([45474, 1],"int32"), )
paddle.gather(Tensor([2281701379, 256, 14, 14],"float32"), Tensor([2281701379, 1],"int32"), )
paddle.gather(Tensor([181896, 256, 7, 7],"float32"), Tensor([181896, 1],"int32"), )
paddle.gather(Tensor([2281701379, 256, 7, 7],"float32"), Tensor([2281701379, 1],"int32"), )
paddle.gather(Tensor([1200, 1901418],"float32"), Tensor([1901418],"int32"), axis=1, )
paddle.gather(Tensor([1200, 2281701379],"float32"), Tensor([2281701379],"int32"), axis=1, )
paddle.gather(Tensor([760567127, 3],"float32"), Tensor([760567127],"int64"), axis=1, )
paddle.gather(Tensor([2281701379, 3],"float32"), Tensor([2281701379],"int64"), axis=1, )
paddle.gather(Tensor([864281, 88, 30],"float32"), Tensor([864281],"int32"), 1, )
paddle.gather(Tensor([2281701379, 88, 30],"float32"), Tensor([2281701379],"int32"), 1, )
paddle.gather_nd(Tensor([114085069, 10, 21504],"float32"), Tensor([114085069, 10, 2],"int32"), )
paddle.gather_nd(Tensor([1, 1140850690, 21504],"float32"), Tensor([1, 1140850690, 2],"int32"), )
paddle.gather_nd(Tensor([10563433, 10, 21504],"float32"), Tensor([10563433, 108, 2],"int32"), )
paddle.gather_nd(Tensor([103713700, 10, 21504],"float32"), Tensor([103713700, 11, 2],"int32"), )
paddle.gather_nd(Tensor([95070891, 10, 21504],"float32"), Tensor([95070891, 12, 2],"int32"), )
paddle.gather_nd(Tensor([87757746, 10, 21504],"float32"), Tensor([87757746, 13, 2],"int32"), )
paddle.gather_nd(Tensor([108652447, 7, 3],"float32"), Tensor([108652447, 2],"int64"), )
paddle.gather_nd(Tensor([1140850690, 7, 3],"float32"), Tensor([1140850690, 2],"int64"), )
paddle.gather_nd(Tensor([760567127, 3],"float32"), Tensor([760567127],"int64"), )
paddle.gather_nd(Tensor([2281701379, 3],"float32"), Tensor([2281701379],"int64"), )
paddle.gather_nd(Tensor([2281702, 41344, 128],"float32"), index=Tensor([2281702, 500, 2],"int64"), )
paddle.gather_nd(Tensor([2281702, 41344, 2],"float32"), index=Tensor([2281702, 500, 2],"int64"), )
paddle.gather_nd(Tensor([20, 41344, 228171],"float32"), index=Tensor([20, 500, 228171],"int64"), )
paddle.gather_nd(Tensor([2281702, 41344, 4],"float32"), index=Tensor([2281702, 500, 2],"int64"), )
paddle.gather_nd(Tensor([285212673, 8],"float32"), index=Tensor([285212673, 7, 2],"int64"), )
paddle.gather_nd(Tensor([162978670, 8],"float32"), index=Tensor([162978670, 7, 2],"int64"), )
paddle.gather_nd(Tensor([8912897, 16384, 2],"float32"), index=Tensor([8912897, 128, 2],"int64"), )
paddle.gather_nd(Tensor([4, 16384, 4456449],"float32"), index=Tensor([4, 128, 4456449],"int64"), )
paddle.gather_nd(Tensor([8912897, 256],"float32"), Tensor([8912897, 8, 2],"int64"), )
paddle.gather_nd(Tensor([142606337, 256],"float32"), Tensor([142606337, 8, 2],"int64"), )
paddle.gather_nd(Tensor([285212673, 8],"float32"), index=Tensor([285212673, 14, 2],"int64"), )
paddle.gather_nd(Tensor([81489335, 8],"float32"), index=Tensor([81489335, 14, 2],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 1073741825, 2],"float16"), index=Tensor([1, 1, 1, 1073741825],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 2281701379, 2],"float64"), index=Tensor([1, 1, 1, 2281701379],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 1073741825, 2],"float16"), index=Tensor([1073741825],"int64"), )
paddle.gather_nd(x=Tensor([1, 2, 2281701379, 2],"float64"), index=Tensor([2281701379],"int64"), )
paddle.gcd(x=Tensor([6, 19014179, 4, 5],"int32"), y=Tensor([2, 19014179, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 95070891],"int32"), y=Tensor([2, 1, 95070891],"int32"), )
paddle.gcd(x=Tensor([6, 228170138, 4, 5],"int32"), y=Tensor([2, 228170138, 5],"int32"), )
paddle.gcd(x=Tensor([6, 1, 4, 1140850690],"int32"), y=Tensor([2, 1, 1140850690],"int32"), )
paddle.geometric.segment_max(Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), )
paddle.geometric.segment_max(Tensor([2281701379, 20],"float16"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_max(Tensor([114085069, 20],"float32"), Tensor([114085069],"int64"), )
paddle.geometric.segment_max(Tensor([2281701379, 20],"float32"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_max(Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), )
paddle.geometric.segment_max(Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_mean(Tensor([114085069, 20],"float32"), Tensor([114085069],"int64"), )
paddle.geometric.segment_mean(Tensor([2281701379, 20],"float32"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_mean(Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), )
paddle.geometric.segment_mean(Tensor([2281701379, 20],"float16"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_mean(Tensor([114085069, 20],"float32"), Tensor([114085069],"int64"), )
paddle.geometric.segment_mean(Tensor([2281701379, 20],"float32"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_mean(Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), )
paddle.geometric.segment_mean(Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_min(Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), )
paddle.geometric.segment_min(Tensor([2281701379, 20],"float16"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_min(Tensor([114085069, 20],"float32"), Tensor([114085069],"int64"), )
paddle.geometric.segment_min(Tensor([2281701379, 20],"float32"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_min(Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), )
paddle.geometric.segment_min(Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_sum(Tensor([286331154, 15],"float16"), Tensor([286331154],"int64"), )
paddle.geometric.segment_sum(Tensor([2281701379, 15],"float16"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_sum(Tensor([152113426, 15],"float32"), Tensor([152113426],"int64"), )
paddle.geometric.segment_sum(Tensor([2281701379, 15],"float32"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_sum(Tensor([286331154, 15],"float16"), Tensor([286331154],"int64"), )
paddle.geometric.segment_sum(Tensor([2281701379, 15],"float64"), Tensor([2281701379],"int64"), )
paddle.geometric.segment_sum(Tensor([114085069, 20],"float32"), Tensor([114085069],"int32"), )
paddle.geometric.segment_sum(Tensor([2281701379, 20],"float32"), Tensor([2281701379],"int32"), )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "sum", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "sum", None, None, )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "sum", )
paddle.geometric.send_ue_recv(Tensor([10, 429496730],"float16"), Tensor([15, 429496730],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 286331154],"float16"), Tensor([15, 286331154],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 429496730],"float16"), Tensor([15, 429496730],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 286331154],"float16"), Tensor([15, 286331154],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 429496730],"float16"), Tensor([15, 429496730],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 286331154],"float16"), Tensor([15, 286331154],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 429496730],"float16"), Tensor([15, 429496730],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 286331154],"float16"), Tensor([15, 286331154],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 85899346, 5],"float16"), Tensor([15, 85899346, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float16"), Tensor([536870913, 8, 1],"float16"), Tensor([536870913],"int64"), Tensor([536870913],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 286331154, 5],"float16"), Tensor([15, 286331154, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([2281701379, 8, 1],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([2281701379, 8, 1],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 85899346, 5],"float16"), Tensor([15, 85899346, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float16"), Tensor([536870913, 8, 1],"float16"), Tensor([536870913],"int64"), Tensor([536870913],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 286331154, 5],"float16"), Tensor([15, 286331154, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([2281701379, 8, 1],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([2281701379, 8, 1],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([214748365],"int64"), Tensor([214748365],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([2281701379, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([3, 3, 253522376],"float32"), Tensor([4, 253522376],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 570425345],"float32"), Tensor([4, 570425345],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "div", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), "sub", "min", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([10, 10, 10],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 10, 1],"float64"), Tensor([10, 10, 10],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([214748365, 20],"float16"), Tensor([214748365, 20],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([214748365, 20],"float16"), Tensor([214748365, 20],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", )
paddle.geometric.send_uv(Tensor([214748365, 20],"float16"), Tensor([214748365, 20],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([214748365, 20],"float16"), Tensor([214748365, 20],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 429496730],"float16"), Tensor([10, 429496730],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([4294967297, 1],"float16"), Tensor([4294967297, 20],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([214748365, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", )
paddle.geometric.send_uv(Tensor([4294967297, 1],"float16"), Tensor([4294967297, 20],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([214748365, 1],"float16"), Tensor([214748365, 20],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 1],"float64"), Tensor([100, 20],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([214748365, 20],"float16"), Tensor([214748365, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([4294967297, 20],"float16"), Tensor([4294967297, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "add", )
paddle.geometric.send_uv(Tensor([214748365, 20],"float16"), Tensor([214748365, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([4294967297, 20],"float16"), Tensor([4294967297, 1],"float16"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([100, 20],"float64"), Tensor([100, 1],"float64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), message_op="add", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), message_op="add", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), message_op="div", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), message_op="div", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), message_op="mul", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), message_op="mul", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), message_op="sub", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379],"int32"), message_op="sub", )
paddle.greater_equal(Tensor([13, 2, 16, 4, 1371215],"int64"), Tensor([13, 2, 16, 1371215, 8],"int64"), )
paddle.greater_equal(Tensor([8912897, 2, 16, 4, 1],"int64"), Tensor([8912897, 2, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 1371215, 16, 4, 1],"int64"), Tensor([13, 1371215, 16, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 10969719, 4, 1],"int64"), Tensor([13, 2, 10969719, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 16, 4, 685608],"int64"), Tensor([13, 2, 16, 685608, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 2742430],"int64"), Tensor([13, 2, 8, 2742430, 8],"int64"), )
paddle.greater_equal(Tensor([17825793, 2, 8, 4, 1],"int64"), Tensor([17825793, 2, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2742430, 8, 4, 1],"int64"), Tensor([13, 2742430, 8, 1, 8],"int64"), )
paddle.greater_equal(Tensor([13, 2, 8, 4, 1371215],"int64"), Tensor([13, 2, 8, 1371215, 8],"int64"), )
paddle.greater_equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.greater_equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.greater_equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.greater_equal(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.greater_equal(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.greater_equal(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.greater_equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.greater_equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.greater_equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.greater_equal(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.greater_equal(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.greater_equal(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.greater_equal(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.greater_equal(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.greater_equal(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.greater_equal(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.greater_equal(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.greater_equal(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.greater_equal(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.greater_equal(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.greater_equal(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.greater_equal(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.greater_equal(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.greater_equal(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.greater_equal(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.greater_equal(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.greater_equal(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.greater_equal(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.greater_than(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.greater_than(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.greater_than(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.greater_than(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.greater_than(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.greater_than(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.greater_than(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.greater_than(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.greater_than(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.greater_than(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.greater_than(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.greater_than(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.greater_than(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.greater_than(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.greater_than(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.greater_than(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.greater_than(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.greater_than(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.greater_than(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.greater_than(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.greater_than(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.greater_than(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.greater_than(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.greater_than(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.greater_than(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.greater_than(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.greater_than(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.greater_than(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.heaviside(Tensor([175515491, 13, 17],"float32"), Tensor([175515491, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 22817014, 17],"float32"), Tensor([100, 22817014, 1],"float32"), )
paddle.heaviside(Tensor([100, 1342178, 17],"float32"), Tensor([1342178, 17],"float32"), )
paddle.heaviside(Tensor([100, 13, 1755155],"float32"), Tensor([13, 1755155],"float32"), )
paddle.heaviside(Tensor([100, 134217729, 17],"float32"), Tensor([134217729, 17],"float32"), )
paddle.heaviside(Tensor([100, 13, 175515491],"float32"), Tensor([13, 175515491],"float32"), )
paddle.heaviside(Tensor([2, 5162221, 13, 17],"float32"), Tensor([5162221, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 671089, 17],"float32"), Tensor([100, 671089, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 877578],"float32"), Tensor([100, 13, 877578],"float32"), )
paddle.heaviside(Tensor([2, 10324441, 13, 17],"float32"), Tensor([10324441, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 1342178, 17],"float32"), Tensor([100, 1342178, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 1755155],"float32"), Tensor([100, 13, 1755155],"float32"), )
paddle.heaviside(Tensor([300, 7605672],"float32"), Tensor([7605672],"float32"), )
paddle.heaviside(Tensor([300, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.histogramdd(Tensor([1073741825, 2, 2],"float16"), bins=5, weights=Tensor([1073741825, 2],"float16"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([2147483649, 2, 2],"float16"), bins=5, weights=Tensor([2147483649, 2],"float16"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([1073741825, 2, 2],"float16"), bins=list[3,4,], weights=Tensor([1073741825, 2],"float16"), ranges=None, density=True, )
paddle.histogramdd(Tensor([2147483649, 2, 2],"float16"), bins=list[3,4,], weights=Tensor([2147483649, 2],"float16"), ranges=None, density=True, )
paddle.histogramdd(Tensor([1073741825, 2, 2],"float16"), bins=list[3,4,], weights=Tensor([1073741825, 2],"float16"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([2147483649, 2, 2],"float16"), bins=list[3,4,], weights=Tensor([2147483649, 2],"float16"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 268435457, 4],"float16"), bins=list[1,2,3,4,], weights=Tensor([4, 268435457],"float16"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 1073741825, 4],"float16"), bins=list[1,2,3,4,], weights=Tensor([4, 1073741825],"float16"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 268435457, 4],"float16"), bins=list[1,2,3,4,], weights=Tensor([4, 268435457],"float16"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 1073741825, 4],"float16"), bins=list[1,2,3,4,], weights=Tensor([4, 1073741825],"float16"), ranges=None, density=True, )
paddle.histogramdd(Tensor([2147483649, 2],"float16"), bins=list[3,3,], weights=Tensor([2147483649],"float16"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4294967297, 2],"float16"), bins=list[3,3,], weights=Tensor([4294967297],"float16"), ranges=None, density=False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 57042535],"float32"), Tensor([40, 57042535],"float32"), None, False, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 76056713],"float32"), Tensor([76056713, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([30, 57042535],"float32"), Tensor([57042535, 40],"float32"), None, False, False, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([76056713, 30],"float32"), Tensor([40, 76056713],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([57042535, 30],"float32"), Tensor([40, 57042535],"float32"), None, True, True, )
paddle.incubate.nn.functional.fused_matmul_bias(Tensor([57042535, 30],"float32"), Tensor([57042535, 40],"float32"), None, True, False, )
paddle.index_add(Tensor([10, 10],"float32"), Tensor([2281701379],"int32"), -1, Tensor([10, 2281701379],"float32"), )
paddle.index_add(Tensor([10, 10],"float32"), Tensor([228170138],"int32"), -1, Tensor([10, 228170138],"float32"), )
paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([2281701379],"int32"), 2, Tensor([100, 100, 2281701379],"float32"), )
paddle.index_add(Tensor([100, 100, 25],"float32"), Tensor([228171],"int32"), 2, Tensor([100, 100, 228171],"float32"), )
paddle.index_add(Tensor([100, 100, 228171],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 228171],"float32"), )
paddle.index_add(Tensor([100, 100, 5],"float32"), Tensor([2281701379],"int32"), 1, Tensor([100, 2281701379, 5],"float32"), )
paddle.index_add(Tensor([100, 100, 5],"float32"), Tensor([4563403],"int32"), 1, Tensor([100, 4563403, 5],"float32"), )
paddle.index_add(Tensor([100, 100, 1140851],"float32"), Tensor([20],"int32"), 1, Tensor([100, 20, 1140851],"float32"), )
paddle.index_add(Tensor([100, 22817014],"float32"), Tensor([20],"int32"), 0, Tensor([20, 22817014],"float32"), )
paddle.index_add(Tensor([100, 5],"float32"), Tensor([2281701379],"int32"), 0, Tensor([2281701379, 5],"float32"), )
paddle.index_add(Tensor([100, 5],"float32"), Tensor([456340276],"int32"), 0, Tensor([456340276, 5],"float32"), )
paddle.index_add(Tensor([100, 114085069],"float32"), Tensor([20],"int32"), 0, Tensor([20, 114085069],"float32"), )
paddle.index_add(Tensor([100, 42949673],"float16"), Tensor([20],"int64"), 0, Tensor([20, 42949673],"float16"), )
paddle.index_add(Tensor([100, 5],"float64"), Tensor([2281701379],"int64"), 0, Tensor([2281701379, 5],"float64"), )
paddle.index_add(Tensor([100, 5],"float16"), Tensor([858993460],"int64"), 0, Tensor([858993460, 5],"float16"), )
paddle.index_add(Tensor([100, 214748365],"float16"), Tensor([20],"int64"), 0, Tensor([20, 214748365],"float16"), )
paddle.index_add(Tensor([10],"float32"), Tensor([2281701379],"int32"), 0, Tensor([2281701379],"float32"), )
paddle.index_add(Tensor([10],"float32"), Tensor([2281701379],"int32"), 0, Tensor([2281701379],"float32"), )
paddle.index_add(Tensor([380283564, 3, 2],"float32"), Tensor([16],"int64"), 1, Tensor([380283564, 16, 2],"float32"), )
paddle.index_add(Tensor([4, 3, 190141782],"float32"), Tensor([16],"int64"), 1, Tensor([4, 16, 190141782],"float32"), )
paddle.index_add(Tensor([4, 3, 2],"float32"), Tensor([2281701379],"int64"), 1, Tensor([4, 2281701379, 2],"float32"), )
paddle.index_add(Tensor([71303169, 3, 2],"float32"), Tensor([16],"int64"), 1, Tensor([71303169, 16, 2],"float32"), )
paddle.index_add(Tensor([4, 3, 2],"float32"), Tensor([285212673],"int64"), 1, Tensor([4, 285212673, 2],"float32"), )
paddle.index_add(Tensor([4, 3, 35651585],"float32"), Tensor([16],"int64"), 1, Tensor([4, 16, 35651585],"float32"), )
paddle.index_put(Tensor([100, 110],"bool"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"bool"), False, )
paddle.index_put(Tensor([100, 110],"bool"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"bool"), False, )
paddle.index_put(Tensor([100, 110],"bool"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"bool"), False, )
paddle.index_put(Tensor([100, 110],"bool"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"bool"), True, )
paddle.index_put(Tensor([100, 110],"bool"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"bool"), True, )
paddle.index_put(Tensor([100, 110],"bool"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"bool"), True, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float16"), False, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float16"), False, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([4294967297],"int32"),Tensor([4294967297],"int32"),), Tensor([4294967297],"float16"), False, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float16"), True, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float16"), True, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([4294967297],"int32"),Tensor([4294967297],"int32"),), Tensor([4294967297],"float16"), True, )
paddle.index_put(Tensor([100, 110],"float32"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float32"), True, )
paddle.index_put(Tensor([100, 110],"float32"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float32"), True, )
paddle.index_put(Tensor([100, 110],"float32"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float32"), True, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float64"), False, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float64"), False, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([4294967297],"int32"),Tensor([4294967297],"int32"),), Tensor([4294967297],"float16"), False, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float64"), True, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"float64"), True, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([4294967297],"int32"),Tensor([4294967297],"int32"),), Tensor([4294967297],"float16"), True, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),), Tensor([2281701379],"float64"), False, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),), Tensor([2281701379],"float64"), False, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([4294967297],"int64"),Tensor([4294967297],"int64"),), Tensor([4294967297],"float16"), False, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),), Tensor([2281701379],"float64"), True, )
paddle.index_put(Tensor([100, 110],"float64"), tuple(Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),), Tensor([2281701379],"float64"), True, )
paddle.index_put(Tensor([100, 110],"float16"), tuple(Tensor([4294967297],"int64"),Tensor([4294967297],"int64"),), Tensor([4294967297],"float16"), True, )
paddle.index_put(Tensor([100, 110],"int32"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"int32"), False, )
paddle.index_put(Tensor([100, 110],"int32"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"int32"), False, )
paddle.index_put(Tensor([100, 110],"int32"), tuple(Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),), Tensor([2281701379],"int32"), False, )
paddle.index_put(Tensor([110, 42, 16601, 56],"float16"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([16601],"bool"),), Tensor([16, 16, 56],"float16"), True, )
paddle.index_put(Tensor([110, 42, 32, 29052],"float16"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 29052],"float16"), True, )
paddle.index_put(Tensor([110, 42, 2281701379, 56],"float64"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([2281701379],"bool"),), Tensor([16, 16, 56],"float64"), True, )
paddle.index_put(Tensor([110, 42, 32, 16777217],"float16"), tuple(Tensor([16, 16],"int32"),Tensor([16, 16],"int32"),Tensor([32],"bool"),), Tensor([16, 16, 16777217],"float16"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([142606337, 16],"int64"),), Tensor([142606337],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float16"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([4294967297, 16],"int64"),), Tensor([4294967297],"float16"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([142606337, 16],"int64"),), Tensor([142606337],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float16"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([4294967297, 16],"int64"),), Tensor([4294967297],"float16"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([142606337, 16],"int64"),Tensor([142606337, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([142606337, 16],"int64"),Tensor([142606337, 16],"int64"),), Tensor([16, 16],"float64"), False, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([142606337, 16],"int64"),Tensor([142606337, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([110, 42, 56, 56],"float64"), tuple(Tensor([16, 16],"int64"),Tensor([16, 16],"int64"),Tensor([142606337, 16],"int64"),Tensor([142606337, 16],"int64"),), Tensor([16, 16],"float64"), True, )
paddle.index_put(Tensor([45691142, 94],"float16"), tuple(Tensor([45691142, 94],"bool"),), Tensor([5170],"float16"), False, )
paddle.index_put(Tensor([110, 39045158],"float16"), tuple(Tensor([110, 39045158],"bool"),), Tensor([5170],"float16"), False, )
paddle.index_put(Tensor([24273419, 94],"float64"), tuple(Tensor([24273419, 94],"bool"),), Tensor([5170],"float64"), False, )
paddle.index_put(Tensor([110, 20742740],"float64"), tuple(Tensor([110, 20742740],"bool"),), Tensor([5170],"float64"), False, )
paddle.index_put(Tensor([45691142, 94],"float16"), tuple(Tensor([45691142, 94],"bool"),), Tensor([5170],"float16"), True, )
paddle.index_put(Tensor([110, 39045158],"float16"), tuple(Tensor([110, 39045158],"bool"),), Tensor([5170],"float16"), True, )
paddle.index_put(Tensor([24273419, 94],"float64"), tuple(Tensor([24273419, 94],"bool"),), Tensor([5170],"float64"), True, )
paddle.index_put(Tensor([110, 20742740],"float64"), tuple(Tensor([110, 20742740],"bool"),), Tensor([5170],"float64"), True, )
paddle.index_put(Tensor([45691142, 94],"float16"), tuple(Tensor([45691142],"bool"),), Tensor([55, 94],"float16"), False, )
paddle.index_put(Tensor([110, 39045158],"float16"), tuple(Tensor([110],"bool"),), Tensor([55, 39045158],"float16"), False, )
paddle.index_put(Tensor([2281701379, 94],"float64"), tuple(Tensor([2281701379],"bool"),), Tensor([55, 94],"float64"), False, )
paddle.index_put(Tensor([110, 78090315],"float16"), tuple(Tensor([110],"bool"),), Tensor([55, 78090315],"float16"), False, )
paddle.index_put(Tensor([45691142, 94],"float16"), tuple(Tensor([45691142],"bool"),), Tensor([55, 94],"float16"), True, )
paddle.index_put(Tensor([110, 39045158],"float16"), tuple(Tensor([110],"bool"),), Tensor([55, 39045158],"float16"), True, )
paddle.index_put(Tensor([2281701379, 94],"float64"), tuple(Tensor([2281701379],"bool"),), Tensor([55, 94],"float64"), True, )
paddle.index_put(Tensor([110, 78090315],"float16"), tuple(Tensor([110],"bool"),), Tensor([55, 78090315],"float16"), True, )
paddle.index_put(Tensor([45691142, 94],"float16"), tuple(Tensor([45691142],"bool"),), Tensor([1],"float16"), False, )
paddle.index_put(Tensor([2281701379, 94],"float64"), tuple(Tensor([2281701379],"bool"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([45691142, 94],"float16"), tuple(Tensor([45691142],"bool"),), Tensor([1],"float16"), True, )
paddle.index_put(Tensor([2281701379, 94],"float64"), tuple(Tensor([2281701379],"bool"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([45691142, 94],"float16"), tuple(Tensor([45691142],"bool"),), Tensor([94],"float16"), False, )
paddle.index_put(Tensor([44, 97612894],"float16"), tuple(Tensor([44],"bool"),), Tensor([97612894],"float16"), False, )
paddle.index_put(Tensor([2281701379, 94],"float64"), tuple(Tensor([2281701379],"bool"),), Tensor([94],"float64"), False, )
paddle.index_put(Tensor([44, 4294967297],"float16"), tuple(Tensor([44],"bool"),), Tensor([4294967297],"float16"), False, )
paddle.index_put(Tensor([45691142, 94],"float16"), tuple(Tensor([45691142],"bool"),), Tensor([94],"float16"), True, )
paddle.index_put(Tensor([44, 97612894],"float16"), tuple(Tensor([44],"bool"),), Tensor([97612894],"float16"), True, )
paddle.index_put(Tensor([2281701379, 94],"float64"), tuple(Tensor([2281701379],"bool"),), Tensor([94],"float64"), True, )
paddle.index_put(Tensor([44, 4294967297],"float16"), tuple(Tensor([44],"bool"),), Tensor([4294967297],"float16"), True, )
paddle.index_sample(Tensor([63380594, 10285],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 3598],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([42253730, 36858],"float32"), Tensor([42253730, 54],"int64"), )
paddle.index_sample(Tensor([42253730, 38402],"float32"), Tensor([42253730, 54],"int64"), )
paddle.index_sample(Tensor([63380594, 4165],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 5440],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 6150],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([50704476, 6400],"float32"), Tensor([50704476, 45],"int64"), )
paddle.index_sample(Tensor([63380594, 6885],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 8500],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([50704476, 8580],"float32"), Tensor([50704476, 45],"int64"), )
paddle.index_sample(Tensor([63380594, 10285],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 3598],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 4789],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 5440],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 6885],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 7681],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 8500],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 9382],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([84507459, 6069],"float32"), Tensor([84507459, 27],"int64"), )
paddle.index_sample(Tensor([84507459, 9261],"float32"), Tensor([84507459, 27],"int64"), )
paddle.index_sample(Tensor([63380594, 2125],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([63380594, 2577],"float32"), Tensor([63380594, 36],"int64"), )
paddle.index_sample(Tensor([84507459, 10164],"float32"), Tensor([84507459, 27],"int64"), )
paddle.index_sample(Tensor([84507459, 11109],"float32"), Tensor([84507459, 27],"int64"), )
paddle.index_sample(Tensor([84507459, 12096],"float32"), Tensor([84507459, 27],"int64"), )
paddle.index_sample(Tensor([84507459, 2100],"float32"), Tensor([84507459, 27],"int64"), )
paddle.index_sample(Tensor([84507459, 2541],"float32"), Tensor([84507459, 27],"int64"), )
paddle.index_sample(Tensor([84507459, 3024],"float32"), Tensor([84507459, 27],"int64"), )
paddle.index_sample(Tensor([84507459, 3549],"float32"), Tensor([84507459, 27],"int64"), )
paddle.index_select(Tensor([570425345, 4],"float32"), Tensor([570425345],"int64"), axis=0, )
paddle.index_select(Tensor([2281701379, 4],"float32"), Tensor([2281701379],"int64"), axis=0, )
paddle.index_select(Tensor([10, 228170138],"float32"), Tensor([228170138],"int64"), )
paddle.index_select(Tensor([10, 2281701379],"float32"), Tensor([2281701379],"int64"), )
paddle.index_select(Tensor([10, 4, 4387888, 13],"float32"), index=Tensor([4387888],"int64"), axis=3, )
paddle.index_select(Tensor([10, 4, 2281701379, 13],"float32"), index=Tensor([2281701379],"int64"), axis=3, )
paddle.index_select(Tensor([570141, 2001, 2],"float32"), Tensor([570141],"int64"), )
paddle.index_select(Tensor([2281701379, 2001, 2],"float32"), Tensor([2281701379],"int64"), )
paddle.index_select(Tensor([1140281, 2001],"float32"), Tensor([1140281],"int64"), )
paddle.index_select(Tensor([2281701379, 2001],"float32"), Tensor([2281701379],"int64"), )
paddle.index_select(Tensor([11, 4, 3988989, 13],"float32"), index=Tensor([3988989],"int64"), axis=3, )
paddle.index_select(Tensor([11, 4, 2281701379, 13],"float32"), index=Tensor([2281701379],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 3134206, 13],"float32"), index=Tensor([3134206],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 2281701379, 13],"float32"), index=Tensor([2281701379],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 2716312, 15],"float32"), index=Tensor([2716312],"int64"), axis=3, )
paddle.index_select(Tensor([14, 4, 2281701379, 15],"float32"), index=Tensor([2281701379],"int64"), axis=3, )
paddle.index_select(Tensor([35651585, 64],"float32"), index=Tensor([35651585],"int64"), axis=0, )
paddle.index_select(Tensor([2281701379, 64],"float32"), index=Tensor([2281701379],"int64"), axis=0, )
paddle.index_select(Tensor([228170138, 10],"int64"), index=Tensor([228170138],"int64"), )
paddle.index_select(Tensor([2281701379, 10],"int64"), index=Tensor([2281701379],"int64"), )
paddle.index_select(Tensor([207427399, 11],"int64"), index=Tensor([207427399],"int64"), )
paddle.index_select(Tensor([2281701379, 11],"int64"), index=Tensor([2281701379],"int64"), )
paddle.index_select(Tensor([190141782, 12],"int64"), index=Tensor([190141782],"int64"), )
paddle.index_select(Tensor([2281701379, 12],"int64"), index=Tensor([2281701379],"int64"), )
paddle.index_select(Tensor([175515491, 13],"int64"), index=Tensor([175515491],"int64"), )
paddle.index_select(Tensor([2281701379, 13],"int64"), index=Tensor([2281701379],"int64"), )
paddle.index_select(Tensor([162978670, 14],"int64"), index=Tensor([162978670],"int64"), )
paddle.index_select(Tensor([2281701379, 14],"int64"), index=Tensor([2281701379],"int64"), )
paddle.index_select(Tensor([2, 1140850690],"float32"), Tensor([1140850690],"int64"), axis=-1, )
paddle.index_select(Tensor([2, 2281701379],"float32"), Tensor([2281701379],"int64"), axis=-1, )
paddle.index_select(Tensor([4, 500, 1140851],"float32"), index=Tensor([1140851],"int32"), axis=-1, )
paddle.index_select(Tensor([4, 500, 2281701379],"float32"), index=Tensor([2281701379],"int32"), axis=-1, )
paddle.index_select(x=Tensor([1431655766, 3],"float16"), index=Tensor([1431655766],"int32"), axis=1, )
paddle.index_select(x=Tensor([2281701379, 3],"float64"), index=Tensor([2281701379],"int32"), axis=1, )
paddle.index_select(x=Tensor([1431655766, 3],"float16"), index=Tensor([1431655766],"int64"), axis=1, )
paddle.index_select(x=Tensor([2281701379, 3],"float64"), index=Tensor([2281701379],"int64"), axis=1, )
paddle.inner(Tensor([20, 214748365],"float16"), Tensor([214748365],"float16"), )
paddle.inner(Tensor([20, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.inner(x=Tensor([71582789, 5, 3, 4],"float16"), y=Tensor([3, 71582789, 5, 4],"float16"), )
paddle.inner(x=Tensor([2, 178956971, 3, 4],"float16"), y=Tensor([3, 2, 178956971, 4],"float16"), )
paddle.inner(x=Tensor([2, 5, 107374183, 4],"float16"), y=Tensor([107374183, 2, 5, 4],"float16"), )
paddle.inner(x=Tensor([2, 5, 107374183, 4],"float16"), y=Tensor([107374183, 2, 5, 4],"float16"), )
paddle.inner(x=Tensor([71582789, 5, 3, 4],"float16"), y=Tensor([3, 71582789, 5, 4],"float16"), )
paddle.inner(x=Tensor([2, 178956971, 3, 4],"float16"), y=Tensor([3, 2, 178956971, 4],"float16"), )
paddle.inner(x=Tensor([1073741825, 4],"float16"), y=Tensor([1073741825, 2, 4],"float16"), )
paddle.inner(x=Tensor([3, 1431655766],"float16"), y=Tensor([3, 2, 1431655766],"float16"), )
paddle.inner(x=Tensor([536870913, 4],"float16"), y=Tensor([536870913, 2, 4],"float16"), )
paddle.inner(x=Tensor([3, 715827883],"float16"), y=Tensor([3, 2, 715827883],"float16"), )
paddle.inner(x=Tensor([1073741825, 4],"float16"), y=Tensor([1073741825, 2, 5, 4],"float16"), )
paddle.inner(x=Tensor([3, 1431655766],"float16"), y=Tensor([3, 2, 5, 1431655766],"float16"), )
paddle.inner(x=Tensor([107374183, 4],"float16"), y=Tensor([107374183, 2, 5, 4],"float16"), )
paddle.inner(x=Tensor([3, 143165577],"float16"), y=Tensor([3, 2, 5, 143165577],"float16"), )
paddle.inner(x=Tensor([3, 858993460],"float16"), y=Tensor([5, 858993460],"float16"), )
paddle.inner(x=Tensor([357913942, 3, 4],"float16"), y=Tensor([2, 357913942, 4],"float16"), )
paddle.inner(x=Tensor([536870913, 3, 4],"float16"), y=Tensor([2, 536870913, 4],"float16"), )
paddle.inner(x=Tensor([5, 3, 429496730],"float16"), y=Tensor([2, 5, 429496730],"float16"), )
paddle.kron(Tensor([5, 5, 1014090, 3, 5, 6],"float32"), Tensor([3, 5, 1014090],"float32"), )
paddle.kron(Tensor([5, 5, 4, 760568, 5, 6],"float32"), Tensor([760568, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 114085069, 5, 6],"float32"), Tensor([114085069, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 152113426, 3, 5, 6],"float32"), Tensor([3, 5, 152113426],"float32"), )
paddle.ldexp(Tensor([10, 20, 11408507],"float32"), Tensor([11408507],"int32"), )
paddle.ldexp(Tensor([10, 20, 2281701379],"float32"), Tensor([2281701379],"int32"), )
paddle.ldexp(Tensor([4294967297],"float16"), Tensor([4294967297],"int32"), )
paddle.ldexp(Tensor([2281701379],"float64"), Tensor([2281701379],"int32"), )
paddle.lerp(Tensor([11883862, 1, 1, 1],"float32"), Tensor([11883862, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([11883862, 1, 8, 8],"float32"), Tensor([11883862, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 2, 570425345],"float32"), Tensor([3, 2, 1, 570425345],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 380283564],"float32"), Tensor([3, 2, 1, 380283564],"float32"), 0.5, )
paddle.less_equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.less_equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.less_equal(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.less_equal(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.less_equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.less_equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.less_equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.less_equal(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.less_equal(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.less_equal(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.less_equal(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.less_equal(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.less_equal(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.less_equal(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.less_equal(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.less_equal(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.less_equal(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.less_equal(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.less_equal(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.less_equal(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.less_equal(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.less_equal(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.less_equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.less_equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.less_equal(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.less_equal(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.less_equal(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.less_equal(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.less_equal(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.less_equal(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.less_than(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.less_than(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.less_than(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.less_than(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.less_than(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.less_than(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.less_than(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.less_than(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.less_than(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.less_than(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.less_than(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.less_than(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.less_than(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.less_than(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.less_than(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.less_than(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.less_than(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.less_than(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.less_than(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.less_than(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.less_than(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.less_than(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.less_than(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.less_than(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.less_than(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.less_than(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.less_than(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.less_than(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.less_than(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.less_than(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.less_than(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.less_than(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.less_than(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.less_than(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.linalg.cov(Tensor([4294967297],"float16"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([4294967297],"int32"), )
paddle.linalg.cov(Tensor([2281701379],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([2281701379],"int32"), )
paddle.linalg.cov(Tensor([4294967297],"float16"), rowvar=True, ddof=True, fweights=Tensor([4294967297],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([2281701379],"float64"), rowvar=True, ddof=True, fweights=Tensor([2281701379],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([4294967297],"float16"), rowvar=True, ddof=True, fweights=Tensor([4294967297],"int64"), aweights=Tensor([4294967297],"float16"), )
paddle.linalg.cov(Tensor([2281701379],"float64"), rowvar=True, ddof=True, fweights=Tensor([2281701379],"int64"), aweights=Tensor([2281701379],"float64"), )
paddle.linalg.cov(Tensor([4294967297],"float16"), rowvar=True, ddof=True, fweights=Tensor([4294967297],"int64"), aweights=Tensor([4294967297],"float16"), )
paddle.linalg.cov(Tensor([20, 214748365],"float16"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([214748365],"int32"), )
paddle.linalg.cov(Tensor([20, 2281701379],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([2281701379],"int32"), )
paddle.linalg.cov(Tensor([20, 214748365],"float16"), rowvar=True, ddof=True, fweights=Tensor([214748365],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 2281701379],"float64"), rowvar=True, ddof=True, fweights=Tensor([2281701379],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 214748365],"float16"), rowvar=True, ddof=True, fweights=Tensor([214748365],"int64"), aweights=Tensor([214748365],"float16"), )
paddle.linalg.cov(Tensor([20, 2281701379],"float64"), rowvar=True, ddof=True, fweights=Tensor([2281701379],"int64"), aweights=Tensor([2281701379],"float64"), )
paddle.linalg.cov(Tensor([20, 4294967297],"float16"), rowvar=True, ddof=True, fweights=Tensor([4294967297],"int64"), aweights=Tensor([4294967297],"float16"), )
paddle.linalg.lu_unpack(Tensor([152113426, 3, 5],"float32"), Tensor([152113426, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 228170138, 5],"float32"), Tensor([2, 228170138],"int32"), )
paddle.linalg.lu_unpack(Tensor([760567127, 3, 5],"float32"), Tensor([760567127, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 1140850690, 5],"float32"), Tensor([2, 1140850690],"int32"), )
paddle.linalg.lu_unpack(Tensor([286331154, 3, 5],"float16"), Tensor([286331154, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 429496730, 5],"float16"), Tensor([2, 429496730],"int32"), )
paddle.linalg.lu_unpack(Tensor([760567127, 3, 5],"float64"), Tensor([760567127, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 1140850690, 5],"float64"), Tensor([2, 1140850690],"int32"), )
paddle.linalg.lu_unpack(Tensor([30422686, 5, 3, 5],"float32"), Tensor([30422686, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 45634028, 5],"float32"), Tensor([2, 5, 45634028],"int32"), )
paddle.linalg.lu_unpack(Tensor([152113426, 5, 3, 5],"float32"), Tensor([152113426, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 228170138, 5],"float32"), Tensor([2, 5, 228170138],"int32"), )
paddle.linalg.lu_unpack(Tensor([57266231, 5, 3, 5],"float16"), Tensor([57266231, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 85899346, 5],"float16"), Tensor([2, 5, 85899346],"int32"), )
paddle.linalg.lu_unpack(Tensor([152113426, 5, 3, 5],"float64"), Tensor([152113426, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 228170138, 5],"float64"), Tensor([2, 5, 228170138],"int32"), )
paddle.linalg.lu_unpack(Tensor([18253612, 5, 5, 5],"float32"), Tensor([18253612, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([91268056, 5, 5, 5],"float32"), Tensor([91268056, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([34359739, 5, 5, 5],"float16"), Tensor([34359739, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([91268056, 5, 5, 5],"float64"), Tensor([91268056, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([91268056, 5, 5],"float32"), Tensor([91268056, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([456340276, 5, 5],"float32"), Tensor([456340276, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([171798692, 5, 5],"float16"), Tensor([171798692, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([456340276, 5, 5],"float64"), Tensor([456340276, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([456340276, 5],"float32"), Tensor([456340276],"int32"), )
paddle.linalg.lu_unpack(Tensor([2281701379, 5],"float32"), Tensor([2281701379],"int32"), )
paddle.linalg.lu_unpack(Tensor([858993460, 5],"float16"), Tensor([858993460],"int32"), )
paddle.linalg.lu_unpack(Tensor([2281701379, 5],"float64"), Tensor([2281701379],"int32"), )
paddle.linalg.lu_unpack(Tensor([152113426, 5, 3],"float32"), Tensor([152113426, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 114085069],"float32"), Tensor([4, 114085069],"int32"), )
paddle.linalg.lu_unpack(Tensor([760567127, 5, 3],"float32"), Tensor([760567127, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 570425345],"float32"), Tensor([4, 570425345],"int32"), )
paddle.linalg.lu_unpack(Tensor([286331154, 5, 3],"float16"), Tensor([286331154, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 214748365],"float16"), Tensor([4, 214748365],"int32"), )
paddle.linalg.lu_unpack(Tensor([760567127, 5, 3],"float64"), Tensor([760567127, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 570425345],"float64"), Tensor([4, 570425345],"int32"), )
paddle.linalg.lu_unpack(Tensor([30422686, 5, 5, 3],"float32"), Tensor([30422686, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 22817014],"float32"), Tensor([4, 5, 22817014],"int32"), )
paddle.linalg.lu_unpack(Tensor([152113426, 5, 5, 3],"float32"), Tensor([152113426, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 114085069],"float32"), Tensor([4, 5, 114085069],"int32"), )
paddle.linalg.lu_unpack(Tensor([57266231, 5, 5, 3],"float16"), Tensor([57266231, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 42949673],"float16"), Tensor([4, 5, 42949673],"int32"), )
paddle.linalg.lu_unpack(Tensor([152113426, 5, 5, 3],"float64"), Tensor([152113426, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 114085069],"float64"), Tensor([4, 5, 114085069],"int32"), )
paddle.linalg.lu_unpack(Tensor([159072863, 3, 3, 3],"float16"), Tensor([159072863, 3, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([253522376, 3, 3, 3],"float64"), Tensor([253522376, 3, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 456340276],"float32"), Tensor([456340276],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 2281701379],"float32"), Tensor([2281701379],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 858993460],"float16"), Tensor([858993460],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 2281701379],"float64"), Tensor([2281701379],"int32"), )
paddle.linalg.multi_dot(list[Tensor([2, 2147483649],"float16"),Tensor([2147483649, 4],"float16"),Tensor([4, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 1073741825],"float16"),Tensor([1073741825, 4],"float16"),Tensor([4, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float16"),Tensor([10, 429496730],"float16"),Tensor([429496730, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float16"),Tensor([10, 1431655766],"float16"),Tensor([1431655766, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1431655766, 3],"float16"),Tensor([3, 1431655766],"float16"),Tensor([1431655766, 3],"float16"),Tensor([3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 2147483649],"float16"),Tensor([2147483649, 2],"float16"),Tensor([2, 2147483649],"float16"),Tensor([2147483649],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 2147483649],"float16"),Tensor([2147483649, 2],"float16"),Tensor([2, 2147483649],"float16"),Tensor([2147483649],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1431655766, 3],"float16"),Tensor([3, 1431655766],"float16"),Tensor([1431655766, 3],"float16"),Tensor([3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1431655766, 3],"float16"),Tensor([3, 1431655766],"float16"),Tensor([1431655766, 3],"float16"),Tensor([3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 2147483649],"float16"),Tensor([2147483649, 2],"float16"),Tensor([2, 2147483649],"float16"),Tensor([2147483649],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4294967297],"float16"),Tensor([4294967297, 2],"float16"),Tensor([2, 4294967297],"float16"),Tensor([4294967297],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 2147483649],"float16"),Tensor([2147483649, 3],"float16"),Tensor([3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 1431655766],"float16"),Tensor([1431655766, 3],"float16"),Tensor([3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float16"),Tensor([4, 4294967297],"float16"),Tensor([4294967297],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 2147483649],"float16"),Tensor([2147483649, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 1431655766],"float16"),Tensor([1431655766, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 1140850690],"float32"),Tensor([1140850690, 4],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([2, 570425345],"float32"),Tensor([570425345, 4],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([2, 2147483649],"float16"),Tensor([2147483649, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2, 1073741825],"float16"),Tensor([1073741825, 4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1073741825, 4],"float16"),Tensor([4, 1073741825],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 1431655766],"float16"),Tensor([1431655766, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 1431655766],"float16"),Tensor([1431655766, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1073741825, 4],"float16"),Tensor([4, 1073741825],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 1431655766],"float16"),Tensor([1431655766, 8],"float16"),Tensor([8, 2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 536870913],"float16"),Tensor([536870913, 8],"float16"),Tensor([8, 2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825, 2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float16"),Tensor([4, 2147483649],"float16"),Tensor([2147483649, 2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 1431655766],"float16"),Tensor([1431655766],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4294967297],"float16"),Tensor([4294967297],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4294967297],"float16"),Tensor([4294967297, 4],"float16"),Tensor([4, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1073741825],"float16"),Tensor([1073741825, 4],"float16"),Tensor([4, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float16"),Tensor([3, 1431655766],"float16"),Tensor([1431655766, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float16"),Tensor([3, 2147483649],"float16"),Tensor([2147483649, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float16"),Tensor([3, 4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float16"),Tensor([3, 4],"float16"),Tensor([4, 4294967297],"float16"),Tensor([4294967297],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([2281701379],"float32"),Tensor([2281701379, 5],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([456340276],"float32"),Tensor([456340276, 5],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([4, 570425345],"float32"),Tensor([570425345],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([4, 2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4294967297],"float16"),Tensor([4294967297, 31],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([138547333],"float16"),Tensor([138547333, 31],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4294967297],"float16"),Tensor([4294967297, 3],"float16"),Tensor([3, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1431655766],"float16"),Tensor([1431655766, 3],"float16"),Tensor([3, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4294967297],"float16"),Tensor([4294967297, 3],"float16"),Tensor([3, 4294967297],"float16"),Tensor([4294967297, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1431655766],"float16"),Tensor([1431655766, 3],"float16"),Tensor([3, 1431655766],"float16"),Tensor([1431655766, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825, 4],"float16"),Tensor([4, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825, 4],"float16"),Tensor([4, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1431655766],"float16"),Tensor([1431655766, 3],"float16"),Tensor([3, 1431655766],"float16"),Tensor([1431655766, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([858993460],"float16"),Tensor([858993460, 3],"float16"),Tensor([3, 858993460],"float16"),Tensor([858993460, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4294967297],"float16"),Tensor([4294967297, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1431655766],"float16"),Tensor([1431655766, 3],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4294967297],"float16"),Tensor([4294967297, 5],"float16"),Tensor([5, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([858993460],"float16"),Tensor([858993460, 5],"float16"),Tensor([5, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 1073741825],"float16"),Tensor([1073741825, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 2147483649],"float16"),Tensor([2147483649, 2],"float16"),Tensor([2],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 5],"float16"),Tensor([5, 858993460],"float16"),Tensor([858993460],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float16"),Tensor([4, 5],"float16"),Tensor([5, 4294967297],"float16"),Tensor([4294967297],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([4294967297],"float16"),Tensor([4294967297, 4],"float16"),Tensor([4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([1073741825],"float16"),Tensor([1073741825, 4],"float16"),Tensor([4],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([6],"float16"),Tensor([6, 715827883],"float16"),Tensor([715827883],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([6],"float16"),Tensor([6, 4294967297],"float16"),Tensor([4294967297],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([8, 536870913],"float16"),Tensor([536870913, 3],"float16"),Tensor([3, 4],"float16"),Tensor([4, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([8, 1431655766],"float16"),Tensor([1431655766, 3],"float16"),Tensor([3, 4],"float16"),Tensor([4, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float16"),Tensor([6, 715827883],"float16"),Tensor([715827883, 4],"float16"),Tensor([4, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float16"),Tensor([6, 1073741825],"float16"),Tensor([1073741825, 4],"float16"),Tensor([4, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float16"),Tensor([6, 3],"float16"),Tensor([3, 1431655766],"float16"),Tensor([1431655766, 5],"float16"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float16"),Tensor([6, 3],"float16"),Tensor([3, 858993460],"float16"),Tensor([858993460, 5],"float16"),], )
paddle.linalg.solve(x=Tensor([153391690, 14, 14],"float16"), y=Tensor([153391690, 14, 2],"float16"), )
paddle.logaddexp(Tensor([1, 760567127, 3, 4],"float32"), Tensor([1, 760567127, 3, 1],"float32"), )
paddle.logaddexp(Tensor([1, 2, 1140850690, 4],"float32"), Tensor([1, 2, 1140850690, 1],"float32"), )
paddle.logaddexp(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.logaddexp(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.logaddexp(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.logaddexp(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.logaddexp(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.logaddexp(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.logaddexp(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.logaddexp(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.logaddexp(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.logaddexp(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.logaddexp(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.logaddexp(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.logaddexp(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.logaddexp(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.logaddexp(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.logaddexp(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.logaddexp(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.logaddexp(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.logaddexp(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.logaddexp(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.logaddexp(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.logaddexp(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.logaddexp(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.logaddexp(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.logaddexp(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.logaddexp(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.logaddexp(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.logaddexp(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.logaddexp(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.logaddexp(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.logical_and(x=Tensor([1, 760567127, 1, 3],"bool"), y=Tensor([1, 760567127, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 1140850690],"bool"), y=Tensor([1, 2, 1140850690],"bool"), )
paddle.logical_and(x=Tensor([1, 760567127, 1, 3],"bool"), y=Tensor([1, 760567127, 3],"bool"), )
paddle.logical_and(x=Tensor([1, 2, 1, 1140850690],"bool"), y=Tensor([1, 2, 1140850690],"bool"), )
paddle.logical_or(Tensor([13, 175515491, 1],"bool"), Tensor([13, 1, 175515491],"bool"), )
paddle.logical_or(Tensor([13, 7, 25073642],"bool"), Tensor([13, 25073642, 7],"bool"), )
paddle.logical_or(Tensor([13, 7, 25073642],"bool"), Tensor([13, 25073642, 7],"bool"), )
paddle.logical_or(Tensor([13, 175515491, 1],"bool"), Tensor([13, 1, 175515491],"bool"), )
paddle.logical_or(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.logical_or(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.logical_or(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.logical_or(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.logical_or(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.logical_or(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.logical_or(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.logical_or(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.logical_or(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.logical_or(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.logical_or(x=Tensor([1, 760567127, 1, 3],"bool"), y=Tensor([1, 760567127, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 1140850690],"bool"), y=Tensor([1, 2, 1140850690],"bool"), )
paddle.logical_or(x=Tensor([1, 760567127, 1, 3],"bool"), y=Tensor([1, 760567127, 3],"bool"), )
paddle.logical_or(x=Tensor([1, 2, 1, 1140850690],"bool"), y=Tensor([1, 2, 1140850690],"bool"), )
paddle.logical_xor(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.logical_xor(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.logical_xor(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.logical_xor(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.logical_xor(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.logical_xor(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.logical_xor(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.logical_xor(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.logical_xor(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.logical_xor(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.logical_xor(x=Tensor([1, 760567127, 1, 3],"bool"), y=Tensor([1, 760567127, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 1140850690],"bool"), y=Tensor([1, 2, 1140850690],"bool"), )
paddle.logical_xor(x=Tensor([1, 760567127, 1, 3],"bool"), y=Tensor([1, 760567127, 3],"bool"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 1140850690],"bool"), y=Tensor([1, 2, 1140850690],"bool"), )
paddle.masked_fill(Tensor([4294967297],"float16"), Tensor([4294967297],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([2281701379],"float16"), Tensor([2281701379],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([4294967297],"float16"), Tensor([4294967297],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([2281701379],"float16"), Tensor([2281701379],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([4294967297, 1],"float16"), Tensor([4294967297, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([57042535, 1],"float16"), Tensor([57042535, 40],"bool"), -0.54931640625, )
paddle.masked_fill(Tensor([4294967297, 1],"float16"), Tensor([4294967297, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([57042535, 1],"float16"), Tensor([57042535, 40],"bool"), 1.3017578125, )
paddle.masked_fill(Tensor([300, 7605672],"float32"), Tensor([7605672],"bool"), -0.29328805208206177, )
paddle.masked_fill(Tensor([300, 2281701379],"float32"), Tensor([2281701379],"bool"), -0.29328805208206177, )
paddle.masked_fill(Tensor([300, 7605672],"float32"), Tensor([7605672],"bool"), 0.9238947033882141, )
paddle.masked_fill(Tensor([300, 2281701379],"float32"), Tensor([2281701379],"bool"), 0.9238947033882141, )
paddle.masked_scatter(Tensor([2281701379],"float32"), Tensor([300, 2281701379],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([7605672],"float32"), Tensor([300, 7605672],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([2281701379],"float32"), Tensor([2281701379],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([2281701379],"float32"), Tensor([2281701379],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([57042535, 40],"float32"), Tensor([57042535, 1],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([2281701379, 40],"float32"), Tensor([2281701379, 1],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([300, 7605672],"float32"), Tensor([7605672],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([300, 2281701379],"float32"), Tensor([2281701379],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([50, 45634028],"float32"), Tensor([50, 45634028],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([50, 45634028],"float32"), Tensor([50, 45634028],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([1760573, 8, 9, 18],"float32"), Tensor([1760573, 8, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 2347430, 9, 18],"float32"), Tensor([6, 2347430, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 2640859, 18],"float32"), Tensor([6, 8, 2640859, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 5281717],"float32"), Tensor([6, 8, 9, 5281717],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([1760573, 8, 9, 18],"float32"), Tensor([1760573, 8, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 2347430, 9, 18],"float32"), Tensor([6, 2347430, 9, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 2640859, 18],"float32"), Tensor([6, 8, 2640859, 18],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_scatter(Tensor([6, 8, 9, 5281717],"float32"), Tensor([6, 8, 9, 5281717],"bool"), Tensor([300, 300],"float32"), )
paddle.masked_select(x=Tensor([1431655766, 3],"float16"), mask=Tensor([1431655766, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 2147483649],"float16"), mask=Tensor([2, 2147483649],"bool"), )
paddle.masked_select(x=Tensor([760567127, 3],"float64"), mask=Tensor([760567127, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 1140850690],"float64"), mask=Tensor([2, 1140850690],"bool"), )
paddle.matmul(Tensor([1, 1, 1, 2281701379],"float32"), Tensor([1, 1, 2281701379, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 1, 71303169],"float32"), Tensor([1, 1, 71303169, 32],"float32"), )
paddle.matmul(Tensor([1, 1, 2281701379],"float32"), Tensor([50304, 2281701379],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 45359],"float32"), Tensor([50304, 45359],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 1, 2281701379],"float32"), Tensor([2281701379, 200],"float32"), transpose_y=False, )
paddle.matmul(Tensor([1, 1, 11408507],"float32"), Tensor([11408507, 200],"float32"), transpose_y=False, )
paddle.matmul(Tensor([2281702, 100, 100],"float32"), Tensor([2281702, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 22817014],"float32"), Tensor([22817014, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 228170138],"float32"), Tensor([228170138, 10],"float32"), )
paddle.matmul(Tensor([1, 2281701379],"float32"), Tensor([2281701379, 20],"float32"), )
paddle.matmul(Tensor([1, 114085069],"float32"), Tensor([114085069, 20],"float32"), )
paddle.matmul(Tensor([1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.matmul(Tensor([1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.matmul(Tensor([126761188, 18],"float32"), Tensor([126761188],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([2281701379, 18],"float32"), Tensor([2281701379],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([1, 190141782],"float32"), Tensor([12, 190141782],"float32"), transpose_y=True, )
paddle.matmul(Tensor([23767723, 3, 2, 5, 4],"float32"), Tensor([23767723, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 71303169, 2, 5, 4],"float32"), Tensor([1, 71303169, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 47535446, 5, 4],"float32"), Tensor([1, 3, 47535446, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 5, 152113426],"float32"), Tensor([152113426, 8],"float32"), )
paddle.matmul(Tensor([1, 3, 5, 285212673],"float32"), Tensor([285212673, 8],"float32"), )
paddle.matmul(Tensor([1000, 2281702],"float32"), y=Tensor([2281702, 10],"float32"), )
paddle.matmul(Tensor([1000, 228170138],"float32"), y=Tensor([228170138, 10],"float32"), )
paddle.matmul(Tensor([17825793, 32],"float32"), Tensor([17825793, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([557057, 2, 16, 4, 16],"float32"), Tensor([557057, 2, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([13, 85701, 16, 4, 16],"float32"), Tensor([13, 85701, 16, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([27853, 10, 64, 64, 2, 2],"float32"), Tensor([27853, 10, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([16, 17409, 64, 64, 2, 2],"float32"), Tensor([16, 17409, 64, 64, 2, 1],"float32"), )
paddle.matmul(Tensor([2, 114085069, 5, 2],"float32"), Tensor([114085069, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 95070891, 5, 2],"float32"), Tensor([95070891, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1140850690],"float32"), Tensor([1140850690],"float32"), False, False, )
paddle.matmul(Tensor([2, 2281701379],"float32"), Tensor([2281701379],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 570425345],"float32"), Tensor([2, 570425345, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 570425345],"float32"), Tensor([2, 570425345, 2],"float32"), False, False, )
paddle.matmul(Tensor([114085069, 3, 4],"float32"), Tensor([114085069, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 228170138],"float32"), Tensor([2, 5, 228170138],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 380283564],"float32"), Tensor([380283564],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 2281701379],"float32"), Tensor([2281701379],"float32"), False, False, )
paddle.matmul(Tensor([114085069, 4, 3],"float32"), Tensor([114085069, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 228170138, 3],"float32"), Tensor([2, 228170138, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 380283564, 3],"float32"), Tensor([2, 5, 380283564],"float32"), True, True, )
paddle.matmul(Tensor([114085069, 4, 3],"float32"), Tensor([114085069, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 228170138, 3],"float32"), Tensor([2, 5, 228170138],"float32"), True, True, )
paddle.matmul(Tensor([2281701379],"float32"), Tensor([2281701379, 3],"float32"), False, False, )
paddle.matmul(Tensor([760567127],"float32"), Tensor([760567127, 3],"float32"), False, False, )
paddle.matmul(Tensor([2281701379],"float32"), Tensor([3, 2281701379],"float32"), False, True, )
paddle.matmul(Tensor([760567127],"float32"), Tensor([3, 760567127],"float32"), False, True, )
paddle.matmul(x=Tensor([10, 42949673, 5, 2],"float16"), y=Tensor([42949673, 3, 2, 5],"float16"), )
paddle.matmul(x=Tensor([10, 1, 214748365, 2],"float16"), y=Tensor([1, 3, 2, 214748365],"float16"), )
paddle.matmul(x=Tensor([10, 1, 5, 85899346],"float16"), y=Tensor([1, 3, 85899346, 5],"float16"), )
paddle.matmul(x=Tensor([10, 143165577, 5, 2],"float16"), y=Tensor([143165577, 3, 2, 5],"float16"), )
paddle.matmul(x=Tensor([10, 1, 5, 286331154],"float16"), y=Tensor([1, 3, 286331154, 5],"float16"), )
paddle.matmul(x=Tensor([10, 1, 715827883, 2],"float16"), y=Tensor([1, 3, 2, 715827883],"float16"), )
paddle.matmul(x=Tensor([10, 214748365, 2],"float16"), y=Tensor([10, 2, 214748365],"float16"), )
paddle.matmul(x=Tensor([10, 5, 85899346],"float16"), y=Tensor([10, 85899346, 5],"float16"), )
paddle.matmul(x=Tensor([10, 5, 85899346],"float16"), y=Tensor([10, 85899346, 5],"float16"), )
paddle.matmul(x=Tensor([10, 214748365, 2],"float16"), y=Tensor([10, 2, 214748365],"float16"), )
paddle.matmul(x=Tensor([10, 5, 85899346],"float16"), y=Tensor([85899346],"float16"), )
paddle.matmul(x=Tensor([10, 5, 4294967297],"float16"), y=Tensor([4294967297],"float16"), )
paddle.matmul(x=Tensor([10, 429496730],"float16"), y=Tensor([429496730],"float16"), )
paddle.matmul(x=Tensor([10, 4294967297],"float16"), y=Tensor([4294967297],"float16"), )
paddle.matmul(x=Tensor([187679, 12158],"float32"), y=Tensor([12158, 1],"float32"), )
paddle.matmul(x=Tensor([187679, 2281701379],"float32"), y=Tensor([2281701379, 1],"float32"), )
paddle.max(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.max(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.maximum(Tensor([1, 1, 1, 221848],"float32"), Tensor([1, 1, 10285, 221848],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 93991],"float32"), Tensor([1, 1, 24276, 93991],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 83837],"float32"), Tensor([1, 1, 27216, 83837],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 75245],"float32"), Tensor([1, 1, 30324, 75245],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 67908],"float32"), Tensor([1, 1, 33600, 67908],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 634159],"float32"), Tensor([1, 1, 3598, 634159],"float32"), )
paddle.maximum(Tensor([1, 1, 1, 61595],"float32"), Tensor([1, 1, 37044, 61595],"float32"), )
paddle.maximum(Tensor([1, 1, 221848],"float32"), Tensor([1, 10285, 221848],"float32"), )
paddle.maximum(Tensor([1, 1, 634159],"float32"), Tensor([1, 3598, 634159],"float32"), )
paddle.maximum(Tensor([1, 1, 61906],"float32"), Tensor([1, 36858, 61906],"float32"), )
paddle.maximum(Tensor([1, 1, 59417],"float32"), Tensor([1, 38402, 59417],"float32"), )
paddle.maximum(Tensor([1, 1, 547828],"float32"), Tensor([1, 4165, 547828],"float32"), )
paddle.maximum(Tensor([1, 1, 419431],"float32"), Tensor([1, 5440, 419431],"float32"), )
paddle.maximum(Tensor([1, 1, 371009],"float32"), Tensor([1, 6150, 371009],"float32"), )
paddle.maximum(Tensor([1, 1, 2281701379],"float32"), Tensor([1001, 2281701379],"float32"), )
paddle.maximum(Tensor([1, 1, 2279422],"float32"), Tensor([1001, 2279422],"float32"), )
paddle.maximum(Tensor([1, 1, 2281701379],"float32"), Tensor([1002, 2281701379],"float32"), )
paddle.maximum(Tensor([1, 1, 2277148],"float32"), Tensor([1002, 2277148],"float32"), )
paddle.maximum(Tensor([1, 1, 2281701379],"float32"), Tensor([1004, 2281701379],"float32"), )
paddle.maximum(Tensor([1, 1, 2272611],"float32"), Tensor([1004, 2272611],"float32"), )
paddle.maximum(Tensor([1, 1, 2281701379],"float32"), Tensor([1031, 2281701379],"float32"), )
paddle.maximum(Tensor([1, 1, 2213096],"float32"), Tensor([1031, 2213096],"float32"), )
paddle.maximum(Tensor([1, 1, 2281701379],"float32"), Tensor([1034, 2281701379],"float32"), )
paddle.maximum(Tensor([1, 1, 2206675],"float32"), Tensor([1034, 2206675],"float32"), )
paddle.maximum(Tensor([1, 1, 2281701379],"float32"), Tensor([1040, 2281701379],"float32"), )
paddle.maximum(Tensor([1, 1, 2193944],"float32"), Tensor([1040, 2193944],"float32"), )
paddle.maximum(Tensor([1, 1, 2281701379],"float32"), Tensor([1043, 2281701379],"float32"), )
paddle.maximum(Tensor([1, 1, 2187634],"float32"), Tensor([1043, 2187634],"float32"), )
paddle.maximum(Tensor([10, 228170138],"float32"), Tensor([228170138],"float32"), )
paddle.maximum(Tensor([10, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.maximum(Tensor([100, 22817014],"float32"), Tensor([22817014],"float32"), )
paddle.maximum(Tensor([100, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.maximum(Tensor([57042535, 40],"float32"), Tensor([30, 57042535, 40],"float32"), )
paddle.maximum(Tensor([200, 11408507],"float32"), Tensor([30, 200, 11408507],"float32"), )
paddle.maximum(Tensor([1901418, 40],"float32"), Tensor([30, 1901418, 40],"float32"), )
paddle.maximum(Tensor([200, 380284],"float32"), Tensor([30, 200, 380284],"float32"), )
paddle.maximum(Tensor([2281701379],"float32"), Tensor([30, 200, 2281701379],"float32"), )
paddle.maximum(Tensor([380284],"float32"), Tensor([30, 200, 380284],"float32"), )
paddle.maximum(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.maximum(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.maximum(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.maximum(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.mean(x=Tensor([1431655766, 1, 3],"float16"), axis=Tensor([1431655766],"int64"), )
paddle.mean(x=Tensor([2281701379, 1, 3],"float64"), axis=Tensor([2281701379],"int64"), )
paddle.meshgrid(Tensor([8],"int64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), )
paddle.meshgrid(Tensor([8],"int64"), Tensor([2281701379],"int64"), Tensor([2281701379],"int64"), )
paddle.meshgrid(list[Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),Tensor([1],"int64"),], )
paddle.meshgrid(list[Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),Tensor([1],"int64"),], )
paddle.meshgrid(list[Tensor([4294967297],"float16"),Tensor([5],"float16"),Tensor([4294967297],"float16"),], )
paddle.meshgrid(list[Tensor([4294967297],"float16"),Tensor([5],"float16"),Tensor([4294967297],"float16"),], )
paddle.meshgrid(list[Tensor([2281701379],"int32"),Tensor([5],"int32"),Tensor([2281701379],"int32"),], )
paddle.meshgrid(list[Tensor([2281701379],"int32"),Tensor([5],"int32"),Tensor([2281701379],"int32"),], )
paddle.meshgrid(list[Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),Tensor([5],"int32"),], )
paddle.meshgrid(list[Tensor([2281701379],"int32"),Tensor([2281701379],"int32"),Tensor([5],"int32"),], )
paddle.meshgrid(list[Tensor([5],"int64"),Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.meshgrid(list[Tensor([5],"int64"),Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.min(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.minimum(Tensor([1, 1, 1, 221848],"float32"), Tensor([1, 1, 10285, 221848],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 93991],"float32"), Tensor([1, 1, 24276, 93991],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 83837],"float32"), Tensor([1, 1, 27216, 83837],"float32"), )
paddle.minimum(Tensor([1, 1, 1, 75245],"float32"), Tensor([1, 1, 30324, 75245],"float32"), )
paddle.minimum(Tensor([1, 1, 221848],"float32"), Tensor([1, 10285, 221848],"float32"), )
paddle.minimum(Tensor([1, 1, 634159],"float32"), Tensor([1, 3598, 634159],"float32"), )
paddle.minimum(Tensor([1, 1, 61906],"float32"), Tensor([1, 36858, 61906],"float32"), )
paddle.minimum(Tensor([1, 1, 59417],"float32"), Tensor([1, 38402, 59417],"float32"), )
paddle.minimum(Tensor([1, 1, 2281701379],"float32"), Tensor([1001, 2281701379],"float32"), )
paddle.minimum(Tensor([1, 1, 2279422],"float32"), Tensor([1001, 2279422],"float32"), )
paddle.minimum(Tensor([1, 1, 2281701379],"float32"), Tensor([1002, 2281701379],"float32"), )
paddle.minimum(Tensor([1, 1, 2277148],"float32"), Tensor([1002, 2277148],"float32"), )
paddle.minimum(Tensor([1, 1, 2281701379],"float32"), Tensor([1004, 2281701379],"float32"), )
paddle.minimum(Tensor([1, 1, 2272611],"float32"), Tensor([1004, 2272611],"float32"), )
paddle.minimum(Tensor([1, 1, 2281701379],"float32"), Tensor([1031, 2281701379],"float32"), )
paddle.minimum(Tensor([1, 1, 2213096],"float32"), Tensor([1031, 2213096],"float32"), )
paddle.minimum(Tensor([10, 228170138],"float32"), Tensor([228170138],"float32"), )
paddle.minimum(Tensor([10, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.minimum(Tensor([57042535, 40],"float32"), Tensor([30, 57042535, 40],"float32"), )
paddle.minimum(Tensor([200, 11408507],"float32"), Tensor([30, 200, 11408507],"float32"), )
paddle.minimum(Tensor([1901418, 40],"float32"), Tensor([30, 1901418, 40],"float32"), )
paddle.minimum(Tensor([200, 380284],"float32"), Tensor([30, 200, 380284],"float32"), )
paddle.minimum(Tensor([2281701379],"float32"), Tensor([30, 200, 2281701379],"float32"), )
paddle.minimum(Tensor([380284],"float32"), Tensor([30, 200, 380284],"float32"), )
paddle.minimum(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.minimum(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.minimum(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.minimum(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.mm(Tensor([228170138, 10],"float32"), Tensor([10, 228170138],"float32"), )
paddle.mm(Tensor([1, 2281701379],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.mm(Tensor([1, 2281701379],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.mm(Tensor([228170138, 10],"float32"), Tensor([10, 228170138],"float32"), )
paddle.mm(Tensor([429496730, 10],"float16"), Tensor([10, 429496730],"float16"), )
paddle.mm(Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.mm(Tensor([1, 4294967297],"float16"), Tensor([4294967297, 1],"float16"), )
paddle.mm(Tensor([429496730, 10],"float16"), Tensor([10, 429496730],"float16"), )
paddle.mm(Tensor([190141782, 12],"float32"), Tensor([12, 190141782],"float32"), )
paddle.mm(Tensor([1, 2281701379],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.mm(Tensor([1, 2281701379],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.mm(Tensor([190141782, 12],"float32"), Tensor([12, 190141782],"float32"), )
paddle.mm(Tensor([214748365, 20],"float16"), Tensor([20, 214748365],"float16"), )
paddle.mm(Tensor([10, 429496730],"float16"), Tensor([429496730, 10],"float16"), )
paddle.mm(Tensor([10, 429496730],"float16"), Tensor([429496730, 10],"float16"), )
paddle.mm(Tensor([214748365, 20],"float16"), Tensor([20, 214748365],"float16"), )
paddle.mm(Tensor([1024, 4, 17409, 32],"float32"), Tensor([1024, 4, 32, 17409],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 11369],"float32"), Tensor([1024, 4, 11369, 49],"float32"), )
paddle.mm(Tensor([1024, 4, 49, 11369],"float32"), Tensor([1024, 4, 11369, 49],"float32"), )
paddle.mm(Tensor([1024, 4, 17409, 32],"float32"), Tensor([1024, 4, 32, 17409],"float32"), )
paddle.mm(Tensor([363792, 4, 49, 49],"float32"), Tensor([363792, 4, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 1422, 49, 49],"float32"), Tensor([1024, 1422, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 6, 11606, 32],"float32"), Tensor([1024, 6, 32, 11606],"float32"), )
paddle.mm(Tensor([1024, 6, 49, 7579],"float32"), Tensor([1024, 6, 7579, 49],"float32"), )
paddle.mm(Tensor([1024, 6, 49, 7579],"float32"), Tensor([1024, 6, 7579, 49],"float32"), )
paddle.mm(Tensor([1024, 6, 11606, 32],"float32"), Tensor([1024, 6, 32, 11606],"float32"), )
paddle.mm(Tensor([242528, 6, 49, 49],"float32"), Tensor([242528, 6, 49, 32],"float32"), )
paddle.mm(Tensor([1024, 1422, 49, 49],"float32"), Tensor([1024, 1422, 49, 32],"float32"), )
paddle.mm(Tensor([61896, 8, 144, 144],"float32"), Tensor([61896, 8, 144, 32],"float32"), )
paddle.mm(Tensor([1024, 484, 144, 144],"float32"), Tensor([1024, 484, 144, 32],"float32"), )
paddle.mm(Tensor([1024, 8, 8705, 32],"float32"), Tensor([1024, 8, 32, 8705],"float32"), )
paddle.mm(Tensor([1024, 8, 144, 1935],"float32"), Tensor([1024, 8, 1935, 144],"float32"), )
paddle.mm(Tensor([1024, 8, 144, 1935],"float32"), Tensor([1024, 8, 1935, 144],"float32"), )
paddle.mm(Tensor([1024, 8, 8705, 32],"float32"), Tensor([1024, 8, 32, 8705],"float32"), )
paddle.mm(Tensor([1024, 8, 8705, 32],"float32"), Tensor([1024, 8, 32, 8705],"float32"), )
paddle.mm(Tensor([1024, 8, 49, 5685],"float32"), Tensor([1024, 8, 5685, 49],"float32"), )
paddle.mm(Tensor([1024, 8, 49, 5685],"float32"), Tensor([1024, 8, 5685, 49],"float32"), )
paddle.mm(Tensor([1024, 8, 8705, 32],"float32"), Tensor([1024, 8, 32, 8705],"float32"), )
paddle.mm(Tensor([429496730, 10],"float16"), Tensor([10, 429496730],"float16"), )
paddle.mm(Tensor([20, 214748365],"float16"), Tensor([214748365, 20],"float16"), )
paddle.mm(Tensor([20, 214748365],"float16"), Tensor([214748365, 20],"float16"), )
paddle.mm(Tensor([429496730, 10],"float16"), Tensor([10, 429496730],"float16"), )
paddle.mm(Tensor([24, 1, 95070891],"float32"), Tensor([24, 95070891, 96],"float32"), )
paddle.mm(Tensor([92843, 1, 256],"float32"), Tensor([92843, 256, 96],"float32"), )
paddle.mm(Tensor([24, 1, 990322],"float32"), Tensor([24, 990322, 96],"float32"), )
paddle.mm(Tensor([32, 1, 71303169],"float32"), Tensor([32, 71303169, 576],"float32"), )
paddle.mm(Tensor([15474, 1, 256],"float32"), Tensor([15474, 256, 576],"float32"), )
paddle.mm(Tensor([32, 1, 123791],"float32"), Tensor([32, 123791, 576],"float32"), )
paddle.mm(Tensor([4, 1, 570425345],"float32"), Tensor([4, 570425345, 512],"float32"), )
paddle.mm(Tensor([17409, 1, 256],"float32"), Tensor([17409, 256, 512],"float32"), )
paddle.mm(Tensor([4, 1, 1114113],"float32"), Tensor([4, 1114113, 512],"float32"), )
paddle.mm(Tensor([8, 1, 285212673],"float32"), Tensor([8, 285212673, 512],"float32"), )
paddle.mm(Tensor([17409, 1, 256],"float32"), Tensor([17409, 256, 512],"float32"), )
paddle.mm(Tensor([8, 1, 557057],"float32"), Tensor([8, 557057, 512],"float32"), )
paddle.mm(input=Tensor([2, 3, 715827883],"float16"), mat2=Tensor([2, 715827883, 2],"float16"), )
paddle.mm(input=Tensor([2, 3, 1073741825],"float16"), mat2=Tensor([2, 1073741825, 2],"float16"), )
paddle.mm(input=Tensor([2, 3, 715827883],"float16"), mat2=Tensor([715827883, 5],"float16"), )
paddle.mm(input=Tensor([2, 3, 858993460],"float16"), mat2=Tensor([858993460, 5],"float16"), )
paddle.mm(input=Tensor([2, 3, 715827883],"float16"), mat2=Tensor([715827883],"float16"), )
paddle.mm(input=Tensor([2, 3, 4294967297],"float16"), mat2=Tensor([4294967297],"float16"), )
paddle.mm(input=Tensor([760567127, 3],"float32"), mat2=Tensor([3, 760567127],"float32"), )
paddle.mm(input=Tensor([2, 1140850690],"float32"), mat2=Tensor([1140850690, 2],"float32"), )
paddle.mm(input=Tensor([2, 1140850690],"float32"), mat2=Tensor([1140850690, 2],"float32"), )
paddle.mm(input=Tensor([760567127, 3],"float32"), mat2=Tensor([3, 760567127],"float32"), )
paddle.mm(input=Tensor([1431655766, 3],"float16"), mat2=Tensor([3, 1431655766],"float16"), )
paddle.mm(input=Tensor([2, 2147483649],"float16"), mat2=Tensor([2147483649, 2],"float16"), )
paddle.mm(input=Tensor([2, 2147483649],"float16"), mat2=Tensor([2147483649, 2],"float16"), )
paddle.mm(input=Tensor([1431655766, 3],"float16"), mat2=Tensor([3, 1431655766],"float16"), )
paddle.mod(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.mod(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.mod(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.mod(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.mod(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.mod(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.mod(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.mod(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.mod(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.mod(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.mod(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.mod(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.mod(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.mod(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.mod(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.mod(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.mod(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.mod(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.mod(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.mod(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.mod(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.mod(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.mod(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.mod(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.mod(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.mod(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.mod(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.mod(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.mod(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.mod(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.multiplex(inputs=list[Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2281701379, 3],"float32"),Tensor([2281701379, 3],"float32"),Tensor([2281701379, 3],"float32"),], index=Tensor([2281701379, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 1140850690],"float32"),Tensor([2, 1140850690],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2281701379, 4],"float32"),Tensor([2281701379, 4],"float32"),], index=Tensor([2281701379, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([570425345, 4],"float32"),Tensor([570425345, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([7, 325957340],"float32"),Tensor([7, 325957340],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([570425345, 4],"float32"),Tensor([570425345, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([7, 325957340],"float32"),Tensor([7, 325957340],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiply(Tensor([285212673, 8, 4, 32],"float32"), Tensor([285212673, 8, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([13, 175515491, 4, 32],"float32"), Tensor([13, 175515491, 1, 1],"float32"), name=None, )
paddle.multiply(Tensor([2, 3, 1, 380283564],"float32"), Tensor([3, 3, 380283564],"float32"), )
paddle.multiply(Tensor([2, 3, 1, 253522376],"float32"), Tensor([3, 3, 253522376],"float32"), )
paddle.multiply(Tensor([5, 286331154, 3],"float16"), Tensor([286331154, 3],"float16"), )
paddle.multiply(Tensor([5, 1, 858993460],"float16"), Tensor([1, 858993460],"float16"), )
paddle.multiply(Tensor([5, 1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), )
paddle.multiply(Tensor([5, 1, 4294967297],"float16"), Tensor([1, 4294967297],"float16"), )
paddle.multiply(x=Tensor([1, 2281701379, 18, 18],"float32"), y=Tensor([1, 2281701379, 1, 1],"float32"), )
paddle.multiply(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.multiply(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.multiply(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.multiply(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.multiply(x=Tensor([187679, 12158],"float32"), y=Tensor([12158],"float32"), )
paddle.multiply(x=Tensor([187679, 2281701379],"float32"), y=Tensor([2281701379],"float32"), )
paddle.mv(Tensor([1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.mv(Tensor([1, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.mv(Tensor([3, 760567127],"float32"), Tensor([760567127],"float32"), )
paddle.mv(Tensor([3, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.mv(Tensor([3, 760567127],"float32"), Tensor([760567127],"float32"), )
paddle.mv(Tensor([3, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.mv(Tensor([3, 760567127],"float32"), Tensor([760567127],"float32"), )
paddle.mv(Tensor([3, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.mv(Tensor([5, 858993460],"float16"), Tensor([858993460],"float16"), )
paddle.mv(Tensor([5, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.mv(Tensor([64, 67108865],"float16"), Tensor([67108865],"float16"), )
paddle.mv(Tensor([64, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.mv(x=Tensor([1, 4294967297],"float16"), vec=Tensor([4294967297],"float16"), )
paddle.mv(x=Tensor([1, 4294967297],"float16"), vec=Tensor([4294967297],"float16"), )
paddle.mv(x=Tensor([2, 2147483649],"float16"), vec=Tensor([2147483649],"float16"), )
paddle.mv(x=Tensor([2, 4294967297],"float16"), vec=Tensor([4294967297],"float16"), )
paddle.mv(x=Tensor([2, 2147483649],"float16"), vec=Tensor([2147483649],"float16"), )
paddle.mv(x=Tensor([2, 4294967297],"float16"), vec=Tensor([4294967297],"float16"), )
paddle.mv(x=Tensor([3, 760567127],"float32"), vec=Tensor([760567127],"float32"), )
paddle.mv(x=Tensor([3, 2281701379],"float32"), vec=Tensor([2281701379],"float32"), )
paddle.mv(x=Tensor([3, 1431655766],"float16"), vec=Tensor([1431655766],"float16"), )
paddle.mv(x=Tensor([3, 4294967297],"float16"), vec=Tensor([4294967297],"float16"), )
paddle.nextafter(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.nextafter(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.nextafter(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.nextafter(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.nextafter(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.nextafter(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.nextafter(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.nextafter(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([89478486, 3, 4, 4],"float16"), output_size=Tensor([89478486],"int64"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2281701379, 3, 4, 4],"float64"), output_size=Tensor([2281701379],"int64"), )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([89478486, 4, 4, 3],"float16"), output_size=Tensor([89478486],"int32"), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool2d(Tensor([2281701379, 4, 4, 3],"float64"), output_size=Tensor([2281701379],"int32"), data_format="NHWC", name=None, )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 262145, 8, 32, 32],"float16"), output_size=Tensor([262145],"int64"), )
paddle.nn.functional.adaptive_avg_pool3d(Tensor([2, 2281701379, 8, 32, 32],"float64"), output_size=Tensor([2281701379],"int64"), )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([142606337, 16],"float32"), Tensor([142606337],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([128, 17825793],"float32"), Tensor([128],"int64"), Tensor([17825793, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([2281701379, 16],"float32"), Tensor([2281701379],"int64"), Tensor([16, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([128, 285212673],"float32"), Tensor([128],"int64"), Tensor([285212673, 8],"float32"), list[list[Tensor([16, 8],"float32"),Tensor([8, 5],"float32"),],list[Tensor([16, 4],"float32"),Tensor([4, 5],"float32"),],list[Tensor([16, 2],"float32"),Tensor([2, 5],"float32"),],], list[5,10,15,20,], None, )
paddle.nn.functional.affine_grid(Tensor([715827883, 2, 3],"float16"), Tensor([715827883],"int32"), align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([2281701379, 2, 3],"float64"), Tensor([2281701379],"int32"), align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([715827883, 2, 3],"float16"), Tensor([715827883],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([2281701379, 2, 3],"float64"), Tensor([2281701379],"int32"), align_corners=True, )
paddle.nn.functional.batch_norm(Tensor([1, 8912897, 256],"float32"), Tensor([8912897],"float32"), Tensor([8912897],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 2281701379, 256],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([1, 2281701379, 256],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.0, epsilon=1e-06, )
paddle.nn.functional.batch_norm(Tensor([2, 190141782, 2, 3],"float32"), Tensor([190141782],"float32"), Tensor([190141782],"float32"), Tensor([190141782],"float32"), Tensor([190141782],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 2281701379, 2, 3],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 2281701379, 2, 3],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 2281701379, 2, 3],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 2281701379, 2, 3],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([30, 25353, 50, 60],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379, 50, 60],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379, 50, 60],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379, 50, 60],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379, 50, 60],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.batch_norm(Tensor([30, 25353, 50, 60],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), Tensor([25353],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379, 50, 60],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379, 50, 60],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379, 50, 60],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379, 50, 60],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), Tensor([38029],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 40, 50, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, data_format="NHWC", )
paddle.nn.functional.batch_norm(Tensor([30, 76056713],"float32"), Tensor([76056713],"float32"), Tensor([76056713],"float32"), Tensor([76056713],"float32"), Tensor([76056713],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([30, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 570425345],"float32"), Tensor([570425345],"float32"), Tensor([570425345],"float32"), Tensor([570425345],"float32"), Tensor([570425345],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 1980644, 12, 24],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 12, 24],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 12, 24],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 12, 24],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 12, 24],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([4, 1980644, 12, 24],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), Tensor([1980644],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 12, 24],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 12, 24],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 12, 24],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 12, 24],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=False, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=True, )
paddle.nn.functional.batch_norm(Tensor([4, 17825793, 32],"float32"), Tensor([17825793],"float32"), Tensor([17825793],"float32"), Tensor([17825793],"float32"), Tensor([17825793],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 32],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 32],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 32],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([4, 2281701379, 32],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(x=Tensor([2, 190141782, 2, 3],"float32"), running_mean=Tensor([190141782],"float32"), running_var=Tensor([190141782],"float32"), weight=Tensor([190141782],"float32"), bias=Tensor([190141782],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 2281701379, 2, 3],"float32"), running_mean=Tensor([2281701379],"float32"), running_var=Tensor([2281701379],"float32"), weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 2281701379, 2, 3],"float32"), running_mean=Tensor([2281701379],"float32"), running_var=Tensor([2281701379],"float32"), weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 2281701379, 2, 3],"float32"), running_mean=Tensor([2281701379],"float32"), running_var=Tensor([2281701379],"float32"), weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 2281701379, 2, 3],"float32"), running_mean=Tensor([2281701379],"float32"), running_var=Tensor([2281701379],"float32"), weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 357913942, 2, 3],"float16"), running_mean=Tensor([357913942],"float16"), running_var=Tensor([357913942],"float16"), weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 357913942, 2, 3],"float16"), running_mean=Tensor([357913942],"float16"), running_var=Tensor([357913942],"float16"), weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 357913942, 2, 3],"float16"), running_mean=Tensor([357913942],"float16"), running_var=Tensor([357913942],"float16"), weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 357913942, 2, 3],"float16"), running_mean=Tensor([357913942],"float16"), running_var=Tensor([357913942],"float16"), weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 2, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(x=Tensor([2, 715827883, 3],"float16"), running_mean=Tensor([715827883],"float16"), running_var=Tensor([715827883],"float16"), weight=Tensor([715827883],"float16"), bias=Tensor([715827883],"float16"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 715827883, 3],"float16"), running_mean=Tensor([715827883],"float16"), running_var=Tensor([715827883],"float16"), weight=Tensor([715827883],"float16"), bias=Tensor([715827883],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 715827883, 3],"float16"), running_mean=Tensor([715827883],"float16"), running_var=Tensor([715827883],"float16"), weight=Tensor([715827883],"float16"), bias=Tensor([715827883],"float16"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 4294967297, 3],"float16"), running_mean=Tensor([4294967297],"float16"), running_var=Tensor([4294967297],"float16"), weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.bilinear(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([760567127, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([760567127, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([253522376, 3, 3],"float32"), Tensor([1, 253522376],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([380283564, 3],"float32"), Tensor([380283564, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([380283564, 6],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([2281701379, 3, 3],"float32"), Tensor([1, 2281701379],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([2281701379, 1],"float32"), Tensor([2281701379, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 760567127],"float32"), Tensor([3, 2],"float32"), Tensor([4, 760567127, 2],"float32"), Tensor([760567127, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([1140850690, 1],"float32"), Tensor([1140850690, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 760567127],"float32"), Tensor([4, 1, 760567127],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([1140850690, 1, 2],"float32"), Tensor([1, 1140850690],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 285212673],"float32"), Tensor([3, 2],"float32"), Tensor([4, 285212673, 2],"float32"), Tensor([285212673, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 570425345],"float32"), Tensor([4, 1, 570425345],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 570425345],"float32"), Tensor([3, 2],"float32"), Tensor([4, 570425345, 2],"float32"), Tensor([570425345, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([2281701379, 1, 2],"float32"), Tensor([1, 2281701379],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([4294967297, 1],"float16"), Tensor([4294967297, 2],"float16"), Tensor([4, 1, 2],"float16"), Tensor([1, 4],"float16"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1431655766],"float16"), Tensor([3, 2],"float16"), Tensor([4, 1431655766, 2],"float16"), Tensor([1431655766, 4],"float16"), None, )
paddle.nn.functional.bilinear(Tensor([2147483649, 1],"float16"), Tensor([2147483649, 2],"float16"), Tensor([4, 1, 2],"float16"), Tensor([1, 4],"float16"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float16"), Tensor([3, 1431655766],"float16"), Tensor([4, 1, 1431655766],"float16"), Tensor([1, 4],"float16"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float16"), Tensor([3, 2],"float16"), Tensor([2147483649, 1, 2],"float16"), Tensor([1, 2147483649],"float16"), None, )
paddle.nn.functional.bilinear(Tensor([3, 536870913],"float16"), Tensor([3, 2],"float16"), Tensor([4, 536870913, 2],"float16"), Tensor([536870913, 4],"float16"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float16"), Tensor([3, 1073741825],"float16"), Tensor([4, 1, 1073741825],"float16"), Tensor([1, 4],"float16"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1073741825],"float16"), Tensor([3, 2],"float16"), Tensor([4, 1073741825, 2],"float16"), Tensor([1073741825, 4],"float16"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float16"), Tensor([3, 2],"float16"), Tensor([4294967297, 1, 2],"float16"), Tensor([1, 4294967297],"float16"), None, )
paddle.nn.functional.bilinear(Tensor([5, 5],"float32"), Tensor([5, 456340276],"float32"), Tensor([1000, 5, 456340276],"float32"), Tensor([1, 1000],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([5, 5],"float32"), Tensor([5, 4],"float32"), Tensor([114085069, 5, 4],"float32"), Tensor([1, 114085069],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([5, 5],"float32"), Tensor([5, 456341],"float32"), Tensor([1000, 5, 456341],"float32"), Tensor([1, 1000],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([5, 5],"float32"), Tensor([5, 4],"float32"), Tensor([2281701379, 5, 4],"float32"), Tensor([1, 2281701379],"float32"), None, )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([3, 4, 10],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([53687092, 4, 10],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([3, 71582789, 10],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([3, 4, 178956971],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([3, 4, 10],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([53687092, 4, 10],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([3, 71582789, 10],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([3, 4, 178956971],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 107374183, 4, 10],"float16"), Tensor([2, 107374183, 4, 10],"float16"), Tensor([107374183, 4, 10],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 143165577, 10],"float16"), Tensor([2, 3, 143165577, 10],"float16"), Tensor([3, 143165577, 10],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 357913942],"float16"), Tensor([2, 3, 4, 357913942],"float16"), Tensor([3, 4, 357913942],"float16"), "mean", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([3, 4, 10],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([53687092, 4, 10],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([3, 71582789, 10],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([3, 4, 178956971],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([3, 4, 10],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([53687092, 4, 10],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([3, 71582789, 10],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([3, 4, 178956971],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 107374183, 4, 10],"float16"), Tensor([2, 107374183, 4, 10],"float16"), Tensor([107374183, 4, 10],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 143165577, 10],"float16"), Tensor([2, 3, 143165577, 10],"float16"), Tensor([3, 143165577, 10],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 357913942],"float16"), Tensor([2, 3, 4, 357913942],"float16"), Tensor([3, 4, 357913942],"float16"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([3, 4, 10],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([53687092, 4, 10],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([3, 71582789, 10],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([3, 4, 178956971],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([3, 4, 10],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([53687092, 4, 10],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([3, 71582789, 10],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([3, 4, 178956971],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 107374183, 4, 10],"float16"), Tensor([2, 107374183, 4, 10],"float16"), Tensor([107374183, 4, 10],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 143165577, 10],"float16"), Tensor([2, 3, 143165577, 10],"float16"), Tensor([3, 143165577, 10],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 357913942],"float16"), Tensor([2, 3, 4, 357913942],"float16"), Tensor([3, 4, 357913942],"float16"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), weight=Tensor([3, 4, 10],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), weight=Tensor([53687092, 4, 10],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), weight=Tensor([3, 71582789, 10],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), weight=Tensor([3, 4, 178956971],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), weight=Tensor([3, 4, 10],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), weight=Tensor([53687092, 4, 10],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), weight=Tensor([3, 71582789, 10],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), weight=Tensor([3, 4, 178956971],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 107374183, 4, 10],"float16"), Tensor([2, 107374183, 4, 10],"float16"), weight=Tensor([107374183, 4, 10],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 143165577, 10],"float16"), Tensor([2, 3, 143165577, 10],"float16"), weight=Tensor([3, 143165577, 10],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 357913942],"float16"), Tensor([2, 3, 4, 357913942],"float16"), weight=Tensor([3, 4, 357913942],"float16"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), weight=Tensor([3, 4, 10],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), weight=Tensor([53687092, 4, 10],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), weight=Tensor([3, 71582789, 10],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), weight=Tensor([3, 4, 178956971],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), weight=Tensor([3, 4, 10],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), weight=Tensor([53687092, 4, 10],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), weight=Tensor([3, 71582789, 10],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), weight=Tensor([3, 4, 178956971],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 107374183, 4, 10],"float16"), Tensor([2, 107374183, 4, 10],"float16"), weight=Tensor([107374183, 4, 10],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 143165577, 10],"float16"), Tensor([2, 3, 143165577, 10],"float16"), weight=Tensor([3, 143165577, 10],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 357913942],"float16"), Tensor([2, 3, 4, 357913942],"float16"), weight=Tensor([3, 4, 357913942],"float16"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), weight=Tensor([3, 4, 10],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), weight=Tensor([53687092, 4, 10],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), weight=Tensor([3, 71582789, 10],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), weight=Tensor([3, 4, 178956971],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), weight=Tensor([3, 4, 10],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), weight=Tensor([53687092, 4, 10],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), weight=Tensor([3, 71582789, 10],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), weight=Tensor([3, 4, 178956971],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 107374183, 4, 10],"float16"), Tensor([2, 107374183, 4, 10],"float16"), weight=Tensor([107374183, 4, 10],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 143165577, 10],"float16"), Tensor([2, 3, 143165577, 10],"float16"), weight=Tensor([3, 143165577, 10],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 357913942],"float16"), Tensor([2, 3, 4, 357913942],"float16"), weight=Tensor([3, 4, 357913942],"float16"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2281701379, 28, 28],"float32"), Tensor([2281701379, 28, 28],"float32"), weight=Tensor([2281701379, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2281701379, 28, 28],"float32"), Tensor([2281701379, 28, 28],"float32"), weight=Tensor([2281701379, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2281701379, 14, 14],"float32"), Tensor([2281701379, 14, 14],"float32"), weight=Tensor([2281701379, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2281701379, 28, 28],"float32"), Tensor([2281701379, 28, 28],"float32"), weight=Tensor([2281701379, 1, 1],"float32"), reduction="mean", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 8912897, 1024],"float32"), Tensor([32, 8912897, 8],"float32"), bias=None, padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 12536821, 14],"float32"), Tensor([12536821, 12, 16],"float32"), bias=Tensor([12536821],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 11883862, 14],"float32"), Tensor([11883862, 12, 16],"float32"), bias=Tensor([11883862],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 2281701379, 14],"float32"), Tensor([2281701379, 12, 16],"float32"), bias=Tensor([2281701379],"float32"), padding=8, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 25073642, 7],"float32"), Tensor([25073642, 16, 1],"float32"), bias=Tensor([25073642],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 142606337, 7],"float32"), Tensor([142606337, 16, 1],"float32"), bias=Tensor([142606337],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 2281701379, 7],"float32"), Tensor([2281701379, 16, 1],"float32"), bias=Tensor([2281701379],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([285212673, 8, 1],"float32"), bias=Tensor([285212673],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 32, 7],"float32"), Tensor([2281701379, 8, 1],"float32"), bias=Tensor([2281701379],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 174296, 1007],"float32"), Tensor([174296, 1, 4],"float32"), bias=Tensor([174296],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 570425345, 1007],"float32"), Tensor([570425345, 1, 4],"float32"), bias=Tensor([570425345],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 2281701379, 1007],"float32"), Tensor([2281701379, 1, 4],"float32"), bias=Tensor([2281701379],"float32"), padding=3, stride=list[1,], dilation=list[1,], groups=64, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([13, 7, 25073642],"float32"), Tensor([16, 25073642, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 142606337],"float32"), Tensor([16, 142606337, 1],"float32"), bias=None, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 25073642],"float32"), Tensor([25073642, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([13, 7, 760567127],"float32"), Tensor([760567127, 1, 3],"float32"), bias=None, padding=1, stride=list[1,], dilation=list[1,], groups=32, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 285212673, 4],"float32"), Tensor([6, 1, 285212673],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([760567127, 1, 3],"float32"), bias=Tensor([760567127],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 380283564, 4],"float32"), Tensor([6, 1, 380283564],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([2281701379, 1, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([190141782, 4, 3],"float32"), Tensor([190141782, 3, 3],"float32"), bias=Tensor([190141782],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([253522376, 4, 3],"float32"), Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2281701379, 4, 3],"float32"), Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([11408507, 200, 1],"float32"), Tensor([11408507, 1, 4],"float32"), bias=Tensor([11408507],"float32"), padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([256, 200, 44565],"float32"), Tensor([256, 44565, 4],"float32"), bias=Tensor([256],"float32"), padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([570425345, 200, 1],"float32"), Tensor([570425345, 1, 4],"float32"), bias=Tensor([570425345],"float32"), padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([256, 200, 2228225],"float32"), Tensor([256, 2228225, 4],"float32"), bias=Tensor([256],"float32"), padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2281701379, 200, 1],"float32"), Tensor([2281701379, 1, 4],"float32"), bias=Tensor([2281701379],"float32"), padding=0, stride=list[4,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 35651585],"float32"), Tensor([6, 1, 35651585],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([760567127, 1, 3],"float32"), bias=Tensor([760567127],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 380283564],"float32"), Tensor([6, 1, 380283564],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([2281701379, 1, 3],"float32"), bias=Tensor([2281701379],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 35651585],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([126761188, 6, 3],"float32"), bias=Tensor([126761188],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 95070891],"float32"), Tensor([8, 95070891, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([2281701379, 6, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 35651585],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([126761188, 6, 3],"float32"), bias=Tensor([126761188],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 95070891],"float32"), Tensor([8, 95070891, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([2281701379, 6, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([512, 35651585, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([126761188, 6, 3],"float32"), bias=Tensor([126761188],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 1485483, 16],"float32"), Tensor([512, 1485483, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([2281701379, 6, 3],"float32"), bias=Tensor([2281701379],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([512, 35651585, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([126761188, 6, 3],"float32"), bias=Tensor([126761188],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 1485483, 16],"float32"), Tensor([512, 1485483, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([2281701379, 6, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([126761188, 6, 3],"float32"), bias=Tensor([126761188],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 95070891, 16],"float32"), Tensor([8, 95070891, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([2281701379, 6, 3],"float32"), bias=Tensor([2281701379],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([126761188, 6, 3],"float32"), bias=Tensor([126761188],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 95070891, 16],"float32"), Tensor([8, 95070891, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([2281701379, 6, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([126761188, 6, 3],"float32"), bias=Tensor([126761188],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 95070891, 16],"float32"), Tensor([8, 95070891, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([2281701379, 6, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 35651585, 16],"float32"), Tensor([8, 35651585, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([126761188, 6, 3],"float32"), bias=Tensor([126761188],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 95070891, 16],"float32"), Tensor([8, 95070891, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([2281701379, 6, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 2852127, 100],"float32"), Tensor([2852127, 64, 3],"float32"), bias=Tensor([2852127],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 11883862, 100],"float32"), Tensor([11883862, 64, 3],"float32"), bias=Tensor([11883862],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([8, 2281701379, 100],"float32"), Tensor([2281701379, 64, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=1, stride=list[1,], dilation=list[1,], groups=4, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([190141782, 3, 4],"float32"), weight=Tensor([1, 3, 190141782],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 285212673, 4],"float32"), weight=Tensor([1, 285212673, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([380283564, 3, 2],"float32"), bias=Tensor([380283564],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 1140850690, 4],"float32"), weight=Tensor([1, 1140850690, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([760567127, 3, 4],"float32"), weight=Tensor([1, 3, 760567127],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([2281701379, 3, 2],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(x=Tensor([2, 285212673, 4],"float32"), weight=Tensor([6, 1, 285212673],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([760567127, 1, 3],"float32"), bias=Tensor([760567127],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 380283564, 4],"float32"), weight=Tensor([6, 1, 380283564],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([2281701379, 1, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(x=Tensor([190141782, 4, 3],"float32"), weight=Tensor([190141782, 3, 3],"float32"), bias=Tensor([190141782],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([253522376, 4, 3],"float32"), weight=Tensor([253522376, 3, 3],"float32"), bias=Tensor([253522376],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2281701379, 4, 3],"float32"), weight=Tensor([2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 20372334, 112],"float32"), Tensor([20372334, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 4456449, 112],"float32"), Tensor([4456449, 64, 8],"float32"), bias=Tensor([64],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 112],"float32"), Tensor([128, 2228225, 8],"float32"), bias=Tensor([2228225],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 128, 112],"float32"), Tensor([128, 2281701379, 8],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 81489335, 28],"float32"), Tensor([81489335, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 2228225, 28],"float32"), Tensor([2228225, 128, 8],"float32"), bias=Tensor([128],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 28],"float32"), Tensor([256, 1114113, 8],"float32"), bias=Tensor([1114113],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 256, 28],"float32"), Tensor([256, 2281701379, 8],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 325957340, 7],"float32"), Tensor([325957340, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 1114113, 7],"float32"), Tensor([1114113, 256, 8],"float32"), bias=Tensor([256],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 557057, 8],"float32"), bias=Tensor([557057],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([1, 512, 7],"float32"), Tensor([512, 2281701379, 8],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=2, stride=list[4,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float16"), Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float16"), Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float16"), Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float16"), Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float16"), Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float16"), Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 35651585],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 95070891],"float32"), Tensor([95070891, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([126761188],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 35651585],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 95070891],"float32"), Tensor([95070891, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([126761188],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 35651585],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 95070891],"float32"), Tensor([95070891, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([126761188],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([23767723, 6, 16],"float32"), Tensor([6, 23767723, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 190141782, 16],"float32"), Tensor([190141782, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([126761188, 6, 16],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 285212673, 16],"float32"), Tensor([285212673, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 380283564, 1],"float32"), bias=Tensor([380283564],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 2281701379, 1],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 95070891, 16],"float32"), Tensor([95070891, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([126761188],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 95070891, 16],"float32"), Tensor([95070891, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([126761188],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 95070891, 16],"float32"), Tensor([95070891, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([126761188],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 95070891, 16],"float32"), Tensor([95070891, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([126761188],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 95070891, 16],"float32"), Tensor([95070891, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([126761188],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 35651585, 16],"float32"), Tensor([35651585, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 95070891, 16],"float32"), Tensor([95070891, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 126761188, 3],"float32"), bias=Tensor([126761188],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 253522376, 3],"float32"), bias=Tensor([253522376],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2281701379, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([286331154, 3, 5],"float16"), weight=Tensor([3, 286331154, 3],"float16"), bias=Tensor([286331154],"float16"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([477218589, 3, 5],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([4294967297, 3, 5],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([286331154, 3, 5],"float16"), weight=Tensor([3, 286331154, 3],"float16"), bias=Tensor([286331154],"float16"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([477218589, 3, 5],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([4294967297, 3, 5],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([178956971, 3, 8],"float16"), weight=Tensor([3, 178956971, 3],"float16"), bias=Tensor([178956971],"float16"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([477218589, 3, 8],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([4294967297, 3, 8],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([178956971, 3, 8],"float16"), weight=Tensor([3, 178956971, 3],"float16"), bias=Tensor([178956971],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([477218589, 3, 8],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([4294967297, 3, 8],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([178956971, 8, 3],"float16"), weight=Tensor([3, 178956971, 3],"float16"), bias=Tensor([178956971],"float16"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([477218589, 8, 3],"float16"), weight=Tensor([3, 477218589, 3],"float16"), bias=Tensor([477218589],"float16"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([4294967297, 8, 3],"float16"), weight=Tensor([3, 4294967297, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([253522376],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([2281701379, 1, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 8912897, 10, 26],"float32"), Tensor([256, 8912897, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, )
paddle.nn.functional.conv2d(Tensor([1, 760567127, 256, 256],"float32"), Tensor([3, 760567127, 1, 1],"float32"), padding=0, groups=1, )
paddle.nn.functional.conv2d(Tensor([1, 8912897, 16, 16],"float32"), Tensor([8912897, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 495161, 16, 16],"float32"), Tensor([495161, 512, 3, 3],"float32"), padding=1, groups=4, )
paddle.nn.functional.conv2d(Tensor([1, 8912897, 16, 16],"float32"), Tensor([8912897, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 495161, 16, 16],"float32"), Tensor([495161, 512, 3, 3],"float32"), padding=1, groups=8, )
paddle.nn.functional.conv2d(Tensor([1, 8912897, 16, 16],"float32"), Tensor([16, 8912897, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 5704254, 16, 16],"float32"), Tensor([16, 5704254, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 2110, 260, 260],"float32"), weight=Tensor([2110, 1, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([16, 91268056, 260, 260],"float32"), weight=Tensor([91268056, 1, 5, 5],"float32"), groups=3, )
paddle.nn.functional.conv2d(Tensor([2, 5941931, 4, 4],"float32"), Tensor([384, 5941931, 1, 1],"float32"), None, list[2,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([2, 47535446, 4, 4],"float32"), Tensor([48, 47535446, 1, 1],"float32"), None, list[1,1,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([84507459, 3, 3, 3],"float32"), Tensor([84507459],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([2281701379, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([84507459, 3, 3, 3],"float32"), Tensor([84507459],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([2281701379, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([84507459, 3, 3, 3],"float32"), Tensor([84507459],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([2281701379, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([84507459, 3, 3, 3],"float32"), Tensor([84507459],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([2281701379, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([84507459, 3, 3, 3],"float32"), Tensor([84507459],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([2281701379, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([84507459, 3, 3, 3],"float32"), Tensor([84507459],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([2281701379, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([84507459, 3, 3, 3],"float32"), Tensor([84507459],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([2281701379, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 42253730, 28, 28],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(x=Tensor([2, 71303169, 4, 4],"float32"), weight=Tensor([1, 71303169, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([190141782, 3, 2, 2],"float32"), bias=Tensor([190141782],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 570425345, 4, 4],"float32"), weight=Tensor([1, 570425345, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2281701379, 3, 2, 2],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([84507459, 3, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([84507459, 3, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([84507459, 3, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([84507459, 3, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,1,], padding=1, dilation=list[2,2,], )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([84507459, 3, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,1,], padding=1, dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([84507459, 3, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,1,], padding=list[1,2,], dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([84507459, 3, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,1,], padding=tuple(1,2,), dilation=tuple(2,2,), )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([253522376],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([2, 3, 4, 4],"float32"), weight=Tensor([2281701379, 1, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv2d(x=Tensor([47535446, 4, 4, 3],"float32"), weight=Tensor([47535446, 3, 3, 3],"float32"), bias=Tensor([47535446],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([84507459, 4, 4, 3],"float32"), weight=Tensor([84507459, 3, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d(x=Tensor([2281701379, 4, 4, 3],"float32"), weight=Tensor([2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=0, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 8912897, 16, 16],"float32"), Tensor([8912897, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 557057, 16, 16],"float32"), Tensor([557057, 256, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 1114113, 4, 4],"float32"), bias=Tensor([1114113],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 2281701379, 4, 4],"float32"), bias=Tensor([2281701379],"float32"), padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 1980644, 3, 3],"float32"), bias=Tensor([1980644],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=1, output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 8912897, 16, 16],"float32"), Tensor([8912897, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 495161, 16, 16],"float32"), Tensor([495161, 512, 3, 3],"float32"), padding=0, stride=2, groups=4, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 139265, 128, 128],"float32"), Tensor([139265, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 1980644, 128, 128],"float32"), Tensor([1980644, 128, 3, 3],"float32"), padding=0, stride=2, groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 8912897, 16, 16],"float32"), Tensor([8912897, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 495161, 16, 16],"float32"), Tensor([495161, 512, 3, 3],"float32"), padding=0, stride=2, groups=8, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 285212673],"float32"), Tensor([285212673, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 253522376],"float32"), Tensor([253522376, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 285212673],"float32"), Tensor([285212673, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 253522376],"float32"), Tensor([253522376, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 285212673],"float32"), Tensor([285212673, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 253522376],"float32"), Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 285212673],"float32"), Tensor([285212673, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 253522376],"float32"), Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 340756, 62, 54],"float32"), Tensor([340756, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 1114113, 62, 54],"float32"), Tensor([1114113, 128, 4, 4],"float32"), bias=None, padding=0, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 84507459, 3, 3],"float32"), Tensor([84507459],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 2281701379, 3, 3],"float32"), Tensor([2281701379],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 84507459, 3, 3],"float32"), bias=Tensor([84507459],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 84507459, 3, 3],"float32"), bias=Tensor([84507459],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 84507459, 3, 3],"float32"), bias=Tensor([84507459],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 84507459, 3, 3],"float32"), bias=Tensor([84507459],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([119304648, 4, 3, 3],"float16"), Tensor([4, 119304648, 1, 1],"float16"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 238609295, 3, 3],"float16"), Tensor([238609295, 2, 1, 1],"float16"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2147483649, 3, 3],"float16"), Tensor([2147483649, 2, 1, 1],"float16"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1073741825, 4, 3, 3],"float16"), Tensor([4, 1073741825, 1, 1],"float16"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 285212673, 2, 2],"float32"), Tensor([285212673, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 253522376, 2, 2],"float32"), Tensor([253522376, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 285212673, 2, 2],"float32"), Tensor([285212673, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 253522376, 2, 2],"float32"), Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 44151, 38, 68],"float32"), Tensor([44151, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 142606337, 38, 68],"float32"), Tensor([142606337, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=128, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 176603, 19, 34],"float32"), Tensor([176603, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 142606337, 19, 34],"float32"), Tensor([142606337, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 44151, 38, 68],"float32"), Tensor([44151, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 35651585, 38, 68],"float32"), Tensor([35651585, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 11038, 76, 136],"float32"), Tensor([11038, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([20, 142606337, 76, 136],"float32"), Tensor([142606337, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=64, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 142606337, 16, 16],"float32"), Tensor([142606337, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1024, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 84507459, 3, 3],"float32"), Tensor([84507459],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 2281701379, 3, 3],"float32"), Tensor([2281701379],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 2228225],"float32"), Tensor([2228225, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 31690297],"float32"), Tensor([31690297, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([42253730],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 2228225],"float32"), Tensor([2228225, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 31690297],"float32"), Tensor([31690297, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([42253730],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 1, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 8912897, 16, 16],"float32"), Tensor([8912897, 1, 16, 16],"float32"), bias=None, padding=4, output_padding=0, stride=list[8,8,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 557057, 32, 32],"float32"), Tensor([557057, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 35651585, 32, 32],"float32"), Tensor([35651585, 1, 8, 8],"float32"), bias=None, padding=2, output_padding=0, stride=list[4,4,], dilation=list[1,1,], groups=256, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 139265, 64, 64],"float32"), Tensor([139265, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4456449, 64, 64],"float32"), Tensor([4456449, 128, 2, 2],"float32"), bias=None, padding=0, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 11641334, 7, 7],"float32"), Tensor([11641334, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 15211343, 7, 7],"float32"), Tensor([15211343, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 30422686, 5, 5],"float32"), bias=Tensor([30422686],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 2281701379, 5, 5],"float32"), bias=Tensor([2281701379],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 557057, 32, 32],"float32"), Tensor([557057, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 142606337, 32, 32],"float32"), Tensor([142606337, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=512, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1485483, 6, 16, 16],"float32"), Tensor([6, 1485483, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 63380594, 16, 16],"float32"), Tensor([63380594, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([42253730, 6, 16, 16],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 285212673, 16, 16],"float32"), Tensor([285212673, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 380283564, 1, 1],"float32"), bias=Tensor([380283564],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 2281701379, 1, 1],"float32"), bias=Tensor([2281701379],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 31690297, 16, 16],"float32"), Tensor([31690297, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([42253730],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 31690297, 16, 16],"float32"), Tensor([31690297, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([42253730],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 31690297, 16, 16],"float32"), Tensor([31690297, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([42253730],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 31690297, 16, 16],"float32"), Tensor([31690297, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([42253730],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 31690297, 16, 16],"float32"), Tensor([31690297, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([42253730],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 31690297, 16, 16],"float32"), Tensor([31690297, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([42253730],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 2228225, 16, 16],"float32"), Tensor([2228225, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 31690297, 16, 16],"float32"), Tensor([31690297, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 42253730, 3, 3],"float32"), bias=Tensor([42253730],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 285212673],"float32"), weight=Tensor([285212673, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 253522376],"float32"), weight=Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 285212673],"float32"), weight=Tensor([285212673, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 253522376],"float32"), weight=Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 285212673],"float32"), weight=Tensor([285212673, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 253522376],"float32"), weight=Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 285212673],"float32"), weight=Tensor([285212673, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 253522376],"float32"), weight=Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 536870913],"float16"), weight=Tensor([536870913, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 477218589],"float16"), weight=Tensor([477218589, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 536870913],"float16"), weight=Tensor([536870913, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 477218589],"float16"), weight=Tensor([477218589, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 84507459, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 84507459, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 84507459, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 84507459, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 84507459, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 2281701379, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float16"), weight=Tensor([3, 159072863, 3, 3],"float16"), bias=Tensor([159072863],"float16"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float16"), weight=Tensor([3, 4294967297, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float16"), weight=Tensor([3, 159072863, 3, 3],"float16"), bias=Tensor([159072863],"float16"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float16"), weight=Tensor([3, 4294967297, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float16"), weight=Tensor([3, 159072863, 3, 3],"float16"), bias=Tensor([159072863],"float16"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float16"), weight=Tensor([3, 4294967297, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float16"), weight=Tensor([3, 159072863, 3, 3],"float16"), bias=Tensor([159072863],"float16"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float16"), weight=Tensor([3, 4294967297, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float16"), weight=Tensor([3, 159072863, 3, 3],"float16"), bias=Tensor([159072863],"float16"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float16"), weight=Tensor([3, 4294967297, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 33554433, 8, 8],"float16"), weight=Tensor([33554433, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 171798692, 8, 8],"float16"), weight=Tensor([171798692, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float16"), weight=Tensor([3, 57266231, 5, 5],"float16"), bias=Tensor([57266231],"float16"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float16"), weight=Tensor([3, 4294967297, 5, 5],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 33554433, 8, 8],"float16"), weight=Tensor([33554433, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 171798692, 8, 8],"float16"), weight=Tensor([171798692, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float16"), weight=Tensor([3, 57266231, 5, 5],"float16"), bias=Tensor([57266231],"float16"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float16"), weight=Tensor([3, 4294967297, 5, 5],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 33554433, 8, 8],"float16"), weight=Tensor([33554433, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 171798692, 8, 8],"float16"), weight=Tensor([171798692, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float16"), weight=Tensor([3, 57266231, 5, 5],"float16"), bias=Tensor([57266231],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float16"), weight=Tensor([3, 4294967297, 5, 5],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 285212673, 2, 2],"float32"), weight=Tensor([285212673, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 253522376, 2, 2],"float32"), weight=Tensor([253522376, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 536870913, 2, 2],"float16"), weight=Tensor([536870913, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 477218589, 2, 2],"float16"), weight=Tensor([477218589, 1, 3, 3],"float16"), bias=Tensor([3],"float16"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 33554433],"float16"), weight=Tensor([33554433, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 171798692],"float16"), weight=Tensor([171798692, 1, 5, 5],"float16"), bias=Tensor([1],"float16"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float16"), weight=Tensor([3, 57266231, 5, 5],"float16"), bias=Tensor([57266231],"float16"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float16"), weight=Tensor([3, 4294967297, 5, 5],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([28169153, 3, 3, 3, 3],"float32"), Tensor([28169153],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([2281701379, 3, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([28169153, 3, 3, 3, 3],"float32"), Tensor([28169153],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([2281701379, 3, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([28169153, 3, 3, 3, 3],"float32"), Tensor([28169153],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([2281701379, 3, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([28169153, 3, 3, 3, 3],"float32"), Tensor([28169153],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([2281701379, 3, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([28169153, 3, 3, 3, 3],"float32"), Tensor([28169153],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([2281701379, 3, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([28169153, 3, 3, 3, 3],"float32"), Tensor([28169153],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([2281701379, 3, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 17825793, 4, 4, 4],"float32"), weight=Tensor([1, 17825793, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([95070891, 3, 2, 2, 2],"float32"), bias=Tensor([95070891],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 285212673, 4, 4, 4],"float32"), weight=Tensor([1, 285212673, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 2, 2, 2],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([11883862, 3, 4, 4, 4],"float32"), weight=Tensor([11883862, 3, 3, 3, 3],"float32"), bias=Tensor([11883862],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([28169153, 3, 4, 4, 4],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2281701379, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([84507459, 1, 3, 3, 3],"float32"), bias=Tensor([84507459],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2281701379, 1, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([53024288, 3, 3, 3, 3],"float16"), bias=Tensor([53024288],"float16"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([4294967297, 3, 3, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([53024288, 3, 3, 3, 3],"float16"), bias=Tensor([53024288],"float16"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([4294967297, 3, 3, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([53024288, 3, 3, 3, 3],"float16"), bias=Tensor([53024288],"float16"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([4294967297, 3, 3, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([53024288, 3, 3, 3, 3],"float16"), bias=Tensor([53024288],"float16"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([4294967297, 3, 3, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([53024288, 3, 3, 3, 3],"float16"), bias=Tensor([53024288],"float16"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([4294967297, 3, 3, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([53024288, 3, 3, 3, 3],"float16"), bias=Tensor([53024288],"float16"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([4294967297, 3, 3, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([53024288, 3, 3, 3, 3],"float16"), bias=Tensor([53024288],"float16"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([4294967297, 3, 3, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([159072863, 1, 3, 3, 3],"float16"), bias=Tensor([159072863],"float16"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float16"), weight=Tensor([4294967297, 1, 3, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([11883862, 4, 4, 4, 3],"float32"), weight=Tensor([11883862, 3, 3, 3, 3],"float32"), bias=Tensor([11883862],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([28169153, 4, 4, 4, 3],"float32"), weight=Tensor([28169153, 3, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2281701379, 4, 4, 4, 3],"float32"), weight=Tensor([2281701379, 3, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([22369622, 4, 4, 4, 3],"float16"), weight=Tensor([22369622, 3, 3, 3, 3],"float16"), bias=Tensor([22369622],"float16"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([53024288, 4, 4, 4, 3],"float16"), weight=Tensor([53024288, 3, 3, 3, 3],"float16"), bias=Tensor([53024288],"float16"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([4294967297, 4, 4, 4, 3],"float16"), weight=Tensor([4294967297, 3, 3, 3, 3],"float16"), bias=Tensor([4294967297],"float16"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 28169153, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 28169153, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 28169153, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 142606337, 2, 2, 2],"float32"), Tensor([142606337, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 110036, 2, 2, 2],"float32"), Tensor([110036, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([1485483, 3, 8, 8, 8],"float32"), Tensor([3, 1485483, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([28169153, 3, 8, 8, 8],"float32"), Tensor([3, 28169153, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2228225, 8, 8, 8],"float32"), Tensor([2228225, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 21126865, 8, 8, 8],"float32"), Tensor([21126865, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2228225, 8, 8, 8],"float32"), Tensor([2228225, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 285212673, 8, 8, 8],"float32"), Tensor([285212673, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2228225, 8, 8, 8],"float32"), Tensor([2228225, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 10563433, 8, 8, 8],"float32"), Tensor([10563433, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2228225, 8, 8, 8],"float32"), Tensor([2228225, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 10563433, 8, 8, 8],"float32"), Tensor([10563433, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2228225, 8, 8, 8],"float32"), Tensor([2228225, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 10563433, 8, 8, 8],"float32"), Tensor([10563433, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2228225, 8, 8, 8],"float32"), Tensor([2228225, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 10563433, 8, 8, 8],"float32"), Tensor([10563433, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2228225, 8, 8, 8],"float32"), Tensor([2228225, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 10563433, 8, 8, 8],"float32"), Tensor([10563433, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2228225, 8, 8, 8],"float32"), Tensor([2228225, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 10563433, 8, 8, 8],"float32"), Tensor([10563433, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 2228225],"float32"), Tensor([2228225, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 10563433],"float32"), Tensor([10563433, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 2228225],"float32"), Tensor([2228225, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 10563433],"float32"), Tensor([10563433, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 28169153, 3, 3, 3],"float32"), Tensor([28169153],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 2281701379, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 28169153, 3, 3, 3],"float32"), Tensor([28169153],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 2281701379, 3, 3, 3],"float32"), Tensor([2281701379],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 28169153, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 28169153, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 28169153, 3, 3, 3],"float32"), bias=Tensor([28169153],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2281701379, 3, 3, 3],"float32"), bias=Tensor([2281701379],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.cosine_embedding_loss(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), Tensor([760567127],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([760567127, 3],"float32"), Tensor([760567127, 3],"float32"), Tensor([760567127],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([10, 228170138],"float32"), Tensor([10, 228170138],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([2281701379, 3],"float32"), Tensor([2281701379, 3],"float32"), Tensor([2281701379],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([1],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), Tensor([1],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), Tensor([1431655766],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), Tensor([1431655766],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([2281701379, 3],"float64"), Tensor([2281701379, 3],"float64"), Tensor([2281701379],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), Tensor([1431655766],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), Tensor([1431655766],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([2281701379, 3],"float64"), Tensor([2281701379, 3],"float64"), Tensor([2281701379],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), Tensor([1431655766],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_embedding_loss(Tensor([1431655766, 3],"float16"), Tensor([1431655766, 3],"float16"), Tensor([1431655766],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 858993460],"float16"), Tensor([5, 858993460],"float16"), Tensor([5],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_embedding_loss(Tensor([2281701379, 3],"float64"), Tensor([2281701379, 3],"float64"), Tensor([2281701379],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_similarity(Tensor([5, 71582789, 3, 4],"float16"), Tensor([71582789, 3, 4],"float16"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 107374183, 4],"float16"), Tensor([2, 107374183, 4],"float16"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 3, 143165577],"float16"), Tensor([2, 3, 143165577],"float16"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 357913942, 3, 4],"float16"), Tensor([357913942, 3, 4],"float16"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 536870913, 4],"float16"), Tensor([2, 536870913, 4],"float16"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 3, 715827883],"float16"), Tensor([2, 3, 715827883],"float16"), axis=-1, eps=1e-08, )
paddle.nn.functional.cross_entropy(Tensor([1, 2281701379, 151936],"float32"), Tensor([1, 2281701379, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 2281701379, 50257],"float32"), Tensor([1, 2281701379, 1],"int64"), weight=None, ignore_index=0, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 2281701379, 125696],"float32"), Tensor([1, 2281701379, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1, 2281701379, 151936],"float32"), Tensor([1, 2281701379, 1],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([10762743, 212],"float32"), Tensor([10762743],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 212],"float32"), Tensor([2281701379],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([23047489, 99],"float32"), Tensor([23047489],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 99],"float32"), Tensor([2281701379],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([134217729, 17],"float32"), Tensor([134217729],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 17],"float32"), Tensor([2281701379],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([21474837, 200],"float16"), Tensor([21474837],"int64"), weight=None, ignore_index=-1, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 200],"float64"), Tensor([2281701379],"int64"), weight=None, ignore_index=-1, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([21474837, 200],"float16"), Tensor([21474837],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 200],"float64"), Tensor([2281701379],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([21474837, 200],"float16"), Tensor([21474837],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 200],"float64"), Tensor([2281701379],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([21474837, 200],"float16"), Tensor([21474837],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 200],"float64"), Tensor([2281701379],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([21474837, 200],"float16"), Tensor([21474837],"int64"), weight=Tensor([200],"float16"), ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 42949673],"float16"), Tensor([100],"int64"), weight=Tensor([42949673],"float16"), ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 200],"float64"), Tensor([2281701379],"int64"), weight=Tensor([200],"float64"), ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 4294967297],"float16"), Tensor([100],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([21474837, 200],"float16"), Tensor([21474837],"int64"), weight=Tensor([200],"float16"), ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 42949673],"float16"), Tensor([100],"int64"), weight=Tensor([42949673],"float16"), ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 200],"float64"), Tensor([2281701379],"int64"), weight=Tensor([200],"float64"), ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 4294967297],"float16"), Tensor([100],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([21474837, 200],"float16"), Tensor([21474837],"int64"), weight=Tensor([200],"float16"), ignore_index=0, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 42949673],"float16"), Tensor([100],"int64"), weight=Tensor([42949673],"float16"), ignore_index=0, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 200],"float64"), Tensor([2281701379],"int64"), weight=Tensor([200],"float64"), ignore_index=0, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 4294967297],"float16"), Tensor([100],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=0, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([21474837, 200],"float16"), Tensor([21474837],"int64"), weight=Tensor([200],"float16"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 42949673],"float16"), Tensor([100],"int64"), weight=Tensor([42949673],"float16"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 200],"float64"), Tensor([2281701379],"int64"), weight=Tensor([200],"float64"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([100, 4294967297],"float16"), Tensor([100],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([21474837, 200],"float16"), Tensor([21474837],"int64"), weight=Tensor([200],"float16"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([100, 42949673],"float16"), Tensor([100],"int64"), weight=Tensor([42949673],"float16"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 200],"float64"), Tensor([2281701379],"int64"), weight=Tensor([200],"float64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([100, 4294967297],"float16"), Tensor([100],"int64"), weight=Tensor([4294967297],"float16"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([285212673, 8],"float32"), Tensor([285212673],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 8],"float32"), Tensor([2281701379],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([134217729, 17],"float32"), Tensor([134217729],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 17],"float32"), Tensor([2281701379],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([10762743, 212],"float32"), Tensor([10762743],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 212],"float32"), Tensor([2281701379],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([285213, 8000],"float32"), Tensor([285213],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 8000],"float32"), Tensor([2281701379],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 212],"float32"), Tensor([2281701379, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([10762743, 212],"float32"), Tensor([10762743],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 212],"float32"), Tensor([2281701379],"int64"), ignore_index=-1, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 212],"float32"), Tensor([2281701379, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 212],"float32"), Tensor([2281701379, 1],"int64"), weight=None, ignore_index=-1, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 93431],"float32"), label=Tensor([2281701379, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([23047489, 99],"float32"), Tensor([23047489],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 99],"float32"), Tensor([2281701379],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 102],"float32"), label=Tensor([2281701379, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 1000],"float32"), label=Tensor([2281701379, 1],"int64"), soft_label=False, reduction="mean", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 400],"float32"), Tensor([2281701379, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([3292499, 7, 99],"float32"), Tensor([3292499, 7],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([14, 1646250, 99],"float32"), Tensor([14, 1646250],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([325957340, 7, 99],"float32"), Tensor([325957340, 7],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([14, 162978670, 99],"float32"), Tensor([14, 162978670],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1140850690, 2],"float32"), Tensor([1140850690],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 2],"float32"), Tensor([2281701379],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([344356, 6626],"float32"), Tensor([344356],"int64"), weight=None, ignore_index=6626, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 6626],"float32"), Tensor([2281701379],"int64"), weight=None, ignore_index=6626, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 10],"float32"), Tensor([2281701379, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([76056713, 30],"float32"), Tensor([76056713],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 30],"float32"), Tensor([2281701379],"int64"), weight=None, ignore_index=-100, reduction="none", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1140850690, 2],"float32"), Tensor([1140850690],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 2],"float32"), Tensor([2281701379],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1140850690, 2],"float32"), Tensor([1140850690],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 2],"float32"), Tensor([2281701379],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([344356, 6626],"float32"), Tensor([344356],"int64"), weight=None, ignore_index=6626, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 6626],"float32"), Tensor([2281701379],"int64"), weight=None, ignore_index=6626, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 10],"float32"), Tensor([2281701379, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([1073741825, 4],"float16"), Tensor([1073741825],"int64"), weight=Tensor([4],"float16"), ignore_index=-100, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 2147483649],"float16"), Tensor([2],"int64"), weight=Tensor([2147483649],"float16"), ignore_index=-100, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 4],"float64"), Tensor([2281701379],"int64"), weight=Tensor([4],"float64"), ignore_index=-100, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2, 4294967297],"float16"), Tensor([2],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=-100, reduction="mean", soft_label=False, axis=1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 5],"float32"), Tensor([2281701379, 1],"int64"), )
paddle.nn.functional.cross_entropy(Tensor([1140850690, 2],"float32"), Tensor([1140850690],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 2],"float32"), Tensor([2281701379],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([288823, 158, 50],"float32"), Tensor([288823, 158],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([24, 1901418, 50],"float32"), Tensor([24, 1901418],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([14441148, 158, 50],"float32"), Tensor([14441148, 158],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([24, 95070891, 50],"float32"), Tensor([24, 95070891],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([456340276, 5],"float32"), Tensor([456340276],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 5],"float32"), Tensor([2281701379],"int64"), reduction="sum", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 10],"float32"), Tensor([2281701379, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 20],"float32"), Tensor([2281701379, 1],"int64"), reduction="none", use_softmax=True, )
paddle.nn.functional.cross_entropy(Tensor([4456449, 512],"float32"), Tensor([4456449],"int64"), weight=None, ignore_index=512, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 512],"float32"), Tensor([2281701379],"int64"), weight=None, ignore_index=512, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 10],"float32"), Tensor([2281701379, 1],"int64"), weight=None, ignore_index=-100, reduction="sum", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4563403, 100, 5],"float32"), Tensor([4563403, 100],"int64"), weight=Tensor([5],"float32"), )
paddle.nn.functional.cross_entropy(Tensor([4, 114085069, 5],"float32"), Tensor([4, 114085069],"int64"), weight=Tensor([5],"float32"), )
paddle.nn.functional.cross_entropy(Tensor([4, 100, 5704254],"float32"), Tensor([4, 100],"int64"), weight=Tensor([5704254],"float32"), )
paddle.nn.functional.cross_entropy(Tensor([22817014, 100, 5],"float32"), Tensor([22817014, 100],"int64"), weight=Tensor([5],"float32"), )
paddle.nn.functional.cross_entropy(Tensor([4, 570425345, 5],"float32"), Tensor([4, 570425345],"int64"), weight=Tensor([5],"float32"), )
paddle.nn.functional.cross_entropy(Tensor([4, 100, 2281701379],"float32"), Tensor([4, 100],"int64"), weight=Tensor([2281701379],"float32"), )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 10],"float32"), Tensor([2281701379, 1],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([7225, 157920, 2],"float32"), Tensor([7225, 157920],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([14449, 157920, 2],"float32"), Tensor([14449, 157920],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 570425345, 2],"float32"), Tensor([4, 570425345],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([101862, 22400, 2],"float32"), Tensor([101862, 22400, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([4, 570425345, 2],"float32"), Tensor([4, 570425345, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([1431655766, 3],"float16"), Tensor([1431655766],"int64"), soft_label=True, label_smoothing=0.5436483450993637, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 3],"float64"), Tensor([2281701379],"int64"), soft_label=True, label_smoothing=0.5436483450993637, axis=-1, weight=None, reduction="none", )
paddle.nn.functional.cross_entropy(Tensor([5462, 512, 512, 3],"float16"), Tensor([5462, 512, 512],"int64"), weight=Tensor([3],"float16"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 512, 512, 4097],"float16"), Tensor([4, 512, 512],"int64"), weight=Tensor([4097],"float16"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8705, 512, 512, 3],"float64"), Tensor([8705, 512, 512],"int64"), weight=Tensor([3],"float64"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([4, 512, 512, 4294967297],"float16"), Tensor([4, 512, 512],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=255, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 30522],"float32"), Tensor([2281701379, 1],"int64"), reduction="none", ignore_index=-1, )
paddle.nn.functional.cross_entropy(Tensor([3802836, 30, 20],"float32"), Tensor([3802836, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([416, 274243, 20],"float32"), Tensor([416, 274243],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([76056713, 30, 20],"float32"), Tensor([76056713, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([416, 5484860, 20],"float32"), Tensor([416, 5484860],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([53062823, 43],"float32"), Tensor([53062823],"int64"), weight=None, ignore_index=42, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 43],"float32"), Tensor([2281701379],"int64"), weight=None, ignore_index=42, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([429496730, 10],"float16"), Tensor([429496730],"int64"), weight=Tensor([10],"float16"), ignore_index=-25, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([5, 858993460],"float16"), Tensor([5],"int64"), weight=Tensor([858993460],"float16"), ignore_index=-25, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 10],"float64"), Tensor([2281701379],"int64"), weight=Tensor([10],"float64"), ignore_index=-25, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([5, 4294967297],"float16"), Tensor([5],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=-25, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([2147483649, 2],"float16"), label=Tensor([2147483649],"int64"), weight=None, ignore_index=-100, soft_label=False, axis=-1, reduction="mean", name=None, )
paddle.nn.functional.cross_entropy(Tensor([2281701379, 2],"float64"), label=Tensor([2281701379],"int64"), weight=None, ignore_index=-100, soft_label=False, axis=-1, reduction="mean", name=None, )
paddle.nn.functional.cross_entropy(Tensor([3802836, 30, 20],"float32"), Tensor([3802836, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([512, 222823, 20],"float32"), Tensor([512, 222823],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([76056713, 30, 20],"float32"), Tensor([76056713, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([512, 4456449, 20],"float32"), Tensor([512, 4456449],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([3802836, 30, 20],"float32"), Tensor([3802836, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([52, 2193944, 20],"float32"), Tensor([52, 2193944],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([76056713, 30, 20],"float32"), Tensor([76056713, 30],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([52, 43878873, 20],"float32"), Tensor([52, 43878873],"int64"), weight=None, ignore_index=0, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([244033, 187, 50],"float32"), Tensor([244033, 187],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([64, 713032, 50],"float32"), Tensor([64, 713032],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([12201612, 187, 50],"float32"), Tensor([12201612, 187],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([64, 35651585, 50],"float32"), Tensor([64, 35651585],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([447393, 102, 50],"float32"), Tensor([447393, 102],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 5704254, 50],"float32"), Tensor([8, 5704254],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([22369622, 102, 50],"float32"), Tensor([22369622, 102],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(Tensor([8, 285212673, 50],"float32"), Tensor([8, 285212673],"int64"), weight=None, ignore_index=-100, reduction="mean", soft_label=False, axis=-1, use_softmax=True, label_smoothing=0.0, name=None, )
paddle.nn.functional.cross_entropy(input=Tensor([2281701379, 10],"float32"), label=Tensor([2281701379, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([2281701379, 2],"float32"), label=Tensor([2281701379, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([456340276, 5],"float32"), label=Tensor([456340276],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2281701379, 5],"float32"), label=Tensor([2281701379],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2281701379, 21128],"float32"), label=Tensor([2281701379, 1],"int64"), reduction="none", )
paddle.nn.functional.cross_entropy(input=Tensor([28169153, 81],"float32"), label=Tensor([28169153],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2281701379, 81],"float32"), label=Tensor([2281701379],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2281701379, 1000],"float32"), label=Tensor([2281701379, 1],"int64"), soft_label=False, reduction="mean", use_softmax=True, )
paddle.nn.functional.cross_entropy(input=Tensor([2281701379, 102],"float32"), label=Tensor([2281701379, 1],"int64"), )
paddle.nn.functional.cross_entropy(input=Tensor([28169153, 81],"float32"), label=Tensor([28169153],"int64"), reduction="mean", )
paddle.nn.functional.cross_entropy(input=Tensor([2281701379, 81],"float32"), label=Tensor([2281701379],"int64"), reduction="mean", )
paddle.nn.functional.embedding(Tensor([1, 2281701379],"int64"), weight=Tensor([2281701379, 16],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 268435457],"int64"), weight=Tensor([268435457, 16],"float16"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=False, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 2281701379],"int64"), weight=Tensor([51200, 2281701379],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([1, 83887],"int64"), weight=Tensor([51200, 83887],"float16"), padding_idx=None, sparse=False, name=None, )
paddle.nn.functional.embedding(Tensor([2281701379, 1],"int64"), weight=Tensor([10, 2281701379],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([228170138, 1],"int64"), weight=Tensor([10, 228170138],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([3, 760567127],"int64"), Tensor([10, 760567127],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([3, 429496730],"int64"), Tensor([10, 429496730],"float16"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([32, 71303169],"int64"), weight=Tensor([71303169, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([32, 4456449],"int64"), weight=Tensor([4456449, 512],"float32"), padding_idx=None, max_norm=None, norm_type=2.0, sparse=True, scale_grad_by_freq=False, name=None, )
paddle.nn.functional.embedding(Tensor([2281701379],"int32"), Tensor([10, 2281701379],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([429496730],"int32"), Tensor([10, 429496730],"float16"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([2281701379],"int64"), Tensor([10, 2281701379],"float64"), padding_idx=None, )
paddle.nn.functional.embedding(Tensor([429496730],"int64"), Tensor([10, 429496730],"float16"), padding_idx=None, )
paddle.nn.functional.grid_sample(Tensor([69633, 128, 128, 128],"float32"), Tensor([69633, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([17409, 128, 128, 128],"float32"), Tensor([17409, 256, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([1455167, 4, 28, 28],"float32"), Tensor([1455167, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([986896, 4, 28, 28],"float32"), Tensor([986896, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 1629787, 350],"float32"), Tensor([1, 1629787, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 2037234],"float32"), Tensor([1, 280, 2037234, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([11642, 4, 280, 350],"float32"), Tensor([11642, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 3259574, 350],"float32"), Tensor([1, 3259574, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 4074467],"float32"), Tensor([1, 280, 4074467, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 21939437, 26],"float32"), Tensor([1, 21939437, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 17825793],"float32"), Tensor([1, 32, 17825793, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1371215, 4, 32, 26],"float32"), Tensor([1371215, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 43878873, 26],"float32"), Tensor([1, 43878873, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 35651585],"float32"), Tensor([1, 32, 35651585, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([278529, 4, 64, 64],"float32"), Tensor([278529, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([197516, 4, 64, 64],"float32"), Tensor([197516, 76, 76, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([599187, 32, 20, 20],"float32"), Tensor([599187, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([599187, 32, 40, 40],"float32"), Tensor([599187, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([599187, 32, 80, 80],"float32"), Tensor([599187, 476, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([278529, 256, 64, 64],"float32"), Tensor([278529, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([17409, 3, 256, 256],"float32"), Tensor([17409, 256, 256, 2],"float32"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([17409, 3, 256, 256],"float32"), Tensor([17409, 256, 256, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([24493, 32, 10, 15],"float32"), Tensor([24493, 11645, 4, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([278529, 3, 64, 64],"float32"), Tensor([278529, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([69633, 128, 128, 128],"float32"), Tensor([69633, 128, 128, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([17409, 128, 128, 128],"float32"), Tensor([17409, 256, 256, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([278529, 32, 64, 64],"float32"), Tensor([278529, 64, 64, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([356516, 3, 64, 256],"float32"), Tensor([356516, 32, 100, 2],"float32"), )
paddle.nn.functional.grid_sample(Tensor([4456449, 3, 16, 16],"float32"), Tensor([4456449, 16, 16, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([285212673, 3, 2, 2],"float32"), Tensor([285212673, 2, 2, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([1114113, 3, 32, 32],"float32"), Tensor([1114113, 32, 32, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([71303169, 3, 4, 4],"float32"), Tensor([71303169, 4, 4, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([278529, 3, 64, 64],"float32"), Tensor([278529, 64, 64, 2],"float32"), mode="bilinear", padding_mode="border", align_corners=True, )
paddle.nn.functional.grid_sample(x=Tensor([289, 64, 80, 94, 311],"float32"), grid=Tensor([289, 280, 376, 25, 3],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.group_norm(Tensor([1, 8775775, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([8775775],"float32"), bias=Tensor([8775775],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 10, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 5941931, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([5941931],"float32"), bias=Tensor([5941931],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 35651585, 2, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([35651585],"float32"), bias=Tensor([35651585],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 2, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 2, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 33554433, 2, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([33554433],"float32"), bias=Tensor([33554433],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 2, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 2, 34],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 31690297, 2, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([31690297],"float32"), bias=Tensor([31690297],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 2, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 2, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 27163112, 2, 42],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([27163112],"float32"), bias=Tensor([27163112],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 2, 42],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 2, 42],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 38028357, 6, 10],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([38028357],"float32"), bias=Tensor([38028357],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 10],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 10],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 23767723, 6, 16],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([23767723],"float32"), bias=Tensor([23767723],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 16],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 16],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 21126865, 6, 18],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([21126865],"float32"), bias=Tensor([21126865],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 18],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 18],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 15845149, 6, 24],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([15845149],"float32"), bias=Tensor([15845149],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 24],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 24],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 14626291, 6, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([14626291],"float32"), bias=Tensor([14626291],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 26],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 13581556, 6, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([13581556],"float32"), bias=Tensor([13581556],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 10563433, 6, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([10563433],"float32"), bias=Tensor([10563433],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 10007463, 6, 38],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([10007463],"float32"), bias=Tensor([10007463],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 38],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 38],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 9507090, 6, 40],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([9507090],"float32"), bias=Tensor([9507090],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 40],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 6, 40],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 20372334, 8, 14],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([20372334],"float32"), bias=Tensor([20372334],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 8, 14],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 8, 14],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 9507090, 12, 20],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([9507090],"float32"), bias=Tensor([9507090],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 20],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 20],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 5941931, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([5941931],"float32"), bias=Tensor([5941931],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 32],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 5281717, 12, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([5281717],"float32"), bias=Tensor([5281717],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 36],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 3961288, 12, 48],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([3961288],"float32"), bias=Tensor([3961288],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 48],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 48],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 3656573, 12, 52],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([3656573],"float32"), bias=Tensor([3656573],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 52],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 52],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 3395389, 12, 56],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([3395389],"float32"), bias=Tensor([3395389],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 56],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 56],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2640859, 12, 72],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2640859],"float32"), bias=Tensor([2640859],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 72],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 72],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2501866, 12, 76],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2501866],"float32"), bias=Tensor([2501866],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 76],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 76],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2376773, 12, 80],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2376773],"float32"), bias=Tensor([2376773],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 80],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 12, 80],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 5093084, 16, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([5093084],"float32"), bias=Tensor([5093084],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 16, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 16, 28],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2193944, 20, 52],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2193944],"float32"), bias=Tensor([2193944],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 20, 52],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([1, 2281701379, 20, 52],"float32"), num_groups=32, epsilon=1e-05, weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 178956971],"float16"), num_groups=2, weight=Tensor([178956971],"float16"), bias=Tensor([178956971],"float16"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 4294967297],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 4294967297],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 357913942],"float16"), num_groups=2, weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 4294967297],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 4294967297],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 715827883],"float16"), num_groups=2, weight=Tensor([715827883],"float16"), bias=Tensor([715827883],"float16"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 4294967297],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 4294967297],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 178956971, 3, 2, 2],"float16"), num_groups=2, weight=Tensor([178956971],"float16"), bias=Tensor([178956971],"float16"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4294967297, 3, 2, 2],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4294967297, 3, 2, 2],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 357913942, 3, 2],"float16"), num_groups=2, weight=Tensor([357913942],"float16"), bias=Tensor([357913942],"float16"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4294967297, 3, 2],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4294967297, 3, 2],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 715827883, 3],"float16"), num_groups=2, weight=Tensor([715827883],"float16"), bias=Tensor([715827883],"float16"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4294967297, 3],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4294967297, 3],"float16"), num_groups=2, weight=Tensor([4294967297],"float16"), bias=Tensor([4294967297],"float16"), data_format="NCL", )
paddle.nn.functional.instance_norm(Tensor([2, 76056713, 3, 5],"float32"), None, None, Tensor([76056713],"float32"), Tensor([76056713],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 2281701379, 3, 5],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 2281701379, 3, 5],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 143165577, 3, 5],"float16"), None, None, Tensor([143165577],"float16"), Tensor([143165577],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 4294967297, 3, 5],"float16"), None, None, Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 4294967297, 3, 5],"float16"), None, None, Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 57042535, 4, 5],"float32"), None, None, Tensor([57042535],"float32"), Tensor([57042535],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 2281701379, 4, 5],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 2281701379, 4, 5],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 107374183, 4, 5],"float16"), None, None, Tensor([107374183],"float16"), Tensor([107374183],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 4294967297, 4, 5],"float16"), None, None, Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 4294967297, 4, 5],"float16"), None, None, Tensor([4294967297],"float16"), Tensor([4294967297],"float16"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 285212673, 4],"float32"), None, None, Tensor([285212673],"float32"), Tensor([285212673],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 2281701379, 4],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([2, 2281701379, 4],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, )
paddle.nn.functional.instance_norm(Tensor([4, 35651585, 16],"float32"), None, None, Tensor([35651585],"float32"), Tensor([35651585],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 2281701379, 16],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 2281701379, 16],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 35651585, 4, 4],"float32"), None, None, Tensor([35651585],"float32"), Tensor([35651585],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 2281701379, 4, 4],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.instance_norm(Tensor([4, 2281701379, 4, 4],"float32"), None, None, Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), True, 0.9, 1e-05, "NCHW", )
paddle.nn.functional.interpolate(Tensor([17409, 2, 256, 256],"float32"), list[Tensor([17409],"int64"),Tensor([17409],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([2281701379, 2, 256, 256],"float32"), list[Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([2281701379, 2, 256, 256],"float32"), list[Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], mode="bilinear", )
paddle.nn.functional.interpolate(Tensor([2056, 2, 608, 913],"float32"), size=tuple(Tensor([2056],"int64"),Tensor([2056],"int64"),), )
paddle.nn.functional.interpolate(Tensor([2281701379, 2, 608, 913],"float32"), size=tuple(Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),), )
paddle.nn.functional.interpolate(Tensor([2281701379, 2, 608, 913],"float32"), size=tuple(Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),), )
paddle.nn.functional.l1_loss(Tensor([4294968, 500, 2],"float16"), Tensor([4294968, 500, 2],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([20, 107374183, 2],"float16"), Tensor([20, 107374183, 2],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([20, 500, 429497],"float16"), Tensor([20, 500, 429497],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([2281702, 500, 2],"float16"), Tensor([2281702, 500, 2],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([20, 57042535, 2],"float16"), Tensor([20, 57042535, 2],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([20, 500, 228171],"float16"), Tensor([20, 500, 228171],"float32"), reduction="sum", )
paddle.nn.functional.l1_loss(Tensor([16385, 1, 512, 512],"float16"), Tensor([16385, 1, 512, 512],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([8, 2049, 512, 512],"float16"), Tensor([8, 2049, 512, 512],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([8705, 1, 512, 512],"float16"), Tensor([8705, 1, 512, 512],"float32"), "mean", )
paddle.nn.functional.l1_loss(Tensor([8, 1089, 512, 512],"float16"), Tensor([8, 1089, 512, 512],"float32"), "mean", )
paddle.nn.functional.layer_norm(Tensor([17, 134217729],"float32"), list[129,], Tensor([134217729],"float32"), None, )
paddle.nn.functional.layer_norm(Tensor([17, 2281701379],"float32"), list[129,], Tensor([2281701379],"float32"), None, )
paddle.nn.functional.layer_norm(Tensor([2, 1140850690],"float32"), list[100,], weight=Tensor([1140850690],"float32"), bias=Tensor([1140850690],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 2281701379],"float32"), list[100,], weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 2281701379],"float32"), list[100,], weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([3, 760567127],"float32"), list[4,], Tensor([760567127],"float32"), Tensor([760567127],"float32"), )
paddle.nn.functional.layer_norm(Tensor([3, 2281701379],"float32"), list[4,], Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.layer_norm(Tensor([3, 2281701379],"float32"), list[4,], Tensor([2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.layer_norm(Tensor([8, 128, 2228225],"float32"), list[256,], weight=Tensor([2228225],"float32"), bias=Tensor([2228225],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([8, 128, 2281701379],"float32"), list[256,], weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([8, 128, 2281701379],"float32"), list[256,], weight=Tensor([2281701379],"float32"), bias=Tensor([2281701379],"float32"), epsilon=1e-05, )
paddle.nn.functional.linear(Tensor([1, 2, 2],"float32"), Tensor([2, 1140850690],"float32"), bias=Tensor([1140850690],"float32"), )
paddle.nn.functional.linear(Tensor([1, 2, 2],"float32"), Tensor([2, 2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.linear(Tensor([1, 310, 7360328],"float32"), Tensor([7360328, 512],"float32"), Tensor([512],"float32"), )
paddle.nn.functional.linear(Tensor([1, 310, 4456449],"float32"), Tensor([4456449, 512],"float32"), Tensor([512],"float32"), )
paddle.nn.functional.linear(Tensor([1, 310, 3],"float32"), Tensor([3, 760567127],"float32"), Tensor([760567127],"float32"), )
paddle.nn.functional.linear(Tensor([1, 310, 3],"float32"), Tensor([3, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.linear(Tensor([1, 2281701379],"float32"), Tensor([2281701379, 128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.linear(Tensor([1, 17825793],"float32"), Tensor([17825793, 128],"float32"), bias=Tensor([128],"float32"), )
paddle.nn.functional.linear(Tensor([1, 512],"float32"), Tensor([512, 4456449],"float32"), bias=Tensor([4456449],"float32"), )
paddle.nn.functional.linear(Tensor([1, 512],"float32"), Tensor([512, 2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.linear(Tensor([10, 228170138],"float32"), Tensor([228170138, 60],"float32"), None, )
paddle.nn.functional.linear(Tensor([10, 38028357],"float32"), Tensor([38028357, 60],"float32"), None, )
paddle.nn.functional.linear(Tensor([100, 22817014],"float32"), Tensor([22817014],"float32"), )
paddle.nn.functional.linear(Tensor([100, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.linear(x=Tensor([1, 1, 2281701379],"float32"), weight=Tensor([2281701379, 64],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1, 35651585],"float32"), weight=Tensor([35651585, 64],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 2281701379],"float32"), weight=Tensor([2281701379, 1000],"float32"), bias=Tensor([1000],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 2281702],"float32"), weight=Tensor([2281702, 1000],"float32"), bias=Tensor([1000],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024],"float32"), weight=Tensor([1024, 2228225],"float32"), bias=Tensor([2228225],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 1024],"float32"), weight=Tensor([1024, 2281701379],"float32"), bias=Tensor([2281701379],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 14, 727584],"float32"), weight=Tensor([727584, 384],"float32"), bias=Tensor([384],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 14, 5941931],"float32"), weight=Tensor([5941931, 384],"float32"), bias=Tensor([384],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 14, 1536],"float32"), weight=Tensor([1536, 1485483],"float32"), bias=Tensor([1485483],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 14, 1536],"float32"), weight=Tensor([1536, 2281701379],"float32"), bias=Tensor([2281701379],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 14, 727584],"float32"), weight=Tensor([727584, 384],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([1, 16, 14, 14, 5941931],"float32"), weight=Tensor([5941931, 384],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([50704476, 3, 3, 5],"float32"), weight=Tensor([5, 50704476],"float32"), bias=Tensor([50704476],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 3, 3, 253522376],"float32"), weight=Tensor([253522376, 1],"float32"), bias=Tensor([1],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([1, 3, 3, 2281701379],"float32"), weight=Tensor([2281701379, 1],"float32"), bias=Tensor([1],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([456340276, 3, 3, 5],"float32"), weight=Tensor([5, 456340276],"float32"), bias=Tensor([456340276],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([2281701379, 3, 3, 5],"float32"), weight=Tensor([5, 2281701379],"float32"), bias=Tensor([2281701379],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 1, 1, 7, 7, 363792],"float32"), weight=Tensor([363792, 1536],"float32"), bias=Tensor([1536],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 1, 1, 7, 7, 1485483],"float32"), weight=Tensor([1485483, 1536],"float32"), bias=Tensor([1536],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 1, 1, 7, 7, 512],"float32"), weight=Tensor([512, 4456449],"float32"), bias=Tensor([4456449],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 1, 1, 7, 7, 512],"float32"), weight=Tensor([512, 2281701379],"float32"), bias=Tensor([2281701379],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([128, 17825793],"float32"), weight=Tensor([17825793, 8],"float32"), bias=None, )
paddle.nn.functional.linear(x=Tensor([128, 285212673],"float32"), weight=Tensor([285212673, 8],"float32"), bias=None, )
paddle.nn.functional.linear(x=Tensor([13, 2, 7, 12536821],"float32"), weight=Tensor([12536821, 99],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([13, 2, 7, 23047489],"float32"), weight=Tensor([23047489, 99],"float32"), name=None, )
paddle.nn.functional.linear(x=Tensor([13, 56, 56, 55968],"float32"), weight=Tensor([55968, 4],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([13, 56, 56, 570425345],"float32"), weight=Tensor([570425345, 4],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([2281701379],"float32"), weight=Tensor([2281701379, 64],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([35651585],"float32"), weight=Tensor([35651585, 64],"float32"), bias=None, name=None, )
paddle.nn.functional.linear(x=Tensor([28, 81489335],"float32"), weight=Tensor([81489335, 8],"float32"), )
paddle.nn.functional.linear(x=Tensor([28, 285212673],"float32"), weight=Tensor([285212673, 8],"float32"), )
paddle.nn.functional.linear(x=Tensor([4, 570425345],"float32"), weight=Tensor([570425345, 6],"float32"), bias=Tensor([6],"float32"), )
paddle.nn.functional.linear(x=Tensor([4, 380283564],"float32"), weight=Tensor([380283564, 6],"float32"), bias=Tensor([6],"float32"), )
paddle.nn.functional.linear(x=Tensor([4, 8],"float32"), weight=Tensor([8, 285212673],"float32"), bias=Tensor([285212673],"float32"), )
paddle.nn.functional.linear(x=Tensor([4, 8],"float32"), weight=Tensor([8, 2281701379],"float32"), bias=Tensor([2281701379],"float32"), )
paddle.nn.functional.max_unpool1d(Tensor([178956971, 3, 8],"float16"), Tensor([178956971, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 536870913, 8],"float16"), Tensor([1, 536870913, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 1431655766],"float16"), Tensor([1, 3, 1431655766],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([95070891, 3, 8],"float64"), Tensor([95070891, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 285212673, 8],"float64"), Tensor([1, 285212673, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 760567127],"float64"), Tensor([1, 3, 760567127],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([178956971, 3, 8],"float16"), Tensor([178956971, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 536870913, 8],"float16"), Tensor([1, 536870913, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 1431655766],"float16"), Tensor([1, 3, 1431655766],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([95070891, 3, 8],"float64"), Tensor([95070891, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 285212673, 8],"float64"), Tensor([1, 285212673, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 760567127],"float64"), Tensor([1, 3, 760567127],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([178956971, 3, 8],"float16"), Tensor([178956971, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 536870913, 8],"float16"), Tensor([1, 536870913, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 1431655766],"float16"), Tensor([1, 3, 1431655766],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([95070891, 3, 8],"float64"), Tensor([95070891, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 285212673, 8],"float64"), Tensor([1, 285212673, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 760567127],"float64"), Tensor([1, 3, 760567127],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool2d(Tensor([8873900, 4, 11, 11],"float16"), Tensor([8873900, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 17747799, 11, 11],"float16"), Tensor([2, 17747799, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([4714260, 4, 11, 11],"float64"), Tensor([4714260, 4, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 9428519, 11, 11],"float64"), Tensor([2, 9428519, 11, 11],"int32"), kernel_size=4, stride=None, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([5368710, 4, 20, 10],"float16"), Tensor([5368710, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 10737419, 20, 10],"float16"), Tensor([2, 10737419, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 53687092, 10],"float16"), Tensor([2, 4, 53687092, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 26843546],"float16"), Tensor([2, 4, 20, 26843546],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2852127, 4, 20, 10],"float64"), Tensor([2852127, 4, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 5704254, 20, 10],"float64"), Tensor([2, 5704254, 20, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 28521268, 10],"float64"), Tensor([2, 4, 28521268, 10],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 20, 14260634],"float64"), Tensor([2, 4, 20, 14260634],"int32"), kernel_size=tuple(2,4,), stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2684355, 4, 20, 20],"float16"), Tensor([2684355, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 5368710, 20, 20],"float16"), Tensor([2, 5368710, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1426064, 4, 20, 20],"float64"), Tensor([1426064, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 2852127, 20, 20],"float64"), Tensor([2, 2852127, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2684355, 4, 20, 20],"float16"), Tensor([2684355, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=tuple(2,4,40,40,), name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 5368710, 20, 20],"float16"), Tensor([2, 5368710, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=tuple(2,4,40,40,), name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1426064, 4, 20, 20],"float64"), Tensor([1426064, 4, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=tuple(2,4,40,40,), name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 2852127, 20, 20],"float64"), Tensor([2, 2852127, 20, 20],"int32"), kernel_size=2, stride=None, padding=0, data_format="NCHW", output_size=tuple(2,4,40,40,), name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2434789, 4, 21, 21],"float16"), Tensor([2434789, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4869578, 21, 21],"float16"), Tensor([2, 4869578, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1293482, 4, 21, 21],"float64"), Tensor([1293482, 4, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 2586964, 21, 21],"float64"), Tensor([2, 2586964, 21, 21],"int32"), kernel_size=4, stride=2, padding=2, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([19173962, 4, 7, 8],"float16"), Tensor([19173962, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 38347923, 7, 8],"float16"), Tensor([2, 38347923, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 67108865, 8],"float16"), Tensor([2, 4, 67108865, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 76695845],"float16"), Tensor([2, 4, 7, 76695845],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([10186167, 4, 7, 8],"float64"), Tensor([10186167, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 20372334, 7, 8],"float64"), Tensor([2, 20372334, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 35651585, 8],"float64"), Tensor([2, 4, 35651585, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 40744668],"float64"), Tensor([2, 4, 7, 40744668],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([19173962, 4, 7, 8],"float16"), Tensor([19173962, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 38347923, 7, 8],"float16"), Tensor([2, 38347923, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 67108865, 8],"float16"), Tensor([2, 4, 67108865, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 76695845],"float16"), Tensor([2, 4, 7, 76695845],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([10186167, 4, 7, 8],"float64"), Tensor([10186167, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 20372334, 7, 8],"float64"), Tensor([2, 20372334, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 35651585, 8],"float64"), Tensor([2, 4, 35651585, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 40744668],"float64"), Tensor([2, 4, 7, 40744668],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([85899346, 2, 5, 5],"float16"), Tensor([85899346, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 57266231, 5, 5],"float16"), Tensor([3, 57266231, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([45634028, 2, 5, 5],"float64"), Tensor([45634028, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 30422686, 5, 5],"float64"), Tensor([3, 30422686, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([85899346, 2, 5, 5],"float16"), Tensor([85899346, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 57266231, 5, 5],"float16"), Tensor([3, 57266231, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([45634028, 2, 5, 5],"float64"), Tensor([45634028, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 30422686, 5, 5],"float64"), Tensor([3, 30422686, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 143165577, 5, 6],"float16"), Tensor([1, 1, 143165577, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 178956971, 6],"float16"), Tensor([1, 1, 4, 178956971, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 214748365],"float16"), Tensor([1, 1, 4, 5, 214748365],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 76056713, 5, 6],"float64"), Tensor([1, 1, 76056713, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 95070891, 6],"float64"), Tensor([1, 1, 4, 95070891, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 114085069],"float64"), Tensor([1, 1, 4, 5, 114085069],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 143165577, 5, 6],"float16"), Tensor([1, 1, 143165577, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 178956971, 6],"float16"), Tensor([1, 1, 4, 178956971, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 214748365],"float16"), Tensor([1, 1, 4, 5, 214748365],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 76056713, 5, 6],"float64"), Tensor([1, 1, 76056713, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 95070891, 6],"float64"), Tensor([1, 1, 4, 95070891, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 114085069],"float64"), Tensor([1, 1, 4, 5, 114085069],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([119304648, 3, 2, 2, 3],"float16"), Tensor([119304648, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([63380594, 3, 2, 2, 3],"float64"), Tensor([63380594, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([119304648, 3, 2, 2, 3],"float16"), Tensor([119304648, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([63380594, 3, 2, 2, 3],"float64"), Tensor([63380594, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([119304648, 3, 2, 2, 3],"float16"), Tensor([119304648, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([63380594, 3, 2, 2, 3],"float64"), Tensor([63380594, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([11930465, 3, 4, 5, 6],"float16"), Tensor([11930465, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 35791395, 4, 5, 6],"float16"), Tensor([1, 35791395, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 47721859, 5, 6],"float16"), Tensor([1, 3, 47721859, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 59652324, 6],"float16"), Tensor([1, 3, 4, 59652324, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 71582789],"float16"), Tensor([1, 3, 4, 5, 71582789],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([6338060, 3, 4, 5, 6],"float64"), Tensor([6338060, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 19014179, 4, 5, 6],"float64"), Tensor([1, 19014179, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 25352238, 5, 6],"float64"), Tensor([1, 3, 25352238, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 31690297, 6],"float64"), Tensor([1, 3, 4, 31690297, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 38028357],"float64"), Tensor([1, 3, 4, 5, 38028357],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([11930465, 3, 4, 5, 6],"float16"), Tensor([11930465, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 35791395, 4, 5, 6],"float16"), Tensor([1, 35791395, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 47721859, 5, 6],"float16"), Tensor([1, 3, 47721859, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 59652324, 6],"float16"), Tensor([1, 3, 4, 59652324, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 71582789],"float16"), Tensor([1, 3, 4, 5, 71582789],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([6338060, 3, 4, 5, 6],"float64"), Tensor([6338060, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 19014179, 4, 5, 6],"float64"), Tensor([1, 19014179, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 25352238, 5, 6],"float64"), Tensor([1, 3, 25352238, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 31690297, 6],"float64"), Tensor([1, 3, 4, 31690297, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 38028357],"float64"), Tensor([1, 3, 4, 5, 38028357],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([11930465, 3, 4, 5, 6],"float16"), Tensor([11930465, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 35791395, 4, 5, 6],"float16"), Tensor([1, 35791395, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 47721859, 5, 6],"float16"), Tensor([1, 3, 47721859, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 59652324, 6],"float16"), Tensor([1, 3, 4, 59652324, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 71582789],"float16"), Tensor([1, 3, 4, 5, 71582789],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([6338060, 3, 4, 5, 6],"float64"), Tensor([6338060, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 19014179, 4, 5, 6],"float64"), Tensor([1, 19014179, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 25352238, 5, 6],"float64"), Tensor([1, 3, 25352238, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 31690297, 6],"float64"), Tensor([1, 3, 4, 31690297, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 38028357],"float64"), Tensor([1, 3, 4, 5, 38028357],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([11930465, 3, 4, 5, 6],"float16"), Tensor([11930465, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 35791395, 4, 5, 6],"float16"), Tensor([1, 35791395, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 47721859, 5, 6],"float16"), Tensor([1, 3, 47721859, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 59652324, 6],"float16"), Tensor([1, 3, 4, 59652324, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 71582789],"float16"), Tensor([1, 3, 4, 5, 71582789],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([6338060, 3, 4, 5, 6],"float64"), Tensor([6338060, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 19014179, 4, 5, 6],"float64"), Tensor([1, 19014179, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 25352238, 5, 6],"float64"), Tensor([1, 3, 25352238, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 31690297, 6],"float64"), Tensor([1, 3, 4, 31690297, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 38028357],"float64"), Tensor([1, 3, 4, 5, 38028357],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.mse_loss(Tensor([2281701379],"float32"), Tensor([2281701379, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2281701379],"float32"), Tensor([2281701379, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([16385, 1, 512, 512],"float16"), Tensor([16385, 1, 512, 512],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([8, 2049, 512, 512],"float16"), Tensor([8, 2049, 512, 512],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([8705, 1, 512, 512],"float16"), Tensor([8705, 1, 512, 512],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([8, 1089, 512, 512],"float16"), Tensor([8, 1089, 512, 512],"float32"), "mean", )
paddle.nn.functional.multi_margin_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([2281701379, 2],"float64"), Tensor([2281701379],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([2281701379, 2],"float64"), Tensor([2281701379],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([2281701379, 2],"float64"), Tensor([2281701379],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([2147483649, 2],"float16"), Tensor([2147483649],"int64"), p=2, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([2281701379, 2],"float64"), Tensor([2281701379],"int64"), p=2, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(input=Tensor([2147483649, 2],"float16"), label=Tensor([2147483649],"int64"), p=1, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.multi_margin_loss(input=Tensor([2281701379, 2],"float64"), label=Tensor([2281701379],"int64"), p=1, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.multi_margin_loss(input=Tensor([2147483649, 2],"float16"), label=Tensor([2147483649],"int64"), p=1, margin=1.0, weight=None, reduction="none", )
paddle.nn.functional.multi_margin_loss(input=Tensor([2281701379, 2],"float64"), label=Tensor([2281701379],"int64"), p=1, margin=1.0, weight=None, reduction="none", )
paddle.nn.functional.multi_margin_loss(input=Tensor([2147483649, 2],"float16"), label=Tensor([2147483649],"int64"), p=1, margin=1.0, weight=None, reduction="sum", )
paddle.nn.functional.multi_margin_loss(input=Tensor([2281701379, 2],"float64"), label=Tensor([2281701379],"int64"), p=1, margin=1.0, weight=None, reduction="sum", )
paddle.nn.functional.multi_margin_loss(input=Tensor([2147483649, 2],"float16"), label=Tensor([2147483649],"int64"), p=2, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.multi_margin_loss(input=Tensor([2281701379, 2],"float64"), label=Tensor([2281701379],"int64"), p=2, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.nll_loss(Tensor([95070891, 3, 2, 4],"float32"), Tensor([95070891, 2, 4],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 3, 38028357, 4],"float32"), Tensor([5, 38028357, 4],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 3, 2, 76056713],"float32"), Tensor([5, 2, 76056713],"int64"), )
paddle.nn.functional.nll_loss(Tensor([285212673, 3, 2, 4],"float32"), Tensor([285212673, 2, 4],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 3, 114085069, 4],"float32"), Tensor([5, 114085069, 4],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 3, 2, 228170138],"float32"), Tensor([5, 2, 228170138],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 6871948, 5, 5, 5],"float16"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([6871948],"float16"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 4294967297, 5, 5, 5],"float16"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 6871948, 5, 5, 5],"float16"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([6871948],"float16"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 4294967297, 5, 5, 5],"float16"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 6871948, 5, 5, 5],"float16"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([6871948],"float16"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 4294967297, 5, 5, 5],"float16"), Tensor([5, 5, 5, 5],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 34359739, 5, 5],"float16"), Tensor([5, 5, 5],"int64"), weight=Tensor([34359739],"float16"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 4294967297, 5, 5],"float16"), Tensor([5, 5, 5],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 34359739, 5, 5],"float16"), Tensor([5, 5, 5],"int64"), weight=Tensor([34359739],"float16"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 4294967297, 5, 5],"float16"), Tensor([5, 5, 5],"int64"), weight=Tensor([4294967297],"float16"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([760567127, 3],"float32"), Tensor([760567127],"int64"), )
paddle.nn.functional.nll_loss(Tensor([2281701379, 3],"float32"), Tensor([2281701379],"int64"), )
paddle.nn.functional.npair_loss(Tensor([380283564, 6],"float32"), positive=Tensor([380283564, 6],"float32"), labels=Tensor([380283564],"float32"), l2_reg=0.002, )
paddle.nn.functional.npair_loss(Tensor([18, 126761188],"float32"), positive=Tensor([18, 126761188],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.npair_loss(Tensor([380283564, 6],"float32"), positive=Tensor([380283564, 6],"float32"), labels=Tensor([380283564],"float32"), l2_reg=0.002, )
paddle.nn.functional.npair_loss(Tensor([18, 126761188],"float32"), positive=Tensor([18, 126761188],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.npair_loss(Tensor([2281701379, 6],"float32"), positive=Tensor([2281701379, 6],"float32"), labels=Tensor([2281701379],"float32"), l2_reg=0.002, )
paddle.nn.functional.poisson_nll_loss(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([380283564, 3, 2],"float64"), Tensor([380283564, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 285212673, 2],"float64"), Tensor([4, 285212673, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 190141782],"float64"), Tensor([4, 3, 190141782],"float32"), )
paddle.nn.functional.prelu(Tensor([95070891, 2, 3, 4],"float32"), Tensor([95070891],"float32"), )
paddle.nn.functional.prelu(Tensor([2281701379, 2, 3, 4],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.prelu(Tensor([95070891, 2, 3, 4],"float32"), Tensor([95070891],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2281701379, 2, 3, 4],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 190141782, 3, 4],"float32"), Tensor([190141782],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2281701379, 3, 4],"float32"), Tensor([2281701379],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 190141782, 3, 4],"float32"), Tensor([190141782],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2281701379, 3, 4],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 27984, 28, 28],"float32"), Tensor([27984],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 2281701379, 28, 28],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 6996, 56, 56],"float32"), Tensor([6996],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 2281701379, 56, 56],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 111936, 14, 14],"float32"), Tensor([111936],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 2281701379, 14, 14],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 27984, 28, 28],"float32"), Tensor([27984],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 2281701379, 28, 28],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 447744, 7, 7],"float32"), Tensor([447744],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 2281701379, 7, 7],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 111936, 14, 14],"float32"), Tensor([111936],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 2281701379, 14, 14],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 447744, 7, 7],"float32"), Tensor([447744],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 2281701379, 7, 7],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 6996, 56, 56],"float32"), Tensor([6996],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([104, 2281701379, 56, 56],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 90948, 14, 14],"float32"), Tensor([90948],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 2281701379, 14, 14],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 22737, 28, 28],"float32"), Tensor([22737],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 2281701379, 28, 28],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 363792, 7, 7],"float32"), Tensor([363792],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 2281701379, 7, 7],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 90948, 14, 14],"float32"), Tensor([90948],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 2281701379, 14, 14],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 363792, 7, 7],"float32"), Tensor([363792],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 2281701379, 7, 7],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 5685, 56, 56],"float32"), Tensor([5685],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([128, 2281701379, 56, 56],"float32"), Tensor([2281701379],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(x=Tensor([95070891, 2, 3, 4],"float32"), weight=Tensor([95070891],"float32"), )
paddle.nn.functional.prelu(x=Tensor([2281701379, 2, 3, 4],"float32"), weight=Tensor([2281701379],"float32"), )
paddle.nn.functional.prelu(x=Tensor([178956971, 2, 3, 4],"float16"), weight=Tensor([178956971],"float16"), )
paddle.nn.functional.prelu(x=Tensor([4294967297, 2, 3, 4],"float16"), weight=Tensor([4294967297],"float16"), )
paddle.nn.functional.sigmoid_focal_loss(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([1],"float16"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([1],"float16"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([1],"float16"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([1],"float16"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([1],"float16"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([1],"float16"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([1],"float16"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([1],"float16"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([1],"float16"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([1],"float16"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([1],"float16"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([1],"float16"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([35791395, 3, 4, 10],"float16"), Tensor([35791395, 3, 4, 10],"float16"), Tensor([1],"float16"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 53687092, 4, 10],"float16"), Tensor([2, 53687092, 4, 10],"float16"), Tensor([1],"float16"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 71582789, 10],"float16"), Tensor([2, 3, 71582789, 10],"float16"), Tensor([1],"float16"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), Tensor([1],"float16"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.smooth_l1_loss(Tensor([715827883, 3, 2],"bfloat16"), Tensor([715827883, 3, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 536870913, 2],"bfloat16"), Tensor([4, 536870913, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 357913942],"bfloat16"), Tensor([4, 3, 357913942],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([380283564, 3, 2],"bfloat16"), Tensor([380283564, 3, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 285212673, 2],"bfloat16"), Tensor([4, 285212673, 2],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 190141782],"bfloat16"), Tensor([4, 3, 190141782],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"bfloat16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([715827883, 3, 2],"float64"), Tensor([715827883, 3, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 536870913, 2],"float64"), Tensor([4, 536870913, 2],"float16"), )
paddle.nn.functional.smooth_l1_loss(Tensor([4, 3, 357913942],"float64"), Tensor([4, 3, 357913942],"float16"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2281701379, 10],"float32"), Tensor([2281701379, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2228225, 16, 32, 64],"float32"), Tensor([2228225, 16, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 17825793, 32, 64],"float32"), Tensor([2, 17825793, 1, 64],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 32, 71303169],"float32"), Tensor([2, 16, 1, 71303169],"int64"), axis=2, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([4456449, 16, 32, 64],"float32"), Tensor([4456449, 16, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 35651585, 32, 64],"float32"), Tensor([2, 35651585, 32, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 71303169, 64],"float32"), Tensor([2, 16, 71303169, 1],"int64"), axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([4456449, 16, 32, 64],"float32"), Tensor([4456449, 16, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 35651585, 32, 64],"float32"), Tensor([2, 35651585, 32, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16, 71303169, 64],"float32"), Tensor([2, 16, 71303169, 1],"int64"), axis=3, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2281701379, 16],"float32"), Tensor([2281701379, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2281701379, 16],"float32"), Tensor([2281701379, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2281701379, 2],"float32"), label=Tensor([2281701379, 1],"int64"), soft_label=False, ignore_index=-100, numeric_stable_mode=True, return_softmax=False, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2281701379, 1000],"float32"), label=Tensor([2281701379, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([4294968, 1000],"float16"), label=Tensor([4294968, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2281701379, 1000],"float64"), label=Tensor([2281701379, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2281701379, 10],"float32"), label=Tensor([2281701379, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2281701379, 128],"float32"), label=Tensor([2281701379, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([1073741825, 4],"float16"), label=Tensor([1073741825, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2281701379, 4],"float64"), label=Tensor([2281701379, 1],"int64"), return_softmax=True, )
paddle.nn.functional.square_error_cost(Tensor([429497, 100, 100],"float16"), Tensor([429497, 100, 100],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([228171, 100, 100],"float16"), Tensor([228171, 100, 100],"float32"), )
paddle.nn.functional.zeropad2d(Tensor([15158, 3, 224, 224],"int64"), Tensor([15158],"int32"), )
paddle.nn.functional.zeropad2d(Tensor([2281701379, 3, 224, 224],"int64"), Tensor([2281701379],"int32"), )
paddle.nn.utils.vector_to_parameters(Tensor([165],"float32"), list[Tensor([10, 228170138],"float32"),Tensor([228170138],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([165],"float32"), list[Tensor([10, 2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([285212673, 2, 4],"float32"),Tensor([285212673],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([2281701379, 2, 4],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([285212673, 8],"float32"),Tensor([285212673, 16],"float32"),Tensor([285212673],"float32"),Tensor([285212673],"float32"),Tensor([285212673, 16],"float32"),Tensor([285212673, 16],"float32"),Tensor([285212673],"float32"),Tensor([285212673],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([142606337, 8],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 47535446],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 47535446],"float32"),Tensor([48, 47535446],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([2281701379, 8],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([2281701379, 8],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([142606337, 8],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 47535446],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 47535446],"float32"),Tensor([48, 47535446],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([142606337, 8],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([48, 8],"float32"),Tensor([48, 47535446],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),Tensor([48, 47535446],"float32"),Tensor([48, 47535446],"float32"),Tensor([48],"float32"),Tensor([48],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([2281701379, 8],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([2880],"float32"), list[Tensor([2281701379, 8],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([285212673, 8],"float32"),Tensor([285212673, 16],"float32"),Tensor([285212673],"float32"),Tensor([285212673],"float32"),Tensor([285212673, 16],"float32"),Tensor([285212673, 16],"float32"),Tensor([285212673],"float32"),Tensor([285212673],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([142606337, 8],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 35651585],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 35651585],"float32"),Tensor([64, 35651585],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([2281701379, 8],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([2281701379, 8],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([142606337, 8],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 35651585],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 35651585],"float32"),Tensor([64, 35651585],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([142606337, 8],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337, 16],"float32"),Tensor([142606337],"float32"),Tensor([142606337],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([64, 8],"float32"),Tensor([64, 35651585],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),Tensor([64, 35651585],"float32"),Tensor([64, 35651585],"float32"),Tensor([64],"float32"),Tensor([64],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([2281701379, 8],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([3840],"float32"), list[Tensor([2281701379, 8],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379, 16],"float32"),Tensor([2281701379],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([17825793, 2, 4, 4, 4],"float32"),Tensor([17825793],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([2281701379, 2, 4, 4, 4],"float32"),Tensor([2281701379],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([71303169, 2, 4, 4],"float32"),Tensor([71303169],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([2281701379, 2, 4, 4],"float32"),Tensor([2281701379],"float32"),], )
paddle.not_equal(Tensor([13, 2, 16, 4, 1371215],"int64"), Tensor([13, 2, 16, 1371215, 8],"int64"), )
paddle.not_equal(Tensor([8912897, 2, 16, 4, 1],"int64"), Tensor([8912897, 2, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 1371215, 16, 4, 1],"int64"), Tensor([13, 1371215, 16, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 10969719, 4, 1],"int64"), Tensor([13, 2, 10969719, 1, 8],"int64"), )
paddle.not_equal(Tensor([13, 2, 16, 4, 685608],"int64"), Tensor([13, 2, 16, 685608, 8],"int64"), )
paddle.not_equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float32"), )
paddle.not_equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float32"), )
paddle.not_equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float32"), )
paddle.not_equal(Tensor([380283564, 3, 2],"float16"), Tensor([380283564, 3, 2],"float32"), )
paddle.not_equal(Tensor([4, 285212673, 2],"float16"), Tensor([4, 285212673, 2],"float32"), )
paddle.not_equal(Tensor([4, 3, 190141782],"float16"), Tensor([4, 3, 190141782],"float32"), )
paddle.not_equal(Tensor([715827883, 3, 2],"float16"), Tensor([715827883, 3, 2],"float64"), )
paddle.not_equal(Tensor([4, 536870913, 2],"float16"), Tensor([4, 536870913, 2],"float64"), )
paddle.not_equal(Tensor([4, 3, 357913942],"float16"), Tensor([4, 3, 357913942],"float64"), )
paddle.not_equal(Tensor([380283564, 3, 2],"float32"), Tensor([380283564, 3, 2],"float16"), )
paddle.not_equal(Tensor([4, 285212673, 2],"float32"), Tensor([4, 285212673, 2],"float16"), )
paddle.not_equal(Tensor([4, 3, 190141782],"float32"), Tensor([4, 3, 190141782],"float16"), )
paddle.not_equal(Tensor([715827883, 3, 2],"float32"), Tensor([715827883, 3, 2],"float16"), )
paddle.not_equal(Tensor([4, 536870913, 2],"float32"), Tensor([4, 536870913, 2],"float16"), )
paddle.not_equal(Tensor([4, 3, 357913942],"float32"), Tensor([4, 3, 357913942],"float16"), )
paddle.not_equal(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.not_equal(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.not_equal(x=Tensor([1, 1431655766, 1, 3],"float16"), y=Tensor([1, 1431655766, 3],"float16"), )
paddle.not_equal(x=Tensor([1, 2, 1, 2147483649],"float16"), y=Tensor([1, 2, 2147483649],"float16"), )
paddle.outer(Tensor([20, 214748365],"float16"), Tensor([214748365],"float16"), )
paddle.outer(Tensor([20, 4294967297],"float16"), Tensor([4294967297],"float16"), )
paddle.outer(x=Tensor([2147483649, 2],"float16"), y=Tensor([2, 3, 2147483649],"float16"), )
paddle.outer(x=Tensor([4, 1073741825],"float16"), y=Tensor([1073741825, 3, 4],"float16"), )
paddle.outer(x=Tensor([4, 357913942],"float16"), y=Tensor([357913942, 3, 4],"float16"), )
paddle.outer(x=Tensor([715827883, 2],"float16"), y=Tensor([2, 3, 715827883],"float16"), )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.prod(Tensor([10, 10, 9, 9],"float64"), list[0,Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),], )
paddle.put_along_axis(Tensor([3, 760567127],"float32"), Tensor([1, 4],"int64"), Tensor([2, 760567127],"float32"), 0, "add", True, False, )
paddle.put_along_axis(Tensor([3, 1140850690],"float32"), Tensor([1, 4],"int64"), Tensor([2, 1140850690],"float32"), 0, "add", True, False, )
paddle.put_along_axis(Tensor([3, 760567127],"float32"), Tensor([1, 4],"int64"), Tensor([2, 760567127],"float32"), 0, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 1140850690],"float32"), Tensor([1, 4],"int64"), Tensor([2, 1140850690],"float32"), 0, "mul", True, False, )
paddle.put_along_axis(Tensor([456340276, 5],"float32"), Tensor([2, 456340276],"int64"), Tensor([2, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 760567127],"float32"), Tensor([2, 3],"int64"), Tensor([2, 760567127],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([760567127, 3],"int64"), Tensor([760567127, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([1140850690, 5],"float32"), Tensor([2, 1140850690],"int64"), Tensor([2, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([456340276, 3],"int64"), Tensor([456340276, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([3, 1140850690],"float32"), Tensor([2, 3],"int64"), Tensor([2, 1140850690],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([456340276, 5],"float32"), Tensor([2, 456340276],"int64"), Tensor([2, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 760567127],"float32"), Tensor([2, 3],"int64"), Tensor([2, 760567127],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([760567127, 3],"int64"), Tensor([760567127, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([1140850690, 5],"float32"), Tensor([2, 1140850690],"int64"), Tensor([2, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([456340276, 3],"int64"), Tensor([456340276, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([3, 1140850690],"float32"), Tensor([2, 3],"int64"), Tensor([2, 1140850690],"float32"), 1, "mul", True, False, )
paddle.reduce_as(Tensor([30, 1901418, 40],"float32"), Tensor([1901418, 40],"float32"), )
paddle.reduce_as(Tensor([30, 200, 380284],"float32"), Tensor([200, 380284],"float32"), )
paddle.reduce_as(Tensor([30, 57042535, 40],"float32"), Tensor([57042535, 40],"float32"), )
paddle.reduce_as(Tensor([30, 200, 11408507],"float32"), Tensor([200, 11408507],"float32"), )
paddle.remainder(Tensor([1, 1, 2281701379],"float32"), Tensor([2, 3, 4, 2281701379],"float32"), )
paddle.remainder(Tensor([1, 1, 95070891],"float32"), Tensor([2, 3, 4, 95070891],"float32"), )
paddle.remainder(Tensor([1, 1, 4294967297],"float16"), Tensor([2, 3, 4, 4294967297],"float16"), )
paddle.remainder(Tensor([1, 1, 178956971],"float16"), Tensor([2, 3, 4, 178956971],"float16"), )
paddle.remainder(Tensor([1, 1, 2281701379],"int32"), Tensor([2, 3, 4, 2281701379],"int32"), )
paddle.remainder(Tensor([1, 1, 95070891],"int32"), Tensor([2, 3, 4, 95070891],"int32"), )
paddle.remainder(Tensor([1, 1, 2281701379],"int64"), Tensor([2, 3, 4, 2281701379],"int64"), )
paddle.remainder(Tensor([1, 1, 95070891],"int64"), Tensor([2, 3, 4, 95070891],"int64"), )
paddle.remainder(Tensor([2, 3, 4, 95070891],"float32"), Tensor([1, 1, 95070891],"float32"), )
paddle.remainder(Tensor([2, 3, 4, 2281701379],"float32"), Tensor([1, 1, 2281701379],"float32"), )
paddle.remainder(Tensor([2, 3, 4, 178956971],"float16"), Tensor([1, 1, 178956971],"float16"), )
paddle.remainder(Tensor([2, 3, 4, 4294967297],"float16"), Tensor([1, 1, 4294967297],"float16"), )
paddle.remainder(Tensor([2, 3, 4, 95070891],"int32"), Tensor([1, 1, 95070891],"int32"), )
paddle.remainder(Tensor([2, 3, 4, 2281701379],"int32"), Tensor([1, 1, 2281701379],"int32"), )
paddle.remainder(Tensor([2, 3, 4, 95070891],"int64"), Tensor([1, 1, 95070891],"int64"), )
paddle.remainder(Tensor([2, 3, 4, 2281701379],"int64"), Tensor([1, 1, 2281701379],"int64"), )
paddle.repeat_interleave(Tensor([570425345, 4],"float32"), Tensor([570425345],"int32"), axis=0, )
paddle.repeat_interleave(Tensor([2281701379, 4],"float32"), Tensor([2281701379],"int32"), axis=0, )
paddle.repeat_interleave(Tensor([3, 760567127],"float32"), Tensor([760567127],"int32"), -1, )
paddle.repeat_interleave(Tensor([3, 2281701379],"float32"), Tensor([2281701379],"int32"), -1, )
paddle.repeat_interleave(Tensor([3, 760567127],"float32"), Tensor([760567127],"int32"), 1, )
paddle.repeat_interleave(Tensor([3, 2281701379],"float32"), Tensor([2281701379],"int32"), 1, )
paddle.repeat_interleave(x=Tensor([4, 7130317, 4, 4, 5],"int32"), repeats=Tensor([7130317],"int32"), axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2281701379, 4, 4, 5],"int32"), repeats=Tensor([2281701379],"int32"), axis=1, )
paddle.row_stack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297],"float16"),], )
paddle.row_stack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297],"float16"),], )
paddle.scatter(Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"float32"), )
paddle.scatter(Tensor([100, 22817014],"float32"), Tensor([100],"int64"), Tensor([100, 22817014],"float32"), )
paddle.scatter(Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"float32"), )
paddle.scatter(Tensor([2281701379, 1],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"float32"), )
paddle.scatter(Tensor([100, 22817014],"float32"), Tensor([100],"int64"), Tensor([100, 22817014],"float32"), )
paddle.scatter(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.scatter(Tensor([100, 22817014],"int64"), Tensor([100],"int64"), Tensor([100, 22817014],"int64"), )
paddle.scatter(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.scatter(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.scatter(Tensor([100, 22817014],"int64"), Tensor([100],"int64"), Tensor([100, 22817014],"int64"), )
paddle.scatter(Tensor([1024000],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379],"float32"), )
paddle.scatter(Tensor([1024000],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379],"float32"), )
paddle.scatter(Tensor([1024000],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379],"float32"), )
paddle.scatter(Tensor([1024000],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379],"float32"), )
paddle.scatter(Tensor([1024000],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379],"float32"), )
paddle.scatter(Tensor([1024000],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379],"float32"), )
paddle.scatter(Tensor([11661, 195670],"float32"), Tensor([58584],"int64"), Tensor([58584, 195670],"float32"), overwrite=False, )
paddle.scatter(Tensor([11661, 128],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([11661, 128],"float32"), Tensor([17825793],"int64"), Tensor([17825793, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([11661, 38948],"float32"), Tensor([58584],"int64"), Tensor([58584, 38948],"float32"), overwrite=False, )
paddle.scatter(Tensor([1200, 1901418],"float32"), Tensor([4],"int64"), Tensor([4, 1901418],"float32"), )
paddle.scatter(Tensor([1200, 1],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"float32"), )
paddle.scatter(Tensor([1200, 1],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"float32"), )
paddle.scatter(Tensor([1200, 570425345],"float32"), Tensor([4],"int64"), Tensor([4, 570425345],"float32"), )
paddle.scatter(Tensor([1200, 1901418],"int64"), Tensor([4],"int64"), Tensor([4, 1901418],"int64"), )
paddle.scatter(Tensor([1200, 1],"int64"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.scatter(Tensor([1200, 1],"int64"), Tensor([2281701379],"int64"), Tensor([2281701379, 1],"int64"), )
paddle.scatter(Tensor([1200, 570425345],"int64"), Tensor([4],"int64"), Tensor([4, 570425345],"int64"), )
paddle.scatter(Tensor([1358, 1680193],"float32"), Tensor([4936],"int64"), Tensor([4936, 1680193],"float32"), overwrite=False, )
paddle.scatter(Tensor([1358, 128],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([1358, 128],"float32"), Tensor([17825793],"int64"), Tensor([17825793, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([1358, 462258],"float32"), Tensor([4936],"int64"), Tensor([4936, 462258],"float32"), overwrite=False, )
paddle.scatter(Tensor([15548, 146753],"float32"), Tensor([78112],"int64"), Tensor([78112, 146753],"float32"), overwrite=False, )
paddle.scatter(Tensor([15548, 128],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([15548, 128],"float32"), Tensor([17825793],"int64"), Tensor([17825793, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([15548, 29211],"float32"), Tensor([78112],"int64"), Tensor([78112, 29211],"float32"), overwrite=False, )
paddle.scatter(Tensor([214272, 10649],"float32"), Tensor([5551],"int32"), Tensor([5551, 10649],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([35651585],"int32"), Tensor([35651585, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 411044],"float32"), Tensor([5551],"int32"), Tensor([5551, 411044],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 10649],"float32"), Tensor([5633],"int32"), Tensor([5633, 10649],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([35651585],"int32"), Tensor([35651585, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 405060],"float32"), Tensor([5633],"int32"), Tensor([5633, 405060],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 10649],"float32"), Tensor([7355],"int32"), Tensor([7355, 10649],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([35651585],"int32"), Tensor([35651585, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 310225],"float32"), Tensor([7355],"int32"), Tensor([7355, 310225],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 10649],"float32"), Tensor([7485],"int32"), Tensor([7485, 10649],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([2281701379],"int32"), Tensor([2281701379, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 64],"float32"), Tensor([35651585],"int32"), Tensor([35651585, 64],"float32"), overwrite=True, )
paddle.scatter(Tensor([214272, 304837],"float32"), Tensor([7485],"int32"), Tensor([7485, 304837],"float32"), overwrite=True, )
paddle.scatter(Tensor([26736, 85342],"float32"), Tensor([105344],"int64"), Tensor([105344, 85342],"float32"), overwrite=False, )
paddle.scatter(Tensor([26736, 128],"float32"), Tensor([2281701379],"int64"), Tensor([2281701379, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([26736, 128],"float32"), Tensor([17825793],"int64"), Tensor([17825793, 128],"float32"), overwrite=False, )
paddle.scatter(Tensor([26736, 21660],"float32"), Tensor([105344],"int64"), Tensor([105344, 21660],"float32"), overwrite=False, )
paddle.scatter(Tensor([3, 3],"float32"), index=Tensor([2281701379],"int32"), updates=Tensor([2281701379, 3],"float32"), )
paddle.scatter(Tensor([3, 3],"float32"), index=Tensor([760567127],"int32"), updates=Tensor([760567127, 3],"float32"), )
paddle.scatter(Tensor([31, 73603271],"float32"), Tensor([16, 1],"int64"), Tensor([16, 73603271],"float32"), )
paddle.scatter(Tensor([31, 64],"float32"), Tensor([2281701379, 1],"int64"), Tensor([2281701379, 64],"float32"), )
paddle.scatter(Tensor([31, 64],"float32"), Tensor([35651585, 1],"int64"), Tensor([35651585, 64],"float32"), )
paddle.scatter(Tensor([31, 142606337],"float32"), Tensor([16, 1],"int64"), Tensor([16, 142606337],"float32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([2281701379],"int32"), updates=Tensor([2281701379],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([2281701379],"int32"), updates=Tensor([2281701379],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([2281701379],"int32"), updates=Tensor([2281701379],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([2281701379],"int32"), updates=Tensor([2281701379],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([2281701379],"int32"), updates=Tensor([2281701379],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([2281701379],"int32"), updates=Tensor([2281701379],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([2281701379],"int32"), updates=Tensor([2281701379],"int32"), )
paddle.scatter(Tensor([52640],"int32"), index=Tensor([2281701379],"int32"), updates=Tensor([2281701379],"int32"), )
paddle.scatter(Tensor([64],"int32"), Tensor([2281701379],"int64"), Tensor([2281701379],"int32"), overwrite=True, )
paddle.scatter(Tensor([64],"int32"), Tensor([2281701379],"int64"), Tensor([2281701379],"int32"), overwrite=True, )
paddle.scatter(Tensor([64],"int32"), Tensor([2281701379],"int64"), Tensor([2281701379],"int32"), overwrite=True, )
paddle.scatter(Tensor([64],"int32"), Tensor([2281701379],"int64"), Tensor([2281701379],"int32"), overwrite=True, )
paddle.scatter(Tensor([64],"int32"), Tensor([2281701379],"int64"), Tensor([2281701379],"int32"), overwrite=True, )
paddle.scatter(Tensor([64],"int32"), Tensor([2281701379],"int64"), Tensor([2281701379],"int32"), overwrite=True, )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[128,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[128,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"int64"), list[8,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"int64"), list[8,], )
paddle.scatter_nd(Tensor([1140850690, 2],"int64"), Tensor([1140850690, 9, 10],"float32"), list[3,5,9,10,], )
paddle.scatter_nd(Tensor([25352238, 2],"int64"), Tensor([25352238, 9, 10],"float32"), list[3,5,9,10,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[128,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[128,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"int64"), list[128,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"int64"), list[128,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[128,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[128,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[4,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[4,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"int64"), list[4,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"int64"), list[4,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[8,], )
paddle.scatter_nd(Tensor([2281701379, 1],"int64"), Tensor([2281701379],"float32"), list[8,], )
paddle.scatter_nd_add(Tensor([570425345, 2, 2],"float32"), Tensor([570425345, 3],"int64"), Tensor([570425345],"float32"), )
paddle.scatter_nd_add(Tensor([760567127, 2, 2],"float32"), Tensor([760567127, 3],"int64"), Tensor([760567127],"float32"), )
paddle.scatter_nd_add(Tensor([2281701379, 2, 2],"float32"), Tensor([2281701379, 3],"int64"), Tensor([2281701379],"float32"), )
paddle.scatter_nd_add(Tensor([190141782, 3, 4],"int64"), Tensor([190141782, 3],"int64"), Tensor([190141782],"int64"), )
paddle.scatter_nd_add(Tensor([2, 285212673, 4],"int64"), Tensor([2, 285212673],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([760567127, 3, 4],"int64"), Tensor([760567127, 3],"int64"), Tensor([760567127],"int64"), )
paddle.scatter_nd_add(Tensor([2, 1140850690, 4],"int64"), Tensor([2, 1140850690],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([2281701379, 3, 4],"int64"), Tensor([2281701379, 3],"int64"), Tensor([2281701379],"int64"), )
paddle.scatter_nd_add(Tensor([5070448, 5, 9, 10],"float32"), Tensor([5070448, 2],"int64"), Tensor([5070448, 9, 10],"float32"), )
paddle.scatter_nd_add(Tensor([3, 5, 15211343, 10],"float32"), Tensor([3, 2],"int64"), Tensor([3, 15211343, 10],"float32"), )
paddle.scatter_nd_add(Tensor([3, 5, 9, 16901492],"float32"), Tensor([3, 2],"int64"), Tensor([3, 9, 16901492],"float32"), )
paddle.scatter_nd_add(Tensor([1140850690, 5, 9, 10],"float32"), Tensor([1140850690, 2],"int64"), Tensor([1140850690, 9, 10],"float32"), )
paddle.scatter_nd_add(Tensor([25352238, 5, 9, 10],"float32"), Tensor([25352238, 2],"int64"), Tensor([25352238, 9, 10],"float32"), )
paddle.scatter_nd_add(Tensor([3, 5, 76056713, 10],"float32"), Tensor([3, 2],"int64"), Tensor([3, 76056713, 10],"float32"), )
paddle.scatter_nd_add(Tensor([3, 5, 9, 84507459],"float32"), Tensor([3, 2],"int64"), Tensor([3, 9, 84507459],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 67108865, 4, 2, 4],"float16"), index=Tensor([2, 67108865],"int64"), updates=Tensor([2, 2, 4],"float16"), )
paddle.scatter_nd_add(x=Tensor([2, 1140850690, 4, 2, 4],"float64"), index=Tensor([2, 1140850690],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([190141782, 3, 4],"float32"), index=Tensor([190141782, 3],"int64"), updates=Tensor([190141782],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 285212673, 4],"float32"), index=Tensor([2, 285212673],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([760567127, 3, 4],"float32"), index=Tensor([760567127, 3],"int64"), updates=Tensor([760567127],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 1140850690, 4],"float32"), index=Tensor([2, 1140850690],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([2281701379, 3, 4],"float32"), index=Tensor([2281701379, 3],"int64"), updates=Tensor([2281701379],"float32"), )
paddle.scatter_nd_add(x=Tensor([357913942, 3, 4],"float16"), index=Tensor([357913942, 3],"int64"), updates=Tensor([357913942],"float16"), )
paddle.scatter_nd_add(x=Tensor([2, 536870913, 4],"float16"), index=Tensor([2, 536870913],"int64"), updates=Tensor([2],"float16"), )
paddle.scatter_nd_add(x=Tensor([760567127, 3, 4],"float64"), index=Tensor([760567127, 3],"int64"), updates=Tensor([760567127],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 1140850690, 4],"float64"), index=Tensor([2, 1140850690],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([4294967297, 3, 4],"float16"), index=Tensor([4294967297, 3],"int64"), updates=Tensor([4294967297],"float16"), )
paddle.scatter_nd_add(x=Tensor([190141782, 3, 4],"int32"), index=Tensor([190141782, 3],"int64"), updates=Tensor([190141782],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 285212673, 4],"int32"), index=Tensor([2, 285212673],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([760567127, 3, 4],"int32"), index=Tensor([760567127, 3],"int64"), updates=Tensor([760567127],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 1140850690, 4],"int32"), index=Tensor([2, 1140850690],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([2281701379, 3, 4],"int32"), index=Tensor([2281701379, 3],"int64"), updates=Tensor([2281701379],"int32"), )
paddle.scatter_nd_add(x=Tensor([190141782, 3, 4],"int64"), index=Tensor([190141782, 3],"int64"), updates=Tensor([190141782],"int64"), )
paddle.scatter_nd_add(x=Tensor([2, 285212673, 4],"int64"), index=Tensor([2, 285212673],"int64"), updates=Tensor([2],"int64"), )
paddle.scatter_nd_add(x=Tensor([760567127, 3, 4],"int64"), index=Tensor([760567127, 3],"int64"), updates=Tensor([760567127],"int64"), )
paddle.scatter_nd_add(x=Tensor([2, 1140850690, 4],"int64"), index=Tensor([2, 1140850690],"int64"), updates=Tensor([2],"int64"), )
paddle.scatter_nd_add(x=Tensor([2281701379, 3, 4],"int64"), index=Tensor([2281701379, 3],"int64"), updates=Tensor([2281701379],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([760567127, 5],"float32"), values=Tensor([760567127, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([1431655766, 5],"float16"), values=Tensor([1431655766, 3],"float16"), )
paddle.searchsorted(sorted_sequence=Tensor([760567127, 5],"int32"), values=Tensor([760567127, 3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([760567127, 5],"int64"), values=Tensor([760567127, 3],"int64"), )
paddle.select_scatter(Tensor([6338060, 3, 4, 5, 6],"int32"), Tensor([6338060, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 9507090, 4, 5, 6],"int32"), Tensor([2, 9507090, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 15845149, 6],"int32"), Tensor([2, 3, 15845149, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 19014179],"int32"), Tensor([2, 3, 5, 19014179],"int32"), 2, 1, )
paddle.select_scatter(Tensor([25352238, 3, 4, 5, 6],"int32"), Tensor([25352238, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 38028357, 4, 5, 6],"int32"), Tensor([2, 38028357, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 63380594, 6],"int32"), Tensor([2, 3, 63380594, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 76056713],"int32"), Tensor([2, 3, 5, 76056713],"int32"), 2, 1, )
paddle.select_scatter(Tensor([71582789, 3, 4, 5],"float16"), Tensor([71582789, 3, 5],"float16"), 2, 1, )
paddle.select_scatter(Tensor([2, 107374183, 4, 5],"float16"), Tensor([2, 107374183, 5],"float16"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 178956971],"float16"), Tensor([2, 3, 178956971],"float16"), 2, 1, )
paddle.select_scatter(Tensor([286331154, 3, 4, 5],"float16"), Tensor([286331154, 3, 5],"float16"), 2, 1, )
paddle.select_scatter(Tensor([2, 429496730, 4, 5],"float16"), Tensor([2, 429496730, 5],"float16"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 715827883],"float16"), Tensor([2, 3, 715827883],"float16"), 2, 1, )
paddle.select_scatter(Tensor([190141782, 3, 4],"float32"), Tensor([190141782, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 380283564],"float32"), Tensor([2, 380283564],"float32"), 1, 1, )
paddle.select_scatter(Tensor([570425345, 3, 4],"float32"), Tensor([570425345, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 1140850690],"float32"), Tensor([2, 1140850690],"float32"), 1, 1, )
paddle.slice_scatter(Tensor([76056713, 6, 3, 5],"float32"), Tensor([76056713, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 28521268, 5],"float32"), Tensor([8, 2, 28521268, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 47535446],"float32"), Tensor([8, 2, 3, 47535446],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([143165577, 6, 3, 5],"float16"), Tensor([143165577, 2, 3, 5],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 53687092, 5],"float16"), Tensor([8, 2, 53687092, 5],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 89478486],"float16"), Tensor([8, 2, 3, 89478486],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([63380594, 6, 3, 9],"float32"), Tensor([63380594, 6, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 47535446, 3, 9],"float32"), Tensor([8, 47535446, 3, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 23767723, 9],"float32"), Tensor([8, 6, 23767723, 2],"float32"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([119304648, 6, 3, 9],"float16"), Tensor([119304648, 6, 3, 2],"float16"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 89478486, 3, 9],"float16"), Tensor([8, 89478486, 3, 2],"float16"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 44739243, 9],"float16"), Tensor([8, 6, 44739243, 2],"float16"), axes=list[3,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([380283564, 6, 3],"float32"), Tensor([380283564, 2, 3],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 142606337],"float32"), Tensor([8, 2, 142606337],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([715827883, 6, 3],"float16"), Tensor([715827883, 2, 3],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 268435457],"float16"), Tensor([8, 2, 268435457],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([2147483649, 6],"bfloat16"), Tensor([2147483649, 2],"bfloat16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([1140850690, 6],"bool"), Tensor([1140850690, 2],"bool"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([2147483649, 6],"float16"), Tensor([2147483649, 2],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([1140850690, 6],"float32"), Tensor([1140850690, 2],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([2147483649, 6],"float16"), Tensor([2147483649, 2],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([2147483649, 6],"int16"), Tensor([2147483649, 2],"int16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([1140850690, 6],"int32"), Tensor([1140850690, 2],"int32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([1140850690, 6],"int64"), Tensor([1140850690, 2],"int64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([2147483649, 6],"int8"), Tensor([2147483649, 2],"int8"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([2147483649, 6],"uint8"), Tensor([2147483649, 2],"uint8"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 2281701379, 6],"float32"), Tensor([1, 2281701379, 1],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 4294967297, 6],"float16"), Tensor([1, 4294967297, 1],"float16"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([2281701379, 9],"float32"), Tensor([2281701379, 1],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([4294967297, 9],"float16"), Tensor([4294967297, 1],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.squeeze(Tensor([1, 760567127, 1, 3],"float32"), axis=Tensor([760567127],"int64"), )
paddle.squeeze(Tensor([1, 2281701379, 1, 3],"float32"), axis=Tensor([2281701379],"int64"), )
paddle.squeeze(x=Tensor([1, 1431655766, 1, 3],"float16"), axis=Tensor([1431655766],"int64"), )
paddle.squeeze(x=Tensor([1, 2281701379, 1, 3],"float64"), axis=Tensor([2281701379],"int64"), )
paddle.subtract(Tensor([10, 228170138],"float32"), Tensor([228170138],"float32"), )
paddle.subtract(Tensor([10, 2281701379],"float32"), Tensor([2281701379],"float32"), )
paddle.subtract(Tensor([2281701379],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.subtract(Tensor([2281701379],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.subtract(Tensor([760567127, 3, 3, 4],"float32"), Tensor([760567127, 3, 1, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 126761188],"float32"), Tensor([3, 1, 126761188],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 760567127],"float32"), Tensor([3, 1, 760567127],"float32"), )
paddle.subtract(Tensor([2281701379],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.subtract(Tensor([2281701379],"float32"), Tensor([2281701379, 1],"float32"), )
paddle.take_along_axis(Tensor([633806, 36828, 4],"float32"), Tensor([633806, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([1, 36828, 2535224],"float32"), Tensor([1, 900, 2535224],"int64"), 1, )
paddle.take_along_axis(Tensor([633806, 38367, 4],"float32"), Tensor([633806, 900, 4],"int64"), 1, )
paddle.take_along_axis(Tensor([1, 38367, 2535224],"float32"), Tensor([1, 900, 2535224],"int64"), 1, )
paddle.take_along_axis(Tensor([1901418, 6380, 4],"float32"), Tensor([1901418, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([1, 6380, 7605672],"float32"), Tensor([1, 300, 7605672],"int64"), axis=1, )
paddle.take_along_axis(Tensor([1901418, 8550, 4],"float32"), Tensor([1901418, 300, 4],"int64"), axis=1, )
paddle.take_along_axis(Tensor([1, 8550, 7605672],"float32"), Tensor([1, 300, 7605672],"int64"), axis=1, )
paddle.take_along_axis(Tensor([2281701379, 8],"float32"), Tensor([2281701379, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([11641334, 4, 7, 14],"float32"), axis=-1, indices=Tensor([11641334, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([13, 3581949, 7, 14],"float32"), axis=-1, indices=Tensor([13, 3581949, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([2, 536870913, 4],"float16"), Tensor([1, 536870913, 4],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2, 3, 715827883],"float16"), Tensor([1, 3, 715827883],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2, 570425345, 4],"float64"), Tensor([1, 570425345, 4],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2, 3, 760567127],"float64"), Tensor([1, 3, 760567127],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2281701379, 3],"float32"), Tensor([2281701379, 1],"int32"), axis=1, )
paddle.take_along_axis(Tensor([2, 2147483649],"float16"), Tensor([1, 2147483649],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2, 2281701379],"float64"), Tensor([1, 2281701379],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2281701379, 5],"float32"), Tensor([2281701379, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([228170138, 2, 5],"float32"), Tensor([1, 1, 228170138],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([2281701379, 2, 5],"float32"), Tensor([1, 1, 2281701379],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([456340276, 5],"float32"), Tensor([1, 456340276],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([2281701379, 5],"float32"), Tensor([1, 2281701379],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([1140850690, 5],"float32"), Tensor([1140850690, 2],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([858993460, 5],"float16"), Tensor([1, 858993460],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([2281701379, 5],"float64"), Tensor([1, 2281701379],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 11930465, 3, 4, 2, 5],"float16"), Tensor([3, 11930465, 3, 1, 2, 5],"int32"), axis=3, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 3976822, 5],"float16"), Tensor([3, 6, 3, 1, 3976822, 5],"int32"), axis=3, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 2, 9942054],"float16"), Tensor([3, 6, 3, 1, 2, 9942054],"int32"), axis=3, )
paddle.take_along_axis(Tensor([3, 25352238, 3, 4, 2, 5],"float64"), Tensor([3, 25352238, 3, 1, 2, 5],"int32"), axis=3, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 8450746, 5],"float64"), Tensor([3, 6, 3, 1, 8450746, 5],"int32"), axis=3, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 2, 21126865],"float64"), Tensor([3, 6, 3, 1, 2, 21126865],"int32"), axis=3, )
paddle.take_along_axis(Tensor([3, 11930465, 3, 4, 2, 5],"float16"), Tensor([3, 11930465, 3, 4, 1, 5],"int32"), axis=4, )
paddle.take_along_axis(Tensor([3, 6, 3, 7953644, 2, 5],"float16"), Tensor([3, 6, 3, 7953644, 1, 5],"int32"), axis=4, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 2, 9942054],"float16"), Tensor([3, 6, 3, 4, 1, 9942054],"int32"), axis=4, )
paddle.take_along_axis(Tensor([3, 12676119, 3, 4, 2, 5],"float64"), Tensor([3, 12676119, 3, 4, 1, 5],"int32"), axis=4, )
paddle.take_along_axis(Tensor([3, 6, 3, 8450746, 2, 5],"float64"), Tensor([3, 6, 3, 8450746, 1, 5],"int32"), axis=4, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 2, 10563433],"float64"), Tensor([3, 6, 3, 4, 1, 10563433],"int32"), axis=4, )
paddle.take_along_axis(Tensor([3, 11930465, 3, 4, 2, 5],"float16"), Tensor([3, 11930465, 3, 4, 2, 1],"int32"), axis=5, )
paddle.take_along_axis(Tensor([3, 6, 3, 7953644, 2, 5],"float16"), Tensor([3, 6, 3, 7953644, 2, 1],"int32"), axis=5, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 3976822, 5],"float16"), Tensor([3, 6, 3, 4, 3976822, 1],"int32"), axis=5, )
paddle.take_along_axis(Tensor([3, 31690297, 3, 4, 2, 5],"float64"), Tensor([3, 31690297, 3, 4, 2, 1],"int32"), axis=5, )
paddle.take_along_axis(Tensor([3, 6, 3, 21126865, 2, 5],"float64"), Tensor([3, 6, 3, 21126865, 2, 1],"int32"), axis=5, )
paddle.take_along_axis(Tensor([3, 6, 3, 4, 10563433, 5],"float64"), Tensor([3, 6, 3, 4, 10563433, 1],"int32"), axis=5, )
paddle.take_along_axis(Tensor([2281701379, 5],"float32"), Tensor([2281701379, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([2281701379, 5],"float32"), Tensor([2281701379, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 1140850690, 2],"float32"), Tensor([1, 1140850690, 2],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 3, 760567127],"float32"), Tensor([1, 3, 760567127],"int64"), axis=1, )
paddle.take_along_axis(Tensor([102261127, 7, 6],"float16"), Tensor([102261127, 1, 6],"int32"), axis=1, )
paddle.take_along_axis(Tensor([4, 7, 153391690],"float16"), Tensor([4, 1, 153391690],"int32"), axis=1, )
paddle.take_along_axis(Tensor([380283564, 7, 6],"float64"), Tensor([380283564, 1, 6],"int32"), axis=1, )
paddle.take_along_axis(Tensor([4, 7, 570425345],"float64"), Tensor([4, 1, 570425345],"int32"), axis=1, )
paddle.take_along_axis(Tensor([102261127, 7, 6],"float16"), Tensor([102261127, 7, 1],"int32"), axis=2, )
paddle.take_along_axis(Tensor([4, 178956971, 6],"float16"), Tensor([4, 178956971, 1],"int32"), axis=2, )
paddle.take_along_axis(Tensor([325957340, 7, 6],"float64"), Tensor([325957340, 7, 1],"int32"), axis=2, )
paddle.take_along_axis(Tensor([4, 570425345, 6],"float64"), Tensor([4, 570425345, 1],"int32"), axis=2, )
paddle.take_along_axis(Tensor([357913942, 3, 4],"float16"), Tensor([357913942, 1, 4],"int32"), axis=1, )
paddle.take_along_axis(Tensor([5, 3, 286331154],"float16"), Tensor([5, 1, 286331154],"int32"), axis=1, )
paddle.take_along_axis(Tensor([570425345, 3, 4],"float64"), Tensor([570425345, 1, 4],"int32"), axis=1, )
paddle.take_along_axis(Tensor([5, 3, 456340276],"float64"), Tensor([5, 1, 456340276],"int32"), axis=1, )
paddle.take_along_axis(Tensor([11641334, 4, 7, 14],"float32"), axis=-1, indices=Tensor([11641334, 4, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([52, 895488, 7, 14],"float32"), axis=-1, indices=Tensor([52, 895488, 7, 7],"int64"), )
paddle.take_along_axis(Tensor([424424, 63, 768],"float32"), axis=1, indices=Tensor([424424, 7, 768],"int64"), )
paddle.take_along_axis(Tensor([8, 63, 40744668],"float32"), axis=1, indices=Tensor([8, 7, 40744668],"int64"), )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[0,], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[0,], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 4294967297],"float16"), Tensor([1, 4294967297, 1, 1],"float16"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2281701379],"int64"),Tensor([2281701379],"int64"),), )
paddle.tensordot(x=Tensor([2, 38347923, 4, 2],"float16"), y=Tensor([2, 38347923, 8, 7],"float16"), axes=list[0,1,], )
paddle.tensordot(x=Tensor([2, 3, 38347923, 2],"float16"), y=Tensor([8, 7, 38347923, 2],"float16"), axes=list[2,3,], )
paddle.tensordot(x=Tensor([214748365, 4, 3, 5],"float16"), y=Tensor([214748365, 4, 1, 5],"float16"), axes=list[0,2,], )
paddle.tensordot(x=Tensor([2, 429496730, 3, 5],"float16"), y=Tensor([2, 429496730, 1, 5],"float16"), axes=list[0,2,], )
paddle.tensordot(x=Tensor([2, 4, 3, 536870913],"float16"), y=Tensor([2, 4, 1, 536870913],"float16"), axes=list[0,2,], )
paddle.tensordot(x=Tensor([2, 7, 43826197, 2],"float16"), y=Tensor([7, 7, 43826197, 2],"float16"), axes=list[tuple(1,2,3,),tuple(0,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 43826197, 2],"float16"), y=Tensor([7, 7, 43826197, 2],"float16"), axes=tuple(list[1,2,3,],list[0,2,3,],), )
paddle.tensordot(x=Tensor([2, 7, 43826197, 2],"float16"), y=Tensor([7, 7, 43826197, 2],"float16"), axes=tuple(list[1,2,3,],list[0,2,3,],list[4,5,6,],), )
paddle.tensordot(x=Tensor([2, 67108865, 4, 2],"float16"), y=Tensor([8, 67108865, 4, 2],"float16"), axes=list[tuple(1,2,3,),], )
paddle.tensordot(x=Tensor([2, 7, 38347923, 2],"float16"), y=Tensor([8, 7, 38347923, 2],"float16"), axes=list[tuple(1,2,3,),], )
paddle.tensordot(x=Tensor([4, 17895698, 3, 5, 4],"float16"), y=Tensor([17895698, 4, 3, 5, 8],"float16"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 8947849, 3, 5, 4],"float16"), y=Tensor([8947849, 4, 3, 5, 8],"float16"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 2, 13421773, 5, 4],"float16"), y=Tensor([2, 4, 13421773, 5, 8],"float16"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([4, 2, 3, 22369622, 4],"float16"), y=Tensor([2, 4, 3, 22369622, 8],"float16"), axes=list[list[0,1,2,3,],list[1,0,],], )
paddle.tensordot(x=Tensor([536870913, 3, 5],"float16"), y=Tensor([536870913, 1, 8],"float16"), axes=list[0,1,], )
paddle.unsqueeze(x=Tensor([2, 2147483649],"float16"), axis=Tensor([2147483649],"int64"), )
paddle.unsqueeze(x=Tensor([2, 2281701379],"float64"), axis=Tensor([2281701379],"int64"), )
paddle.view_as(Tensor([10, 10, 10, 2281702],"float32"), Tensor([10, 100, 2281702],"float32"), )
paddle.view_as(Tensor([10, 10, 10, 2281702],"float32"), Tensor([10, 100, 2281702],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([30422686, 3, 5, 5],"float32"), Tensor([30422686, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([30422686, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([5070448, 3, 5, 5],"float32"), Tensor([5070448, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([5070448, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([10140896, 3, 5, 5],"float32"), Tensor([10140896, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, Tensor([10140896, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([30422686, 3, 5, 5],"float32"), Tensor([30422686, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([5070448, 3, 5, 5],"float32"), Tensor([5070448, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([30422686, 3, 5, 5],"float32"), Tensor([30422686, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([30422686, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([5070448, 3, 5, 5],"float32"), Tensor([5070448, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([5070448, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([10140896, 3, 5, 5],"float32"), Tensor([10140896, 18, 5, 5],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[2,2,], list[3,3,], list[1,1,], 1, 1, Tensor([10140896, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([2, 45634028, 5, 5],"float32"), Tensor([2, 2, 5, 5],"float32"), Tensor([40, 45634028, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 57042535, 5, 5],"float32"), Tensor([2, 2, 5, 5],"float32"), Tensor([40, 57042535, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([35651585, 4, 4, 4],"float32"), Tensor([35651585, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([7922575, 4, 4, 4],"float32"), Tensor([7922575, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([17825793, 8, 4, 4],"float32"), Tensor([17825793, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([7922575, 8, 4, 4],"float32"), Tensor([7922575, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.deform_conv2d(Tensor([17825793, 8, 4, 4],"float32"), Tensor([17825793, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([17825793, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([7922575, 8, 4, 4],"float32"), Tensor([7922575, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([7922575, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([15845149, 8, 4, 4],"float32"), Tensor([15845149, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, Tensor([15845149, 9, 4, 4],"float32"), )
paddle.vision.ops.deform_conv2d(Tensor([47535446, 3, 4, 4],"float32"), Tensor([47535446, 18, 4, 4],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([7922575, 3, 4, 4],"float32"), Tensor([7922575, 18, 4, 4],"float32"), Tensor([6, 3, 3, 3],"float32"), None, list[1,1,], list[2,2,], list[2,2,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(x=Tensor([44565, 512, 10, 10],"float32"), offset=Tensor([44565, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([44565, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([1267612, 512, 10, 10],"float32"), offset=Tensor([1267612, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([1267612, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([2535224, 512, 10, 10],"float32"), offset=Tensor([2535224, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([2535224, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([11142, 512, 20, 20],"float32"), offset=Tensor([11142, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([11142, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([1267612, 512, 20, 20],"float32"), offset=Tensor([1267612, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([1267612, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([2535224, 512, 20, 20],"float32"), offset=Tensor([2535224, 18, 10, 10],"float32"), weight=Tensor([512, 512, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([2535224, 9, 10, 10],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([1725, 128, 76, 136],"float32"), offset=Tensor([1725, 18, 76, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([1725, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 6554, 136],"float32"), offset=Tensor([20, 18, 6554, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 6554, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 76, 11728],"float32"), offset=Tensor([20, 18, 76, 11728],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 11728],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12265, 128, 76, 136],"float32"), offset=Tensor([12265, 18, 76, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([12265, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 46604, 136],"float32"), offset=Tensor([20, 18, 46604, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 46604, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 76, 83396],"float32"), offset=Tensor([20, 18, 76, 83396],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 83396],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([24529, 128, 76, 136],"float32"), offset=Tensor([24529, 18, 76, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([24529, 9, 76, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 93207, 136],"float32"), offset=Tensor([20, 18, 93207, 136],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 93207, 136],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([20, 128, 76, 166792],"float32"), offset=Tensor([20, 18, 76, 166792],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=Tensor([128],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([20, 9, 76, 166792],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([45634028, 2, 5, 5],"float32"), offset=Tensor([45634028, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 22817014, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 22817014, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 2, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 50704476, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 50704476, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([45634028, 2, 5, 5],"float32"), offset=Tensor([45634028, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 22817014, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 22817014, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 2, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 50704476, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 50704476, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([45634028, 2, 5, 5],"float32"), offset=Tensor([45634028, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([45634028, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 22817014, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 22817014, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 2, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([14084577, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 50704476, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 50704476, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([28169153, 2, 5, 5],"float32"), offset=Tensor([28169153, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([28169153, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([126761188, 3, 5, 5],"float32"), offset=Tensor([126761188, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([126761188, 3, 5, 5],"float32"), offset=Tensor([126761188, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=Tensor([30422686, 9, 1, 1],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([126761188, 3, 5, 5],"float32"), offset=Tensor([126761188, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=Tensor([126761188, 9, 1, 1],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([253522376, 3, 5, 5],"float32"), offset=Tensor([253522376, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=Tensor([253522376, 9, 1, 1],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 3, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 3, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([30422686, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([14084577, 3, 5, 5],"float32"), offset=Tensor([14084577, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([14084577, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([28169153, 3, 5, 5],"float32"), offset=Tensor([28169153, 18, 3, 3],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([28169153, 9, 3, 3],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([3621749, 3, 5, 5],"float32"), offset=Tensor([3621749, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([3621749, 3, 5, 5],"float32"), offset=Tensor([3621749, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([30422686, 9, 5, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([3621749, 3, 5, 5],"float32"), offset=Tensor([3621749, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([3621749, 9, 5, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 5, 6338060],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 5, 6338060],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([7243497, 3, 5, 5],"float32"), offset=Tensor([7243497, 18, 5, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([7243497, 9, 5, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 5, 12676119],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 5, 12676119],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([30422686, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([2586964, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([5173927, 3, 5, 5],"float32"), offset=Tensor([5173927, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([5173927, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([30422686, 3, 5, 5],"float32"), offset=Tensor([30422686, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([30422686, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([2586964, 3, 5, 5],"float32"), offset=Tensor([2586964, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([2586964, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([5173927, 3, 5, 5],"float32"), offset=Tensor([5173927, 18, 7, 7],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[2,2,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=Tensor([5173927, 9, 7, 7],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([17409, 32, 64, 64],"float32"), offset=Tensor([17409, 144, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([17409, 72, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([3869, 32, 64, 64],"float32"), offset=Tensor([3869, 144, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([3869, 72, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([7737, 32, 64, 64],"float32"), offset=Tensor([7737, 144, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=8, groups=1, mask=Tensor([7737, 72, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([17409, 32, 64, 64],"float32"), offset=Tensor([17409, 72, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=4, groups=1, mask=Tensor([17409, 36, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([7737, 32, 64, 64],"float32"), offset=Tensor([7737, 72, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=4, groups=1, mask=Tensor([7737, 36, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([15474, 32, 64, 64],"float32"), offset=Tensor([15474, 72, 64, 64],"float32"), weight=Tensor([32, 32, 3, 3],"float32"), bias=Tensor([32],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=4, groups=1, mask=Tensor([15474, 36, 64, 64],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([18253612, 5, 5, 5],"float32"), offset=Tensor([18253612, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, )
paddle.vision.ops.deform_conv2d(x=Tensor([5070448, 5, 5, 5],"float32"), offset=Tensor([5070448, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, )
paddle.vision.ops.deform_conv2d(x=Tensor([18253612, 5, 5, 5],"float32"), offset=Tensor([18253612, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([5070448, 5, 5, 5],"float32"), offset=Tensor([5070448, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([18253612, 5, 5, 5],"float32"), offset=Tensor([18253612, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=Tensor([18253612, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([5070448, 5, 5, 5],"float32"), offset=Tensor([5070448, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=Tensor([5070448, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([10140896, 5, 5, 5],"float32"), offset=Tensor([10140896, 18, 5, 5],"float32"), weight=Tensor([5, 1, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=1, groups=5, mask=Tensor([10140896, 9, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([18253612, 5, 5, 5],"float32"), offset=Tensor([18253612, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([1014090, 5, 5, 5],"float32"), offset=Tensor([1014090, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([18253612, 5, 5, 5],"float32"), offset=Tensor([18253612, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([1014090, 5, 5, 5],"float32"), offset=Tensor([1014090, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([18253612, 5, 5, 5],"float32"), offset=Tensor([18253612, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=Tensor([18253612, 45, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([1014090, 5, 5, 5],"float32"), offset=Tensor([1014090, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=Tensor([1014090, 45, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([2028180, 5, 5, 5],"float32"), offset=Tensor([2028180, 90, 5, 5],"float32"), weight=Tensor([5, 5, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=5, groups=1, mask=Tensor([2028180, 45, 5, 5],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([1783, 128, 100, 100],"float32"), offset=Tensor([1783, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([1783, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6339, 128, 100, 100],"float32"), offset=Tensor([6339, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6339, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12677, 128, 100, 100],"float32"), offset=Tensor([12677, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([12677, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([446, 128, 200, 200],"float32"), offset=Tensor([446, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([446, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([6339, 128, 200, 200],"float32"), offset=Tensor([6339, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([6339, 18, 100, 100],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([12677, 128, 200, 200],"float32"), offset=Tensor([12677, 36, 100, 100],"float32"), weight=Tensor([128, 128, 3, 3],"float32"), bias=None, stride=list[2,2,], padding=list[1,1,], dilation=list[1,1,], deformable_groups=2, groups=1, mask=Tensor([12677, 18, 100, 100],"float32"), )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 59652324],"float16"), Tensor([59652324, 4],"float16"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 1073741825],"float16"), Tensor([1073741825, 4],"float16"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, False, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 59652324],"float16"), Tensor([59652324, 4],"float16"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, True, )
paddle.vision.ops.roi_align(Tensor([3, 3, 8, 1073741825],"float16"), Tensor([1073741825, 4],"float16"), Tensor([3],"int32"), tuple(2,2,), 0.5, -1, True, )
paddle.vision.ops.roi_align(x=Tensor([929, 1024, 40, 60],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([929],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 1024, 40, 60],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([843, 1024, 42, 63],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([843],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 1024, 42, 63],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([859, 1024, 44, 59],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([859],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 1024, 44, 59],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([768, 1024, 44, 66],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([768],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 1024, 44, 66],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([734, 1024, 44, 69],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([734],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 1024, 44, 69],"float32"), boxes=Tensor([512, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.0625, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([103, 4],"float32"), boxes_num=Tensor([587],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 100, 152],"float32"), boxes=Tensor([103, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([115, 4],"float32"), boxes_num=Tensor([587],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 100, 152],"float32"), boxes=Tensor([115, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([124, 4],"float32"), boxes_num=Tensor([587],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 100, 152],"float32"), boxes=Tensor([124, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([133, 4],"float32"), boxes_num=Tensor([587],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 100, 152],"float32"), boxes=Tensor([133, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([587, 256, 100, 152],"float32"), boxes=Tensor([159, 4],"float32"), boxes_num=Tensor([587],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 100, 152],"float32"), boxes=Tensor([159, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([82527, 256, 12, 9],"float32"), boxes=Tensor([5, 4],"float32"), boxes_num=Tensor([82527],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 12, 9],"float32"), boxes=Tensor([5, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.015625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([310, 256, 144, 200],"float32"), boxes=Tensor([462, 4],"float32"), boxes_num=Tensor([310],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 144, 200],"float32"), boxes=Tensor([462, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([258, 256, 160, 216],"float32"), boxes=Tensor([200, 4],"float32"), boxes_num=Tensor([258],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 160, 216],"float32"), boxes=Tensor([200, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([258, 256, 160, 216],"float32"), boxes=Tensor([208, 4],"float32"), boxes_num=Tensor([258],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 160, 216],"float32"), boxes=Tensor([208, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([233, 256, 160, 240],"float32"), boxes=Tensor([113, 4],"float32"), boxes_num=Tensor([233],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 160, 240],"float32"), boxes=Tensor([113, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([233, 256, 160, 240],"float32"), boxes=Tensor([145, 4],"float32"), boxes_num=Tensor([233],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 160, 240],"float32"), boxes=Tensor([145, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.25, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([29710, 256, 20, 15],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([29710],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 20, 15],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([16506, 256, 20, 27],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([16506],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 20, 27],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([16506, 256, 20, 27],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([16506],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 20, 27],"float32"), boxes=Tensor([16, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([16506, 256, 20, 27],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([16506],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 20, 27],"float32"), boxes=Tensor([9, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([10, 4],"float32"), boxes_num=Tensor([14855],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 20, 30],"float32"), boxes=Tensor([10, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([14855],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 20, 30],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([14855],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([14855],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 20, 30],"float32"), boxes=Tensor([13, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([14855, 256, 20, 30],"float32"), boxes=Tensor([14, 4],"float32"), boxes_num=Tensor([14855],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 20, 30],"float32"), boxes=Tensor([14, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.03125, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([8705, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([8705],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([4952, 256, 36, 50],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([4952],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 36, 50],"float32"), boxes=Tensor([11, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([7428, 256, 40, 30],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([7428],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 40, 30],"float32"), boxes=Tensor([34, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([4127, 256, 40, 54],"float32"), boxes=Tensor([116, 4],"float32"), boxes_num=Tensor([4127],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 40, 54],"float32"), boxes=Tensor([116, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([4127, 256, 40, 54],"float32"), boxes=Tensor([119, 4],"float32"), boxes_num=Tensor([4127],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 40, 54],"float32"), boxes=Tensor([119, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([3714, 256, 40, 60],"float32"), boxes=Tensor([3714, 4],"float32"), boxes_num=Tensor([3714],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([570425345, 256, 40, 60],"float32"), boxes=Tensor([570425345, 4],"float32"), boxes_num=Tensor([570425345],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 40, 60],"float32"), boxes=Tensor([2281701379, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([3714, 256, 40, 60],"float32"), boxes=Tensor([142, 4],"float32"), boxes_num=Tensor([3714],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 40, 60],"float32"), boxes=Tensor([142, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=7, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([3714, 256, 40, 60],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([3714],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 40, 60],"float32"), boxes=Tensor([17, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([3714, 256, 40, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([3714],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_align(x=Tensor([2281701379, 256, 40, 60],"float32"), boxes=Tensor([18, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=14, spatial_scale=0.0625, sampling_ratio=0, aligned=True, )
paddle.vision.ops.roi_pool(Tensor([8705, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([8705],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([2281701379, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=3, )
paddle.vision.ops.roi_pool(Tensor([8705, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([8705],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(Tensor([2281701379, 256, 32, 32],"float32"), Tensor([3, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=tuple(3,4,), )
paddle.vision.ops.roi_pool(Tensor([3, 3, 119304648, 4],"float16"), Tensor([119304648, 4],"float16"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(Tensor([3, 3, 6, 79536432],"float16"), Tensor([6, 79536432],"float16"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(Tensor([3, 3, 1073741825, 4],"float16"), Tensor([1073741825, 4],"float16"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(Tensor([3, 3, 6, 715827883],"float16"), Tensor([6, 715827883],"float16"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(x=Tensor([8705, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([8705],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vision.ops.roi_pool(x=Tensor([2281701379, 256, 32, 32],"float32"), boxes=Tensor([3, 4],"float32"), boxes_num=Tensor([2281701379],"int32"), output_size=tuple(4,3,), spatial_scale=1.0, )
paddle.vstack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297],"float16"),], )
paddle.vstack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297],"float16"),], )
paddle.vstack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297],"float16"),], name=None, )
paddle.vstack(list[Tensor([4294967297],"float16"),Tensor([1, 4294967297],"float16"),], name=None, )
paddle.where(Tensor([1, 1, 1],"bool"), Tensor([1, 1, 2281701379],"float32"), Tensor([1, 1, 2281701379],"float32"), )
paddle.where(Tensor([1, 1, 1],"bool"), Tensor([1, 1, 2281701379],"float32"), Tensor([1, 1, 2281701379],"float32"), )
paddle.where(Tensor([1, 1, 1],"bool"), Tensor([1, 1, 2281701379],"float32"), Tensor([1, 1, 2281701379],"float32"), )
paddle.where(Tensor([1, 1, 1],"bool"), Tensor([1, 1, 2281701379],"float32"), Tensor([1, 1, 2281701379],"float32"), )
paddle.where(Tensor([760567127, 3],"bool"), Tensor([3, 3],"float32"), Tensor([760567127],"float32"), )
paddle.where(Tensor([2281701379, 3],"bool"), Tensor([3, 3],"float32"), Tensor([2281701379],"float32"), )
paddle.where(Tensor([10, 10, 22817014],"bool"), Tensor([10, 10, 22817014],"float64"), Tensor([1],"float64"), )
paddle.where(Tensor([10, 10, 42949673],"bool"), Tensor([10, 10, 42949673],"float16"), Tensor([1],"float16"), )
paddle.where(Tensor([253522376, 9],"bool"), Tensor([1],"int32"), Tensor([253522376, 9],"int32"), )
paddle.where(Tensor([13, 175515491],"bool"), Tensor([1],"int32"), Tensor([13, 175515491],"int32"), )
paddle.where(Tensor([253522376, 9],"bool"), Tensor([1],"int32"), Tensor([253522376, 9],"int32"), )
paddle.where(Tensor([13, 175515491],"bool"), Tensor([1],"int32"), Tensor([13, 175515491],"int32"), )
paddle.where(Tensor([2, 1],"bool"), Tensor([2, 2, 570425345],"float32"), Tensor([2, 2, 570425345],"float32"), )
paddle.where(Tensor([2, 1],"bool"), Tensor([2, 2, 570425345],"float32"), Tensor([2, 2, 570425345],"float32"), )
paddle.where(Tensor([2, 1140850690],"bool"), Tensor([2, 2, 1140850690],"float32"), Tensor([2, 2, 1140850690],"float32"), )
paddle.where(Tensor([2, 570425345],"bool"), Tensor([2, 2, 570425345],"float32"), Tensor([2, 2, 570425345],"float32"), )
paddle.where(Tensor([2, 570425345],"bool"), Tensor([2, 2, 570425345],"float32"), Tensor([2, 2, 570425345],"float32"), )
paddle.where(Tensor([2281701379, 1],"bool"), Tensor([2281701379, 40],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([3, 760567127],"bool"), Tensor([3, 40],"float32"), Tensor([760567127],"float32"), )
paddle.where(Tensor([57042535, 1],"bool"), Tensor([57042535, 40],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([3, 2281701379],"bool"), Tensor([3, 40],"float32"), Tensor([2281701379],"float32"), )
paddle.where(Tensor([3, 2, 2, 4],"bool"), Tensor([2, 2, 570425345],"float32"), Tensor([2, 2, 570425345],"float32"), )
paddle.where(Tensor([3, 2, 2, 4],"bool"), Tensor([2, 2, 570425345],"float32"), Tensor([2, 2, 570425345],"float32"), )
paddle.where(Tensor([3, 2, 2, 190141782],"bool"), Tensor([2, 2, 190141782],"float32"), Tensor([2, 2, 190141782],"float32"), )
paddle.where(Tensor([3, 2, 2, 570425345],"bool"), Tensor([2, 2, 570425345],"float32"), Tensor([2, 2, 570425345],"float32"), )
paddle.where(Tensor([3, 2, 2, 570425345],"bool"), Tensor([2, 2, 570425345],"float32"), Tensor([2, 2, 570425345],"float32"), )
paddle.where(Tensor([3, 2, 3, 12676119, 5, 1, 2],"bool"), Tensor([3, 2, 3, 12676119, 5, 1, 2],"float64"), Tensor([3, 2, 3, 12676119, 5, 1, 2],"float64"), )
paddle.where(Tensor([3, 2, 3, 4, 15845149, 1, 2],"bool"), Tensor([3, 2, 3, 4, 15845149, 1, 2],"float64"), Tensor([3, 2, 3, 4, 15845149, 1, 2],"float64"), )
paddle.where(Tensor([3, 2, 3, 4, 5, 3169030, 2],"bool"), Tensor([3, 2, 3, 4, 5, 3169030, 2],"float64"), Tensor([3, 2, 3, 4, 5, 3169030, 2],"float64"), )
paddle.where(Tensor([3, 2, 3, 23860930, 5, 1, 2],"bool"), Tensor([3, 2, 3, 23860930, 5, 1, 2],"float16"), Tensor([3, 2, 3, 23860930, 5, 1, 2],"float16"), )
paddle.where(Tensor([3, 2, 3, 4, 29826162, 1, 2],"bool"), Tensor([3, 2, 3, 4, 29826162, 1, 2],"float16"), Tensor([3, 2, 3, 4, 29826162, 1, 2],"float16"), )
paddle.where(Tensor([3, 2, 3, 4, 5, 5965233, 2],"bool"), Tensor([3, 2, 3, 4, 5, 5965233, 2],"float16"), Tensor([3, 2, 3, 4, 5, 5965233, 2],"float16"), )
paddle.where(Tensor([3, 2, 3, 23860930, 5, 1, 2],"bool"), Tensor([3, 2, 3, 23860930, 5, 1, 2],"float16"), Tensor([3, 2, 3, 23860930, 5, 1, 2],"float16"), )
paddle.where(Tensor([3, 2, 3, 4, 29826162, 1, 2],"bool"), Tensor([3, 2, 3, 4, 29826162, 1, 2],"float16"), Tensor([3, 2, 3, 4, 29826162, 1, 2],"float16"), )
paddle.where(Tensor([3, 2, 3, 4, 5, 5965233, 2],"bool"), Tensor([3, 2, 3, 4, 5, 5965233, 2],"float16"), Tensor([3, 2, 3, 4, 5, 5965233, 2],"float16"), )
paddle.where(Tensor([3, 25352238, 3, 1, 2, 5],"bool"), Tensor([3, 25352238, 3, 1, 2, 5],"float64"), Tensor([3, 25352238, 3, 1, 2, 5],"float64"), )
paddle.where(Tensor([3, 6, 3, 4225373, 2, 5],"bool"), Tensor([3, 6, 3, 4225373, 2, 5],"float64"), Tensor([3, 6, 3, 4225373, 2, 5],"float64"), )
paddle.where(Tensor([3, 6, 3, 1, 8450746, 5],"bool"), Tensor([3, 6, 3, 1, 8450746, 5],"float64"), Tensor([3, 6, 3, 1, 8450746, 5],"float64"), )
paddle.where(Tensor([3, 6, 3, 1, 2, 21126865],"bool"), Tensor([3, 6, 3, 1, 2, 21126865],"float64"), Tensor([3, 6, 3, 1, 2, 21126865],"float64"), )
paddle.where(Tensor([3, 47721859, 3, 1, 2, 5],"bool"), Tensor([3, 47721859, 3, 1, 2, 5],"float16"), Tensor([3, 47721859, 3, 1, 2, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 7953644, 2, 5],"bool"), Tensor([3, 6, 3, 7953644, 2, 5],"float16"), Tensor([3, 6, 3, 7953644, 2, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 1, 15907287, 5],"bool"), Tensor([3, 6, 3, 1, 15907287, 5],"float16"), Tensor([3, 6, 3, 1, 15907287, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 1, 2, 39768216],"bool"), Tensor([3, 6, 3, 1, 2, 39768216],"float16"), Tensor([3, 6, 3, 1, 2, 39768216],"float16"), )
paddle.where(Tensor([3, 47721859, 3, 1, 2, 5],"bool"), Tensor([3, 47721859, 3, 1, 2, 5],"float16"), Tensor([3, 47721859, 3, 1, 2, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 7953644, 2, 5],"bool"), Tensor([3, 6, 3, 7953644, 2, 5],"float16"), Tensor([3, 6, 3, 7953644, 2, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 1, 15907287, 5],"bool"), Tensor([3, 6, 3, 1, 15907287, 5],"float16"), Tensor([3, 6, 3, 1, 15907287, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 1, 2, 39768216],"bool"), Tensor([3, 6, 3, 1, 2, 39768216],"float16"), Tensor([3, 6, 3, 1, 2, 39768216],"float16"), )
paddle.where(Tensor([3, 12676119, 3, 4, 1, 5],"bool"), Tensor([3, 12676119, 3, 4, 1, 5],"float64"), Tensor([3, 12676119, 3, 4, 1, 5],"float64"), )
paddle.where(Tensor([3, 6, 3, 8450746, 1, 5],"bool"), Tensor([3, 6, 3, 8450746, 1, 5],"float64"), Tensor([3, 6, 3, 8450746, 1, 5],"float64"), )
paddle.where(Tensor([3, 6, 3, 4, 2112687, 5],"bool"), Tensor([3, 6, 3, 4, 2112687, 5],"float64"), Tensor([3, 6, 3, 4, 2112687, 5],"float64"), )
paddle.where(Tensor([3, 6, 3, 4, 1, 10563433],"bool"), Tensor([3, 6, 3, 4, 1, 10563433],"float64"), Tensor([3, 6, 3, 4, 1, 10563433],"float64"), )
paddle.where(Tensor([3, 23860930, 3, 4, 1, 5],"bool"), Tensor([3, 23860930, 3, 4, 1, 5],"float16"), Tensor([3, 23860930, 3, 4, 1, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 15907287, 1, 5],"bool"), Tensor([3, 6, 3, 15907287, 1, 5],"float16"), Tensor([3, 6, 3, 15907287, 1, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 4, 3976822, 5],"bool"), Tensor([3, 6, 3, 4, 3976822, 5],"float16"), Tensor([3, 6, 3, 4, 3976822, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 4, 1, 19884108],"bool"), Tensor([3, 6, 3, 4, 1, 19884108],"float16"), Tensor([3, 6, 3, 4, 1, 19884108],"float16"), )
paddle.where(Tensor([3, 23860930, 3, 4, 1, 5],"bool"), Tensor([3, 23860930, 3, 4, 1, 5],"float16"), Tensor([3, 23860930, 3, 4, 1, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 15907287, 1, 5],"bool"), Tensor([3, 6, 3, 15907287, 1, 5],"float16"), Tensor([3, 6, 3, 15907287, 1, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 4, 3976822, 5],"bool"), Tensor([3, 6, 3, 4, 3976822, 5],"float16"), Tensor([3, 6, 3, 4, 3976822, 5],"float16"), )
paddle.where(Tensor([3, 6, 3, 4, 1, 19884108],"bool"), Tensor([3, 6, 3, 4, 1, 19884108],"float16"), Tensor([3, 6, 3, 4, 1, 19884108],"float16"), )
paddle.where(Tensor([3, 31690297, 3, 4, 2, 1],"bool"), Tensor([3, 31690297, 3, 4, 2, 1],"float64"), Tensor([3, 31690297, 3, 4, 2, 1],"float64"), )
paddle.where(Tensor([3, 6, 3, 21126865, 2, 1],"bool"), Tensor([3, 6, 3, 21126865, 2, 1],"float64"), Tensor([3, 6, 3, 21126865, 2, 1],"float64"), )
paddle.where(Tensor([3, 6, 3, 4, 10563433, 1],"bool"), Tensor([3, 6, 3, 4, 10563433, 1],"float64"), Tensor([3, 6, 3, 4, 10563433, 1],"float64"), )
paddle.where(Tensor([3, 6, 3, 4, 2, 5281717],"bool"), Tensor([3, 6, 3, 4, 2, 5281717],"float64"), Tensor([3, 6, 3, 4, 2, 5281717],"float64"), )
paddle.where(Tensor([3, 59652324, 3, 4, 2, 1],"bool"), Tensor([3, 59652324, 3, 4, 2, 1],"float16"), Tensor([3, 59652324, 3, 4, 2, 1],"float16"), )
paddle.where(Tensor([3, 6, 3, 39768216, 2, 1],"bool"), Tensor([3, 6, 3, 39768216, 2, 1],"float16"), Tensor([3, 6, 3, 39768216, 2, 1],"float16"), )
paddle.where(Tensor([3, 6, 3, 4, 19884108, 1],"bool"), Tensor([3, 6, 3, 4, 19884108, 1],"float16"), Tensor([3, 6, 3, 4, 19884108, 1],"float16"), )
paddle.where(Tensor([3, 6, 3, 4, 2, 9942054],"bool"), Tensor([3, 6, 3, 4, 2, 9942054],"float16"), Tensor([3, 6, 3, 4, 2, 9942054],"float16"), )
paddle.where(Tensor([3, 59652324, 3, 4, 2, 1],"bool"), Tensor([3, 59652324, 3, 4, 2, 1],"float16"), Tensor([3, 59652324, 3, 4, 2, 1],"float16"), )
paddle.where(Tensor([3, 6, 3, 39768216, 2, 1],"bool"), Tensor([3, 6, 3, 39768216, 2, 1],"float16"), Tensor([3, 6, 3, 39768216, 2, 1],"float16"), )
paddle.where(Tensor([3, 6, 3, 4, 19884108, 1],"bool"), Tensor([3, 6, 3, 4, 19884108, 1],"float16"), Tensor([3, 6, 3, 4, 19884108, 1],"float16"), )
paddle.where(Tensor([3, 6, 3, 4, 2, 9942054],"bool"), Tensor([3, 6, 3, 4, 2, 9942054],"float16"), Tensor([3, 6, 3, 4, 2, 9942054],"float16"), )
paddle.where(Tensor([300, 7605672],"bool"), Tensor([7605672],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([300, 2281701379],"bool"), Tensor([2281701379],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([19014179, 120],"bool"), Tensor([120],"float32"), Tensor([19014179, 120],"float32"), )
paddle.where(Tensor([300, 7605672],"bool"), Tensor([7605672],"float32"), Tensor([300, 7605672],"float32"), )
paddle.where(Tensor([300, 2281701379],"bool"), Tensor([2281701379],"float32"), Tensor([300, 2281701379],"float32"), )
paddle.where(Tensor([19014179, 120],"bool"), Tensor([120],"float32"), Tensor([19014179, 120],"float32"), )
paddle.where(Tensor([300, 7605672],"bool"), Tensor([7605672],"float32"), Tensor([300, 7605672],"float32"), )
paddle.where(Tensor([253522376, 3, 3],"bool"), Tensor([253522376, 3, 3],"float64"), Tensor([1],"float64"), )
paddle.where(Tensor([477218589, 3, 3],"bool"), Tensor([477218589, 3, 3],"float16"), Tensor([1],"float16"), )
paddle.where(Tensor([2281701379],"bool"), Tensor([300, 2281701379],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([7605672],"bool"), Tensor([300, 7605672],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([1760573, 8, 9, 18],"bool"), Tensor([1760573, 8, 9, 18],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([6, 2347430, 9, 18],"bool"), Tensor([6, 2347430, 9, 18],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([6, 8, 2640859, 18],"bool"), Tensor([6, 8, 2640859, 18],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([6, 8, 9, 5281717],"bool"), Tensor([6, 8, 9, 5281717],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([1760573, 8, 9, 18],"bool"), Tensor([1760573, 8, 9, 18],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([6, 2347430, 9, 18],"bool"), Tensor([6, 2347430, 9, 18],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([6, 8, 2640859, 18],"bool"), Tensor([6, 8, 2640859, 18],"float32"), Tensor([1],"float32"), )
paddle.where(Tensor([6, 8, 9, 5281717],"bool"), Tensor([6, 8, 9, 5281717],"float32"), Tensor([1],"float32"), )
paddle.where(condition=Tensor([2535224, 1, 30, 30],"bool"), x=Tensor([1],"float32"), y=Tensor([2535224, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([416, 6095, 30, 30],"bool"), x=Tensor([6095],"float32"), y=Tensor([416, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([416, 2281701379, 30, 30],"bool"), x=Tensor([2281701379],"float32"), y=Tensor([416, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([633806, 1, 30, 30],"bool"), x=Tensor([1],"float32"), y=Tensor([633806, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([2535224, 1, 30, 30],"bool"), x=Tensor([1],"float32"), y=Tensor([2535224, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([512, 4952, 30, 30],"bool"), x=Tensor([4952],"float32"), y=Tensor([512, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([512, 2281701379, 30, 30],"bool"), x=Tensor([2281701379],"float32"), y=Tensor([512, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([633806, 1, 30, 30],"bool"), x=Tensor([1],"float32"), y=Tensor([633806, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([2535224, 1, 30, 30],"bool"), x=Tensor([1],"float32"), y=Tensor([2535224, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([52, 48755, 30, 30],"bool"), x=Tensor([48755],"float32"), y=Tensor([52, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([52, 2281701379, 30, 30],"bool"), x=Tensor([2281701379],"float32"), y=Tensor([52, 4, 30, 30],"float32"), )
paddle.where(condition=Tensor([633806, 1, 30, 30],"bool"), x=Tensor([1],"float32"), y=Tensor([633806, 4, 30, 30],"float32"), )
